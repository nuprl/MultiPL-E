name: HumanEval_21_rescale_to_unit
language: jl
results:
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n = minimum(numbers)\n    max_n = maximum(numbers)\n    return (numbers\
    \ .- min_n) ./ (max_n - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minvalue = minimum(numbers)\n    range = maximum(numbers) - minvalue\n\
    \    return (numbers .- minvalue) ./ range\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = findmin(numbers)[1]\n    max = findmax(numbers)[1]\n    range =\
    \ max - min\n    return [ (x - min) / range for x in numbers ]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n = minimum(numbers)\n    max_n = maximum(numbers)\n    length_n =\
    \ max_n - min_n\n    return [(number - min_n) / length_n for number in numbers]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    transformed_numbers\
    \ = []\n    for num in numbers\n        transformed_numbers = vcat(transformed_numbers,\
    \ (num - min_num) / (max_num - min_num))\n    end\n    return transformed_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # at least two elements\n    @assert length(numbers) > 1\n    min_number\
    \ = minimum(numbers)\n    max_number = maximum(numbers)\n    return (numbers .-\
    \ min_number) ./ (max_number - min_number)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers - min_value) / (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Validate input\n    if length(numbers) < 2\n        error(\"input vector\
    \ must contain at least two elements\")\n    end\n    \n    # Get min and max\n\
    \    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    \n  \
    \  # Compute rescaled vector\n    rescaled_numbers = [(number - min_value) / (max_value\
    \ - min_value) for number in numbers]\n    \n    return rescaled_numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    lo = minimum(numbers)\n    hi = maximum(numbers)\n    if hi == lo \n \
    \       return fill(0.5, length(numbers))\n    end\n    (numbers .- lo) ./ (hi\
    \ - lo)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    if maximum\
    \ == minimum\n        raise ArgumentError(\"Can't rescale: all numbers are equal\"\
    )\n    end\n    alpha = 1 / (maximum - minimum)\n    beta = - minimum * alpha\n\
    \    numbers .* alpha .+ beta\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpps2wrsqm.jl:10\nin expression starting at /tmp/tmpps2wrsqm.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"rescale_to_unit() expects a list\
    \ of at least two numbers\")\n    end\n    if all(numbers .== numbers[1])\n  \
    \      return numbers ./ numbers[1]\n    end\n    min_value = minimum(numbers)\n\
    \    max_value = maximum(numbers)\n    if min_value == max_value\n        return\
    \ zeros(length(numbers))\n    end\n    return (numbers .- min_value) ./ (max_value\
    \ - min_value)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    largest = maximum(numbers)\n    scale\
    \ = largest - smallest\n    return map(n -> (n - smallest) / scale, numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    cmin, cmax = extrema(numbers)\n    return (numbers .- cmin) ./ (cmax -\
    \ cmin)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\" Rescale the given list of numbers so that the smallest element\
    \ becomes 0 and the largest 1.\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    x_min = minimum(numbers)\n\
    \    x_max = maximum(numbers)\n    x_range = x_max - x_min\n    x_range_inv =\
    \ 1 / x_range\n    return [(x - x_min) * x_range_inv for x in numbers]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled\
    \ = []\n    for number in numbers\n        push!(rescaled, (number - minimum)\
    \ / (maximum - minimum))\n    end\n    return rescaled\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpotjzghnl.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpotjzghnl.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpotjzghnl.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpotjzghnl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpotjzghnl.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpotjzghnl.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpotjzghnl.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpotjzghnl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpotjzghnl.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpotjzghnl.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpotjzghnl.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpotjzghnl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpotjzghnl.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n = minimum(numbers)\n    max_n = maximum(numbers)\n    return [(n\
    \ - min_n) / (max_n - min_n) for n in numbers]\nend;\nproportion_numbers = [1.0,\
    \ 1.0, 1.0, 1.0, 1.0]\nrescale_to_unit(proportion_numbers)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return map(x -> (x - minimum(numbers)) / (maximum(numbers) - minimum(numbers)),\
    \ numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    biggest = maximum(numbers)\n    return\
    \ (numbers - smallest) / (biggest - smallest)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_val = maximum(numbers)\n    min_val = minimum(numbers)\n    numbers_substracted\
    \ = numbers .- min_val\n    rescaled = numbers_substracted ./ (max_val - min_val)\n\
    \    return rescaled\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in 2:length(numbers)\n\
    \        if numbers[i] < minimum\n            minimum = numbers[i]\n        end\n\
    \        if numbers[i] > maximum\n            maximum = numbers[i]\n        end\n\
    \    end\n    \u03B1 = 1 / (maximum - minimum)\n    \u03B2 = 1 - \u03B1 * maximum\n\
    \    transformed = \u03B1 * numbers .+ \u03B2\n    return transformed\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpueqb4s7i.jl:27\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [1.1102230246251565e-16, 1.0] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueqb4s7i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueqb4s7i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpueqb4s7i.jl:28\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [1.0, 1.1102230246251565e-16] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpueqb4s7i.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpueqb4s7i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpueqb4s7i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    length\
    \ = max_num - min_num\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtmua0by.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtmua0by.jl:1\n\
    in expression starting at /tmp/tmpqtmua0by.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minvalue = minimum(numbers)\n    maxvalue = maximum(numbers)\n    # you\
    \ can use the + operator on vectors in Julia\n    # it will sum up the individual\
    \ elements\n    return (numbers .- minvalue) ./ (maxvalue - minvalue)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    if maxval\
    \ == minval\n        return ones(length(numbers))\n    end\n    (numbers .- minval)\
    \ ./ (maxval - minval)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return (numbers\
    \ .- vmin) ./ (vmax - vmin)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    range\
    \ = maximum - minimum\n    return (numbers .- minimum) ./ range\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp64it52o8.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp64it52o8.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp64it52o8.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp64it52o8.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmp64it52o8.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmp64it52o8.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp64it52o8.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp64it52o8.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmp64it52o8.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp64it52o8.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp64it52o8.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp64it52o8.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmp64it52o8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    subtract_and_add\
    \ = map(x -> (x - min) / (max - min), numbers)\n    return subtract_and_add\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max = maximum(numbers)\n    min = minimum(numbers)\n    numbers .- min\
    \ / (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90zdwbpx.jl:16\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [1.9582463465553235, 49.85824634655532]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90zdwbpx.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90zdwbpx.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp90zdwbpx.jl:17\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [99.00399201596807, 48.903992015968065] == [1.0, 0.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90zdwbpx.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90zdwbpx.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp90zdwbpx.jl:18\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.75, 1.75, 2.75, 3.75,\
    \ 4.75] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp90zdwbpx.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90zdwbpx.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp90zdwbpx.jl:19\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [1.75, 0.75, 4.75, 2.75,\
    \ 3.75] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp90zdwbpx.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90zdwbpx.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    assert(length(numbers) >= 2, \"at least two numbers are required\")\n\
    \    local minval, maxval = minimum(numbers), maximum(numbers)\n    # TODO: implement\
    \ a linear transform of the given vector, such that the smallest number will become\
    \ 0 and the largest will become 1\n    return @. (numbers - minval) / (maxval\
    \ - minval)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy4681gro.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ assert not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpy4681gro.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy4681gro.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy4681gro.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpy4681gro.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: assert not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpy4681gro.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy4681gro.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy4681gro.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpy4681gro.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ assert not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpy4681gro.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy4681gro.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy4681gro.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpy4681gro.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: find the largest and smallest number and apply linear transformation\n\
    \    return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xcfmfva.jl:15\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 49.9] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xcfmfva.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xcfmfva.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0xcfmfva.jl:16\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 49.9] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xcfmfva.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xcfmfva.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0xcfmfva.jl:17\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 2.0, 3.0, 4.0, 5.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xcfmfva.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xcfmfva.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp0xcfmfva.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 1.0, 5.0, 3.0, 4.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xcfmfva.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xcfmfva.jl:14\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xcfmfva.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_val = maximum(numbers)\n    min_val = minimum(numbers)\n    return\
    \ (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    out = zeros(n)\n    for i in 1:n\n        out[i]\
    \ = (numbers[i] - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    #the minimum number of numbers\n    min_num = minimum(numbers)\n    #the\
    \ maximum number of numbers\n    max_num = maximum(numbers)\n    #the linear transform\n\
    \    return (numbers .- min_num) ./ (max_num - min_num)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    range = maximum(numbers) - minimum\n \
    \   rescaled = zeros(length(numbers))\n    for (index, value) in enumerate(numbers)\n\
    \        rescaled[index] = (value - minimum) / range\n    end\n    return rescaled\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpus0zxv5w.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpus0zxv5w.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpus0zxv5w.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpus0zxv5w.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpus0zxv5w.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpus0zxv5w.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpus0zxv5w.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpus0zxv5w.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpus0zxv5w.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpus0zxv5w.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpus0zxv5w.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpus0zxv5w.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpus0zxv5w.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    maximum = maximum(numbers)\n    minimum = minimum(numbers)\n    range\
    \ = maximum - minimum\n    numbers = (numbers .- minimum) ./ range\n    return\
    \ numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprf66cu36.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ maximum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmprf66cu36.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprf66cu36.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprf66cu36.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmprf66cu36.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: maximum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmprf66cu36.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprf66cu36.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprf66cu36.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmprf66cu36.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ maximum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmprf66cu36.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprf66cu36.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprf66cu36.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmprf66cu36.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    minimum_maximum_range\
    \ = maximum - minimum\n    if minimum_maximum_range == 0\n        return map(numbers)\
    \ do number\n            return 0.0\n        end\n    end\n    return map(numbers)\
    \ do number\n        return (number - minimum) / minimum_maximum_range\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzoq3ov2q.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpzoq3ov2q.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzoq3ov2q.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzoq3ov2q.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzoq3ov2q.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpzoq3ov2q.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzoq3ov2q.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzoq3ov2q.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzoq3ov2q.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpzoq3ov2q.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzoq3ov2q.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzoq3ov2q.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpzoq3ov2q.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return map(x -> (x - min_number) / (max_number - min_number), numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    # Get max and min values\n    min_val = minimum(numbers)\n    max_val\
    \ = maximum(numbers)\n    \n    # Apply transform\n    return (numbers .- min_val)\
    \ ./ (max_val - min_val)\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m, M = minimum(numbers), maximum(numbers)\n    if m == M\n        return\
    \ fill(1.0, length(numbers))\n    end\n    return (numbers .- m) ./ (M - m)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    range = maximum(numbers) - minimum(numbers)\n    return (numbers .- minimum(numbers))\
    \ / range\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # reorder numbers, assuming that the last element is the largest\n   \
    \ (smallest, largest) = sort(numbers)\n    largest -= smallest # subtract smallest\
    \ from all numbers, now largest is the largest number\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1wme88b9.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1wme88b9.jl:1\n\
    in expression starting at /tmp/tmp1wme88b9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # all this code is basically from https://en.wikipedia.org/wiki/Feature_scaling#Rescaling_(min-max_normalization)\n\
    \    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    if max_val\
    \ - min_val != 0.0\n        return (numbers - min_val) / (max_val - min_val)\n\
    \    else\n        return ones(numbers)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Precompute the min, max, and range\n    min_number = minimum(numbers)\n\
    \    max_number = maximum(numbers)\n    range_number = max_number - min_number\n\
    \    \n    # Apply the linear transform to each number\n    return [(num - min_number)\
    \ / range_number for num in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    \u0394\
    \ = max_value - min_value\n    numbers .- min_value ./ \u0394\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavtt7e9c.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [1.9582463465553235, 49.85824634655532]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpavtt7e9c.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpavtt7e9c.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpavtt7e9c.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [99.00399201596807, 48.903992015968065] == [1.0, 0.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpavtt7e9c.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpavtt7e9c.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpavtt7e9c.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.75, 1.75, 2.75, 3.75,\
    \ 4.75] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpavtt7e9c.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpavtt7e9c.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpavtt7e9c.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [1.75, 0.75, 4.75, 2.75,\
    \ 3.75] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpavtt7e9c.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavtt7e9c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # make a copy of the input, so that we preserve the original\n    result\
    \ = copy(numbers)\n    minimum, maximum = extrema(result)\n    for i in 1:length(result)\n\
    \        result[i] = (result[i] - minimum) / (maximum - minimum)\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"rescale_to_unit requires a vector\
    \ of at least 2 numbers\")\n    end\n    if isequal(numbers, [0.0])\n        return\
    \ [0.0]\n    end\n    if isequal(numbers, [1.0])\n        return [1.0]\n    end\n\
    \    result = zeros(length(numbers))\n    @inbounds for i in 1:length(numbers)\n\
    \        result[i] = (numbers[i] - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # What type of numbers do we expect as input? \n    # What should our\
    \ function return? \n    rescaled = []\n    return rescaled\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcj51v970.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: Float64[] == [0.0, 1.0]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcj51v970.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcj51v970.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcj51v970.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: Float64[] == [1.0, 0.0]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcj51v970.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcj51v970.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcj51v970.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: Float64[] == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcj51v970.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcj51v970.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcj51v970.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: Float64[] == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcj51v970.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcj51v970.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcj51v970.jl:2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcj51v970.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = minimum(numbers), maximum(numbers)\n    return (numbers\
    \ - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp6y1jcbs.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpp6y1jcbs.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp6y1jcbs.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp6y1jcbs.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpp6y1jcbs.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpp6y1jcbs.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp6y1jcbs.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp6y1jcbs.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpp6y1jcbs.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpp6y1jcbs.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp6y1jcbs.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp6y1jcbs.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpp6y1jcbs.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    _min, _max = extrema(numbers)\n    _min, _max = Float64(_min), Float64(_max)\n\
    \    retval = Float64[]\n    for n in numbers\n        retval = [retval; (n -\
    \ _min) / (_max - _min)]\n    end\n    return retval\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # sort the list of numbers into ascending order\n    sorted_values = sort(numbers)\n\
    \    # create a new vector of the same size\n    rescaled_values = Vector{Float64}(undef,\
    \ length(numbers))\n    # rescale the values\n    for i in 1:length(numbers)\n\
    \        rescaled_values[i] = (sorted_values[i] - sorted_values[1]) / (sorted_values[end]\
    \ - sorted_values[1])\n    end\n    return rescaled_values\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxmj0wl9.jl:23\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxmj0wl9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxmj0wl9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsxmj0wl9.jl:25\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxmj0wl9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxmj0wl9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsxmj0wl9.jl:26\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5,\
    \ 0.75, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxmj0wl9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxmj0wl9.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxmj0wl9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = extrema(numbers)\n    (numbers .- minimum) ./ (maximum\
    \ - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return map(numbers) do x\n        (x\
    \ - min) / (max - min)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # we get the minimum and maximum values\n    # note that if we had `using\
    \ Statistics` this would be `minimum(numbers)` and `maximum(numbers)`\n    min\
    \ = numbers[1]\n    max = numbers[1]\n    for number in numbers\n        if number\
    \ < min\n            min = number\n        end\n        if number > max\n    \
    \        max = number\n        end\n    end\n    # here we are converting the\
    \ numbers\n    # * by taking (number - min) we get the distance from the lower\
    \ bound\n    # * by dividing that by (max - min) we get a fraction of the difference\n\
    \    # * by multiplying that by 1 we get a fraction of the difference between\
    \ 0 and 1\n    # * by adding 0 we shift the values to be between 0 and 1\n   \
    \ # * by rounding we get back to integers\n    return [round((number - min) /\
    \ (max - min) * 1 + 0) for number in numbers]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzijxe83g.jl:34\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 0.0,\
    \ 0.0, 1.0, 1.0] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzijxe83g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzijxe83g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzijxe83g.jl:35\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.0, 1.0, 0.0, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzijxe83g.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzijxe83g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpzijxe83g.jl:36\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.0, 1.0, 0.0,\
    \ 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzijxe83g.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzijxe83g.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzijxe83g.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # make a copy of the list\n    result = copy(numbers)\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbk8hwql.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbk8hwql.jl:1\n\
    in expression starting at /tmp/tmpmbk8hwql.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpufkwqxbj.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpufkwqxbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpufkwqxbj.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpufkwqxbj.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpufkwqxbj.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpufkwqxbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpufkwqxbj.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpufkwqxbj.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpufkwqxbj.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpufkwqxbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpufkwqxbj.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpufkwqxbj.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpufkwqxbj.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n = minimum(numbers)\n    max_n = maximum(numbers)\n    return (numbers\
    \ .- min_n) ./ (max_n - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    result = zeros(n)\n    lo = minimum(numbers)\n\
    \    hi = maximum(numbers)\n    for i in 1:n\n        result[i] = (numbers[i]\
    \ - lo) / (hi - lo)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ step = 1.0 / (max_number - min_number)\n    return (numbers .- min_number) .*\
    \ step\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    assert\
    \ maximum > minimum, \"Empty list\"\n    return (numbers .- minimum) ./ (maximum\
    \ - minimum)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpyl47wl7t.jl:6 expected\
    \ \"end\", got \"maximum\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyl47wl7t.jl:9\n\
    in expression starting at /tmp/tmpyl47wl7t.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # there is a formula that does this, but for the sake of simplicity and\
    \ readability\n    # of the code, we will implement it from scratch\n    if length(numbers)\
    \ < 2\n        error(\"Number of elements in input vector should be at least 2\"\
    )\n    end\n    # find smallest number in the vector\n    minimum_value = minimum(numbers)\n\
    \    # find largest number in the vector\n    maximum_value = maximum(numbers)\n\
    \    # calculate the difference between min and max\n    diff = maximum_value\
    \ - minimum_value\n    # create an empty vector that will store rescaled values\n\
    \    rescaled_values = Vector{Float64}(undef, length(numbers))\n    # iterate\
    \ over each number in the input vector\n    for (index, number) in enumerate(numbers)\n\
    \        # calculate rescaled value for the current number\n        # and assign\
    \ it to the corresponding position in the rescaled_values vector\n        rescaled_values[index]\
    \ = (number - minimum_value) / diff\n    end\n    # return rescaled values\n \
    \   return rescaled_values\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # find max and min\n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n\
    \    # find the difference between max and min\n    max_min_diff = max_num - min_num\n\
    \    # apply the linear transform\n    return [ (num - min_num) / max_min_diff\
    \ for num in numbers ]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp41al_afk.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp41al_afk.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp41al_afk.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41al_afk.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmp41al_afk.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmp41al_afk.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp41al_afk.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41al_afk.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmp41al_afk.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp41al_afk.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp41al_afk.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41al_afk.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmp41al_afk.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_num = maximum(numbers)\n    min_num = minimum(numbers)\n    return\
    \ (numbers .- min_num) ./ (max_num - min_num)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    range = maximum(numbers) - minimum(numbers)\n    minimum_value = minimum(numbers)\n\
    \    return [ (x - minimum_value) / range for x in numbers ]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = copy(numbers)\n    range = maximum(numbers) - minimum(numbers)\n\
    \    for i in 1:length(numbers)\n        numbers[i] = (numbers[i] - minimum(numbers))\
    \ / range\n    end\n    return numbers\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpac03rq0w.jl:19\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 1.0417536534446765] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac03rq0w.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac03rq0w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpac03rq0w.jl:20\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [1.0, 0.9760479041916167] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac03rq0w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac03rq0w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpac03rq0w.jl:21\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 0.5, 0.75, 1.0, 1.25]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac03rq0w.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpac03rq0w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpac03rq0w.jl:22\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.25, 0.1875, 1.203125,\
    \ 0.703125, 0.953125] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpac03rq0w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-l"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpac03rq0w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    v_min = minimum(numbers)\n    v_max = maximum(numbers)\n    return [x\
    \ - v_min / (v_max - v_min) for x in numbers]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwr9xpbyj.jl:16\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [1.9582463465553235, 49.85824634655532]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr9xpbyj.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr9xpbyj.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpwr9xpbyj.jl:17\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [99.00399201596807, 48.903992015968065] == [1.0, 0.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwr9xpbyj.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr9xpbyj.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpwr9xpbyj.jl:18\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.75, 1.75, 2.75, 3.75,\
    \ 4.75] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwr9xpbyj.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwr9xpbyj.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpwr9xpbyj.jl:19\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [1.75, 0.75, 4.75, 2.75,\
    \ 3.75] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwr9xpbyj.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwr9xpbyj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    return\
    \ (numbers - min_num)/(max_num - min_num)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"Vector has to be of at least 2\
    \ elements\")\n    end\n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n\
    \    return (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    vmin = minimum(numbers)\n    vmax = maximum(numbers)\n    return (numbers\
    \ .- vmin) ./ (vmax - vmin)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ [(x - minimum) / (maximum - minimum) for x in numbers]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdfsq_j8j.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpdfsq_j8j.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdfsq_j8j.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdfsq_j8j.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpdfsq_j8j.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpdfsq_j8j.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdfsq_j8j.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdfsq_j8j.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpdfsq_j8j.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpdfsq_j8j.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdfsq_j8j.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdfsq_j8j.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpdfsq_j8j.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Take the minimum and maximum, then apply the affine transform\n    minimum\
    \ = minimum(numbers)\n    maximum = maximum(numbers)\n    return [\n        (x\
    \ - minimum) / (maximum - minimum)\n        for x in numbers\n    ]\nend\n \n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiyppsh13.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpiyppsh13.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiyppsh13.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiyppsh13.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiyppsh13.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpiyppsh13.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiyppsh13.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiyppsh13.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiyppsh13.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpiyppsh13.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiyppsh13.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiyppsh13.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpiyppsh13.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ assert max_number != min_number\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp88cboc0a.jl:6 expected\
    \ \"end\", got \"max_number\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88cboc0a.jl:9\n\
    in expression starting at /tmp/tmp88cboc0a.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"Expected at least two elements\"\
    )\n    end\n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    offset = minimum(numbers)\n    scale = 1 / (maximum(numbers) - offset)\n\
    \    return (numbers .- offset) .* scale\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    max_num = maximum(numbers)\n    min_num = minimum(numbers)\n\
    \    scale = 1 / (max_num - min_num)\n    return [scale * (num - min_num) for\
    \ num in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    x_i =\
    \ (numbers .- min_num) ./ (max_num - min_num)\n    return x_i\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Find the range of values the list holds\n    max_value = maximum(numbers)\n\
    \    min_value = minimum(numbers)\n    range = max_value - min_value\n    \n \
    \   # Apply the transform\n    if range != 0\n        numbers = (numbers .- min_value)\
    \ ./ range\n    end\n    \n    return numbers\nend\n    \n    \n\"\"\" Given a\
    \ list of numbers, return a list of indices that would sort the list from lowest\
    \ to highest.\n    >>> find_sort_order([5, 3, 6, 7, 2])\n    [5, 2, 1, 3, 4]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpmn04h6v3.jl:21\nin expression starting at /tmp/tmpmn04h6v3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ if max_number - min_number == 0\n        return fill(0.5, length(numbers))\n\
    \    end\n    numbers .- min_number\n    numbers ./ (max_number - min_number)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2w3982zo.jl:20\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.04175365344467641, 1.0417536534446765]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2w3982zo.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2w3982zo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2w3982zo.jl:21\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [1.996007984031936, 0.996007984031936] == [1.0, 0.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2w3982zo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2w3982zo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2w3982zo.jl:22\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.25, 0.5, 0.75, 1.0, 1.25]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2w3982zo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2w3982zo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2w3982zo.jl:23\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.5, 0.25, 1.25, 0.75,\
    \ 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2w3982zo.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2w3982zo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n = minimum(numbers)\n    max_n = maximum(numbers)\n    return map(x\
    \ -> (x - min_n) / (max_n - min_n), numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = extrema(numbers)\n    return (numbers .- min_n) ./ (max_n\
    \ - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers))/(maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    return\
    \ [(x - minimum) / (maximum - minimum) for x in numbers]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw1nyw4g3.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpw1nyw4g3.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw1nyw4g3.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1nyw4g3.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpw1nyw4g3.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpw1nyw4g3.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw1nyw4g3.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1nyw4g3.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpw1nyw4g3.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpw1nyw4g3.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpw1nyw4g3.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpw1nyw4g3.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpw1nyw4g3.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Get max and min of input\n    maximum = maximum(numbers)\n    minimum\
    \ = minimum(numbers)\n    # Generate empty output\n    output = zeros(length(numbers))\n\
    \    # Apply linear transform to each element of input\n    for i in 1:length(numbers)\n\
    \        output[i] = (numbers[i] - minimum) / (maximum - minimum)\n    end\n \
    \   # Return output\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp536puctf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ maximum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp536puctf.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp536puctf.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp536puctf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp536puctf.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: maximum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmp536puctf.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp536puctf.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp536puctf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp536puctf.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ maximum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp536puctf.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp536puctf.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp536puctf.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp536puctf.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = extrema(numbers)\n    return (numbers .- min_n) ./ (max_n\
    \ - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    range\
    \ = max_value - min_value\n    return (numbers .- min_value) ./ range\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    the_min = minimum(numbers)\n    the_max = maximum(numbers)\n    return\
    \ (numbers .- the_min) ./ (the_max - the_min)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: get min and max of numbers\n    # TODO: apply linear transform\
    \ to each number in numbers, such that the smallest\n    # number becomes 0 and\
    \ the largest number becomes 1\n    # hint: you may want to use min, max, findmin\
    \ and findmax from DataStructures.jl\n    # TODO: use broadcasting to apply the\
    \ transform to each number in numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    denom\
    \ = max_value - min_value\n    return (numbers .- min_value) ./ denom\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    @assert n >= 2 \"Number of values to rescale\
    \ should be 2 or more\"\n    minval = numbers[1]\n    maxval = numbers[1]\n  \
    \  for i in 2:n\n        minval = min(minval, numbers[i])\n        maxval = max(maxval,\
    \ numbers[i])\n    end\n    @assert maxval != minval \"All values are the same,\
    \ cannot rescale\"\n    rn = zeros(n)\n    for i in 1:n\n        rn[i] = (numbers[i]\
    \ - minval) / (maxval - minval)\n    end\n    return rn\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mm = fit!(MinMaxScaler(), numbers)\n    return transform(mm, numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprr_imlbj.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ MinMaxScaler not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmprr_imlbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprr_imlbj.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprr_imlbj.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmprr_imlbj.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: MinMaxScaler not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmprr_imlbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprr_imlbj.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprr_imlbj.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmprr_imlbj.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ MinMaxScaler not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmprr_imlbj.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprr_imlbj.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprr_imlbj.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmprr_imlbj.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    return (numbers .- min) ./ (max - min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    l = length(numbers)\n    A = zeros(l,2)\n    A[:,1] = 1\n    A[:,2] =\
    \ numbers\n    x = A\\[1.0, maximum(numbers)]\n    return 1.0 ./ x[2] .* numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu3uoappf.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64, ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(::IndexLinear,\
    \ ::Matrix{Float64}, ::Int64, ::Base.Slice{Base.OneTo{Int64}}, ::Int64)\\n   \
    \  @ Base ./multidimensional.jl:903\\n   [3] _setindex!\\n     @ ./multidimensional.jl:894\
    \ [inlined]\\n   [4] setindex!\\n     @ ./abstractarray.jl:1315 [inlined]\\n \
    \  [5] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main /tmp/tmpu3uoappf.jl:9\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpu3uoappf.jl:19 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpu3uoappf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpu3uoappf.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64, ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(::IndexLinear,\
    \ ::Matrix{Float64}, ::Int64, ::Base.Slice{Base.OneTo{Int64}}, ::Int64)\\n   \
    \  @ Base ./multidimensional.jl:903\\n   [3] _setindex!\\n     @ ./multidimensional.jl:894\
    \ [inlined]\\n   [4] setindex!\\n     @ ./abstractarray.jl:1315 [inlined]\\n \
    \  [5] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main /tmp/tmpu3uoappf.jl:9\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpu3uoappf.jl:20 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/juli"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    scaled = map(x\
    \ -> (x - min) / (max - min), numbers)\n    return scaled\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # We have to have a min and max value in order to scale\n    min_val =\
    \ minimum(numbers)\n    max_val = maximum(numbers)\n    # scale between 0 and\
    \ 1\n    return (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = extrema(numbers)\n    return (numbers .- min_n) ./ (max_n\
    \ - min_n)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n::Int = length(numbers)\n    if n < 2\n        error(\"Cannot rescale\
    \ list with less than two elements\")\n    end\n    min::Float64 = minimum(numbers)\n\
    \    max::Float64 = maximum(numbers)\n    scale::Float64 = max - min\n    if scale\
    \ == 0.0\n        return ones(n)\n    end\n    return [(x - min) / scale for x\
    \ in numbers]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    smallest = minimum(numbers)\n    delta = maximum(numbers) - smallest\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpafq80y2o.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpafq80y2o.jl:1\n\
    in expression starting at /tmp/tmpafq80y2o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_value = minimum(numbers)\n    max_value = maximum(numbers)\n    return\
    \ (numbers .- min_value) ./ (max_value - min_value)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    local m = minimum(numbers)\n    local M = maximum(numbers)\n    return\
    \ (numbers - m) / (M - m)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    local_max = maximum(numbers)\n    local_min = minimum(numbers)\n    local_range\
    \ = local_max - local_min\n    return (numbers .- local_min) ./ local_range\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # find a - using the minimum\n    a = minimum(numbers)\n    # find b -\
    \ using the maximum\n    b = maximum(numbers)\n    # for each value in the list,\
    \ divide by b and subtract a\n    c = (numbers .- a) ./ (b .- a)\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    output = []\n    #output = [round(Float64(item - min(numbers)) / (max(numbers)\
    \ - min(numbers)), digits=4) for item in numbers]\n    for item in numbers\n \
    \       push!(output, round(Float64(item - min(numbers)) / (max(numbers) - min(numbers)),\
    \ digits=4))\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    a = minimum(numbers)\n    b = maximum(numbers)\n    return (numbers .-\
    \ a) ./ (b .- a)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minval = minimum(numbers)\n    maxval = maximum(numbers)\n    return (numbers\
    \ - minval)/(maxval - minval)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    old_min = minimum(numbers)\n    old_max = maximum(numbers)\n    new_range\
    \ = 1.0 - 0.0\n    return (numbers .- old_min) ./ (old_max - old_min) .* new_range\
    \ .+ 0.0\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sorted_numbers = sort(numbers)\n    minimum, maximum = sorted_numbers[1],\
    \ sorted_numbers[end]\n    range = maximum - minimum\n    numbers_rescaled = (numbers\
    \ .- minimum) ./ range\n    return numbers_rescaled\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (minimum(numbers), maximum(numbers)) = extrema(numbers)\n    return map(x\
    \ -> (x - minimum) / (maximum - minimum), numbers)\nend;\n \n\"\"\" Given two\
    \ vectors of values, return correlation\n    http://nbviewer.ipython.org/github/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/blob/master/Chapter2_MorePyMC/Ch2_MorePyMC_PyMC3.ipynb\n\
    \    >>> corr([1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 1.0, 2.0, 3.0, 5.0])\n    0.8\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmps02_dh8p.jl:11\nin expression starting at /tmp/tmps02_dh8p.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = minimum(numbers)\n    M = maximum(numbers)\n    \u0394 = M - m\n \
    \   return [n/\u0394 for n in numbers]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp41w7nmwj.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.04175365344467641, 1.0417536534446765]\
    \ == [0.0, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp41w7nmwj.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp41w7nmwj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp41w7nmwj.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [1.996007984031936, 0.996007984031936] == [1.0, 0.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp41w7nmwj.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp41w7nmwj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp41w7nmwj.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.25, 0.5, 0.75, 1.0, 1.25]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp41w7nmwj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp41w7nmwj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp41w7nmwj.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.5, 0.25, 1.25, 0.75,\
    \ 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp41w7nmwj.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41w7nmwj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = findmin(numbers)[1]\n    maximum = findmax(numbers)[1]\n   \
    \ return (numbers .- minimum) ./ (maximum - minimum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    a = numbers[1]\n    b = numbers[end]\n    return (numbers .- a) ./ (b\
    \ - a)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t\
    @test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqoy3h0x9.jl:17\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [-0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoy3h0x9.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoy3h0x9.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpqoy3h0x9.jl:19\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, -0.5, 1.5, 0.5, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoy3h0x9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoy3h0x9.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpqoy3h0x9.jl:20\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, -0.5, 1.5,\
    \ 0.5, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoy3h0x9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoy3h0x9.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqoy3h0x9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\"\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    maximum = max(numbers)\n    minimum =\
    \ min(numbers)\n    return (numbers .- minimum) ./ (maximum - minimum)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx_t_ooam.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    assert(length(numbers) >= 2, \"rescale_to_unit() is only defined for at\
    \ least two elements\")\n    return (numbers .- minimum(numbers)) ./ (maximum(numbers)\
    \ - minimum(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgbeu8k5m.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ assert not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpgbeu8k5m.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbeu8k5m.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbeu8k5m.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpgbeu8k5m.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: assert not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpgbeu8k5m.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbeu8k5m.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbeu8k5m.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpgbeu8k5m.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ assert not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpgbeu8k5m.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbeu8k5m.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbeu8k5m.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpgbeu8k5m.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum, maximum = minimum(numbers), maximum(numbers)\n    return (numbers\
    \ .- minimum) ./ (maximum - minimum)\nend;\n \n \n\"\"\" Given the values of a\
    \ function at a set of points, create a \"tally\" histogram of the function at\
    \ those points\n    >>> histogram([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8,\
    \ 0.9, 1.0])\n    [0.0, 0.2, 0.2, 0.2, 0.2, 0.2]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpngawgoqm.jl:12\nin expression starting at /tmp/tmpngawgoqm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = minimum(numbers), maximum(numbers)\n    return (numbers .-\
    \ min) ./ (max - min)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = numbers .- minimum(numbers)\n    d = maximum(numbers) - minimum(numbers)\n\
    \    m ./ d\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    range = maximum(numbers) - minimum\n \
    \   return (numbers .- minimum) ./ range\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpft2mj77k.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpft2mj77k.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpft2mj77k.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpft2mj77k.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpft2mj77k.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpft2mj77k.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpft2mj77k.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpft2mj77k.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpft2mj77k.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpft2mj77k.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpft2mj77k.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpft2mj77k.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpft2mj77k.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = findmin(numbers)[1]\n    max = findmax(numbers)[1]\n    return (numbers\
    \ .- min) ./ (max .- min)\nend;\n \n# Find points of intersection between two\
    \ curves\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    x_min = minimum(numbers)\n    x_max = maximum(numbers)\n    return (numbers\
    \ .- x_min) ./ (x_max - x_min)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ (numbers .- min_val) ./ (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers_min = minimum(numbers)\n    numbers_max = maximum(numbers)\n \
    \   numbers_diff = numbers_max - numbers_min\n    rescaled_numbers = (numbers\
    \ .- numbers_min) ./ numbers_diff\n    return rescaled_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    scale\
    \ = maximum - minimum\n    # equivalent to:\n    # return numbers .- minimum ./\
    \ scale\n    return (numbers .- minimum) ./ scale\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7y7ds9ue.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp7y7ds9ue.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7y7ds9ue.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7y7ds9ue.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7y7ds9ue.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmp7y7ds9ue.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7y7ds9ue.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7y7ds9ue.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7y7ds9ue.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp7y7ds9ue.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7y7ds9ue.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7y7ds9ue.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7y7ds9ue.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mn = minimum(numbers)\n    mx = maximum(numbers)\n    return (numbers\
    \ .- mn) ./ (mx - mn)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Compute max and min\n    max_value = maximum(numbers)\n    min_value\
    \ = minimum(numbers)\n    # Compute number of elements\n    n = length(numbers)\n\
    \    # Compute delta for rescaling\n    delta = (max_value - min_value) / (n -\
    \ 1)\n    # Build rescaled vector\n    rescaled_numbers = [(number - min_value)\
    \ / delta for number in numbers]\n    return rescaled_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuaqhcg0f.jl:25\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.0, 1.0,\
    \ 2.0, 3.0, 4.0] == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuaqhcg0f.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuaqhcg0f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuaqhcg0f.jl:26\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [1.0, 0.0, 4.0, 2.0, 3.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuaqhcg0f.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuaqhcg0f.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuaqhcg0f.jl:27\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [1.0, 0.0, 4.0, 2.0,\
    \ 3.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuaqhcg0f.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuaqhcg0f.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuaqhcg0f.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # This function takes a list of numbers, and returns a list of the same\
    \ numbers rescaled to 0-1\n    # There's a built-in function for this, but this\
    \ is more fun :)\n    # Step 1: return the same vector if there are less than\
    \ 2 elements.\n    if length(numbers) < 2\n        return numbers\n    end\n \
    \   # Step 2: Find min and max values\n    min_val = minimum(numbers)\n    max_val\
    \ = maximum(numbers)\n    # Step 3: Calculate the scale factor\n    scale_factor\
    \ = 1.0 / (max_val - min_val)\n    # Step 4: Calculate the new vector of values\
    \ (NOTE: This is not an efficient way to do this!\n    # The next chapter will\
    \ cover better vectorization techniques.)\n    new_vals = scale_factor .* (numbers\
    \ .- min_val)\n    # Step 5: Return the new vector\n    return new_vals\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    if minimum\
    \ == maximum\n        return ones(Float64, length(numbers))\n    end\n    return\
    \ (numbers - minimum) / (maximum - minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjkf5wl2t.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpjkf5wl2t.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjkf5wl2t.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjkf5wl2t.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpjkf5wl2t.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmpjkf5wl2t.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjkf5wl2t.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjkf5wl2t.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpjkf5wl2t.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpjkf5wl2t.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjkf5wl2t.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjkf5wl2t.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpjkf5wl2t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\"\n    Apply linear transform to a vector of numbers such that the\
    \ smallest number will become 0 and the largest will become 1\n    Parameters\n\
    \    ----------\n    numbers: Vector{Float64}\n        Vector of numbers (at least\
    \ 2 elements)\n    Returns\n    -------\n    norm_numbers: Vector{Float64}\n \
    \       Vector of numbers (at least 2 elements) with linear transform applied\n\
    \    \"\"\"\n    minimum = minimum(numbers)\n    range = maximum(numbers) - minimum\n\
    \    norm_numbers = (numbers .- minimum) ./ range\n    return norm_numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp08ghj3ks.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp08ghj3ks.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp08ghj3ks.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp08ghj3ks.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp08ghj3ks.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  UndefVarError: minimum not defined\\\
    n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\n     @ Main\
    \ /tmp/tmp08ghj3ks.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp08ghj3ks.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp08ghj3ks.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp08ghj3ks.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp08ghj3ks.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp08ghj3ks.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp08ghj3ks.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp08ghj3ks.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    return (numbers\
    \ .- min) ./ (max - min)\nend;\n\"\"\" Given a list of numbers, calculate the\
    \ mean of all numbers\n    >>> mean([1.0, 2.0, 3.0, 4.0, 5.0])\n    3.0\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpvjjom145.jl:11\nin expression starting at /tmp/tmpvjjom145.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers = float.(numbers)\n    min_val = minimum(numbers)\n    max_val\
    \ = maximum(numbers)\n    return (numbers - min_val) / (max_val - min_val)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minVal = minimum(numbers)\n    maxVal = maximum(numbers)\n    rangeVal\
    \ = maxVal - minVal\n    outputVals = (numbers .- minVal) ./ rangeVal\n    return\
    \ outputVals\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    xmin = minimum(numbers)\n    xmax = maximum(numbers)\n    return (numbers\
    \ .- xmin)./(xmax - xmin)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = minimum(numbers), maximum(numbers)\n    vec_scale = 1.0\
    \ / (max_n - min_n)\n    vec_translate = min_n\n    return (numbers .- vec_translate)\
    \ .* vec_scale\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Find the minimum and maximum values\n    min, max = extrema(numbers)\n\
    \    # Formula to rescale values\n    return (numbers .- min) ./ (max - min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    max_val = maximum(numbers)\n    min_val = minimum(numbers)\n    if max_val\
    \ == min_val\n        return ones(Float64, length(numbers))\n    end\n    return\
    \ (numbers - min_val) / (max_val - min_val)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa598y95i.jl:19\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"at least two elements are needed\
    \ for rescaling\")\n    end\n    mx = maximum(numbers)\n    mn = minimum(numbers)\n\
    \    if mx == mn\n        return fill(0.5, length(numbers))\n    end\n    return\
    \ (numbers - mn) / (mx - mn)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2 \n        error(\"list must have at least two elements\"\
    )\n    end\n    sort!(numbers)\n    max_value = numbers[end]\n    min_value =\
    \ numbers[1]\n    rescaled_numbers = zeros(length(numbers))\n    for i in 1:length(numbers)\n\
    \        rescaled_numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n\
    \    end\n    return rescaled_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2jfwvoj2.jl:25\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jfwvoj2.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jfwvoj2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2jfwvoj2.jl:27\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5, 0.75, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jfwvoj2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jfwvoj2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2jfwvoj2.jl:28\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, 0.25, 0.5,\
    \ 0.75, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jfwvoj2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jfwvoj2.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jfwvoj2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_n, max_n = extrema(numbers)\n    numbers = (numbers .- min_n) ./ (max_n\
    \ - min_n)\n    return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m, M = minimum(numbers), maximum(numbers)\n    return [(n - m) / (M -\
    \ m) for n in numbers]\nend;\n \nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    A, B = extrema(numbers)\n    return map(x -> (x - A) / (B - A), numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # see https://stackoverflow.com/questions/31692338/how-to-rescale-a-vector-of-numbers-to-range-1-1-in-julia\n\
    \    return numbers ./ maximum(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t\
    @test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6krlc0i4.jl:15\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.04008016032064128, 1.0] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6krlc0i4.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6krlc0i4.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp6krlc0i4.jl:16\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [1.0, 0.499] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6krlc0i4.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6krlc0i4.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp6krlc0i4.jl:17\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [0.2, 0.4, 0.6, 0.8, 1.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6krlc0i4.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6krlc0i4.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp6krlc0i4.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.4, 0.2, 1.0, 0.6, 0.8]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6krlc0i4.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6krlc0i4."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6krlc0i4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \n    min, max = extrema(numbers)\n    res = (numbers .- min) ./ (max\
    \ - min)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    #TODO: Write this function\n    #TODO: If a number is not in the range\
    \ [min, max], then it should be clamped to\n    #      either 0 or 1, depending\
    \ on whether it's smaller or larger than the range\n    return numbers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3q31hvmu.jl:17\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 49.9] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q31hvmu.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q31hvmu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3q31hvmu.jl:18\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 49.9] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q31hvmu.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q31hvmu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3q31hvmu.jl:19\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 2.0, 3.0, 4.0, 5.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q31hvmu.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q31hvmu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3q31hvmu.jl:20\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 1.0, 5.0, 3.0, 4.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3q31hvmu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3q31hvmu.jl:16\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3q31hvmu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # STORE INITIAL MIN/MAX VALUES\n    init_min = findmin(numbers)[1]\n \
    \   init_max = findmax(numbers)[1]\n    \n    # rescale to range [0,1]\n    min_val\
    \ = 0.0\n    max_val = 1.0\n    inc = (max_val - min_val) / (init_max - init_min)\n\
    \    for index in 1:length(numbers)\n        numbers[index] = (numbers[index]\
    \ - init_min) * inc\n    end\n    \n    return numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    t_min, t_max = extrema(numbers)\n    range = t_max - t_min\n    new_vector\
    \ = zeros(length(numbers))\n    for i in 1:length(numbers)\n        new_vector[i]\
    \ = (numbers[i] - t_min) / range\n    end\n    return new_vector\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # first we calculate the minimum and maximum of the list\n    minimum\
    \ = findmin(numbers)[1]\n    maximum = findmax(numbers)[1]\n    # we then apply\
    \ a linear transform\n    return (numbers .- minimum) ./ (maximum - minimum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    (numbers - minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7wtquhcy.jl:14\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  MethodError:\
    \ no method matching -(::Vector{Float64}, ::Float64)\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: array .- scalar\\n  Closest candidates are:\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp7wtquhcy.jl:7\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7wtquhcy.jl:14 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7wtquhcy.jl:13\\ntest set:\
    \ Error During Test at /tmp/tmp7wtquhcy.jl:15\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\\n  Closest candidates are:\\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp7wtquhcy.jl:7\\n   [2"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    m = minimum(numbers)\n    M = maximum(numbers)\n    return (numbers -\
    \ m) / (M - m)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0b6r_w7d.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  MethodError:\
    \ no method matching -(::Vector{Float64}, ::Float64)\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: array .- scalar\\n  Closest candidates are:\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp0b6r_w7d.jl:9\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0b6r_w7d.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0b6r_w7d.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmp0b6r_w7d.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\\n  Closest candidates are:\\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp0b6r_w7d.jl:9\\n   [2"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    sorted_numbers = sort(numbers)\n    (sorted_numbers - sorted_numbers[1])\
    \ / (sorted_numbers[end] - sorted_numbers[1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe2938gj4.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  MethodError:\
    \ no method matching -(::Vector{Float64}, ::Float64)\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: array .- scalar\\n  Closest candidates are:\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpe2938gj4.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe2938gj4.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe2938gj4.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmpe2938gj4.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\\n  Closest candidates are:\\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpe2938gj4.jl:8\\n   [2"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mi = findmin(numbers)[1]\n    ma = findmax(numbers)[1]\n    return (numbers\
    \ .- mi) ./ (ma - mi)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    if length(numbers) < 2\n        error(\"numbers must have at least two\
    \ elements\")\n    end\n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n\
    \    new_numbers = numbers .- min_number\n    new_numbers ./= max_number - min_number\n\
    \    return new_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min = minimum(numbers)\n    max = maximum(numbers)\n    diff = max - min\n\
    \    return (numbers .- min) ./ diff\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ lin_transform = (value::Float64) -> (value - min_number) / (max_number - min_number)\n\
    \    numbers .= lin_transform.(numbers)\n    return numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    return\
    \ ((numbers .- min_val) ./ (max_val - min_val))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) ./ (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    h = numbers[end] - numbers[1]\n    (numbers - numbers[1]) / h\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5ggwtpsi.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  MethodError:\
    \ no method matching -(::Vector{Float64}, ::Float64)\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: array .- scalar\\n  Closest candidates are:\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp5ggwtpsi.jl:8\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5ggwtpsi.jl:15 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5ggwtpsi.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmp5ggwtpsi.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\\n  Closest candidates are:\\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmp5ggwtpsi.jl:8\\n   [2"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: implement\n    m = minimum(numbers)\n    M = maximum(numbers)\n\
    \    return (numbers - m) / (M - m)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpun91ihwv.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\\n  MethodError:\
    \ no method matching -(::Vector{Float64}, ::Float64)\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: array .- scalar\\n  Closest candidates are:\\\
    n    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpun91ihwv.jl:10\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpun91ihwv.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpun91ihwv.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpun91ihwv.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\\n  Closest candidates are:\\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\\\
    n    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\\\
    n    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\\\
    n    ...\\n  Stacktrace:\\n   [1] rescale_to_unit(numbers::Vector{Float64})\\\
    n     @ Main /tmp/tmpun91ihwv.jl:10\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    numbers_min = minimum(numbers)\n    numbers_max = maximum(numbers)\n \
    \   numbers_range = numbers_max - numbers_min\n    rescaled_numbers = (numbers\
    \ .- numbers_min) ./ numbers_range\n    return rescaled_numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # TODO: apply the rescaling here\n    return numbers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplq1k48hp.jl:15\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [2.0, 49.9] == [0.0, 1.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq1k48hp.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq1k48hp.jl:14\ntest set: Test\
    \ Failed at /tmp/tmplq1k48hp.jl:16\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [100.0, 49.9] == [1.0, 0.0]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq1k48hp.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq1k48hp.jl:14\ntest set: Test\
    \ Failed at /tmp/tmplq1k48hp.jl:17\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n   Evaluated: [1.0, 2.0, 3.0, 4.0, 5.0]\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq1k48hp.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq1k48hp.jl:14\ntest set: Test\
    \ Failed at /tmp/tmplq1k48hp.jl:18\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [2.0, 1.0, 5.0, 3.0, 4.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplq1k48hp.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplq1k48hp.jl:14\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplq1k48hp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = extrema(numbers)\n    (numbers .- min) ./ (max - min)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_number = minimum(numbers)\n    max_number = maximum(numbers)\n   \
    \ return (numbers .- min_number) ./ (max_number - min_number)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    diff =\
    \ max_val - min_val\n    return (numbers .- min_val) ./ diff\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    scaled_numbers = (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    \    return scaled_numbers\nend;\n \n# '''\n# main\n# '''\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    return (numbers .- minimum(numbers)) / (maximum(numbers) - minimum(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    difference\
    \ = maximum - minimum\n    return [ (x - minimum) / difference for x in numbers\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq8wilssr.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpq8wilssr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8wilssr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8wilssr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpq8wilssr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpq8wilssr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8wilssr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8wilssr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpq8wilssr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpq8wilssr.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8wilssr.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8wilssr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpq8wilssr.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8wilssr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    n = length(numbers)\n    y_min = minimum(numbers)\n    y_max = maximum(numbers)\n\
    \    return [(i - y_min) / (y_max - y_min) for i in numbers]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # get the boundaries of input data\n    max_number = maximum(numbers)\n\
    \    min_number = minimum(numbers)\n    if max_number == min_number\n        return\
    \ fill(0.5, length(numbers))\n    end\n    # subtract off the minimum, then divide\
    \ by range\n    return (numbers .- min_number) ./ (max_number - min_number)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min, max = findminmax(numbers)\n    range = max - min\n    @assert range\
    \ != 0.0\n    @assert range != Inf\n    @assert range != -Inf\n    return (numbers\
    \ .- min) ./ range\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpowesfetb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: findminmax\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpowesfetb.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowesfetb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowesfetb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpowesfetb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: findminmax not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmpowesfetb.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowesfetb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowesfetb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpowesfetb.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ findminmax not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpowesfetb.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowesfetb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowesfetb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpowesfetb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ findminmax not "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowesfetb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    scaling_factor\
    \ = 1.0 / (maximum - minimum)\n    return (numbers .- minimum) .* scaling_factor\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0p5n3g2l.jl:17\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  UndefVarError: minimum\
    \ not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp0p5n3g2l.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0p5n3g2l.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0p5n3g2l.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0p5n3g2l.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  UndefVarError: minimum not defined\n\
    \  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n     @ Main\
    \ /tmp/tmp0p5n3g2l.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0p5n3g2l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0p5n3g2l.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0p5n3g2l.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n  UndefVarError:\
    \ minimum not defined\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp0p5n3g2l.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0p5n3g2l.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0p5n3g2l.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0p5n3g2l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n  UndefVarError:\
    \ minimum not defined\n  St"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0p5n3g2l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\" Given a vector of numbers, rescale it linearly, such that the minimum\
    \ value becomes 0 and the maxmum becomes 1\n    \"\"\"\n    min_value = minimum(numbers)\n\
    \    max_value = maximum(numbers)\n    min_value == max_value && error(\"Cannot\
    \ rescale vector: min == max\")\n    return (numbers - min_value) / (max_value\
    \ - min_value)\nend\nusing Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\
    \t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9])\
    \ == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0,\
    \ 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25,\
    \ 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwgwl5pyz.jl:19\n  Test threw exception\n\
    \  Expression: candidate([2.0, 49.9]) == [0.0, 1.0]\n  MethodError: no method\
    \ matching -(::Vector{Float64}, ::Float64)\n  For element-wise subtraction, use\
    \ broadcasting with dot syntax: array .- scalar\n  Closest candidates are:\n \
    \   -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpwgwl5pyz.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgwl5pyz.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgwl5pyz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpwgwl5pyz.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100.0, 49.9]) == [1.0, 0.0]\n  MethodError: no method matching -(::Vector{Float64},\
    \ ::Float64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    -(!Matched::Base.TwicePrecision, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:293\n\
    \    -(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1777\n\
    \    ...\n  Stacktrace:\n   [1] rescale_to_unit(numbers::Vector{Float64})\n  \
    \   @ Main /tmp/tmpwgwl5pyz.jl:12\n   [2] macro expansion\n     @ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgwl5pyz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # error checking\n    if length(numbers) < 2\n        error(\"argument\
    \ must be a list of at least two elements\")\n    end\n    \n    # find maximum\
    \ and minimum values in the list\n    max_num = maximum(numbers)\n    min_num\
    \ = minimum(numbers)\n    \n    # return list of numbers transformed by the linear\
    \ transform\n    return (numbers .- min_num) ./ (max_num - min_num)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Calculate minimum and maximum\n    max_number = maximum(numbers)\n \
    \   min_number = minimum(numbers)\n    # Apply linear transform\n    return map(n\
    \ -> (n - min_number) / (max_number - min_number), numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9])\
    \ == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_num = minimum(numbers)\n    max_num = maximum(numbers)\n    return\
    \ (numbers .- min_num) ./ (max_num - min_num)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    min_val = minimum(numbers)\n    max_val = maximum(numbers)\n    range_val\
    \ = max_val - min_val\n    return (numbers .- min_val) ./ range_val\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    mn = minimum(numbers)\n    mx = maximum(numbers)\n    len = mx - mn\n\
    \    numbers = [(x - mn) / len for x in numbers]\n    return numbers\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    \"\"\"\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    n = length(numbers)\n    ordered_numbers\
    \ = sort(numbers)\n    min_number = ordered_numbers[1]\n    max_number = ordered_numbers[n]\n\
    \    slope = 1.0 / (max_number - min_number)\n    intercept = - slope * min_number\n\
    \    return slope .* numbers .+ intercept\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rescale_to_unit;\n\t@test(candidate([2.0, 49.9]) == [0.0, 1.0])\n\
    \t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0, 1.0,\
    \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0, 11.0,\
    \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4wjv6214.jl:24\n  Expression: candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]\n   Evaluated: [0.0, 0.9999999999999999] == [0.0, 1.0]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wjv6214.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wjv6214.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4wjv6214.jl:25\n  Expression: candidate([100.0, 49.9]) ==\
    \ [1.0, 0.0]\n   Evaluated: [0.9999999999999999, 0.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4wjv6214.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4wjv6214.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wjv6214.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    such that the smallest number will become 0 and\
    \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
    \ \n    # Your implementation here.\n    a = numbers[1]\n    b = numbers[end]\n\
    \    m = (b-a)/(1-0)\n    return [((number-a)/m) for number in numbers]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6cofobm.jl:19\n  Expression: candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]\n   Evaluated: [-0.0, 1.0] == [1.0, 0.0]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6cofobm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6cofobm.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpq6cofobm.jl:21\n  Expression: candidate([2.0, 1.0, 5.0, 3.0,\
    \ 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, -0.5, 1.5, 0.5, 1.0]\
    \ == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6cofobm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6cofobm.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpq6cofobm.jl:22\n  Expression: candidate([12.0, 11.0, 15.0,\
    \ 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n   Evaluated: [0.0, -0.5, 1.5,\
    \ 0.5, 1.0] == [0.25, 0.0, 1.0, 0.5, 0.75]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6cofobm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6cofobm.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6cofobm.jl:15\n"
  exit_code: 1
  status: SyntaxError
