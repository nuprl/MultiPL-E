name: HumanEval_109_move_one_ball
language: jl
results:
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    if length(arr) == 1\n        return true\n    end\n    if\
    \ length(arr) == 2\n        if arr[1] > arr[2]\n            return false\n   \
    \     else\n            return true\n        end\n    end\n    for i in 1:length(arr)\n\
    \        if i != length(arr)\n            if arr[i] > arr[i+1]\n             \
    \   return false\n            end\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyngsv575.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyngsv575.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyngsv575.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpyngsv575.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyngsv575.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyngsv575.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyngsv575.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    n = length(arr)\n    for\
    \ i in 1:n-1\n        if arr[i] >= arr[i+1]\n            return false\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpafwa9o9i.jl:42\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafwa9o9i.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafwa9o9i.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpafwa9o9i.jl:43\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpafwa9o9i.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafwa9o9i.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpafwa9o9i.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    if length(arr)==1\n        return true\n    end\n    if length(arr)==2\n\
    \        if arr[1]<=arr[2]\n            return true\n        else\n          \
    \  return false\n        end\n    end\n    for k in 1:length(arr)\n        if\
    \ k==1\n            if arr[k]>arr[k+1]\n                return false\n       \
    \     end\n        elseif k==length(arr)\n            if arr[k]<arr[k-1]\n   \
    \             return false\n            end\n        else\n            if arr[k]<arr[k-1]\
    \ || arr[k]>arr[k+1]\n                return false\n            end\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl6e0onnd.jl:63\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl6e0onnd.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl6e0onnd.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpl6e0onnd.jl:64\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl6e0onnd.jl:64 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl6e0onnd.jl:62\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6e0onnd.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    shift_times=length(arr)\n    for\
    \ time in 0:shift_times\n        if is_sorted(arr)\n            return true\n\
    \        else\n            push!(arr,arr[1])\n            deleteat!(arr,1)\n \
    \       end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbo6hhpkl.jl:44\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_sorted\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpbo6hhpkl.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbo6hhpkl.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbo6hhpkl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpbo6hhpkl.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbo6hhpkl.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbo6hhpkl.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbo6hhpkl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpbo6hhpkl.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbo6hhpkl.jl:30\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbo6hhpkl.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbo6hhpkl.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpbo6hhpkl.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbo6hhpkl.jl:30"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbo6hhpkl.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if size(arr,1)==0\n        return\
    \ true\n    end\n    return sort(arr)==arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps7lbba4e.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps7lbba4e.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7lbba4e.jl:37\ntest set: Test\
    \ Failed at /tmp/tmps7lbba4e.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps7lbba4e.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps7lbba4e.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps7lbba4e.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    num_shift = length(arr)\n    for\
    \ i in 1:num_shift\n        sorted_array = sort(arr)\n        if sorted_array\
    \ == arr\n            return true\n        else\n            last_element = pop!(arr)\n\
    \            unshift!(arr, last_element)\n        end\n    end\n    false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk_9qq7iy.jl:45\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: unshift! not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk_9qq7iy.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_9qq7iy.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_9qq7iy.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpk_9qq7iy.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: unshift! not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk_9qq7iy.jl:35\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_9qq7iy.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_9qq7iy.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpk_9qq7iy.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: unshift! not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk_9qq7iy.jl:35\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_9qq7iy.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_9qq7iy.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpk_9qq7iy.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: unshift! not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk_9qq7iy.jl:35\n\
    \   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_9qq7iy.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    n = length(arr)\n    #print(n)\n\
    \    if n==0\n        return true\n    end\n    if n==1\n        return true\n\
    \    end\n    # This is a O(n^2) solution using 2 loops.\n    # for i in 2:n\n\
    \    #     for j in 1:i-1\n    #         if arr[i]<arr[j]\n    #             arr[i],arr[j]\
    \ = arr[j],arr[i]\n    #         end\n    #     end\n    # end\n    # #println(arr)\n\
    \    # return all(arr[i]<=arr[i+1] for i in 1:n-1)\n    \n    #This is O(n) solution\
    \ using one loop and using the\n    #the property that the smallest number is\
    \ at the beginning.\n    #This is because of the shifting.\n    min_number = arr[1]\n\
    \    for i in 2:n\n        if arr[i]<min_number\n            min_number = arr[i]\n\
    \        end\n    end\n    #println(min_number)\n    return all(arr[i]>=min_number\
    \ for i in 1:n)\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7imlocru.jl:68\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7imlocru.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7imlocru.jl:65\ntest set: Test\
    \ Failed at /tmp/tmp7imlocru.jl:69\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7imlocru.jl:69 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7imlocru.jl:65\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7imlocru.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\n\
    \        return true\n    end\n    if N == 1\n        return true\n    end\n \
    \   if N == 2\n        return true\n    end\n    if N == 3\n        if arr[1]\
    \ <= arr[2] || arr[2] <= arr[3]\n            return true\n        else\n     \
    \       return false\n        end\n    end\n    # We know N >= 4\n    num_distinct\
    \ = 0\n    for i = 1:N\n        if !(arr[i] in arr[1:i-1])\n            num_distinct\
    \ += 1\n        end\n    end\n    if num_distinct == 1\n        return true\n\
    \    end\n    if num_distinct == 2\n        for i = 1:N\n            if i == 1\n\
    \                if arr[i] == arr[N]\n                    return true\n      \
    \          end\n            else\n                if arr[i] == arr[i-1]\n    \
    \                return true\n                end\n            end\n        end\n\
    \        return false\n    end\n    if num_distinct == 3\n        if arr[1] ==\
    \ arr[N] && arr[2] == arr[N-1]\n            return true\n        end\n       \
    \ if arr[1] == arr[N] && arr[3] == arr[N-2]\n            return true\n       \
    \ end\n        if arr[2] == arr[N] && arr[3] == arr[N-1]\n            return true\n\
    \        end\n        return false\n    end\n    if num_distinct == 4\n      \
    \  for i = 1:N\n            if i == 1\n                if arr[i] == arr[N]\n \
    \                   return true\n                end\n            else\n     \
    \           if arr[i] == arr[i-1]\n                    return true\n         \
    \       end\n            end\n        end\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy05nncl7.jl:101\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy05nncl7.jl:93\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy05nncl7.jl:101 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy05nncl7.jl:100\ntest set:\
    \ Error During Test at /tmp/tmpy05nncl7.jl:102\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy05nncl7.jl:93\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy05nncl7.jl:102 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy05nncl7.jl:98\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    len = length(arr)\n    len ==\
    \ 0 && return true\n    len == 1 && return true\n    # find the index of the ball\
    \ which is in the wrong position\n    index = -1\n    for i in 2:len\n       \
    \ if arr[i] < arr[i-1]\n            index = i\n            break\n        end\n\
    \    end\n    index == -1 && return true # the array is already sorted\n    index\
    \ == len && return false # the last element is always in the wrong position\n\
    \    # now check if the element in the wrong position is in the right position\n\
    \    # if yes then the array is sorted\n    if arr[index] == len\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphwjvi8h9.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphwjvi8h9.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjvi8h9.jl:53\ntest set: Test\
    \ Failed at /tmp/tmphwjvi8h9.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphwjvi8h9.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphwjvi8h9.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwjvi8h9.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # function definition\n    # do\
    \ your stuff here\n    # return true or false\nend\n\"\"\"\nYour task is to make\
    \ a function that can take any non-negative integer as a \nargument and return\
    \ it with its digits in descending order. Essentially, \nrearrange the digits\
    \ to create the highest possible number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouevi19w.jl:32\nin expression starting at\
    \ /tmp/tmpouevi19w.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    if length(arr)==0\n    \
    \    return true\n    end\n    \n    if length(arr)==1\n        return true\n\
    \    end\n    \n    i = 1\n    temp = []\n    while (i <= length(arr))\n     \
    \   push!(temp, arr[i])\n        i += 1\n    end\n    \n    sorted(temp) == temp\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo1vt1hu4.jl:51\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: sorted not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpo1vt1hu4.jl:44\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo1vt1hu4.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo1vt1hu4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpo1vt1hu4.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpo1vt1hu4.jl:44\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo1vt1hu4.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo1vt1hu4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpo1vt1hu4.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpo1vt1hu4.jl:44\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo1vt1hu4.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo1vt1hu4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpo1vt1hu4.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpo1vt1hu4.jl:44\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo1vt1hu4.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Sort the array\n    sorted_arr\
    \ = sort(arr)\n    # Find the index of the element at the first position of the\
    \ sorted array\n    min_ele_pos = findfirst(arr, sorted_arr[1])\n    # Check if\
    \ the other elements are in order from the current position\n    return all(arr[i]\
    \ == sorted_arr[i - min_ele_pos + 1] for i in min_ele_pos:length(arr))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_i5a_j2f.jl:40\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp_i5a_j2f.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_i5a_j2f.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_i5a_j2f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_i5a_j2f.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: no method matching findfirst(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp_i5a_j2f.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_i5a_j2f.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_i5a_j2f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_i5a_j2f.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  MethodError: no method matching findfirst(::Vector{In"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_i5a_j2f.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Your Code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp313as3tv.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp313as3tv.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp313as3tv.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp313as3tv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp313as3tv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp313as3tv.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp313as3tv.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp313as3tv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n  sorted = sort(arr)\n  return sorted\
    \ == arr || sorted == reverse(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpodiznhhp.jl:36\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpodiznhhp.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodiznhhp.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpodiznhhp.jl:37\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpodiznhhp.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpodiznhhp.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodiznhhp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # TODO: Implement\n    if length(arr)\
    \ < 2\n        return true\n    end\n    if (sort(arr) == arr)\n        return\
    \ true\n    end\n    false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9fhoq3v8.jl:42\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fhoq3v8.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fhoq3v8.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp9fhoq3v8.jl:43\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9fhoq3v8.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fhoq3v8.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fhoq3v8.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0 \n        return\
    \ true\n    end\n    min_value=minimum(arr)\n    min_index=findall(x->x==min_value,arr)[1]\n\
    \    if min_index == 1\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvfgd2gk_.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfgd2gk_.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfgd2gk_.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpvfgd2gk_.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvfgd2gk_.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfgd2gk_.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfgd2gk_.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n=length(arr)\n    if (n==0)\n\
    \        return true\n    end\n    arr_min=minimum(arr)\n    arr_max=maximum(arr)\n\
    \    if (arr_min==arr_max)\n        return true\n    end\n    arr_ind=findall(x->x==arr_min,arr)\n\
    \    if (n-length(arr_ind)==0)\n        return true\n    end\n    for i in 0:n-1\n\
    \        if (arr[i+1]==arr_min)\n            break\n        end\n    end\n   \
    \ if (i+1==n)\n        return false\n    end\n    if (i==0)\n        return true\n\
    \    end\n    if (arr[i]<arr_min)\n        return false\n    end\n    for j in\
    \ 1:i-1\n        if (arr[j]<arr[j+1])\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp615tk494.jl:67\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: i not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp615tk494.jl:46\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp615tk494.jl:67 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp615tk494.jl:66\ntest set:\
    \ Error During Test at /tmp/tmp615tk494.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp615tk494.jl:46\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp615tk494.jl:68 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp615tk494.jl:66\ntest set:\
    \ Error During Test at /tmp/tmp615tk494.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp615tk494.jl:46\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp615tk494.jl:69 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp615tk494.jl:66\ntest set:\
    \ Error During Test at /tmp/tmp615tk494.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp615tk494.jl:46\n\
    \   [2] macro expansion\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp615tk494.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\n\
    \        return true\n    end\n    mini = findmin(arr)[1]\n    n_mini = count(arr\
    \ .== mini)\n    if n_mini > 1\n        return false\n    end\n    if n_mini ==\
    \ 0\n        return true\n    end\n    ind = findfirst(arr .== mini)\n    for\
    \ i in ind:n\n        if arr[i] > mini\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfuql3v6b.jl:53\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuql3v6b.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuql3v6b.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpfuql3v6b.jl:54\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfuql3v6b.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuql3v6b.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuql3v6b.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr) return true end\n\
    \    num_sorted=0\n    for (j,i) in enumerate(arr)\n        if j>=2 && i<arr[j-1]\n\
    \            num_sorted+=1\n        end\n    end\n    if num_sorted>1 return false\
    \ end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Your code goes here!\n    #\
    \ You can add other functions as well, if required\nend\n@testset \"Test for move_one_ball()\"\
    \ begin\n    @test move_one_ball([3, 4, 5, 1, 2])==true\n    @test move_one_ball([3,\
    \ 5, 4, 1, 2])==false\n    @test move_one_ball([8, 7, 6, 5, 4, 3, 2, 1])==true\n\
    \    @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8])==true\n    @test move_one_ball([4,\
    \ 4, 4, 4, 4, 4, 4, 4])==true\n    @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])==true\n    @test\
    \ move_one_ball([7, 6, 5, 4, 3, 2, 1])==false\n    @test move_one_ball([])==true\n\
    \    @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43\nusing Test\n\n@testset begin\n\ncandidate =\
    \ move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzda8y42j.jl:41\nin expression starting at\
    \ /tmp/tmpzda8y42j.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    sorted=false\n    if length(arr)==0\n\
    \        sorted=true\n    elseif length(arr)==1\n        sorted=true\n    else\n\
    \        for i=1:length(arr)-1\n            if arr[i]>arr[i+1]\n             \
    \   sorted=false\n                break\n            elseif arr[i]<=arr[i+1]\n\
    \                sorted=true\n            end\n        end\n    end\n    return\
    \ sorted\nend\n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpix8uqw6k.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpix8uqw6k.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpix8uqw6k.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpix8uqw6k.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpix8uqw6k.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpix8uqw6k.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpix8uqw6k.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\n\
    \        return true\n    end\n    elif n == 1\n        return true\n    end\n\
    \    else\n        if sort(arr) == arr\n            return true\n        end\n\
    \        if sort(arr, rev=true) == arr\n            return true\n        end\n\
    \        for i in 1:n-1\n            for j in i+1:n\n                if arr[i]>arr[j]\n\
    \                    temp = arr[i]\n                    arr[i] = arr[j]\n    \
    \                arr[j] = temp\n                    if sort(arr) == arr\n    \
    \                    return true\n                    end\n                  \
    \  if sort(arr, rev=true) == arr\n                        return true\n      \
    \              end\n                end\n            end\n        end\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp89ch40mv.jl:27 expected\
    \ \"end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89ch40mv.jl:32\n\
    in expression starting at /tmp/tmp89ch40mv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    return true \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkwl26pr.jl:37\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkwl26pr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkwl26pr.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmkwl26pr.jl:38\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmkwl26pr.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkwl26pr.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkwl26pr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE GOES HERE.\n    return\
    \ true\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcl16v4wl.jl:39\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl16v4wl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl16v4wl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpcl16v4wl.jl:40\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcl16v4wl.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl16v4wl.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl16v4wl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Adding the last element of the\
    \ array to the starting position\n    if(endof(arr)!=0)\n        append!(arr,arr[endof(arr)])\n\
    \        deleteat!(arr,endof(arr))\n        if(is_nondecreasing(arr))\n      \
    \      return true\n        else\n            return false\n        end\n    else\n\
    \        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk9keezn1.jl:46\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: endof not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk9keezn1.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9keezn1.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9keezn1.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpk9keezn1.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: endof not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk9keezn1.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9keezn1.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9keezn1.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpk9keezn1.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: endof not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk9keezn1.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9keezn1.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9keezn1.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpk9keezn1.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: endof not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpk9keezn1.jl:29\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9keezn1.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #new_arr = deepcopy(arr)\n   \
    \ if(length(arr)==0)\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        new_arr = deepcopy(arr)\n        for j in 1:i\n            pushfirst!(new_arr,pop!(new_arr))\n\
    \        end\n        if(is_sorted(new_arr))\n            return true\n      \
    \  end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx07aexm0.jl:48\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_sorted\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpx07aexm0.jl:37\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx07aexm0.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx07aexm0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpx07aexm0.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpx07aexm0.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx07aexm0.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx07aexm0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpx07aexm0.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpx07aexm0.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx07aexm0.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx07aexm0.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpx07aexm0.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpx07aexm0.jl:37"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx07aexm0.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N=length(arr)\n    flag=false\n\
    \    for i=1:N-1\n        if flag\n            break\n        end\n        if\
    \ arr[i]<arr[i+1]\n            flag=true\n        end\n    end\n    if flag\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfskzndtb.jl:51\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfskzndtb.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfskzndtb.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpfskzndtb.jl:52\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfskzndtb.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfskzndtb.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpfskzndtb.jl:53\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfskzndtb.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfskzndtb.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfskzndtb.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\n\
    \        return true\n    end\n    if n == 1\n        return true\n    end\n \
    \   # Find current minimum and maximum\n    curr_min = arr[1]\n    curr_max =\
    \ arr[1]\n    for i in 1:n\n        if arr[i] < curr_min\n            curr_min\
    \ = arr[i]\n        end\n        if arr[i] > curr_max\n            curr_max =\
    \ arr[i]\n        end\n    end\n    if curr_max - curr_min == n - 1\n        return\
    \ true\n    end\n    return false\nend\n#Testing\nprintln(move_one_ball([3, 4,\
    \ 5, 1, 2]))\nprintln(move_one_ball([3, 5, 4, 1, 2]))\nprintln(move_one_ball([1,\
    \ 2, 3, 4, 5]))\nprintln(move_one_ball([5, 4, 3, 2, 1]))\nprintln(move_one_ball([5,\
    \ 5, 5, 5, 5]))\nprintln(move_one_ball([5, 5, 1, 5, 5]))\nprintln(move_one_ball([5,\
    \ 5, 4, 5, 5]))\nprintln(move_one_ball([3, 3, 3, 3, 3]))\nprintln(move_one_ball([3,\
    \ 3, 4, 3, 3]))\nprintln(move_one_ball([4, 4, 4, 4, 4]))\nprintln(move_one_ball([4,\
    \ 4, 3, 4, 4]))\nprintln(move_one_ball([5, 5, 5, 5, 1]))\nprintln(move_one_ball([5,\
    \ 5, 5, 5, 4]))\nprintln(move_one_ball([5, 5, 5, 1, 5]))\nprintln(move_one_ball([5,\
    \ 5, 5, 4, 5]))\nprintln(move_one_ball([5, 5, 1, 5, 5]))\nprintln(move_one_ball([5,\
    \ 5, 4, 5, 5]))\nprintln(move_one_ball([5, 1,\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n\
    true\nfalse\ntrue\nfalse\ntrue\nfalse\n"
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_scupr8.jl:72\nin expression starting at\
    \ /tmp/tmps_scupr8.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0 \n       \
    \ return true\n    end\n    count = 0\n    for i in 2:length(arr)\n        if\
    \ arr[i] < arr[i-1]\n            count += 1\n        end\n    end\n    if count\
    \ == 1 || count == 0\n        return true\n    else\n        return false\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    arr_sorted = sort(arr)\n    if\
    \ arr == arr_sorted\n        return true\n    else\n        return false\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgf13w04j.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgf13w04j.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgf13w04j.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgf13w04j.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgf13w04j.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgf13w04j.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgf13w04j.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0 \n       \
    \ return true\n    end\n    if length(arr) == 1\n        return true\n    end\n\
    \    if length(arr) == 2\n        if arr[1] <= arr[2]\n            return true\n\
    \        else\n            return false\n        end\n    end\n    N = length(arr)\n\
    \    i = 1\n    while i < N && arr[i] < arr[i+1]\n        i = i + 1\n    end\n\
    \    j = i\n    while j < N && arr[j] > arr[j+1]\n        j = j + 1\n    end\n\
    \    if j == N\n        #only all elements of arr[i:N] are greater than arr[1:i-1]\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgegmr0ft.jl:62\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgegmr0ft.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgegmr0ft.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpgegmr0ft.jl:63\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgegmr0ft.jl:63 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgegmr0ft.jl:61\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgegmr0ft.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n   if isempty(arr)\n        return\
    \ true\n    end\n    if length(arr) == 1\n        return true\n    end\n    if\
    \ length(arr) == 2\n        return arr[1] <= arr[2]\n    end\n    if length(arr)\
    \ == 3\n        return arr[1] <= arr[2] <= arr[3]\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] < arr[i+1]\n            if i == 1\n                return true\n\
    \            else\n                return arr[i-1] <= arr[i]\n            end\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsym989t4.jl:58\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsym989t4.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsym989t4.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsym989t4.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    arr_len = length(arr)\n    if(arr_len==0)\n\
    \        return true\n    end\n    #Step 1: Create a list to denote the position\
    \ of minimum element\n    min_pos = Vector{Int64}(undef, arr_len)\n    min_pos[1]\
    \ = 1\n    for i=2:arr_len\n        if(arr[i]<arr[min_pos[i-1]])\n           \
    \ min_pos[i] = i\n        else\n            min_pos[i] = min_pos[i-1]\n      \
    \  end\n    end\n    #Step 2: If the last position in min_pos list is less than\
    \ the length \n    # of arr then return false else return true\n    if(min_pos[arr_len]<arr_len)\n\
    \        return false\n    else\n        return true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84jdmmrp.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp84jdmmrp.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84jdmmrp.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp84jdmmrp.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp84jdmmrp.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp84jdmmrp.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84jdmmrp.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    arr = copy(arr)\n    while !isempty(arr)\
    \ && length(arr) != 1\n        last = pop!(arr)\n        last_index = last - 1\n\
    \        if last_index == 0\n            last_index = length(arr)\n        end\n\
    \        if last_index != last\n            if arr[last_index] == last\n     \
    \           continue\n            else\n                return false\n       \
    \     end\n        end\n    end\n    return true\nend\n\"\"\"Given an array of\
    \ integers arr and an integer 'n'. Your task is to return\n    true if there exists\
    \ an index 'i' such that arr[i] = n, otherwise return false.\n    'arr' will contain\
    \ only positive integers.\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqfvn78g.jl:45\nin expression starting at\
    \ /tmp/tmpsqfvn78g.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    count = 0\n    for i in 1:length(arr)-1\n\
    \        count += arr[i] - arr[i+1]\n    end\n    return count >= 0 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpozfrvs5k.jl:41\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpozfrvs5k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpozfrvs5k.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpozfrvs5k.jl:42\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpozfrvs5k.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpozfrvs5k.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpozfrvs5k.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\n    lenght=length(arr)\n\
    \    if lenght==0\n        return true\n    end\n    minm=minimum(arr)\n    pos=findall(isequal(minm),arr)\n\
    \    if pos[1]==lenght\n        return true\n    end\n    return false\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4rxztp1u.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rxztp1u.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rxztp1u.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp4rxztp1u.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4rxztp1u.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rxztp1u.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4rxztp1u.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n=length(arr)\n    if n==0\n \
    \       return true\n    end\n    i=1\n    while i<n\n        if arr[i]>arr[i+1]\n\
    \            return false\n        end\n        i+=1\n    end\n    return true\n\
    end\n#Test Cases:\n@testset \"move_one_ball()\" begin\n    @test move_one_ball([3,\
    \ 4, 5, 1, 2])==true\n    @test move_one_ball([3, 5, 4, 1, 2])==false\n    @test\
    \ move_one_ball([])==true\n    @test move_one_ball([3,4,1,3,4,1,3,4,1,3,4,1,3,4,1,2])==true\n\
    \    @test move_one_ball([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuah7sv0z.jl:50\nin expression starting at\
    \ /tmp/tmpuah7sv0z.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    pos = findmax(arr)[2]\n    if pos == 1\n        return true\n\
    \    end\n    if sum(arr[pos:end]) == sum(arr[1:pos-1])\n        return true\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdqyou1es.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqyou1es.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqyou1es.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpdqyou1es.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdqyou1es.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqyou1es.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpdqyou1es.jl:47\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqyou1es.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqyou1es.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqyou1es.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if arr==[]\n        return true\n\
    \    end\n    for i=1:length(arr)\n        if arr[1]>arr[i]\n            arr=rotate(arr,\
    \ -i+1)\n        end\n    end\n    for i=1:length(arr)-1\n        if arr[i]>arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_z4w42u7.jl:48\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: rotate not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_z4w42u7.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z4w42u7.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z4w42u7.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp_z4w42u7.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: rotate not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp_z4w42u7.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z4w42u7.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z4w42u7.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp_z4w42u7.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: rotate not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp_z4w42u7.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_z4w42u7.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_z4w42u7.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp_z4w42u7.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: rotate not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp_z4w42u7.jl:33\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z4w42u7.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    n=length(arr)\n    if (n==0)\n\
    \        return true\n    end\n    right_indices=[]\n    min_index=1\n    min_val=arr[1]\n\
    \    for i=1:n\n        if arr[i]<min_val\n            min_val=arr[i]\n      \
    \      min_index=i\n        end\n    end\n    i=min_index\n    while(i<n)\n  \
    \      if arr[i]>arr[i+1]\n            return false\n        end\n        i+=1\n\
    \    end\n    i=min_index-1\n    while(i>0)\n        if arr[i]>arr[i+1]\n    \
    \        return false\n        end\n        i-=1\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqh6vyrl8.jl:63\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh6vyrl8.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh6vyrl8.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpqh6vyrl8.jl:64\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqh6vyrl8.jl:64 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh6vyrl8.jl:62\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh6vyrl8.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    min_indices\
    \ = findall( x->x==minimum(arr), arr)\n    if N in min_indices \n        return\
    \ true\n    elseif (N-1) in min_indices && arr[N] > arr[1]\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfuqckg9v.jl:43\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuqckg9v.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuqckg9v.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfuqckg9v.jl:44\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfuqckg9v.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuqckg9v.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfuqckg9v.jl:47\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfuqckg9v.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuqckg9v.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuqckg9v.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    map = Dict{Int64,Int64}()\n    for i in arr\n        try\n\
    \            map[i] += 1\n        catch e\n            map[i] = 1\n        end\n\
    \    end\n    keys = sort(collect(keys(map)))\n    values = sort(collect(values(map)))\n\
    \    # print(map)\n    # print(keys)\n    # print(values)\n    # print(length(keys))\n\
    \    if length(keys)==1\n        return true\n    end\n    if keys[1] != 1\n \
    \       return false\n    end\n    if values[1] != 1\n        return false\n \
    \   end\n    if length(keys)==2\n        if keys[2] == keys[1]+1\n           \
    \ return true\n        else\n            return false\n        end\n    end\n\
    \    for i in 1:length(keys)-1\n        if keys[i+1] != keys[i]+1\n          \
    \  return false\n        end\n        if values[i+1] > values[i]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp08drdqtp.jl:76\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: keys not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp08drdqtp.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp08drdqtp.jl:76 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp08drdqtp.jl:75\ntest set:\
    \ Error During Test at /tmp/tmp08drdqtp.jl:77\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: keys not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp08drdqtp.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp08drdqtp.jl:77 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp08drdqtp.jl:75\ntest set:\
    \ Error During Test at /tmp/tmp08drdqtp.jl:78\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: keys not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp08drdqtp.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp08drdqtp.jl:78 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp08drdqtp.jl:75\ntest set:\
    \ Error During Test at /tmp/tmp08drdqtp.jl:79\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: keys not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp08drdqtp.jl:39\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08drdqtp.jl:73\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Your Code here:\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7k47jftl.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7k47jftl.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7k47jftl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7k47jftl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp7k47jftl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7k47jftl.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7k47jftl.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7k47jftl.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N=length(arr)\n    i=0\n    while\
    \ i<=N\n        if i!=0 && (arr[i]<arr[i-1]) && ((N-i)<=1)\n            return\
    \ false\n        end\n        if i!=0 && (arr[i]<arr[i-1]) && ((N-i)>1)\n    \
    \        temp=arr[i]\n            arr[i]=arr[i+1]\n            arr[i+1]=temp\n\
    \            i=0\n        end\n        i+=1\n    end\n    return true\nend\n\"\
    \"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n   \
    \ numbers in the array will be randomly ordered. Your task is to determine if\n\
    \    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1wmojnc.jl:44\nin expression starting at\
    \ /tmp/tmpi1wmojnc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #initaite as false and change\
    \ to true if the test passes.\n    res = false\n    for n = 1:length(arr)\n  \
    \      #cycle through arr, using the cycle index to perform one right shift\n\
    \        #of elements.\n        test = [arr[n:end];arr[1:n-1]]\n        #test\
    \ if the elements are all in non-decreasing order\n        test_non_decreasing\
    \ = length(findall(test .<= test[2:end])) == length(test)-1\n        #test if\
    \ the elements are all in non-increasing order\n        test_non_increasing =\
    \ length(findall(test .>= test[2:end])) == length(test)-1\n        #test whether\
    \ one right shift will pass either of the two tests and if so\n        #change\
    \ the value of the boolean res to true\n        if test_non_decreasing || test_non_increasing\n\
    \            res = true\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0h6df6cn.jl:51\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 5 and\
    \ 4\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] move_one_ball(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp0h6df6cn.jl:35\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0h6df6cn.jl:51 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0h6df6cn.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp0h6df6cn.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  DimensionMismatch(\"arrays could not\
    \ be broadcast to a common size; got a dimension with lengths 5 and 4\")\n  Stacktrace:\n\
    \    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] move_one_ball(arr::Vector{Int64})\n      @ Main /tmp/tmp0h6df6cn.jl:35\n\
    \    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0h6df6cn.jl:52 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0h6df6cn.jl:50\ntest set:\
    \ Error During Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h6df6cn.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    if length(arr) == 0\n  \
    \      return true\n    end\n    \n    # find the index of first element that\
    \ does not have a smaller element after it in the array\n    for i in 1:length(arr)\
    \ - 1\n        if arr[i] > arr[i + 1]\n            index_of_first_bad_element\
    \ = i\n            break\n        end\n    end\n    \n    # sort the rest of the\
    \ array after the index_of_first_bad_element\n    if index_of_first_bad_element\
    \ != 0 \n        rest_of_array = sort(arr[index_of_first_bad_element + 1:end])\n\
    \        for i in 1:length(rest_of_array)\n            if arr[index_of_first_bad_element\
    \ + i] != rest_of_array[i]\n                return false\n            end\n  \
    \      end\n    end\n    \n    # if the first bad element is not the last element\
    \ in the array, then we need to check the elements\n    # before the index_of_first_bad_element\
    \ and make sure they are greater than the first bad element\n    if index_of_first_bad_element\
    \ != length(arr)\n        for i in 1:index_of_first_bad_element\n            if\
    \ arr[i] > arr[index_of_first_bad_element + 1]\n                return false\n\
    \            end\n        end\n    end\n    \n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl_nfy10c.jl:68\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: index_of_first_bad_element\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpl_nfy10c.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nfy10c.jl:68 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nfy10c.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpl_nfy10c.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: index_of_first_bad_element\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpl_nfy10c.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nfy10c.jl:69 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nfy10c.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpl_nfy10c.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: index_of_first_bad_element\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpl_nfy10c.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nfy10c.jl:70 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nfy10c.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpl_nfy10c.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: index_of_first_bad_element\
    \ not defined\n  Stacktrace:\n   [1] "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_nfy10c.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    return isequal(sort(arr), arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp10u161mx.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10u161mx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u161mx.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp10u161mx.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp10u161mx.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10u161mx.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10u161mx.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \"\"\"\n    Determines if it is\
    \ possible to get a non-decreasing \n    array by performing the following operation:\n\
    \        You are allowed to perform right shift operation any number of times.\n\
    \    \n    One right shift operation means shifting all elements of the array\
    \ by one\n    position in the right direction. The last element of the array will\
    \ be moved to\n    the starting position in the array i.e. 0th index. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35gyta77.jl:1\nin expression starting at /tmp/tmp35gyta77.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\n\
    \        return true\n    end\n    l,r = 1, N\n    while l < r\n        if arr[l]\
    \ <= arr[l+1]\n            l += 1\n        else\n            break\n        end\n\
    \    end\n    if l == N\n        return true\n    end\n    while l < r\n     \
    \   if arr[r] >= arr[r-1]\n            r -= 1\n        else\n            break\n\
    \        end\n    end\n    if l <= r\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf05m603q.jl:60\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf05m603q.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf05m603q.jl:59\ntest set: Test\
    \ Failed at /tmp/tmpf05m603q.jl:61\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf05m603q.jl:61 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf05m603q.jl:59\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf05m603q.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Todo: Write your code here\n\
    \    \n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpewa63cdc.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpewa63cdc.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewa63cdc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewa63cdc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpewa63cdc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpewa63cdc.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewa63cdc.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewa63cdc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    arr_sorted = sort(arr)\n    arr_new\
    \ = vcat(arr_sorted[end], arr_sorted[1:end-1])\n    if arr_new == arr_sorted\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpufx5bs0j.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpufx5bs0j.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufx5bs0j.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpufx5bs0j.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpufx5bs0j.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpufx5bs0j.jl:40\ntest set: Error\
    \ During Test at /tmp/tmpufx5bs0j.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpufx5bs0j.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpufx5bs0j.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpufx5bs0j.jl:40\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufx5bs0j.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    m=maximum(arr)\n    for i=1:length(arr)\n        if arr[i]==m\n\
    \            if length(arr)-i<=m-1\n                return true\n            else\n\
    \                return false\n            end\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9sqgq5sz.jl:49\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9sqgq5sz.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9sqgq5sz.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp9sqgq5sz.jl:50\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9sqgq5sz.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9sqgq5sz.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9sqgq5sz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n        if isempty(arr)\n        \
    \    return true\n        end\n        if length(arr)==1\n            return true\n\
    \        end\n        dic = Dict()\n        for i in arr\n            get!(dic,i,0)\n\
    \            dic[i] += 1\n        end\n        sorted_arr = sort(arr)\n      \
    \  if sorted_arr == arr\n            return true\n        end\n        n=length(arr)\n\
    \        for i in 1:n\n            if arr[i]!=sorted_arr[i]\n                return\
    \ false\n            end\n        end\n        return true\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkm4ny0my.jl:56\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkm4ny0my.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm4ny0my.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpkm4ny0my.jl:57\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkm4ny0my.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkm4ny0my.jl:55\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm4ny0my.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # your code goes here\n    if\
    \ length(arr)==0 return true end\n    n = length(arr)\n    m = n+1\n    for i\
    \ = 1:n\n        if arr[i]>m \n            return false\n        end\n       \
    \ m = min(m,arr[i])\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37z7wxxf.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp37z7wxxf.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37z7wxxf.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp37z7wxxf.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp37z7wxxf.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp37z7wxxf.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37z7wxxf.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # your code here\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ct7feef.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ct7feef.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ct7feef.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9ct7feef.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ct7feef.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ct7feef.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ct7feef.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    index = findall(arr .== sort(arr))[1]\n    if index == 1\n\
    \        return true\n    else\n        # find the largest number in the subarray[index:-1]\n\
    \        index_max = findall(arr[index:-1] .== maximum(arr[index:-1]))[1]\n  \
    \      # find the position of the largest number in the subarray[index:-1]\n \
    \       # before shifting\n        pos_max = index + index_max - 1\n        pos_sort\
    \ = findall(arr[index:-1] .== sort(arr[index:-1]))[1]\n        # check if the\
    \ largest number is in the correct position\n        if pos_max == pos_sort\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzo77kxd7.jl:54\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzo77kxd7.jl:31\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzo77kxd7.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzo77kxd7.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpzo77kxd7.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzo77kxd7.jl:31\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzo77kxd7.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzo77kxd7.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpzo77kxd7.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzo77kxd7.jl:31\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzo77kxd7.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzo77kxd7.jl:53\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzo77kxd7.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    len = length(arr)\n    if len\
    \ == 0\n        return true\n    end\n    if len == 1\n        return true\n \
    \   end\n    i = len-1\n    while arr[i] > arr[i-1]\n        i -= 1\n        if\
    \ i < 2\n            break\n        end\n    end\n    if i == 1\n        return\
    \ true\n    end\n    last = arr[i-1]\n    j = i+1\n    while arr[j] < last\n \
    \       j += 1\n        if j > len\n            break\n        end\n    end\n\
    \    return (j==len+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8rk4z8qb.jl:62\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8rk4z8qb.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rk4z8qb.jl:59\ntest set: Test\
    \ Failed at /tmp/tmp8rk4z8qb.jl:63\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8rk4z8qb.jl:63 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8rk4z8qb.jl:59\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8rk4z8qb.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Write your code here!!\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeyy6xwqt.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpeyy6xwqt.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyy6xwqt.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyy6xwqt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpeyy6xwqt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpeyy6xwqt.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyy6xwqt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyy6xwqt.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Your code goes here\n    #A =\
    \ copy(arr)\n    #println(typeof(A))\n    #arr_sort = sort(A)\n    #println(arr_sort)\n\
    \    #if arr_sort == arr\n    #    return true\n    #else\n    #    return false\n\
    \    #end\n    \n    #your code goes here\n    if length(arr) == 0\n        return\
    \ true\n    end\n    ball_idx = searchsorted(arr, arr[1])\n    balls_removed =\
    \ copy(arr)\n    deleteat!(balls_removed, ball_idx)\n    new_arr = vcat(balls_removed,\
    \ [arr[1]])\n    return isempty(setdiff(arr, new_arr)) && isempty(setdiff(new_arr,\
    \ arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmperumwbre.jl:56\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmperumwbre.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmperumwbre.jl:53\ntest set: Test\
    \ Failed at /tmp/tmperumwbre.jl:57\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmperumwbre.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmperumwbre.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmperumwbre.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    sorted_array = sort(arr)\n   \
    \ if arr == sorted_array\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkjbhkja.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkjbhkja.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkjbhkja.jl:39\ntest set: Test\
    \ Failed at /tmp/tmplkjbhkja.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplkjbhkja.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkjbhkja.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkjbhkja.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    if length(arr)==1\n        return true\n    end\n    if all(arr[i]<=arr[i+1]\
    \ for i=1:length(arr)-1)\n        return true\n    end\n    if all(arr[i]>=arr[i+1]\
    \ for i=1:length(arr)-1)\n        return true\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkd6ojpv.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkd6ojpv.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkd6ojpv.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpkkd6ojpv.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkkd6ojpv.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkd6ojpv.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkd6ojpv.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\n\
    \        return true\n    end\n    if N == 1\n        return true\n    end\n \
    \   for i = 1:N\n        new_arr = circshift(arr, i-1)\n        for j = 1:N-1\n\
    \            if new_arr[j] > new_arr[j+1]\n                break\n           \
    \ end\n            if j == N-1\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    (length(arr)==0) || (sort(arr)==arr)\
    \ ? return true : return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_ztxnj5.jl:29\nin expression starting at\
    \ /tmp/tmp8_ztxnj5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #write your code here\n    if\
    \ length(arr) == 0 \n        return true\n    end\n    for i = 1:length(arr) -\
    \ 1\n        for j = 1:length(arr) - 1\n            if arr[j] > arr[j + 1]\n \
    \               temp = arr[j]\n                arr[j] = arr[j + 1]\n         \
    \       arr[j + 1] = temp\n            end\n        end\n    end\n    return arr\
    \ == sort(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9j8b_mqk.jl:50\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9j8b_mqk.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9j8b_mqk.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp9j8b_mqk.jl:51\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9j8b_mqk.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9j8b_mqk.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9j8b_mqk.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE GOES HERE\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprut_0k74.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprut_0k74.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprut_0k74.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprut_0k74.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprut_0k74.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprut_0k74.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprut_0k74.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Base case (already sorted)\n\
    \    if arr == sort(arr)\n        return true\n    end\n    # Base case (not possible\
    \ to sort)\n    if arr != sort(arr, rev=true)\n        return false\n    end\n\
    \    # If the ball is at the beginning\n    if arr[1] != maximum(arr)\n      \
    \  return false\n    end\n    # If the ball is at the end\n    if arr[end] !=\
    \ minimum(arr)\n        return false\n    end\n    # Find the ball's position\n\
    \    ball_pos = searchsortedlast(sort(arr), arr[1])\n    # Call the function on\
    \ the array without the ball\n    return move_one_ball(arr[1:ball_pos-1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk0duwxwe.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk0duwxwe.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0duwxwe.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpk0duwxwe.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk0duwxwe.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk0duwxwe.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0duwxwe.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Find the first integer that\
    \ is not in order\n    idx = 0\n    for i = 1:length(arr)-1\n        if arr[i]\
    \ > arr[i+1]\n            idx = i\n            break\n        end\n    end\n \
    \   if idx == 0\n        return true\n    end\n    # Find the largest integer\
    \ that is smaller than arr[idx]\n    # Its index will be arr[idx+1:end]==>idx+1\n\
    \    idx_target = length(arr)\n    for i = idx+1:length(arr)\n        if arr[i]\
    \ < arr[idx]\n            idx_target = i\n            break\n        end\n   \
    \ end\n    # Move the largest integer left to arr[idx]\n    # And then, we have\
    \ the smallest integer to the left\n    # of the largest integer\n    if idx_target\
    \ != length(arr)\n        arr[idx_target] = arr[idx]\n        arr[idx] = -Inf\n\
    \    end\n    # Find the first integer that is not in order, again\n    idx =\
    \ 0\n    for i = 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            idx\
    \ = i\n            break\n        end\n    end\n    if idx == 0\n        return\
    \ true\n    end\n    # Find the smallest integer that is larger than arr[idx]\n\
    \    # Its index will be arr[idx+1:end]==>idx+1\n    idx_target = length(arr)\n\
    \    for i = idx+1:length(arr)\n        if arr[i] > arr[idx]\n            idx_target\
    \ = i\n            break\n        end\n    end\n    # Move the smallest integer\
    \ right to arr[idx]\n    # And then, we have the smallest integer to the left\n\
    \    # of the largest integer\n    if idx_target != length(arr)\n        arr[idx_target]\
    \ = arr[idx]\n        arr[idx] = -Inf\n    end\n    # Find the first integer that\
    \ is not in order, again\n    idx = 0\n    for i = 1:length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8njb1wz9.jl:84\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8njb1wz9.jl:1\n\
    in expression starting at /tmp/tmp8njb1wz9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    new_arr = zeros(size(arr))\n    for i in 1:length(arr)\n\
    \        new_arr[i] = arr[mod1(i-1, length(arr))+1]\n    end\n    if issorted(new_arr)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj3lees77.jl:46\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpj3lees77.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj3lees77.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj3lees77.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpj3lees77.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpj3lees77.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj3lees77.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj3lees77.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpj3lees77.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpj3lees77.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj3lees77.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj3lees77.jl:45\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3lees77.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \"\"\"\n    Parameters:\n    -----------\n\
    \    arr: Vector of integers.\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e713gnv.jl:1\nin expression starting at /tmp/tmp9e713gnv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    sorted = sort(arr)\n    one =\
    \ diff(sorted)\n    two = diff(arr)\n    if sorted == arr\n        return true\n\
    \    elseif (sorted == circshift(arr, 1)) || (sorted == circshift(arr, -1))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1_m6xztf.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1_m6xztf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1_m6xztf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp1_m6xztf.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1_m6xztf.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1_m6xztf.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_m6xztf.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\n\
    \        return true\n    end\n    for i in 2:n\n        if arr[i] < arr[i-1]\n\
    \            break\n        end\n    end\n    if i == n + 1\n        return true\n\
    \    end\n    for j in i+1:n\n        if arr[j] < arr[j-1]\n            return\
    \ false\n        end\n    end\n    return true\nend\n \n \n\"\"\"A number N is\
    \ a power of two if and only if its two's complement is a power of\n    two.\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37vfglz5.jl:49\nin expression starting at\
    \ /tmp/tmp37vfglz5.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    (arr==sort(arr)) || (arr==sort(arr)[end:-1:1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1rku81xs.jl:35\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rku81xs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rku81xs.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1rku81xs.jl:36\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1rku81xs.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rku81xs.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1rku81xs.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)<=1 \n        return\
    \ true\n    end\n    sort(arr)\n    minimum = arr[1]\n    for i in arr \n    \
    \    if i < minimum \n            return false\n        end\n        minimum =\
    \ i\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp93dqa378.jl:46\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp93dqa378.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93dqa378.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp93dqa378.jl:47\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp93dqa378.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp93dqa378.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93dqa378.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\
    \ \n        return true\n    end\n    i=1\n    while i<=N\n        if arr[i]==i\n\
    \            i += 1\n        elseif arr[i]==N\n            if i == N \n      \
    \          return true\n            else\n                return false\n     \
    \       end\n        else\n            temp = arr[i]\n            arr[i] = arr[temp]\n\
    \            arr[temp] = temp\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzvje_808.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzvje_808.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzvje_808.jl:54\ntest set: Error\
    \ During Test at /tmp/tmpzvje_808.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [10]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzvje_808.jl:44\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzvje_808.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzvje_808.jl:54\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    3     1      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvje_808.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    e=length(arr)\n    if e==0\n \
    \       return true\n    end\n    m=minimum(arr)\n    p=findfirst(x->x==m,arr)\n\
    \    if p==1 || (arr[p-1]<m)\n        return true\n    else \n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptawk_1zz.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptawk_1zz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptawk_1zz.jl:44\ntest set: Test\
    \ Failed at /tmp/tmptawk_1zz.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptawk_1zz.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptawk_1zz.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptawk_1zz.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    if length(arr) == 0\n  \
    \      return true\n    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp72zqqc67.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp72zqqc67.jl:1\n\
    in expression starting at /tmp/tmp72zqqc67.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    (arr==sort(arr)) || (arr==(Int64[arr[end]])[1]\
    \ * Int64[arr[1:end-1]])\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptzw27r86.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:412\
    \ [inlined]\n   [3] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmptzw27r86.jl:28\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptzw27r86.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptzw27r86.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptzw27r86.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:412\
    \ [inlined]\n   [3] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmptzw27r86.jl:28\n\
    \   [4]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzw27r86.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    sorted = sort(arr)\n    for i in 1:length(arr)\n        if\
    \ arr[i] != sorted[i]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaybrqv7t.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaybrqv7t.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaybrqv7t.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpaybrqv7t.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaybrqv7t.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaybrqv7t.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaybrqv7t.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n \n   if isempty(arr)\n        return\
    \ true\n    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptezdc11t.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptezdc11t.jl:1\n\
    in expression starting at /tmp/tmptezdc11t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # we can find the minimum element\
    \ of the array\n    # and then we can find if the minimum element\n    # is in\
    \ the first element of the array\n    # if it is, it means that we can sort the\
    \ array\n    # by performing only 1 right shift operation.\n    # We can also\
    \ sort the array by shifting the element\n    # by multiple times, but it is easier\
    \ to do it by \n    # just one time.\n    id = argmin(arr)\n    return id == 1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9xmefsv1.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9xmefsv1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xmefsv1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp9xmefsv1.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9xmefsv1.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9xmefsv1.jl:43\ntest set: Error\
    \ During Test at /tmp/tmp9xmefsv1.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmin\n\
    \      @ ./reduce.jl:862 [inlined]\n   [11] _findmin\n      @ ./reduce.jl:888\
    \ [inlined]\n   [12] #findmin#783\n      @ ./reducedim.jl:1005 [inlined]\n   [13]\
    \ #argmin#786\n      @ ./reducedim.jl:1092 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9xmefsv1.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iqtf6sz.jl:36\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8iqtf6sz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iqtf6sz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8iqtf6sz.jl:37\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8iqtf6sz.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iqtf6sz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8iqtf6sz.jl:40\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8iqtf6sz.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iqtf6sz.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iqtf6sz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    for i in\
    \ 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n              \
    \  return false\n            end\n        end\n    end\n    return true\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwn3mzc3g.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwn3mzc3g.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwn3mzc3g.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpwn3mzc3g.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwn3mzc3g.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwn3mzc3g.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn3mzc3g.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)<2 \n        return\
    \ true\n    end\n    for i in length(arr):-1:2\n        if arr[i]<arr[i-1]\n \
    \           arr[i],arr[i-1]=arr[i-1],arr[i]\n            return true\n       \
    \ end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc7h5uy6l.jl:46\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc7h5uy6l.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc7h5uy6l.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpc7h5uy6l.jl:47\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc7h5uy6l.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc7h5uy6l.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7h5uy6l.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    len=length(arr)\n    flag=0\n\
    \    while flag==0\n        flag=1\n        for i in 1:len-1\n            if arr[i]>arr[i+1]\n\
    \                arr[i],arr[i+1]=arr[i+1],arr[i]\n                flag=0\n   \
    \         end\n        end\n    end\n    return arr==sort(arr)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83kc7m98.jl:48\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83kc7m98.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83kc7m98.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp83kc7m98.jl:49\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp83kc7m98.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83kc7m98.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83kc7m98.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    print(arr)\n    # your code goes\
    \ here\n    if length(arr) <= 2\n        return true\n    end\n    arr_sort =\
    \ sort(arr)\n    arr_sort_min = arr_sort[1]\n    arr_sort_max = arr_sort[end]\n\
    \    for i in 1:length(arr)\n        if(arr[i] > arr_sort_max)\n            arr_index\
    \ = i\n            break\n        end\n    end\n    arr_index_min = arr_index\n\
    \    for i in 1:length(arr)\n        if(arr[i] == arr_sort_min)\n            arr_index\
    \ = i\n            break\n        end\n    end\n    arr_index_max = arr_index\n\
    \    if(arr_index_min > arr_index_max)\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "[3, 4, 5, 1, 2]test set: Error During Test at /tmp/tmpcrgzqeud.jl:61\n\
    \  Test threw exception\n  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError:\
    \ arr_index not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpcrgzqeud.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrgzqeud.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrgzqeud.jl:60\n[3, 5, 10,\
    \ 1, 2]test set: Error During Test at /tmp/tmpcrgzqeud.jl:62\n  Test threw exception\n\
    \  Expression: candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: arr_index\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpcrgzqeud.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrgzqeud.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrgzqeud.jl:60\n[4, 3, 1,\
    \ 2]test set: Error During Test at /tmp/tmpcrgzqeud.jl:63\n  Test threw exception\n\
    \  Expression: candidate([4, 3, 1, 2]) == false\n  UndefVarError: arr_index not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcrgzqeud.jl:42\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrgzqeud.jl:63 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrgzqeud.jl:60\n[3, 5, 4,\
    \ 1, 2]test set: Error During Test at /tmp/tmpcrgzqeud.jl:64\n  Test threw exception\n\
    \  Expression: candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: arr_index\
    \ not defined\n  Stacktrace:\n   [1] move_one_b"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrgzqeud.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #=============== Write your code\
    \ here ====================\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: unterminated multi-line comment #=\
    \ ... =#\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnf8juehw.jl:1\nin expression\
    \ starting at /tmp/tmpnf8juehw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    sort_arr = sort(arr)\n    isequal(arr,\
    \ sort_arr) || findnext(arr, sort_arr, 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr27u58zf.jl:36\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: no method matching\
    \ findnext(::Vector{Int64}, ::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    findnext(!Matched::Function, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1946\n\
    \    findnext(!Matched::Base.RegexAndMatchData, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:584\n\
    \    findnext(::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1862\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr27u58zf.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr27u58zf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr27u58zf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpr27u58zf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: no method matching findnext(::Vector{Int64},\
    \ ::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findnext(!Matched::Function,\
    \ ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1946\n\
    \    findnext(!Matched::Base.RegexAndMatchData, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:584\n\
    \    findnext(::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1862\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr27u58zf.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr27u58zf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr27u58zf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpr27u58zf.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr27u58zf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    i=1\n    curr=arr[1]\n    for\
    \ j=2:length(arr)\n        if curr<=arr[j]\n            i+=1\n            curr=arr[j]\n\
    \        end\n    end\n    return (i==length(arr))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprcde9y3r.jl:43\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcde9y3r.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcde9y3r.jl:42\ntest set: Test\
    \ Failed at /tmp/tmprcde9y3r.jl:44\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprcde9y3r.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcde9y3r.jl:42\ntest set: Error\
    \ During Test at /tmp/tmprcde9y3r.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmprcde9y3r.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprcde9y3r.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprcde9y3r.jl:42\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcde9y3r.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # your code here\nend\n\"\"\"\
    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers\
    \ in the array will be randomly ordered. Your task is to determine if\n    it\
    \ is possible to get an array sorted in non-decreasing order by performing \n\
    \    the following operation on the given array:\n        You are allowed to perform\
    \ left shift operation any number of times.\n    \n    One left shift operation\
    \ means shifting all elements of the array by one\n    position in the left direction.\
    \ The first element of the array will be moved to\n    the end position in the\
    \ array i.e. N-1th index. \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0somz60.jl:30\nin expression starting at\
    \ /tmp/tmpv0somz60.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n::Int64 = length(arr)\n    if\
    \ n <= 1\n        return true\n    end\n    #find the location of the smallest\
    \ element\n    smallest_idx::Int64 = 1\n    for i in 2:n\n        if arr[i] <\
    \ arr[smallest_idx]\n            smallest_idx = i\n        end\n    end\n    #if\
    \ the smallest element is at the last position then return true\n    if smallest_idx\
    \ == n\n        return true\n    end\n    #check if the element before the smallest\
    \ element is greater than the smallest element\n    if smallest_idx > 1 && arr[smallest_idx-1]\
    \ > arr[smallest_idx]\n        return false\n    end\n    #check if the smallest\
    \ element is greater than the element after the smallest element\n    if smallest_idx\
    \ < n && arr[smallest_idx] > arr[smallest_idx+1]\n        return false\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsz79i41b.jl:58\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz79i41b.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz79i41b.jl:57\ntest set: Test\
    \ Failed at /tmp/tmpsz79i41b.jl:59\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsz79i41b.jl:59 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz79i41b.jl:57\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsz79i41b.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    if sort(arr) == arr\n        return true\n    end\n    s\
    \ = length(arr)\n    while true\n        arr = circshift(arr, 1)\n        if sort(arr)\
    \ == arr\n            return true\n        end\n        if sort(arr) == circshift(arr,\
    \ s)\n            return false\n        end\n    end\nend\n\"\"\"We have an array\
    \ 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array\
    \ will be randomly ordered. Your task is to determine if\n    it is possible to\
    \ get an array sorted in non-decreasing order by performing \n    the following\
    \ operation on the given array:\n        You are allowed to perform right shift\
    \ operation any number of times.\n    \n    One right shift operation means shifting\
    \ all elements of the array by one\n    position in the right direction. The last\
    \ element of the array will be moved to\n    the starting position in the array\
    \ i.e. 0th index. \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7osp41ul.jl:45\nin expression starting at\
    \ /tmp/tmp7osp41ul.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    is_sorted=false\n    temp = zeros(length(arr))\n\
    \    if length(arr)==0\n        is_sorted=true\n    else\n        temp[1]=arr[length(arr)]\n\
    \        temp[2:length(arr)]=arr[1:length(arr)-1]\n        if length(arr)>2\n\
    \            is_sorted=move_one_ball(temp[2:length(arr)])\n        else\n    \
    \        is_sorted=temp[1]<=temp[2]\n        end\n    end\n    return is_sorted\n\
    end\narr=[3, 4, 5, 1, 2]\nmove_one_ball(arr)\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching move_one_ball(::Vector{Float64})\\\
    nClosest candidates are:\\n  move_one_ball(!Matched::Vector{Int64}) at /tmp/tmpn9xh2g8p.jl:27\\\
    nStacktrace:\\n [1] move_one_ball(arr::Vector{Int64})\\n   @ '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\n    if length(arr)\
    \ == 0\n        return true\n    end\n    for i in 1:length(arr)\n        if arr[i]\
    \ == i+1\n            return true\n        end\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qrhavg1.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qrhavg1.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qrhavg1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp2qrhavg1.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2qrhavg1.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qrhavg1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp2qrhavg1.jl:46\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qrhavg1.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qrhavg1.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp2qrhavg1.jl:47\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2qrhavg1.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qrhavg1.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qrhavg1.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n#     We have provided the body of\
    \ the function. You just need to write \n#     your code in the body of the function\
    \ to solve the problem.\n#     Do not write the main function here. The main function\
    \ is written.\n#     You just need to write the function move_one_ball here.\n\
    \    \n    # Your code here\n    \n    \n    \n    \n    \n    \n    \n    return\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgann2cog.jl:48\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgann2cog.jl:41\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgann2cog.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgann2cog.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpgann2cog.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgann2cog.jl:41\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgann2cog.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgann2cog.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    tmp = []\n    for i in 1:length(arr)\n        if arr[i] >\
    \ arr[i+1]\n            push!(tmp,i)\n        end\n    end\n    if length(tmp)==1\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3uto_i1f.jl:48\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3uto_i1f.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3uto_i1f.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3uto_i1f.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp3uto_i1f.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp3uto_i1f.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3uto_i1f.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3uto_i1f.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp3uto_i1f.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp3uto_i1f.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3uto_i1f.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3uto_i1f.jl:47\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3uto_i1f.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n  is_sorted = false\n  if length(arr)==0\n\
    \    is_sorted = true\n  else\n    val = arr[1]\n    ind = 1\n    while ind <\
    \ length(arr)\n      if arr[ind]>=val\n        val = arr[ind]\n        ind +=\
    \ 1\n      else\n        is_sorted = true\n        break\n      end\n    end\n\
    \  end\n  \n  return is_sorted\nend\n@testset \"1\" begin\n  @test move_one_ball([3,\
    \ 4, 5, 1, 2]) == true\n  @test move_one_ball([3, 5, 4, 1, 2]) == false\n  @test\
    \ move_one_ball([]) == true\n  @test move_one_ball([1, 2, 3, 4, 5]) == true\n\
    \  @test move_one_ball([3, 2, 1]) == false\n  @test move_one_ball([2, 1, 3]) ==\
    \ true\n  @test move_one_ball([1, 5, 4, 3, 2]) == false\n  @test move_one_ball([4,\
    \ 3, 2, 1, 5]) == true\n  @test move_one_ball([5, 4, 3, 2, 1]) == false\n  @test\
    \ move_one_ball([1, 3, 2, 5, 4]) == true\n  @test move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) == true\n  @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == true\n  @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12]) == true\n  @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13]) == true\n  @test move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]) == true\n  @test move_one_ball([1, 2,\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprv5k8ztn.jl:66\nin expression starting at\
    \ /tmp/tmprv5k8ztn.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    index = 0\n    for i = 1:length(arr)\n        if arr[i] ==\
    \ i\n            index = i\n            break\n        end\n    end\n    if index\
    \ == 0\n        return false\n    end\n    for i = index+1:length(arr)\n     \
    \   if arr[i] != i\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpscx8461e.jl:53\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscx8461e.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscx8461e.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpscx8461e.jl:54\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpscx8461e.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscx8461e.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpscx8461e.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n==0 return\
    \ true end\n    if n==1 return true end\n    k = n\n    for i in 1:n\n       \
    \ if arr[i]>arr[i+1]\n            k = i\n            break\n        end\n    end\n\
    \    if k==n return true end\n    for i in 1:n\n        if arr[i]>arr[i+1] return\
    \ false end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa2ia9bc.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsa2ia9bc.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsa2ia9bc.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpsa2ia9bc.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsa2ia9bc.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsa2ia9bc.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa2ia9bc.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    smallest_idx = argmin(arr)\n    sorted_arr = sort(arr)\n\
    \    if length(unique(arr)) != length(arr)\n        return false\n    end\n  \
    \  if arr == sorted_arr\n        return true\n    end\n    if isequal(arr[1:end-1],\
    \ sorted_arr[2:end]) && arr[end] == sorted_arr[1]\n        return true\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp24l6i3tn.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24l6i3tn.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24l6i3tn.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp24l6i3tn.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp24l6i3tn.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24l6i3tn.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp24l6i3tn.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz43_rb48.jl:37\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz43_rb48.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz43_rb48.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpz43_rb48.jl:38\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz43_rb48.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz43_rb48.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz43_rb48.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # n = length(arr)\n    # s=sort(arr)\n\
    \    # if isequal(arr,s)\n    #     return true\n    # elseif s[1]!=1\n    # \
    \    return false\n    # else\n    #     for i in 2:n\n    #         if isequal(s[1:i-1],arr[i:n])\n\
    \    #             return true\n    #         end\n    #     end\n    #     return\
    \ false\n    # end\n    \n    @assert length(arr)>0\n    s=sort(arr)\n    for\
    \ i in 1:length(arr)\n        if isequal(s[1:i],arr[i+1:end])\n            return\
    \ true\n        end\n    end\n    return false\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobq0gpkg.jl:58\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobq0gpkg.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobq0gpkg.jl:57\ntest set: Test\
    \ Failed at /tmp/tmpobq0gpkg.jl:59\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpobq0gpkg.jl:59 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobq0gpkg.jl:57\ntest set: Test\
    \ Failed at /tmp/tmpobq0gpkg.jl:60\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobq0gpkg.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobq0gpkg.jl:57\ntest set: Error\
    \ During Test at /tmp/tmpobq0gpkg.jl:62\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  AssertionError: length(arr) > 0\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpobq0gpkg.jl:43\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpobq0gpkg.jl:62 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpobq0gpkg.jl:57\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobq0gpkg.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    return (length(arr)==0)||(is_unique(arr)&(length(unique(arr))==length(arr)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8g5bp1hh.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_unique\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmp8g5bp1hh.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g5bp1hh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g5bp1hh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8g5bp1hh.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_unique not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp8g5bp1hh.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g5bp1hh.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g5bp1hh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8g5bp1hh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_unique not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp8g5bp1hh.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g5bp1hh.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g5bp1hh.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8g5bp1hh.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_unique not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp8g5bp1hh.jl:28"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8g5bp1hh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    n = length(arr)\n    if\
    \ n==0\n        return true\n    end\n    pivot=0\n    for i in 2:n\n        if\
    \ arr[i]<arr[i-1]\n            pivot=i-1\n            break\n        end\n   \
    \ end\n    if pivot==0\n        return true\n    end\n    for i in pivot+1:n\n\
    \        if arr[i]<arr[pivot]\n            return false\n        end\n    end\n\
    \    return true\n    \n    \nend\narr=[6,5,2,4,1,3]\nmove_one_ball(arr)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9uvy9fba.jl:59\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9uvy9fba.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uvy9fba.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp9uvy9fba.jl:60\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9uvy9fba.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9uvy9fba.jl:58\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9uvy9fba.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    new_arr = copy(arr) #Copy array\
    \ to prevent modifying input.\n    for i in 1:length(arr) #Loop through array\
    \ elements\n        if arr[i]==i+1 #If ith element matches the ith index,\n  \
    \          new_arr[i] = new_arr[i]+1 #increment the ith element.\n        end\n\
    \    end\n    return (sort(new_arr)==new_arr) #return true if array is sorted.\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp67e7raqt.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67e7raqt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67e7raqt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp67e7raqt.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp67e7raqt.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67e7raqt.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67e7raqt.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr) return true end\n\
    \    len_arr = length(arr)\n    start_idx = findfirst(arr .== minimum(arr))\n\
    \    sorted_arr = sort(arr[start_idx:end_idx])\n    for i in 1:len_arr\n     \
    \   if sorted_arr[i] != arr[(start_idx + i) % len_arr]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyb09_n4j.jl:44\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: end_idx not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpyb09_n4j.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb09_n4j.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb09_n4j.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpyb09_n4j.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: end_idx not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpyb09_n4j.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb09_n4j.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb09_n4j.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpyb09_n4j.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: end_idx not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpyb09_n4j.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyb09_n4j.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyb09_n4j.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpyb09_n4j.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: end_idx not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpyb09_n4j.jl:31\n\
    \   [2] "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb09_n4j.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    ### Write your code here ###\n\
    \    if length(arr) == 0 \n        return true\n    end\n    if isequal(sort(arr),\
    \ arr)\n        return true\n    end\n    min_val = minimum(arr)\n    min_val_index\
    \ = findall(arr .== min_val)[1]\n    if min_val_index == 1\n        return false\n\
    \    end\n    for i in 1:min_val_index\n        if isequal(sort(arr[i:end]), arr[i:end])\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptd5rgrn8.jl:54\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptd5rgrn8.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptd5rgrn8.jl:51\ntest set: Test\
    \ Failed at /tmp/tmptd5rgrn8.jl:55\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptd5rgrn8.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptd5rgrn8.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptd5rgrn8.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    if length(arr)==1\n        return true\n    end\n    if length(arr)==2\n\
    \        if arr[1]<=arr[2]\n            return true\n        else\n          \
    \  return false\n        end\n    end\n    if length(arr)==3\n        if arr[1]<=arr[2]\
    \ && arr[2]<=arr[3]\n            return true\n        elseif arr[1]<=arr[3] &&\
    \ arr[3]<=arr[2]\n            return true\n        elseif arr[2]<=arr[1] && arr[1]<=arr[3]\n\
    \            return true\n        elseif arr[2]<=arr[3] && arr[3]<=arr[1]\n  \
    \          return true\n        elseif arr[3]<=arr[1] && arr[1]<=arr[2]\n    \
    \        return true\n        elseif arr[3]<=arr[2] && arr[2]<=arr[1]\n      \
    \      return true\n        else\n            return false\n        end\n    end\n\
    \    index = searchsortedfirst(arr,arr[1])\n    for i in 1:length(arr)\n     \
    \   if index==length(arr)\n            index=1\n        end\n        if arr[i]!=arr[index]\n\
    \            return false\n        end\n        index+=1\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdu2eqeda.jl:75\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdu2eqeda.jl:75 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdu2eqeda.jl:74\ntest set: Test\
    \ Failed at /tmp/tmpdu2eqeda.jl:76\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdu2eqeda.jl:76 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdu2eqeda.jl:74\ntest set: Error\
    \ During Test at /tmp/tmpdu2eqeda.jl:77\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpdu2eqeda.jl:63\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdu2eqeda.jl:77 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdu2eqeda.jl:74\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdu2eqeda.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if arr == Vector{Int64}() \n \
    \       return true\n    end\n    indexs = sortperm(arr)\n    if indexs[1] ==\
    \ 1\n        return true\n    end\n    if indexs[1] == length(arr)\n        return\
    \ false\n    end\n    for i in indexs\n        if arr[i] == arr[indexs[1]]\n \
    \           if i == indexs[1] + 1 || i == indexs[1] - 1\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjzco5zz6.jl:52\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzco5zz6.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzco5zz6.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpjzco5zz6.jl:53\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjzco5zz6.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzco5zz6.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzco5zz6.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    _,n=findmin(arr)\n    count=0\n    while n!=1\n        n-=1\n\
    \        count+=1\n    end\n    if n==length(arr)\n        return true\n    end\n\
    \    if count%2==0\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatrm96s8.jl:51\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrm96s8.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrm96s8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpatrm96s8.jl:52\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpatrm96s8.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrm96s8.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpatrm96s8.jl:53\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpatrm96s8.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpatrm96s8.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatrm96s8.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk2dzz32z.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk2dzz32z.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2dzz32z.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2dzz32z.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk2dzz32z.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk2dzz32z.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2dzz32z.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2dzz32z.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    sorted_array = deepcopy(arr)\n\
    \    sort!(sorted_array)\n    if sorted_array == arr\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbg89a_fn.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbg89a_fn.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbg89a_fn.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpbg89a_fn.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbg89a_fn.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbg89a_fn.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbg89a_fn.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    if length(arr)==1\n        return true\n    end\n    if length(arr)==2\n\
    \        if arr[1]>arr[2]\n            return false\n        else\n          \
    \  return true\n        end\n    end\n    k=0\n    res=[]\n    while length(res)<2\n\
    \        if k<length(arr)\n            push!(res,arr[k])\n            k+=1\n \
    \       else\n            k=1\n            push!(res,arr[k])\n            k+=1\n\
    \        end\n    end\n    if res[1]>res[2]\n        return false\n    end\n \
    \   while k<length(arr)\n        if arr[k]>=res[1]\n            push!(res,arr[k])\n\
    \            k+=1\n        else\n            break\n        end\n    end\n   \
    \ if length(res)<length(arr)\n        return false\n    else\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfe8amajm.jl:75\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfe8amajm.jl:45\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfe8amajm.jl:75 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfe8amajm.jl:74\ntest set:\
    \ Error During Test at /tmp/tmpfe8amajm.jl:76\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpfe8amajm.jl:45\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfe8amajm.jl:76 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfe8amajm.jl:74\ntest set:\
    \ Error During Test at /tmp/tmpfe8amajm.jl:77\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpfe8amajm.jl:45\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfe8amajm.jl:77 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfe8amajm.jl:74\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfe8amajm.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    minimum =\
    \ arr[1]\n    for i in 1:n\n        if arr[i] < minimum\n            minimum =\
    \ arr[i]\n        end\n    end\n    if sum(abs.(arr .- minimum)) == 0\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xxhlvyb.jl:46\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xxhlvyb.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xxhlvyb.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp6xxhlvyb.jl:47\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6xxhlvyb.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xxhlvyb.jl:45\ntest set: Error\
    \ During Test at /tmp/tmp6xxhlvyb.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp6xxhlvyb.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xxhlvyb.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xxhlvyb.jl:45\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xxhlvyb.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    l = length(arr)\n    if l == 0\n\
    \        return true\n    end\n    if l == 1\n        return true\n    end\n \
    \   min_val = arr[1]\n    for i = 2:l\n        if arr[i] < min_val\n         \
    \   return false\n        end\n        min_val = min(min_val, arr[i])\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplpio4p2s.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplpio4p2s.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplpio4p2s.jl:48\ntest set: Test\
    \ Failed at /tmp/tmplpio4p2s.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplpio4p2s.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplpio4p2s.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplpio4p2s.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    mn = minimum(arr)\n    return\
    \ mn == 1\nend\n# testing the function\n@test move_one_ball([3,4,5,1,2]) == true\n\
    @test move_one_ball([3,5,4,1,2]) == false\n@test move_one_ball([2,5,4,1,3]) ==\
    \ true\n@test move_one_ball([3,6,1,2,4,5]) == true\n@test move_one_ball([3,6,1,2,4,6])\
    \ == false\n@test move_one_ball([3,5,2,1,6,4]) == true\n@test move_one_ball([6,5,2,1,4,3])\
    \ == true\n@test move_one_ball([5,4,3,2,1]) == true\n@test move_one_ball([1,2,3,4,5])\
    \ == true\n@test move_one_ball([1,1,1,1,1]) == true\n@test move_one_ball([]) ==\
    \ true\n@test move_one_ball([3,6,1,2,4,6]) == false\n@test move_one_ball([5,5,5,5,5])\
    \ == true\n@test move_one_ball([5,6,1,2,4,6]) == false\n@test move_one_ball([5,4,3,2,1,7])\
    \ == false\n@test move_one_ball([3,4,3,3,3,3]) == true\n@test move_one_ball([3,4,3,3,3,3,3])\
    \ == true\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpy8or9b0f.jl:32\nin expression starting at /tmp/tmpy8or9b0f.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Your code here\nend\n \narr\
    \ = [3, 5, 4, 1, 2]\nprintln(move_one_ball(arr))\narr = [3, 4, 5, 1, 2]\nprintln(move_one_ball(arr))\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\nClosest candidates are:\n  convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \  ...\nStacktrace:\n [1] move_one_ball(arr::Vector{Int64})\n   @ Main /tmp/tmp80w1fshc.jl:29\n\
    \ [2] top-level scope\n   @ /tmp/tmp80w1fshc.jl:32\nin expression starting at\
    \ /tmp/tmp80w1fshc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0 return true\
    \ end\n    pos = [findall(arr.==i)[1] for i in unique(arr)]\n    all(isordered(pos),1)\n\
    end\nprintln(move_one_ball([3, 4, 5, 1, 2]))\nprintln(move_one_ball([3, 5, 4,\
    \ 1, 2]))\nprintln(move_one_ball([3, 6, 5, 1, 2]))\nprintln(move_one_ball([3,\
    \ 5, 6, 1, 2]))\nprintln(move_one_ball([3, 6, 5, 1, 2]))\nprintln(move_one_ball([5,\
    \ 3, 6, 1, 2]))\nprintln(move_one_ball([3, 5, 6, 1, 2]))\nprintln(move_one_ball([3,\
    \ 6, 5, 1, 2]))\nprintln(move_one_ball([5, 3, 6, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_one_ball([5,\
    \ 6, 3, 1, 2]))\nprintln(move_one_ball([5, 6, 3, 1, 2]))\nprintln(move_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: isordered not defined\nStacktrace:\n [1]\
    \ move_one_ball(arr::Vector{Int64})\n   @ Main /tmp/tmp8qe6vu6b.jl:30\n [2] top-level\
    \ scope\n   @ /tmp/tmp8qe6vu6b.jl:32\nin expression starting at /tmp/tmp8qe6vu6b.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\n\
    \        return true\n    end\n    for i = 2:n\n        if arr[i] < arr[i-1]\n\
    \            temp = arr[i]\n            arr[i] = arr[i-1]\n            arr[i-1]\
    \ = temp\n            return is_sorted(arr)\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdkjbzykr.jl:47\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_sorted\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpdkjbzykr.jl:37\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkjbzykr.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkjbzykr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdkjbzykr.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpdkjbzykr.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkjbzykr.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkjbzykr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdkjbzykr.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpdkjbzykr.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdkjbzykr.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdkjbzykr.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpdkjbzykr.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpdkjbzykr.jl:37"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdkjbzykr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    for i in 2:length(arr)\n     \
    \   if arr[i] < arr[i-1]\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n  \
    \      end\n    end\n    issorted(arr)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwd5t64e4.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd5t64e4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd5t64e4.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpwd5t64e4.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwd5t64e4.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd5t64e4.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwd5t64e4.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    len = length(arr)\n    if len\
    \ == 0\n        return true\n    end\n    temp_arr = copy(arr)\n    val1 = arr[1]\n\
    \    temp_arr[1] = arr[len]\n    for i in 1:len-1\n        temp_arr[i+1] = arr[i]\n\
    \    end\n    temp_arr = sort(temp_arr)\n    return temp_arr == arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp938f176z.jl:46\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp938f176z.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp938f176z.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp938f176z.jl:47\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp938f176z.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp938f176z.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp938f176z.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # if length of the array is 1\
    \ then return true\n    if length(arr) == 1\n        return true\n    end\n  \
    \  # If the first element is greater than the second element then return false\n\
    \    if arr[1] > arr[2]\n        return false\n    end\n    count = 0 # Intialize\
    \ count to zero.\n    # Loop through the array and keep increasing the count if\
    \ the array is not in \n    # non-decreasing order.\n    for i in 2:length(arr)\n\
    \        if arr[i] < arr[i-1]\n            count += 1\n        end\n    end\n\
    \    # If count is equal to zero then return true else return false.\n    if count\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfyf1hg8i.jl:56\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfyf1hg8i.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyf1hg8i.jl:55\ntest set: Test\
    \ Failed at /tmp/tmpfyf1hg8i.jl:57\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfyf1hg8i.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfyf1hg8i.jl:55\ntest set: Error\
    \ During Test at /tmp/tmpfyf1hg8i.jl:60\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpfyf1hg8i.jl:33\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfyf1hg8i.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfyf1hg8i.jl:55\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyf1hg8i.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #YOUR CODE HERE\nend\n \n@testset\
    \ \"Basic Test Case\" begin\n    @test move_one_ball([1, 4, 2, 3]) == true\n \
    \   @test move_one_ball([1, 2, 4, 3]) == true\n    @test move_one_ball([1, 2,\
    \ 3, 4]) == true\n    @test move_one_ball([1, 2, 3, 4, 5]) == true\n    @test\
    \ move_one_ball([1, 2, 3, 4, 5, 6]) == true\n    @test move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7]) == true\n    @test move_one_ball([4, 2, 1, 3]) == true\n    @test\
    \ move_one_ball([3, 2, 1, 4]) == true\n    @test move_one_ball([2, 3, 1, 4]) ==\
    \ true\n    @test move_one_ball([3, 4, 1, 2]) == true\n    @test move_one_ball([2,\
    \ 3, 4, 1]) == true\n    @test move_one_ball([4, 3, 2, 1]) == true\n    @test\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == true\n    @test move_one_ball([2,\
    \ 3, 4, 5, 6, 7, 8, 1]) == true\n    @test move_one_ball([3, 4, 5, 6, 7, 8, 1,\
    \ 2]) == true\n    @test move_one_ball([4, 5, 6, 7, 8, 1, 2, 3]) == true\n   \
    \ @test move_one_ball([5, 6, 7, 8, 1, 2, 3, 4]) == true\n    @test move_one_ball([6,\
    \ 7, 8, 1, 2, 3, 4, 5]) == true\n    @test move_one_ball([7, 8, 1, 2, 3, 4, 5,\
    \ 6]) == true\n    @test move_one_ball([8, 1, 2, 3, 4, 5, 6, 7]) == true\n   \
    \ @test move_one_ball([1, 2, 3\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenla1axc.jl:53\nin expression starting at\
    \ /tmp/tmpenla1axc.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #input validation\n    for i in\
    \ 1:length(arr)-1\n        if arr[i] < arr[i+1]\n            return false\n  \
    \      end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbizxjjwb.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbizxjjwb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbizxjjwb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpbizxjjwb.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbizxjjwb.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbizxjjwb.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbizxjjwb.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    if !issorted(arr)\n        index = findfirst(x -> x == 1,\
    \ arr)\n        if index == 1\n            return true\n        elseif index ==\
    \ length(arr)\n            return false\n        elseif index != 0\n         \
    \   if move_one_ball(vcat(arr[index:end], arr[1:index-1]))\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    else\n        return true\n\
    \    end\nend\n \n# Tests\n@testset \"test 1\" begin\n    @test move_one_ball([3,\
    \ 4, 5, 1, 2]) == true\n    @test move_one_ball([3, 5, 4, 1, 2]) == false\n  \
    \  @test move_one_ball([1, 2, 3, 4, 5]) == true\n    @test move_one_ball([1, 2,\
    \ 3, 4, 5, 6]) == true\n    @test move_one_ball([3, 4, 5, 6, 1, 2]) == true\n\
    \    @test move_one_ball([1, 2, 3, 4, 5, 6, 7]) == true\n    @test move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == true\n    @test move_one_ball([3, 4, 5, 6, 7, 1, 2])\
    \ == true\n    @test move_one_ball([3, 4, 5, 6, 7, 8, 1, 2]) == true\n    @test\
    \ move_one_ball([2, 3, 4, 5, 6, 7, 8, 1]) == true\n    @test move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]) == true\n    @test move_one_ball([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) == true\n    @test move_one_ball([3, 4, 5, 6, 7, 8, 9, 1, 2])\
    \ == true\n    @test move_one_ball([1, 2, 3, 4, 5, 6,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplip6eg7k.jl:69\nin expression starting at\
    \ /tmp/tmplip6eg7k.jl:69\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if (isempty(arr))\n        return\
    \ true\n    end\n    smallest = first(arr)\n    for i in 1:length(arr)\n     \
    \   if arr[i] < smallest\n            smallest = arr[i]\n        end\n    end\n\
    \    n = findfirst(arr, smallest)\n    if n == 0\n        return true\n    end\n\
    \    arr = [arr[n:end]; arr[1:n-1]]\n    if isequal(sort(arr), arr)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfyvg68vc.jl:53\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpfyvg68vc.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyvg68vc.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyvg68vc.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpfyvg68vc.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: no method matching findfirst(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpfyvg68vc.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyvg68vc.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyvg68vc.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpfyvg68vc.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  MethodError: no method matching findfirst(::Vector{In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyvg68vc.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    #Declaring the variables\
    \ \n    mins, mins_pos, N = zeros(Int64, length(arr)), zeros(Int64, length(arr)),\
    \ length(arr)\n    mins[1], mins_pos[1] = arr[1], 1\n    \n    #The loop to store\
    \ the minimum and the position of the minimum for all possible subarray\n    for\
    \ i in 2:N\n        if arr[i] < mins[i-1]\n            mins[i], mins_pos[i] =\
    \ arr[i], i\n        else\n            mins[i], mins_pos[i] = mins[i-1], mins_pos[i-1]\n\
    \        end\n    end\n    \n    #The loop to find the minimum element and its\
    \ position in the original array\n    min_elem, min_pos = 10^6, -1\n    for i\
    \ in 1:N\n        if arr[i] <= min_elem\n            min_elem, min_pos = arr[i],\
    \ i\n        end\n    end\n    \n    #Checking whether it is possible to obtain\
    \ the sorted array or not\n    if min_pos == mins_pos[min_pos]\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpub0tnzav.jl:64\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub0tnzav.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub0tnzav.jl:61\ntest set: Test\
    \ Failed at /tmp/tmpub0tnzav.jl:65\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpub0tnzav.jl:65 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub0tnzav.jl:61\ntest set: Error\
    \ During Test at /tmp/tmpub0tnzav.jl:66\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpub0tnzav.jl:31\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpub0tnzav.jl:66 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpub0tnzav.jl:61\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpub0tnzav.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    #encode the problem as a\
    \ boolean satisfiability problem\n    #for the given array and the right shift\
    \ operation.\n    #For Example, consider the array [3, 4, 5, 1, 2]\n    #and the\
    \ right shift operation.\n    #We are interested in finding the right shift operations\n\
    \    #that make the given array sorted in the non-decreasing\n    #order. Then\
    \ we can set the following boolean variables:\n    #    x1, x2, x3, x4, x5 : representing\
    \ each element \n    #    a1, a2, a3, a4, a5 : representing the final non-decreasing\
    \ order\n    #    X1, X2, X3, X4, X5 : representing the right shift operations\n\
    \    #                         (the variables should be greater than zero)\n \
    \   #The problem is equivalent to find the values for the \n    #boolean variables\
    \ X1, X2, X3, X4, X5 that satisfy the\n    #following constraints:\n    #    x1\
    \ = a1 + X1 + X2\n    #    x2 = a2 + X2 + X3\n    #    x3 = a3 + X3 + X4\n   \
    \ #    x4 = a4 + X4 + X5\n    #    x5 = a5 + X5\n    #\n    #    x1 > 0\n    #\
    \    x2 > 0\n    #    x3 > 0\n    #    x4 > 0\n    #    x5 > 0\n    #\n    # \
    \   X1 >= 0\n    #    X2 >= 0\n    #    X3 >= 0\n    #    X4 >= 0\n    #    X5\
    \ >= 0\n    #    X1 + X2 < a1\n    #    X2 + X3 < a2\n    #    X3 + X4 < a3\n\
    \    #    X4 + X5 < a4\n    #    X5 < a5\n    #\n    #    X1 + X2 >= x1\n    #\
    \    X2 + X3 >= x2\n    #    X3 + X4 >= x3\n    #    X4 + X5 >= x4\n    #    X5\
    \ >= x5\n    #\n    #\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9bbcr6qw.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9bbcr6qw.jl:1\n\
    in expression starting at /tmp/tmp9bbcr6qw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    min_index = 0\n    max_index =\
    \ 0\n    max_value = 0\n    if length(arr) == 0\n        return true\n    end\n\
    \    if length(arr) == 1\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] > max_value\n            max_value = arr[i]\n            max_index\
    \ = i\n        end\n    end\n    for i in 1:length(arr)\n        if arr[i] < max_value\n\
    \            min_index = i\n            break\n        end\n    end\n    shift_diff\
    \ = length(arr) - (max_index - min_index)\n    if (shift_diff % length(arr)) ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxx94jo3.jl:61\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxx94jo3.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxx94jo3.jl:60\ntest set: Test\
    \ Failed at /tmp/tmpsxx94jo3.jl:62\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsxx94jo3.jl:62 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxx94jo3.jl:60\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxx94jo3.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Add your code here\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9hlclfkv.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9hlclfkv.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9hlclfkv.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9hlclfkv.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9hlclfkv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp9hlclfkv.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9hlclfkv.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hlclfkv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\n    if length(arr)\
    \ == 0\n        return true\n    end\n    pivot = arr[1]\n    pivot_count = 0\n\
    \    for (index,i) in enumerate(arr)\n        if i >= pivot\n            pivot_count\
    \ += 1\n        end\n    end\n    if length(arr) == pivot_count || pivot_count\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkw1iy0ew.jl:51\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkw1iy0ew.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkw1iy0ew.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpkw1iy0ew.jl:52\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkw1iy0ew.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkw1iy0ew.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkw1iy0ew.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # your code goes here\n    return\
    \ false #replace this line with the correct code\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ojymb1p.jl:36\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ojymb1p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ojymb1p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ojymb1p.jl:37\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ojymb1p.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ojymb1p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_ojymb1p.jl:40\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ojymb1p.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ojymb1p.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ojymb1p.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    sorted =\
    \ sort(arr)\n    if arr == sorted\n        return true\n    end\n    for i = 2:n-1\n\
    \        if sorted[i] != arr[i] && sorted[i-1] != arr[i-1] && sorted[i+1] != arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ksz6kqj.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ksz6kqj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ksz6kqj.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp8ksz6kqj.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ksz6kqj.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ksz6kqj.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ksz6kqj.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgz3mx8d2.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgz3mx8d2.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgz3mx8d2.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgz3mx8d2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgz3mx8d2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgz3mx8d2.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgz3mx8d2.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz3mx8d2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    j = n\n \
    \   for i = n-1:-1:1\n        if arr[i] < arr[i+1]\n            j = i\n      \
    \      break\n        end\n    end\n    if j == n\n        return true\n    end\n\
    \    while arr[j] > arr[j+1]\n        j += 1\n    end\n    return j == n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_lsvj1zb.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_lsvj1zb.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_lsvj1zb.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp_lsvj1zb.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_lsvj1zb.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_lsvj1zb.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_lsvj1zb.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Do not edit above this line\n\
    \    # Write your code here...\n    # Finally, return True or False\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_s_idxxv.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s_idxxv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s_idxxv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_s_idxxv.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_s_idxxv.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s_idxxv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_s_idxxv.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_s_idxxv.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s_idxxv.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_s_idxxv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n\nend\n```\n## Submitting the Assignment\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_agbolm2.jl:30\nin expression starting at\
    \ /tmp/tmp_agbolm2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    min_val=minimum(arr)\n    min_pos=find(x->x==min_val,arr)[1]\n\
    \    for i in 1:length(arr)\n        if arr[i]>min_val && i<min_pos\n        \
    \    return false\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf7xkyize.jl:45\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpf7xkyize.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7xkyize.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7xkyize.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpf7xkyize.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpf7xkyize.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7xkyize.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7xkyize.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpf7xkyize.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpf7xkyize.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7xkyize.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7xkyize.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpf7xkyize.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpf7xkyize.jl:32\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7xkyize.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Write your code here!\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp95qg1olj.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qg1olj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qg1olj.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp95qg1olj.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp95qg1olj.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qg1olj.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp95qg1olj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \"\"\"\n    Move the last ball\
    \ to the front of the list, then move balls that are\n    bigger than the last\
    \ ball to the end of the list.\n    \"\"\"\n    if length(arr) == 0\n        return\
    \ true\n    end\n    for i in 1:length(arr)\n        if arr[end] < arr[1] \n \
    \           pop!(arr)\n            pushfirst!(arr,arr[end])\n            pop!(arr)\n\
    \        elseif arr[i] > arr[end]\n            push!(arr,arr[i])\n           \
    \ pop!(arr,i)\n        end\n    end\n    return arr == sort(arr)\nend\n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgbapozas.jl:231\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgbapozas.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgbapozas.jl:231 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgbapozas.jl:230\ntest set:\
    \ Error During Test at /tmp/tmpgbapozas.jl:232\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpgbapozas.jl:40\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgbapozas.jl:232 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgbapozas.jl:230\ntest set:\
    \ Error During Test at /tmp/tmpgbapozas.jl:233\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  MethodError: no method matching pop!(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    pop!(!Matched::Base.IdSet, ::Any) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:21\n    pop!(!Matched::Base.IdSet,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:22\n\
    \    pop!(!Matched::IdDict{K, V}, ::Any) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:124\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgbapozas.jl:42\n   [2] macro expansion\n     @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbapozas.jl:228\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    for i in 1:length(arr)\n        if arr[i]<=arr[i+1]\n   \
    \         return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfl1pr2av.jl:45\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfl1pr2av.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfl1pr2av.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpfl1pr2av.jl:46\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfl1pr2av.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfl1pr2av.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfl1pr2av.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0 return true\
    \ end\n    c = 0\n    for i = 2:length(arr)\n        if arr[i] >= arr[i-1] c +=\
    \ 1 end\n    end\n    return c == length(arr)-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn5qqelfv.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5qqelfv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5qqelfv.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpn5qqelfv.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn5qqelfv.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5qqelfv.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn5qqelfv.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    first_instance = []\n    last_instance\
    \ = []\n    min_ = []\n    for i = 1:length(arr)\n        push!(first_instance,\
    \ findfirst(arr[i], arr))\n        push!(last_instance, findlast(arr[i], arr))\n\
    \        push!(min_, minimum(arr))\n    end\n    if length(unique(first_instance))\
    \ == length(unique(last_instance))\n        if length(unique(first_instance))\
    \ == length(unique(min_))\n            return true\n        else\n           \
    \ return false\n        end\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa11gouvy.jl:51\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: no method matching\
    \ findfirst(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Union{AbstractString, AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpa11gouvy.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa11gouvy.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa11gouvy.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpa11gouvy.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: no method matching findfirst(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Union{AbstractString, AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpa11gouvy.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa11gouvy.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa11gouvy.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpa11gouvy.jl:53\n  Test threw exception\n  Expression:\
    \ ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa11gouvy.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvpn1fryh.jl:35\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvpn1fryh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvpn1fryh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpvpn1fryh.jl:36\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvpn1fryh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvpn1fryh.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpvpn1fryh.jl:39\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvpn1fryh.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvpn1fryh.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvpn1fryh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0\n        return\
    \ true\n    end\n    for i=1:length(arr)\n        if i==1 && arr[1]==minimum(arr)\n\
    \            #println(\"yep\")\n            true\n        elseif i==length(arr)\
    \ && arr[i]==maximum(arr)\n            #println(\"yep\")\n            true\n \
    \       elseif arr[i]<arr[i-1] && arr[i]>=minimum(arr)\n            #println(\"\
    yep\")\n            true\n        elseif arr[i]>arr[i+1] && arr[i]<=maximum(arr)\n\
    \            #println(\"yep\")\n            true\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp88y0l9g_.jl:55\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp88y0l9g_.jl:38\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp88y0l9g_.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp88y0l9g_.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp88y0l9g_.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp88y0l9g_.jl:38\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp88y0l9g_.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp88y0l9g_.jl:54\ntest set:\
    \ Error During Test at /tmp/tmp88y0l9g_.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp88y0l9g_.jl:38\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp88y0l9g_.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp88y0l9g_.jl:54\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88y0l9g_.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy66gi1m0.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy66gi1m0.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy66gi1m0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy66gi1m0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpy66gi1m0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpy66gi1m0.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy66gi1m0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy66gi1m0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Your code goes here..\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpus2mobxh.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpus2mobxh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpus2mobxh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpus2mobxh.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpus2mobxh.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpus2mobxh.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpus2mobxh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    ## Write your code here\n    if isempty(arr)\n        return\
    \ true\n    end\n    count = 0\n    last = 0\n    for i in 2:length(arr)\n   \
    \     if arr[i] < arr[i-1]\n            count += 1\n            last = i\n   \
    \     end\n    end\n    if count > 1\n        return false\n    end\n    if count\
    \ == 0\n        return true\n    end\n    if last == 2\n        return true\n\
    \    end\n    if last == length(arr)\n        return false\n    end\n    if arr[last-1]\
    \ > arr[last+1]\n        return false\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmktx8z54.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmktx8z54.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmktx8z54.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpmktx8z54.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmktx8z54.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmktx8z54.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmktx8z54.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0 \n        return\
    \ true\n    end\n    sorted_arr=sort(arr)\n    count=0\n    for i in 1:length(arr)\n\
    \        if arr[i]==sorted_arr[i]\n            count+=1\n        end\n    end\n\
    \    if count==length(arr)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqyqgjl6p.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyqgjl6p.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyqgjl6p.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpqyqgjl6p.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqyqgjl6p.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyqgjl6p.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqyqgjl6p.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    for i in\
    \ 1:N-1\n        if arr[i] > arr[i+1]\n            break\n        end\n    end\n\
    \    if i == N-1\n        return true\n    end\n    min_in_min_subarray = minimum(arr[i+1:N])\n\
    \    max_in_min_subarray = maximum(arr[i+1:N])\n    if maximum(arr[1:i]) < min_in_min_subarray\n\
    \        return true\n    elseif min_in_min_subarray < minimum(arr[1:i]) < max_in_min_subarray\n\
    \        return true\n    elseif min_in_min_subarray < minimum(arr[1:i])\n   \
    \     return false\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzh910azd.jl:54\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: i not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzh910azd.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzh910azd.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzh910azd.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpzh910azd.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzh910azd.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzh910azd.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzh910azd.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpzh910azd.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzh910azd.jl:34\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzh910azd.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzh910azd.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpzh910azd.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpzh910azd.jl:34\n\
    \   [2] macro expansion\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzh910azd.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \"\"\"Takes an input array of\
    \ N integers and returns a boolean value True or False.\n    If it is possible\
    \ to get the array sorted in non-decreasing order by performing\n    right shift\
    \ operation then returns True else returns False.\n    \"\"\"\n    #Return True\
    \ when the given array is empty\n    if isempty(arr)\n        return true\n  \
    \  end\n    #Sorting the array in ascending order\n    sort!(arr)\n    #Checking\
    \ if the elements of the sorted array are in non-decreasing order\n    for i in\
    \ eachindex(arr)\n        if i < length(arr)\n            if arr[i] > arr[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpikzc7tel.jl:55\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikzc7tel.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikzc7tel.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpikzc7tel.jl:56\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpikzc7tel.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikzc7tel.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikzc7tel.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #array_length = length(arr)\n\
    \    return Base.sort(arr) == arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97xh7tvd.jl:36\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97xh7tvd.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97xh7tvd.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp97xh7tvd.jl:37\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp97xh7tvd.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97xh7tvd.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97xh7tvd.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    # Find the\
    \ minimum and maximum\n    mini, maxi = minimum(arr), maximum(arr)\n    # If the\
    \ difference between the max and min is greater than 1, then return false\n  \
    \  if maxi - mini > 1\n        return false\n    end\n    # If any of the elements\
    \ except the last are out of place, then it can't be fixed by rotation. \n   \
    \ # E.g. 3,2,1,4. \n    for i = 1:N-1\n        if arr[i] > arr[i+1]\n        \
    \    return false\n        end\n    end\n    # The only case where the array can\
    \ be fixed by a rotation is when all but the last elements are in \n    # sorted\
    \ order, and the last element is maximum. E.g. 1,2,3,5.\n    if arr[N] == maxi\n\
    \        return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi02fxdi1.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi02fxdi1.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi02fxdi1.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpi02fxdi1.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi02fxdi1.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi02fxdi1.jl:53\ntest set: Error\
    \ During Test at /tmp/tmpi02fxdi1.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi02fxdi1.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    if n == 0\
    \ return true end\n    mn = minimum(arr)\n    ind = findall(arr .== mn)\n    l\
    \ = length(ind)\n    if l == n return true end\n    for i = 1:l-1\n        if\
    \ arr[ind[i+1]-1] > mn\n            return false\n        end\n    end\n    if\
    \ arr[1] > mn return false end\n    return true\nend\nprintln(move_one_ball([1,\
    \ 2, 3, 4, 5]))\nprintln(move_one_ball([1, 2, 3, 4, 5, 6]))\nprintln(move_one_ball([6,\
    \ 1, 2, 3, 4, 5]))\nprintln(move_one_ball([3, 4, 5, 1, 2]))\nprintln(move_one_ball([3,\
    \ 5, 4, 1, 2]))\nprintln(move_one_ball([3, 5, 4, 1, 2, 6]))\nprintln(move_one_ball([3,\
    \ 5, 4, 1, 2, 6, 7]))\nprintln(move_one_ball([3, 5, 4, 1, 2, 6, 7, 8]))\nprintln(move_one_ball([3,\
    \ 6, 5, 1, 2, 4, 7, 8]))\nprintln(move_one_ball([3, 6, 5, 1, 2, 4, 7, 8, 9]))\n\
    println(move_one_ball([3, 6, 5, 1, 2, 4, 7, 8, 9, 10]))\nprintln(move_one_ball([3,\
    \ 6, 5, 1, 2, 4, 7, 8, 9, 10, 11]))\nprintln(move_one_ball([3, 6, 5, 1, 2, 4,\
    \ 7, 8, 9, 10, 11, 12]))\nprintln(move_one_ball([3, 6, 5, 1, 2, 4, 7, 8, 9, 10,\
    \ 11, 12, 13]))\nprintln(move_one_ball([3, 6, 5, 1, 2, 4, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]))\n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n\
    false\nfalse\nfalse\nfalse\ntest set: Test Failed at /tmp/tmpwiwwiq87.jl:63\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwiwwiq87.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwiwwiq87.jl:62\ntest set: Test\
    \ Failed at /tmp/tmpwiwwiq87.jl:64\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwiwwiq87.jl:64 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwiwwiq87.jl:62\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwiwwiq87.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    shift_counter = 0\n    while length(arr)\
    \ > 1\n        if arr[end] < arr[end-1]\n            arr = circshift(arr,1)\n\
    \            shift_counter += 1\n        else\n            break\n        end\n\
    \    end\n    if shift_counter >= length(arr)\n        return false\n    else\n\
    \        return true\n    end\nend\n@assert move_one_ball([3, 4, 5, 1, 2]) ==\
    \ true\n@assert move_one_ball([3, 5, 4, 1, 2]) == false\n@assert move_one_ball([2,\
    \ 3, 4, 5, 1]) == true\n@assert move_one_ball([3, 5, 2, 4, 1]) == false\n@assert\
    \ move_one_ball([4, 3, 5, 2, 1]) == false\n@assert move_one_ball([4, 2, 5, 3,\
    \ 1]) == true\n@assert move_one_ball([5, 4, 3, 2, 1]) == false\n@assert move_one_ball([5,\
    \ 3, 4, 2, 1]) == true\n@assert move_one_ball([5, 2, 4, 3, 1]) == true\n@assert\
    \ move_one_ball([]) == true\nprintln(\"Great job! All tests are passed.\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: move_one_ball([3, 5, 4, 1, 2]) == false\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpki0d3c91.jl:44\nin expression\
    \ starting at /tmp/tmpki0d3c91.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # find the smallest element\n\
    \    # find the 2nd smallest element\n    # find the position of smallest element\n\
    \    # find the position of 2nd smallest element\n    # find the number of right\
    \ shifts\n    # find the number of elements greater than the smallest element\n\
    \    # find the number of elements lesser than the smallest element\n    # if\
    \ the number of right shifts equals the number of elements greater than\n    #\
    \ the smallest element and the number of elements lesser than the smallest\n \
    \   # element then return True else return False\n    if length(arr) == 0 \n \
    \       return true\n    end\n    # Smallest element in arr\n    l = arr[1]\n\
    \    l_index = 1\n    # The second smallest element in arr\n    s = arr[1]\n \
    \   s_index = 1\n    for (i, a) in enumerate(arr)\n        if a < l\n        \
    \    s = l\n            s_index = l_index\n            l = a\n            l_index\
    \ = i\n        elseif a < s\n            s = a\n            s_index = i\n    \
    \    end\n    end\n    n_right_shifts = s_index - l_index\n    greater_than_l\
    \ = 0\n    for a in arr\n        if a > l\n            greater_than_l += 1\n \
    \       end\n    end\n    lesser_than_l = length(arr) - greater_than_l - 1\n \
    \   if n_right_shifts == greater_than_l && lesser_than_l == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplo805vbc.jl:77\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo805vbc.jl:77 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo805vbc.jl:76\ntest set: Test\
    \ Failed at /tmp/tmplo805vbc.jl:78\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplo805vbc.jl:78 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo805vbc.jl:76\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo805vbc.jl:74\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n  sorted_arr = sort(arr)\n  if (length(arr)\
    \ == 0)\n    return true\n  elseif (arr == sorted_arr)\n    return true\n  else\n\
    \    # Get the index of the smallest item in the array\n    idx = findall(sorted_arr[1]\
    \ .== arr)[1]\n    # Check whether it is possible to sort the array by shifting\
    \ any number of times\n    # ending in that index\n    c = count(arr[idx+1:end]\
    \ .== sorted_arr[idx+1:end])\n    return (c == length(arr) - idx)\n  end\nend\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp735mzhdw.jl:48\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp735mzhdw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp735mzhdw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp735mzhdw.jl:49\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp735mzhdw.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp735mzhdw.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp735mzhdw.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    ball_counts = [0 for i in 1:range(arr)[end]+1]\n\
    \    for i in 1:length(arr)\n        ball_counts[arr[i]] = ball_counts[arr[i]]\
    \ + 1\n    end\n    min_ball_count = 0\n    sum_balls = 0\n    for i in 1:length(ball_counts)\n\
    \        min_ball_count = min(ball_counts[i], sum_balls)\n        sum_balls =\
    \ sum_balls + ball_counts[i]\n    end\n    return min_ball_count == 1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_sehyhr.jl:45\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  ArgumentError: Cannot construct\
    \ range from arguments:\n  start = [3, 4, 5, 1, 2]\n  step = nothing\n  stop =\
    \ nothing\n  length = nothing\n  Try specifying more arguments.\n  \n  Stacktrace:\n\
    \   [1] range_error(start::Vector{Int64}, step::Nothing, stop::Nothing, length::Nothing)\n\
    \     @ Base ./range.jl:199\n   [2] _range(start::Vector{Int64}, step::Nothing,\
    \ stop::Nothing, len::Nothing)\n     @ Base ./range.jl:125\n   [3] range(start::Vector{Int64};\
    \ stop::Nothing, length::Nothing, step::Nothing)\n     @ Base ./range.jl:109\n\
    \   [4] range(start::Vector{Int64})\n     @ Base ./range.jl:109\n   [5] move_one_ball(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp9_sehyhr.jl:28\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp9_sehyhr.jl:45 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp9_sehyhr.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp9_sehyhr.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  ArgumentError: Cannot construct range\
    \ from arguments:\n  start = [3, 5, 10, 1, 2]\n  step = nothing\n  stop = nothing\n\
    \  length = nothing\n  Try specifying more arguments.\n  \n  Stacktrace:\n   [1]\
    \ range_error(start::Vector{Int64}, step::Nothing, stop::Nothing, length::Nothing)\n\
    \     @ Base ./range.jl:199\n   [2] _range(start::Vector{Int64}, step::Nothing,\
    \ stop::Nothing, len::Nothing)\n     @ Base ./range.jl:125\n   [3] range(start::Vector{Int64};\
    \ stop::Nothing, length::Nothing, step::Nothing)\n     @ Base ./range.jl:109\n\
    \   [4] range(start::Vector{Int64})\n     @ Base ./range.jl:109\n   [5] move_one_ball(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp9_sehyhr.jl:28\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_sehyhr.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    arr_copy = deepcopy(arr)\n   \
    \ (max_idx, max_val) = findmax(arr)\n    (min_idx, min_val) = findmin(arr)\n \
    \   if max_val > min_val\n        deleteat!(arr_copy, max_idx)\n        arr_copy\
    \ = rotl(arr_copy, 1)\n        return all(x->x<=y, arr_copy)\n    else\n     \
    \   return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcr363d3i.jl:46\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcr363d3i.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr363d3i.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcr363d3i.jl:47\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcr363d3i.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr363d3i.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpcr363d3i.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcr363d3i.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # You can have any number of additional\
    \ variables\n    # and functions as well.\n    # Your code starts here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7t58il14.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7t58il14.jl:1\n\
    in expression starting at /tmp/tmp7t58il14.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    p = 1\n    a = []\n    while p < length(arr) && arr[p] <=\
    \ arr[p+1]\n        push!(a,arr[p])\n        p += 1\n    end\n    if length(a)\
    \ == length(arr)\n        return true\n    end\n    q = p\n    while q < length(arr)\
    \ && arr[q] >= arr[q+1]\n        q += 1\n    end\n    if q == length(arr)\n  \
    \      return true\n    end\n    r = q\n    while r < length(arr) && arr[r] <=\
    \ arr[r+1]\n        r += 1\n    end\n    if r == length(arr)\n        return true\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmebliss.jl:63\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbmebliss.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbmebliss.jl:60\ntest set: Test\
    \ Failed at /tmp/tmpbmebliss.jl:64\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbmebliss.jl:64 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbmebliss.jl:60\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmebliss.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)<=1\n        return\
    \ true\n    end\n    N=length(arr)\n    for i=1:N\n        if arr[i]>arr[i+1]\n\
    \            arr2=copy(arr)\n            temp=arr2[i]\n            arr2[i]=arr2[N]\n\
    \            arr2[N]=temp\n            if is_sorted(arr2)\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsdsfn9nv.jl:50\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_sorted\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpsdsfn9nv.jl:38\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsdsfn9nv.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsdsfn9nv.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpsdsfn9nv.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpsdsfn9nv.jl:38\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsdsfn9nv.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsdsfn9nv.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpsdsfn9nv.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpsdsfn9nv.jl:38\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsdsfn9nv.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsdsfn9nv.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpsdsfn9nv.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpsdsfn9nv.jl:38"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsdsfn9nv.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # getting the list of indices\
    \ of minimum values\n    min_positions = findmin(arr)[2] \n    # if the first\
    \ minimum is found in the first index \n    # then return true else false\n  \
    \  return min_positions[1] == 1\nend\n \n    \n    \n\"\"\"We are given an array\
    \ 'arr' of N integers. The array contains elements that \n    are in the range\
    \ [1, N] (inclusive). Our task is to check if it is possible\n    to obtain an\
    \ array where every element of the array has a value that is \n    equal to the\
    \ index number.\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5g7bzss.jl:37\nin expression starting at\
    \ /tmp/tmpr5g7bzss.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\n\
    \        return true\n    end\n    candidate = arr[1]\n    for i = 2:N\n     \
    \   if arr[i] < candidate\n            candidate = arr[i]\n        end\n    end\n\
    \    min_idx = argmin(arr)\n    max_idx = argmax(arr)\n    last_idx = length(arr)\n\
    \    if candidate == arr[min_idx]\n        return isequal(arr[min_idx:max_idx],\
    \ sort(arr[min_idx:max_idx], rev=true)) || isequal(arr[max_idx:last_idx], sort(arr[max_idx:last_idx]))\n\
    \    else\n        return isequal(arr[min_idx:max_idx], sort(arr[min_idx:max_idx]))\
    \ || isequal(arr[max_idx:last_idx], sort(arr[max_idx:last_idx], rev=true))\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28pdqnca.jl:54\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp28pdqnca.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28pdqnca.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp28pdqnca.jl:55\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp28pdqnca.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp28pdqnca.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28pdqnca.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n   if length(arr) == 0 return true\
    \ end\n   sorted = sort(arr)\n   for i in 1:length(arr)\n       if sorted[i] !=\
    \ arr[mod1(i, length(arr))]\n           return false\n       end\n   end\n   return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl_xnh30n.jl:42\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl_xnh30n.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xnh30n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpl_xnh30n.jl:43\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl_xnh30n.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl_xnh30n.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_xnh30n.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # Your code goes here ...\n  \
    \  return true\nend\n\"\"\"Check the given string\n \n    For Example:\n    \n\
    \    check_string(\"String\")==>true\n    check_string(\"aabbbbbbccc\")==>true\n\
    \    check_string(\"aabbbbbbcccd\")==>false\n    check_string(\"\")==>true\n \
    \   check_string(\"abc\")==>false\n    check_string(\"String String\")==>false\n\
    \    check_string(\"aaab\")==>false\n    check_string(\"aaabbbcc\")==>false\n\
    \    check_string(\"aaabbbccd\")==>false\n    check_string(\"aaabbbbcc\")==>true\n\
    \    check_string(\"aaabbbbccd\")==>false\n    check_string(\"aabbbbbccc\")==>true\n\
    \    check_string(\"aaabbbbbccc\")==>true\n    check_string(\"ab\")==>false\n\
    \    check_string(\"a\")==>true\n    check_string(\"aab\")==>true\n    check_string(\"\
    aabb\")==>true\n    check_string(\"aaabb\")==>true\n    check_string(\"aabbb\"\
    )==>true\n    check_string(\"aabbbc\")==>true\n    check_string(\"aabbbbc\")==>true\n\
    \    check_string(\"aabbbbbc\")==>true\n    check_string(\"aabbbbbbc\")==>true\n\
    \    check_string(\"aaabbbbc\")==>true\n    check_string(\"aaabbbbbc\")==>true\n\
    \    check_string(\"aaabbbbbbc\")==>true\n    check_string(\"aabbbbbbbc\")==>true\n\
    \    check_string(\"aaaabbbbc\")==>true\n    check_string(\"aaaabbbbbc\")==>true\n\
    \    check_string(\"aaaabbbbbbc\")==>true\n    check_string(\"aaabbbbbbbc\")==>true\n\
    \    check_string(\"aaaabbbbbbbc\")==>true\n    check_string(\"aaabbbbbbbbc\"\
    )==>true\n    check_string(\"aabbbbbbbbbc\")==>true\n    check_string(\"aaaabbbbbbbbc\"\
    )==>\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4czjank0.jl:31\nin expression starting at\
    \ /tmp/tmp4czjank0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    minval, minidx = findmin(arr)\n\
    \    if minidx == 1 return true end\n    for i in 1:minidx-1 \n        if arr[i]\
    \ > minval return false end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei5_oh69.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpei5_oh69.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpei5_oh69.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpei5_oh69.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpei5_oh69.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpei5_oh69.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpei5_oh69.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmin\n\
    \      @ ./reduce.jl:862 [inlined]\n   [11] _findmin\n      @ ./reduce.jl:888\
    \ [inlined]\n   [12] #findmin#783\n      @ ./reducedim.jl:1005 [inlined]\n   [13]\
    \ findmin\n      @ ./reducedim.jl:1005 [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei5_oh69.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)==0 return true\
    \ end\n    N = length(arr)\n    operation = 0\n    while operation<N-1\n     \
    \   if arr[operation+1]<arr[operation]\n            N+=1\n            arr = [arr[operation+1:end];arr[1:operation]]\n\
    \        else\n            operation+=1\n        end\n    end\n    return arr==sort(arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpngq16lf6.jl:46\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpngq16lf6.jl:32\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpngq16lf6.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpngq16lf6.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpngq16lf6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpngq16lf6.jl:32\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpngq16lf6.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpngq16lf6.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpngq16lf6.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpngq16lf6.jl:32\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpngq16lf6.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpngq16lf6.jl:45\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngq16lf6.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    N = n - 1\n\
    \    if n == 0 \n        return true\n    end\n    for i in 1:N\n        for j\
    \ in i+1:n\n            if arr[i] > arr[j]\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n    end\n    if all(arr[i] <= arr[i+1]\
    \ for i in 1:N)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydc7df7u.jl:53\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydc7df7u.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydc7df7u.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpydc7df7u.jl:54\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydc7df7u.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydc7df7u.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydc7df7u.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n  #Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_cx2nm2c.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_cx2nm2c.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_cx2nm2c.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cx2nm2c.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_cx2nm2c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp_cx2nm2c.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_cx2nm2c.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cx2nm2c.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n        min_val = Vector{Int64}()\n\
    \        push!(min_val, arr[1])\n        for i in 2:length(arr)\n            push!(min_val,\
    \ min(arr[i], min_val[end]))\n        end\n        for i in length(arr):-1:2\n\
    \            if arr[i] > min_val[i-1]\n                return false\n        \
    \    end\n        end\n        return true\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc39baz_h.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc39baz_h.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc39baz_h.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpc39baz_h.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc39baz_h.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc39baz_h.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpc39baz_h.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpc39baz_h.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc39baz_h.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc39baz_h.jl:44\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc39baz_h.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n  \n    N = length(arr)\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7c0wps8r.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7c0wps8r.jl:1\n\
    in expression starting at /tmp/tmp7c0wps8r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    arr = sort(arr)\n    for i in 1:length(arr)-1\n        if\
    \ arr[i+1] - arr[i] > 1\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxgi9v7j.jl:45\n  Expression: candidate([3,\
    \ 5, 10, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxgi9v7j.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxgi9v7j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpaxgi9v7j.jl:46\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxgi9v7j.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxgi9v7j.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpaxgi9v7j.jl:47\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaxgi9v7j.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxgi9v7j.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxgi9v7j.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # NOTE: empty array's are always\
    \ sorted\n    if isempty(arr) return true end\n    # start with the smallest possible\
    \ ball to move\n    ball = minimum(arr)\n    #  determine the index of the current\
    \ ball\n    index = findfirst(arr, ball)\n    # sort the array by performing right\
    \ shifts\n    for i in 1:size(arr, 1)\n        # sort the balls up to the current\
    \ ball\n        push!(arr, popfirst!(arr))\n        # check if the current ball\
    \ is in the correct position\n        if arr[index] != ball\n            # wrong\
    \ position, so move on to the next ball\n            ball = sort(vcat(arr[1:index],\
    \ ball))[index]\n            index = findfirst(arr, ball)\n        end\n    end\n\
    \    # now check if there are any balls left out of order\n    if isequal(sort(arr),\
    \ arr) return true end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1_1mexg6.jl:54\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: no method matching\
    \ findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp1_1mexg6.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_1mexg6.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_1mexg6.jl:53\ntest set:\
    \ Error During Test at /tmp/tmp1_1mexg6.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: no method matching findfirst(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\n    findfirst(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp1_1mexg6.jl:33\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_1mexg6.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_1mexg6.jl:53\ntest set:\
    \ Error During Test at /tmp/tmp1_1mexg6.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  MethodError: no method matching findfirst(::Vector{In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_1mexg6.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    for i in\
    \ 1:n\n        if !issorted(arr[i:n])\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb08t05lm.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb08t05lm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb08t05lm.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpb08t05lm.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb08t05lm.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb08t05lm.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb08t05lm.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    \"\"\"\n    min_idx = 0\n\
    \    min_val = arr[1]\n    for i = 1:length(arr)\n        if arr[i] < min_val\n\
    \            min_val = arr[i]\n            min_idx = i\n        end\n    end\n\
    \    \"\"\"\n    shift_num = 0\n    ind = 0\n    count = 0\n    while ind <= length(arr)\n\
    \        println(ind)\n        ind += 1\n        #if ind <= length(arr)\n    \
    \        if arr[ind] >= arr[ind - 1] && count == 0\n                shift_num\
    \ += 1\n                #continue\n            elseif arr[ind] >= arr[ind - 1]\
    \ && count == 1\n                shift_num += 1\n                count = 0\n \
    \               #continue\n            elseif arr[ind] < arr[ind - 1] && count\
    \ == 0\n                count = 1\n                #continue\n            elseif\
    \ arr[ind] < arr[ind - 1] && count == 1\n                #count = 1\n        \
    \        break\n            end\n        #end\n    end\n    println(shift_num)\n\
    \    if shift_num == length(arr)\n        return true\n    else \n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "0\ntest set: Error During Test at /tmp/tmp28asnp_8.jl:74\n  Test threw\
    \ exception\n  Expression: candidate([3, 4, 5, 1, 2]) == true\n  BoundsError:\
    \ attempt to access 5-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp28asnp_8.jl:46\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp28asnp_8.jl:74 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp28asnp_8.jl:73\n0\ntest set:\
    \ Error During Test at /tmp/tmp28asnp_8.jl:75\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp28asnp_8.jl:46\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp28asnp_8.jl:75 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp28asnp_8.jl:73\n0\ntest set:\
    \ Error During Test at /tmp/tmp28asnp_8.jl:76\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp28asnp_8.jl:46\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp28asnp_8.jl:76 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp28asnp_8.jl:73\n0\ntest set: "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28asnp_8.jl:71\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    sort_arr = sort(arr)\n    last_elem = sort_arr[1]\n    for\
    \ i in sort_arr[2:end]\n        if i == last_elem\n            return false\n\
    \        end\n        last_elem = i\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7q8jhm_w.jl:48\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7q8jhm_w.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q8jhm_w.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp7q8jhm_w.jl:49\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7q8jhm_w.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q8jhm_w.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7q8jhm_w.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr)<=1\n        return\
    \ true\n    end\n    temp=arr[1]\n    for i in 2:length(arr)\n        if temp<=arr[i]\n\
    \            temp=arr[i]\n        else\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fru0pxn.jl:46\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fru0pxn.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fru0pxn.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp3fru0pxn.jl:47\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3fru0pxn.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fru0pxn.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fru0pxn.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    \"\"\"\n    arr=Array of\
    \ integers.\n    \"\"\"\n    \n    if length(arr)==0\n        return true\n  \
    \  end\n    \n    sorted_arr=sort(arr)\n    diff=Int64[]\n    for (i,elem) in\
    \ enumerate(arr)\n        push!(diff,abs(elem-sorted_arr[i]))\n    end\n    if\
    \ length(diff)>=3\n        return diff[1]==1 && diff[2]==1 && diff[3]==1 && diff[end]==1\n\
    \    elseif length(diff)==2\n        return diff[1]==1 && diff[2]==1\n    elseif\
    \ length(diff)==1\n        return diff[1]==1\n    else\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdlzc15gb.jl:57\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlzc15gb.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlzc15gb.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpdlzc15gb.jl:58\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdlzc15gb.jl:58 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlzc15gb.jl:56\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlzc15gb.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_dpju_i.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe_dpju_i.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_dpju_i.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_dpju_i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpe_dpju_i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe_dpju_i.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_dpju_i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_dpju_i.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4fz43qnz.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4fz43qnz.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fz43qnz.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4fz43qnz.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4fz43qnz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4fz43qnz.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fz43qnz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fz43qnz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    max_index\
    \ = argmax(arr) \n    if (max_index == N)\n        return true\n    elseif (max_index\
    \ == 1)\n        return false\n    else\n        for j in 1:N-1\n            if\
    \ (arr[j] > arr[j+1])\n                return false\n            end\n       \
    \ end\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tmj7ppm.jl:48\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5tmj7ppm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tmj7ppm.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp5tmj7ppm.jl:49\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5tmj7ppm.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5tmj7ppm.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp5tmj7ppm.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ #argmax#787\n      @ ./reducedim.jl:1117 [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tmj7ppm.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    if length(arr)==1\n        return true\n    end\n    if length(arr)==2\n\
    \        if arr[1]>arr[2]\n            return false\n        else\n          \
    \  return true\n        end\n    end\n    for i in 1:length(arr)-1\n        if\
    \ arr[i]>arr[i+1]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj3gtr6we.jl:53\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3gtr6we.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3gtr6we.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpj3gtr6we.jl:54\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj3gtr6we.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3gtr6we.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3gtr6we.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    if length(arr) == 1\n        return true\n    end\n    m\
    \ = length(arr)\n    for i in 1:m-1\n        for j in i+1:m\n            if arr[i]\
    \ > arr[j]\n                (arr[i], arr[j]) = (arr[j], arr[i])\n            end\n\
    \        end\n    end\n    for i in 1:m-1\n        if arr[i] > arr[i+1]\n    \
    \        return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nlcvpab.jl:56\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nlcvpab.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nlcvpab.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp1nlcvpab.jl:57\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1nlcvpab.jl:57 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nlcvpab.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nlcvpab.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    for i in 1:length(arr)\n        if arr[i]==i\n          \
    \  continue\n        elseif arr[i] > i\n            if arr[i] > length(arr)\n\
    \                return false\n            end\n            for j in (i+1):length(arr)\n\
    \                if arr[j]==arr[i]\n                    return false\n       \
    \         end\n            end\n            if arr[i]==i+1\n                continue\n\
    \            elseif arr[i] > i+1\n                b = copy(arr)\n            \
    \    b[i+1:arr[i]] = arr[i:arr[i]-1]\n                b[i] = arr[arr[i]]\n   \
    \             if isequal(sort(b),b)\n                    return true\n       \
    \         else\n                    return false\n                end\n      \
    \      end\n        else\n            return false\n        end\n    end\n   \
    \ return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ksn8n7b.jl:66\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ksn8n7b.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ksn8n7b.jl:65\ntest set: Test\
    \ Failed at /tmp/tmp9ksn8n7b.jl:67\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ksn8n7b.jl:67 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ksn8n7b.jl:65\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ksn8n7b.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    \n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiprditgx.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiprditgx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiprditgx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpiprditgx.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiprditgx.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiprditgx.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiprditgx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n        q=sort(arr)\n        if arr==q\n\
    \            return true\n        else\n            return false\n        end\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1uu2h86n.jl:40\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1uu2h86n.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1uu2h86n.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp1uu2h86n.jl:41\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1uu2h86n.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1uu2h86n.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1uu2h86n.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    #Your code here\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiuovzs07.jl:36\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiuovzs07.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiuovzs07.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiuovzs07.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpiuovzs07.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpiuovzs07.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiuovzs07.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiuovzs07.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    m = n\n \
    \   for i in 1:n-1\n        if arr[i] > arr[i+1]\n            m = i \n       \
    \     break\n        end\n    end\n    if m == n\n        return true\n    end\n\
    \    for i in m+1:n\n        if arr[i] <= arr[m]\n            return false\n \
    \       end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeld51s6v.jl:51\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeld51s6v.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeld51s6v.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpeld51s6v.jl:52\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeld51s6v.jl:52 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeld51s6v.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeld51s6v.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # YOUR CODE HERE\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxv_lagm_.jl:38\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxv_lagm_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv_lagm_.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxv_lagm_.jl:39\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxv_lagm_.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv_lagm_.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxv_lagm_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if !isempty(arr)\n        current_min\
    \ = arr[1]\n        length_array = length(arr)\n        for i in 1:length_array\n\
    \            if arr[i] < current_min\n                current_min = arr[i]\n \
    \           end\n        end\n        for i in 1:length_array\n            if\
    \ arr[i] == current_min\n                if i == length_array\n              \
    \      return true\n                else\n                    return false\n \
    \               end\n            end\n        end\n    else\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp75tjcwbt.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp75tjcwbt.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp75tjcwbt.jl:53\ntest set: Test\
    \ Failed at /tmp/tmp75tjcwbt.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp75tjcwbt.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp75tjcwbt.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp75tjcwbt.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if N == 0\
    \ \n        return true\n    end \n    if N == 1 \n        return true\n    end\n\
    \    min_ind = 1\n    min_val = arr[1]\n    for i = 2:N\n        if arr[i] < min_val\n\
    \            min_val = arr[i]\n            min_ind = i\n        end\n    end\n\
    \    if N - min_ind == 1\n        return true\n    end\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1j2344c.jl:55\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1j2344c.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1j2344c.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpy1j2344c.jl:56\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy1j2344c.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1j2344c.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1j2344c.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    # write your code here\n   \n\
    \    len = length(arr)\n    if len == 0\n        return true\n    end\n    count\
    \ = 0\n    for i = 1:len\n        if arr[i] == i\n            count = count +\
    \ 1\n        end\n    end\n    if count == len\n        return true\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6z5i9cgt.jl:50\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6z5i9cgt.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6z5i9cgt.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp6z5i9cgt.jl:51\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6z5i9cgt.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6z5i9cgt.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6z5i9cgt.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n        #function code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8uvze1xu.jl:35\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp8uvze1xu.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8uvze1xu.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8uvze1xu.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8uvze1xu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp8uvze1xu.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8uvze1xu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8uvze1xu.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    len = length(arr)\n    len2 =\
    \ 1\n    while(len2<len && arr[len2]<arr[len2+1])\n        len2 += 1\n    end\n\
    \    len3 = len\n    while(len3>1 && arr[len3]>arr[len3-1])\n        len3 -= 1\n\
    \    end\n    return len2>=len3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26glzq3c.jl:44\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26glzq3c.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26glzq3c.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp26glzq3c.jl:45\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp26glzq3c.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26glzq3c.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26glzq3c.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if length(arr) == 0\n        return\
    \ true\n    end\n    idx = indmax(arr)\n    return sort(arr[idx+1:end]) == arr[1:idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp967naay9.jl:39\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: indmax not\
    \ defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp967naay9.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp967naay9.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp967naay9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp967naay9.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: indmax not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp967naay9.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp967naay9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp967naay9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp967naay9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: indmax not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp967naay9.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp967naay9.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp967naay9.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp967naay9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: indmax not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmp967naay9.jl:31\n\
    \   [2] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp967naay9.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    n = length(arr)\n    for i in\
    \ 1:n-1\n        if arr[i] > arr[i+1]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyjfi79e.jl:41\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplyjfi79e.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyjfi79e.jl:40\ntest set: Test\
    \ Failed at /tmp/tmplyjfi79e.jl:42\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplyjfi79e.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyjfi79e.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyjfi79e.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N=length(arr)\n    if N==0 \n\
    \        return true\n    end \n    @assert length(unique(arr))==N\n    for i\
    \ in 1:N\n        if arr[i]!=i\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8laafej.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8laafej.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8laafej.jl:44\ntest set: Test\
    \ Failed at /tmp/tmps8laafej.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps8laafej.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8laafej.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8laafej.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if (length(arr)==0)\n        return\
    \ true\n    end\n    small = count(x->x<arr[1],arr)\n    large = count(x->x>arr[1],arr)\n\
    \    if (small==(length(arr)-1))\n        return true\n    elseif (large==(length(arr)-1))\n\
    \        return true\n    else \n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ytsgzjf.jl:46\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ytsgzjf.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ytsgzjf.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp0ytsgzjf.jl:47\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ytsgzjf.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ytsgzjf.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp0ytsgzjf.jl:48\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ytsgzjf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ytsgzjf.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ytsgzjf.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    N = length(arr)\n    if (N==0)\n\
    \        return true\n    end\n    for i=1:N-1\n        for j=i+1:N\n        \
    \    if arr[i]>arr[j]\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcx93f_x0.jl:48\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx93f_x0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx93f_x0.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpcx93f_x0.jl:49\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcx93f_x0.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx93f_x0.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx93f_x0.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the array will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get an array sorted in non-decreasing order by performing\
    \ \n    the following operation on the given array:\n        You are allowed to\
    \ perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the array by one\n    position in the\
    \ right direction. The last element of the array will be moved to\n    the starting\
    \ position in the array i.e. 0th index. \n\n    If it is possible to obtain the\
    \ sorted array by performing the above operation\n    then return True else return\
    \ False.\n    If the given array is empty then return True.\n\n    Note: The given\
    \ list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3,\
    \ 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n                 be achieved for the given array.\n\
    \    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible\
    \ to get non-decreasing order for the given\n                array by performing\
    \ any number of right shift operations.\n                \n    \"\"\"\nfunction\
    \ move_one_ball(arr::Vector{Int64})::Bool \n    if isempty(arr)\n        return\
    \ true\n    end\n    min_idx = argmin(arr)\n    is_sorted = is_sorted(arr[min_idx+1:end])\n\
    \    if is_sorted\n        if min_idx == 1\n            return true\n        else\n\
    \            if arr[min_idx-1] <= arr[end]\n                return true\n    \
    \        else\n                return false\n            end\n        end\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvg2jjy81.jl:52\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: is_sorted\
    \ not defined\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpvg2jjy81.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvg2jjy81.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg2jjy81.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpvg2jjy81.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpvg2jjy81.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvg2jjy81.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg2jjy81.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpvg2jjy81.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n \
    \ Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpvg2jjy81.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvg2jjy81.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvg2jjy81.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpvg2jjy81.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: is_sorted not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpvg2jjy81.jl:32"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg2jjy81.jl:49\n"
  exit_code: 1
  status: SyntaxError
