name: HumanEval_16_count_distinct_characters
language: jl
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n   \
  \ 3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction count_distinct_characters(string::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["  chars = Set()\n  for c in string\n    push!(chars, c)\n  end\n  return\
    \ length(chars)\nend", "    for i in string, j in 1:length(string)\n        if\
    \ string[i] == string[j]\n            i = j\n            return length(string)\n\
    end", "    count = 0\n    found = Set{Char}()\n    for i in 1:length(string)\n\
    \        if !(string[i] in found)\n            count += 1\n            push!(found,\
    \ string[i])\n        end\n    end\n    return count\nend", "    m = Dict{Char,\
    \ Int}()\n    for char in string\n        m[lowercase(char)] = 1\n    end\n  \
    \  return length(m)\nend", "    return length(unique(uppercase(string)))\nend",
  "    str = lowercase(string)\n    res = Set()\n    for c in str\n        push!(res,\
    \ c)\n    end\n    return length(res)\nend", "    if string == \"\"\n        return\
    \ 0\n    end\n    output = 0\n    for ch in string\n        if !(ch in string[1:end])\n\
    \            output += 1\n        end\n    end\n    return output\nend", "   \
    \ \n    # We are going to store the distinct characters in a dictionary\n    #\
    \ This will ensure they are unique\n    unique_characters = Dict{Char,Int64}()\n\
    \    \n    # Loop through all the characters in the string\n    for c in string\n\
    \        \n        # If the character doesn't exist in the dictionary, add it\n\
    \        if !haskey(unique_characters, c)\n            unique_characters[c] =\
    \ 1\n        end\n        \n    end\n    \n    # Return the number of characters\
    \ in the dictionary\n    return length(unique_characters)\n    \nend", "    \"\
    \"\" returns count of distinct characters in given string \"\"\"\n    return length(unique(lowercase(string)))\n\
    end", "    return length(Set(collect(string)))\nend", "    dict = Dict{String,\
    \ Bool}()\n    for ch in string\n        dict[string(ch)] = true\n    end\n  \
    \  return length(dict)\nend", "    counter = 0\n    for i in 1:length(string)\n\
    \        if !(string[i] in string[1:i-1])\n            counter += 1\n        end\n\
    \    end\n    return counter\nend", "    characters_array = [x for x in string]\n\
    \    return length(unique(characters_array))\nend\n ", "    return length(unique(collect(string)))\n\
    end", "    if string == \"\"\n        return 0\n    end", "    return length(unique(lowercase(string)))\n\
    end", "    string_dict = Dict{Char, Bool}()\n    for c in string\n        string_dict[lowercase(c)]\
    \ = true\n    end\n    return length(string_dict)\nend", "    distinct_characters\
    \ = unique(uppercase(string))\n    return length(distinct_characters)\nend", " \
    \   return length(unique(lowercase(string)))\nend", "    string_lower = lowercase(string)\n\
    \    counter = 0\n    for i = 1:length(string_lower)\n        is_found = false\n\
    \        for j = 1:counter\n            if string_lower[i] == string_lower[j]\n\
    \                is_found = true\n                break\n            end\n   \
    \     end\n        if !is_found\n            counter += 1\n        end\n    end\n\
    \    return counter\nend", "    # your code\nend", "    return length(unique(string))\n\
    end\ncount_distinct_characters(\"AaBbCc\")", "    distinct_chars = Set{Char}()\n\
    \    for c in string\n        push!(distinct_chars, c)\n    end\n    return length(distinct_chars)\n\
    end", "    alpha = unique(lowercase(string))\n    return length(alpha)\nend",
  "    char = Set()\n    for s in string\n        include(\"stdlib.jl\")\n       \
    \ push!(char, s)\n    end\n    length(char)\nend", "    chars = Set(String[])\n\
    \    for c in string\n        push!(chars,lowercase(c))\n    end\n    return length(chars)\n\
    end", "    distinct_chars = Set{Char}()\n    for char in string\n        distinct_chars\
    \ = distinct_chars \u222A Set(char)\n    end\n    return length(distinct_chars)\n\
    end", "    # Get all the letters in the string\n    letters = collect(string)",
  "    return length(unique(lowercase(string)))\nend", "    characters = Set()\n \
    \   for character in string\n        push!(characters, character)\n    end\n \
    \   return length(characters)\nend", "    return length(unique(lowercase(string)))\n\
    end", "    return length(unique(collect(string)))\nend", "    return length(unique(lowercase(string)))\n\
    end", "    return length(unique(lowercase(string)))\nend", "    characters = Set{String}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend", "    seen = []\n    for c in string\n  \
    \      if !(c in seen)\n            push!(seen, c)\n        end\n    end\n   \
    \ return length(seen)\nend\n    ", "    # function letter(c::Char)\n    #    \
    \ if (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')\n    #         return Char(c)\n\
    \    #     else \n    #         return ' '\n    #     end\n    # end\n    # letters\
    \ = map(string) do c\n    #     letter(c)\n    # end\n    # uniq_chars = unique(letters)\n\
    \    # return length(uniq_chars) - 1\n    letters = unique(filter(string, c ->\
    \ c in 'a':'z' || c in 'A':'Z'))\n    return length(letters)\nend", "    temp\
    \ = uppercase(string)\n    dis_char = Set(temp)\n    return length(dis_char)\n\
    end", "  # We can use set() to drop duplicate elements\n  string = String(set(string))\n\
    \  # However, the result of set() is a vector of type Char\n  # We can use length()\
    \ to get the number of elements\n  return length(string)\nend", "    string =\
    \ tolower(string)\n    num_distinct_characters = length(Set(string))\nend\n\"\"\
    \" Given a list, remove consecutive duplicates from the list\n    >>> remove_consecutive_duplicates([1,\
    \ 1, 1, 2, 2, 2, 1, 1, 3, 3, 3, 1, 1, 1])\n    [1, 2, 1, 3, 1]\n    >>> remove_consecutive_duplicates([1,\
    \ 1, 2, 3, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3])\n    [1, 2, 3, 1, 2, 3]\n    \"\"\"",
  "    dist_chars = Set{Char}() \n    for c in string \n        dist_chars = union(dist_chars,\
    \ Set([c]))\n    end\n    length(dist_chars)\nend", "    return length(unique(uppercase(string)))\n\
    end", "    count = 0\n    for ch in string\n        if !count(ch)\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    string_norm\
    \ = lowercase(string)\n    return length(unique(string_norm))\nend", "    \n \
    \   no_of_distinct_characters = length(unique(lowercase(string)))\n    return\
    \ no_of_distinct_characters\nend", "    string_lowercase = lowercase(string)\n\
    \    unique_chars = unique(string_lowercase)\n    count_unique_chars = length(unique_chars)\n\
    \    return count_unique_chars\nend", "    string_set = Set{Char}()\n    for char\
    \ in string\n        push!(string_set, char)\n    end\n    return length(string_set)\n\
    end\n    \n    \n\"\"\" Given a string, remove all the adjacent duplicates (regardless\
    \ of case)\n    >>> remove_adjacent_duplicates('yyybbbYYYBBB')\n    'ybYB'\n \
    \   >>> remove_adjacent_duplicates('xyzXYZ')\n    'xyzXYZ'\n    \"\"\"", "   \
    \ characters = Set{Char}()\n    for character in string\n        push!(characters,\
    \ lowercase(character))\n    end\n    return length(characters)\nend\n ", "  \
    \  distinct_characters = Set(string)\n    return length(distinct_characters)\n\
    end", "    dict = Dict()\n    for char in string\n        dict[lowercase(char)]\
    \ = 1\n    end\n    return length(keys(dict))\nend", "    unique_characters =\
    \ Set{Char}()\n    for character in string\n        push!(unique_characters, character)\n\
    \    end\n    return length(unique_characters)\nend\n ", "    set = Set()\n  \
    \  for c in string\n        push!(set,lowercase(c))\n    end\n    return length(set)\n\
    end", "    chars = Set{Char}()\n    for c in string\n        push!(chars, c)\n\
    \    end\n    return length(chars)\nend", "    chars = Dict{Char, Int64}()\n \
    \   for c in string\n        chars[lowercase(c)] = 0\n    end\n    return length(chars)\n\
    end", "    return length(unique(lowercase(string)))\nend", "  s = Set{Char}()\n\
    \  for c in collect(string)\n    push!(s, c)\n  end\n  return length(s)\nend",
  "    characters = Set()\n    for s in string\n        push!(characters, lowercase(s))\n\
    \    end\n    return length(characters)\nend\n \n \n\"\"\" Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"", '    all_characters = Set()', "    unique_characters = Set{Char}()\n\
    \    for character in string\n        push!(unique_characters, character)\n  \
    \  end\n    return length(unique_characters)\nend", "    number_of_distinct_characters\
    \ = 0\n    characters_seen = Set{Char}()\n    for i in 1:length(string)\n    \
    \    if !haskey(characters_seen, string[i])\n            number_of_distinct_characters\
    \ += 1\n            push!(characters_seen, string[i])\n        end\n    end\n\
    \    return number_of_distinct_characters\nend", "    unique_characters = unique(string)\n\
    \    length(unique_characters)\nend", "    characters_dict = Dict()\n    for character\
    \ in string\n        characters_dict[lowercase(character)] = true\n    end\n \
    \   return length(characters_dict)\nend", "    str = lowercase(string)\n    count\
    \ = 0\n    seen = Set([])\n    for i = 1:length(str)\n        if !haskey(seen,\
    \ str[i])\n            count += 1\n            push!(seen, str[i])\n        end\n\
    \    end\n    return count\nend", "    if string == \"\"\n        return 0\n \
    \   end\n    s = string[1]\n    count = 1\n    for i in 2:length(string)\n   \
    \     if string[i] != s\n            count += 1\n            s = string[i]\n \
    \       end\n    end\n    return count\nend", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    hash = Dict{Char,Int64}()\n    for c in string\n        if lowercase(c)\
    \ in alphabet\n            if c in hash\n                hash[c] += 1\n      \
    \      else\n                hash[c] = 1\n            end\n        end\n    end\n\
    \    return length(hash)\nend\ncount_distinct_characters(\"xyzXYZ\")", "    #\
    \ initialize a hash set\n    unique_chars = Set{Char}()\n    # add each character\
    \ to the set\n    for char in string\n        push!(unique_chars,char)\n    end\n\
    \    # return the length of the set\n    return length(unique_chars)\nend", " \
    \   distict_chars = Set()\n    for c in string\n        push!(distict_chars, lowercase(c))\n\
    \    end\n    return length(distict_chars)\nend", "    char_set = Set()\n    for\
    \ c in string\n        push!(char_set, tolower(c))\n    end\n    return length(char_set)\n\
    end", "    characters = collect(Set{Char}(string))\n    return length(characters)\n\
    end", "    s = Set()\n    for c in string\n        s = Set(s .| uppercase(c))\n\
    \    end\n    return length(s)\nend", "    n = 0\n    for i in 1:length(string)\n\
    \        if i == 1\n            n += 1\n        else\n            if string[i]\
    \ in string[1:i-1]\n                continue\n            else\n             \
    \   n += 1\n            end\n        end\n    end\n    return n\nend", "    return\
    \ length(unique(collect(string)))\nend", "    characters = Set()\n    for char\
    \ in string\n        push!(characters, char)\n    end\n    return length(characters)\n\
    end", "    characters = Set{Char}()\n    for character in string\n        push!(characters,\
    \ character)\n    end\n    return length(characters)\nend", "    character_set\
    \ = Set()\n    for character in string\n        character_set = push!(character_set,\
    \ lowercase(character))\n    end\n    length(character_set)\nend", "    unique_characters\
    \ = Set{Char}()\n    for c in string\n        push!(unique_characters,c)\n   \
    \ end\n    length(unique_characters)\nend", "    # Create an empty set for unique\
    \ characters\n    unique = Set()\n    # Push characters to the set\n    for character\
    \ in string\n        push!(unique, character)\n    end\n    # Return the size\
    \ of the set\n    return length(unique)\nend", "    string_array = [x for x in\
    \ string]\n    return length(unique(map(uppercase, string_array)))\nend", "  \
    \  distinct_characters = Set()\n    for character in string\n        distinct_characters.add(character)\n\
    \    end\n    return distinct_characters.length\nend", "    return length(Set(string))\n\
    end", "    characters = Set(string[i] for i in 1:length(string))\n    return length(characters)\n\
    end", "    return length(unique(uppercase(string)))\nend", "    for counter =\
    \ Int64(0) in string\n        # ASCII A is 65\n        # ASCII Z is 90\n     \
    \   # ASCII a is 97\n        # ASCII z is 122\n        if Int64(counter) in 65:90\n\
    \            unique_array.push_back(counter)\n        elseif Int64(counter) in\
    \ 97:122\n            unique_array.push_back(counter)\n        end\n    end\n\
    \    return unique_array.size()\nend", "    if string == \"\"\n        return\
    \ 0\n    end\n    string = lowercase(string)\n    count = 1\n    for i in range(1,\
    \ length(string))\n        if string[i] != string[i-1]\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    char_counts = Dict{Char, Int64}()\n\
    \    for char in string\n        char_counts[char] = get(char_counts, char, 0)\
    \ + 1\n    end\n    length(char_counts)\nend", "    seen_characters = Dict{String,\
    \ Bool}()\n    for character in string\n        seen_characters[uppercase(character)]\
    \ = true\n    end\n    return length(seen_characters)\nend", "    return length(unique(lowercase(string)))\n\
    end", "    \n    # declare an empty array \n    distinct_chars = []\n    \n  \
    \  # for each letter in the string\n    for letter in string\n        # if the\
    \ letter is not in the array\n        if !(letter in distinct_chars)\n       \
    \     # then push it to the array\n            push!(distinct_chars, letter)\n\
    \        end\n    end\n    \n    # return the length of the array\n    return\
    \ length(distinct_chars)\nend", "    characters = Set{Char}()\n    for character\
    \ in string\n        push!(characters, character)\n    end\n    return length(characters)\n\
    end", "    num_chars = 0\n    distinct_chars = Set()\n    for char in string\n\
    \        if !in(char, distinct_chars)\n            num_chars += 1\n          \
    \  push!(distinct_chars, char)\n        end\n    end\n    return num_chars\nend",
  "    return length(unique(lowercase(string)))\nend", "    len(Set(string))\nend",
  "    return length(unique(lowercase(string)))\nend\n# Call the function and show\
    \ the result\ncount_distinct_characters(\"python\")", " \n    # 1. Convert string\
    \ to lower case\n    # 2. Take out distinct characters\n    # 3. Count the number\
    \ of distinct characters\n    \n    return length(collect(Set(lowercase(string))))\n\
    end", "    return length(unique(collect(string)))\nend", "    str = lowercase(string)\n\
    \    ind_vec = Vector{Int64}()\n    for chr in str\n        push!(ind_vec,findfirst(str,chr))\n\
    \    end\n    return length(unique(ind_vec))\nend\n ", "    \n    #convert string\
    \ to list of characters\n    chars = string |> collect\n    \n    #convert list\
    \ of characters to lowercase\n    chars = [string(c)::LowercaseString for c in\
    \ chars]\n    \n    #compute number of distinct characters\n    distinct_characters\
    \ = length(unique(chars))\n    \n    return distinct_characters\nend", "    characters_array\
    \ = Set{Char}()\n    for c in string\n        push!(characters_array, c)\n   \
    \ end\n    return length(characters_array)\nend", "    count = 0\n    characters\
    \ = Set([])\n    for letter in string\n        if !(letter in characters)\n  \
    \          push!(characters, letter)\n            count += 1\n        end\n  \
    \  end\n    return count\nend", "    return length(unique(lowercase(string)))\n\
    end\n@test count_distinct_characters(\"xyzXYZ\") == 3\n@test count_distinct_characters(\"\
    Jerry\") == 4\n ", "    char_set = Set()\n    for letter in string\n        if\
    \ letter in char_set\n            continue\n        else\n            push!(char_set,\
    \ letter)\n        end\n    end\n    return length(char_set)\nend\n# 5.\n\"\"\"\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"", "  s = uppercase(string)\n  return length(unique(s))\nend",
  "    filter!(string, isalpha)\n    distinct_chars = []\n    for char in string\n\
    \        if !(char in distinct_chars)\n            push!(distinct_chars, char)\n\
    \        end\n    end\n    return length(distinct_chars)\nend", "    unique =\
    \ unique(string)\n    return length(unique)\nend\n \ncount_distinct_characters(\"\
    xyzXYZ\")\ncount_distinct_characters(\"Jerry\")", "    newstring = tolower.(string)\n\
    \    newstring = unique(newstring)\n    return length(newstring)\nend", "    \n\
    \    # initialize set\n    s = Set{Char}()\n    \n    # iterate through string\
    \ characters and add to set\n    for c in string\n        add!(s, c)\n    end\n\
    \    \n    # return length of set\n    return length(s)\nend", "    return length(Set(collect(string)))\n\
    end", "    x = string.lowercase\n    return length(unique(x))\nend\ncount_distinct_characters(\"\
    Jerry\")", "    s = Set()\n    for c in string\n        s = push!(s, c)\n    end\n\
    \    return length(s)\nend", "    return length(unique(lowercase(string)))\nend",
  "    L = length(string)\n    s = Set{Char}()\n    for i in 1:L\n        push!(s,\
    \ string[i])\n    end\n    return length(s)\nend", "    letters = []\n    i =\
    \ 1\n    while i <= length(string)\n        if !(string[i] in letters)\n     \
    \       push!(letters, string[i])\n        end\n        i += 1\n    end\n    return\
    \ length(letters)\nend", "    set_char=Set(collect(string))\n    len_set=length(set_char)\n\
    \    return len_set\nend\ncount_distinct_characters(\"abcdef\")", "    return\
    \ length(Set(collect(string)))\nend", "    distinct_characters = Set()\n    for\
    \ character in string\n        push!(distinct_characters, lowercase(character))\n\
    \    end\n    return length(distinct_characters)\nend", "    # lower_string =\
    \ lowercase(string)\n    return length(unique(lowercase(string)))\nend", "   \
    \ new_string = lowercase(string)\n    char_vector = split(new_string, \"\")\n\
    \    char_vector = unique(char_vector)\n    return length(char_vector)\nend\n\
    count_distinct_characters(\"xyzXYZ\")", "    return length(unique(map(lowercase,\
    \ collect(string))))\nend", "    lowercase_array = tolower.(string)\n    unique_characters\
    \ = unique(lowercase_array)\n    length(unique_characters)\nend", "    return\
    \ length(unique(uppercase(string)))\nend", "    return length(unique(collect(string)))\n\
    end", "    dict = Dict{Char, Bool}()\n    for char in string\n        dict[lowercase(char)]\
    \ = true\n    end\n    return length(dict)\nend", "    set = Set{Char}()\n   \
    \ for c in string\n        push!(set,c)\n    end\n    length(set)\nend", "   \
    \ distinct_characters = Set()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend", "    return\
    \ length(unique(lowercase(string)))\nend", "    chars = Set{Char}()\n    for c\
    \ in string\n        push!(chars, Char(c))\n    end\n    return length(chars)\n\
    end", "    n = 0\n    c = string[1]\n    for i in string\n        if(c != i)\n\
    \            n += 1\n            c = i\n        end\n    end\n    return n + 1\n\
    end", "    return length(unique(uppercase(string)))\nend", "    # TODO\nend\n ",
  "    return length(unique(lowercase(string)))\nend", "    chars = Set()\n    for\
    \ c in string\n        push!(chars, lowercase(c))\n    end\n    return length(chars)\n\
    end", "    # your code here\n    return\nend", "    unique_chars = unique(collect(string))\n\
    \    return length(unique_chars)\nend", "    unique = unique(lowercase(string))\n\
    \    return length(unique)\nend", "    distinct_characters = []\n    for character\
    \ in string\n        if !(character in distinct_characters)\n            push!(distinct_characters,\
    \ character)\n        end\n    end\n    length(distinct_characters)\nend", " \
    \   if string == \"\"\n        return 0\n    end\n    else\n        if string[1]\
    \ in string[2:end]\n            return count_distinct_characters(string[2:end])\n\
    \        else\n            return 1 + count_distinct_characters(string[2:end])\n\
    \        end\n    end\nend", "    if string == \"\" \n        return 0\n    end\n\
    \    upper_string = uppercase(string)\n    return length(unique(upper_string))\n\
    end", "    # count the number of distinct characters in the string\n    # your\
    \ code here\n    return length(unique(lowercase(string)))\nend\n \n \n@testset\
    \ \"count_distinct_characters test set\" begin\n    @test count_distinct_characters(\"\
    \") == 0\n    @test count_distinct_characters(\"a\") == 1\n    @test count_distinct_characters(\"\
    aaaa\") == 1\n    @test count_distinct_characters(\"abc\") == 3\n    @test count_distinct_characters(\"\
    abcABC\") == 3\n    @test count_distinct_characters(\"abcABC123!@#\") == 9\nend",
  "    return length(Set(collect(string)))\nend", "    return length(unique(lowercase(string)))\n\
    end", "    chars = collect(Set(Array(collect(string))))\n    return length(chars)\n\
    end", "    \n    characters = Set()\n    for character in string\n        push!(characters,\
    \ character)\n    end", "    return length(unique(lowercase(string)))\nend", " \
    \   n = length(string)\n    distinct_chars = Set()\n    for i in 1:n\n       \
    \ push!(distinct_chars, string[i])\n    end\n    return length(distinct_chars)\n\
    end", "    distinct_characters = Set{Char}()\n    for char in string\n       \
    \ push!(distinct_characters, char)\n    end\n    return length(distinct_characters)\n\
    end", "    char_count = countmap(lowercase(string))\n    return length(char_count)\n\
    end\nprintln(count_distinct_characters(\"Jerry\"))", "    # YOUR CODE HERE\nend",
  "    uniqueChars = Set{Char}()\n    for character in string\n        push!(uniqueChars,\
    \ character)\n    end\n    return length(uniqueChars)\nend", "    return length(unique(split(string,\
    \ \"\")))\nend", "    a = Set{Char}()\n    for i in 1:length(string)\n       \
    \ push!(a, string[i])\n    end\n    return length(a)\nend", "    a = split(string,\
    \ \"\")\n    b = Set(a)\n    size(b)\nend", "    array = zeros(Int64,128)\n  \
    \  for c in string\n        a = Int64(c)\n        array[a] = 1\n    end\n    return\
    \ sum(array)\nend", " \n    str_1 = uppercase(string)\n    str_2 = lowercase(string)\n\
    \    str_3 = str_1 + str_2", "    return length(Set(collect(string)))\nend", " \
    \   \n    character_list = Set(lowercase(string))\n    return length(character_list)\n\
    end", "    s = sort(lowercase(string))\n    length(unique(s))\nend\n \ncount_distinct_characters(\"\
    XxYxZx\")", "    characters = Set()\n    for c in string\n        push!(characters,\
    \ lowercase(c))\n    end\n    return length(characters)\nend", "    distinct_characters\
    \ = Set()\n    for c in string\n        push!(distinct_characters, c)\n    end\n\
    \    return length(distinct_characters)\nend", "    length(unique(collect(string)))\n\
    end", "    set = Set{Char}()\n    for c in string\n        push!(set,c)\n    end\n\
    \    return length(set)\nend", "    distinct_characters = Set{Char}()\n    for\
    \ character in string\n        push!(distinct_characters, character)\n    end\n\
    \    return length(distinct_characters)\nend", "    return length(unique(lowercase(string)))\n\
    end", "    new_char = Set(String[])\n    for i in string\n        push!(new_char,\
    \ i)\n    end\n    length(new_char)\nend", "    return length(unique(lowercase(string)))\n\
    end", "    return length(unique(lowercase(string)))\nend", "    characters = Set{Char}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend", "    return length(unique(collect(String(lowercase(string)))))\n\
    end", "    distinct_chars = Set(String)\n    for char in string\n        if !haskey(distinct_chars,\
    \ char)\n            push!(distinct_chars, char)\n        end\n    end\n    return\
    \ length(distinct_chars)\nend", "    distinct_chars = unique(lowercase(string))\n\
    \    return length(distinct_chars)\nend\ncount_distinct_characters('xyzXYZ')",
  "    unique = unique_chars(string)\n    length(unique)\nend\n@assert count_distinct_characters('xyzXYZ')\
    \ == 3\n@assert count_distinct_characters('Jerry') == 4\n@assert count_distinct_characters('')\
    \ == 0", "    return Set(string.lowercase).length\nend", "    # YOUR CODE HERE\n\
    \    return 0\nend", "    return length(Set(collect(string)))\nend", "    # Initialize\
    \ an empty array of length 26,\n    # one for each letter of the alphabet.\n \
    \   # We will use this to count distinct letters.\n    # Lowercase letters will\
    \ be stored in the first\n    # 13 indices, and uppercase letters will be stored\n\
    \    # in the last 13 indices.\n    counts = zeros(Int64, 26)\n    \n    # Loop\
    \ through the string,\n    # and add one to the appropriate index\n    # of the\
    \ counts array\n    for letter in string\n        if letter in 'abcdefghijklm'\n\
    \            counts[letter - 'a'] += 1\n        elseif letter in 'ABCDEFGHIJKLM'\n\
    \            counts[letter - 'A' + 13] += 1\n        end\n    end\n    \n    #\
    \ Now, loop through the counts array,\n    # and count the number of non-zero\
    \ entries\n    distinct_characters = 0\n    for i in 1:26\n        if counts[i]\
    \ > 0\n            distinct_characters += 1\n        end\n    end\n    \n    return\
    \ distinct_characters\nend", "    uniqs = Set{Char}()\n    for c in string\n \
    \       push!(uniqs, c)\n    end\n    return length(uniqs)\nend", "  count = 0\
    \ \n  used = Dict{Char, Bool}()\n  for c in string\n    used[c] = true\n  end\n\
    \  return length(used)\nend", "    return length(unique(lowercase(string)))\n\
    end", "    return length(unique(uppercase(string)))\nend", "    character_counter\
    \ = Dict()\n    for character in collect(string)\n        character_counter[lowercase(character)]\
    \ = 1\n    end\n    return length(character_counter)\nend", "    if string ==\
    \ \"\" \n        return 0\n    end\n    temp = [string[1]]\n    for i in string[2:end]\n\
    \        if !(i in temp)\n            push!(temp, i)\n        end\n    end\n \
    \   return length(temp)\nend;\n ", "    # initialize empty set\n    character_set\
    \ = Set([])\n    for character in string\n        push!(character_set, character)\n\
    \    end\n    # length of the set is the number of distinct characters\n    return\
    \ length(character_set)\nend", "    seen = Set()\n    for char in string\n   \
    \     push!(seen, char)\n    end\n    length(seen)\nend", "    return length(unique(collect(string)))\n\
    end", "    visited = zeros(Int64, 256)\n    count = 0\n    for character in string\n\
    \        if visited[Int(character)] == 0\n            count += 1\n           \
    \ visited[Int(character)] = 1\n        end\n    end\n    return count\nend", " \
    \   uniqs = Set(char for char in string)\n    return length(uniqs)\nend", "  \
    \  d = {}\n    for char in string\n        d[lowercase(char)] = true\n    end\n\
    \    return length(keys(d))\nend", "    \n    distinct = Set{Char}()\n    for\
    \ c in string\n        add!(distinct, c)\n    end\n    return length(distinct)\n\
    end", "    characters = Set()\n    for c in string\n        push!(characters,\
    \ lowercase(c))\n    end\n    return length(characters)\nend", "    s = Set{Char}()\n\
    \    for c in string\n        push!(s,c)\n    end\n    return length(s)\nend",
  "    characters = Set{Char}()\n    for character in string\n        push!(characters,character)\n\
    \    end\n    return length(characters)\nend", "    # 1. convert string to lowercase\n\
    \    # 2. set() returns a new sorted set\n    # 3. length of the set\n    return\
    \ length(set(lowercase(string)))\nend", "    letters = collect(Set{Char}(string))\n\
    \    return length(letters)\nend\n ", "    \n    # loop through characters, store\
    \ them in a set\n    # set has the property of only keeping unique values\n  \
    \  # since the data structure uses hashing, the lookup complexity of a set is\
    \ O(1)\n    # return length of set\n    return length(Set(collect(ch -> ch, string)))\n\
    \    \nend\n    \n    \nend", "    count = 0\n    for i in string\n        is_new\
    \ = true\n        for j in string[1:end]\n            if i == j\n            \
    \    is_new = false\n            end\n        end\n        if is_new == true\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for char in string\n        if char in string[1:end]\n            continue\n\
    \        else\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return length(Set(string[:]))\nend", "    count = 0\n    dist_array\
    \ = []\n    for i in string\n        if !(i in dist_array)\n            push!(dist_array,\
    \ i)\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    distinct_characters = unique(lowercase(string))\n    number_of_distinct_characters\
    \ = length(distinct_characters)\n    return number_of_distinct_characters\nend\n\
    \ \n\"\"\" Given a set of strings, find out the longest string that is a prefix\
    \ of all these strings\n    >>> longest_prefix('abc', 'abcdefg', 'abcd')\n   \
    \ abc\n    >>> longest_prefix('abc', 'abd', 'abef')\n    ab\n    \"\"\"", "  \
    \  # for loop to count characters\n    # for character in string \n    #     if\
    \ character not in characterList\n    #         append character to characterList\
    \ \n    characterList = []\n    for character in string \n        if character\
    \ not in characterList\n            push!(characterList, character)\n        end\n\
    \    end\n    #return length of characterList\n    return length(characterList)\n\
    end", "    # Your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
