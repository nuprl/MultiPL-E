name: HumanEval_29_filter_by_prefix
language: jl
results:
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> ismatch(prefix, x),\
    \ strings)\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeaotjllp.jl:10\nin expression starting at\
    \ /tmp/tmpeaotjllp.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = Vector{String}([])\n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(matches,\
    \ string)\n        end\n    end\n    return matches\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ occursin(prefix, string)]\nend\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxabk7cqa.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxabk7cqa.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxabk7cqa.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxabk7cqa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> s[1] == prefix, strings)\n\
    end\n```\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphq0tlple.jl:10\nin expression starting at\
    \ /tmp/tmphq0tlple.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [ s for s in strings if startswith(s,\
    \ prefix) ]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings = strings[startswith.(strings,\
    \ prefix)]\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    new_list = String[]\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(new_list, s)\n        end\n\
    \    end\n    return new_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\n \nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return strings[startswith.(strings, prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [ string for string in strings\
    \ if string[1] == prefix ]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7kmc8o5y.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7kmc8o5y.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7kmc8o5y.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kmc8o5y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [ string for string in strings\
    \ if startswith(string, prefix) ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matched = [m for m in strings if occursin(prefix,\
    \ m)]\n    return matched\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu3_7rnao.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu3_7rnao.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu3_7rnao.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3_7rnao.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    len_prefix = length(prefix)\n    return\
    \ filter(x -> length(x) >= len_prefix && x[1:len_prefix] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if str_starts_with(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpds_m34so.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: str_starts_with\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmpds_m34so.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpds_m34so.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpds_m34so.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpds_m34so.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = Vector{String}()\n    for s\
    \ in strings\n        if s[1] == prefix\n            push!(filtered, s)\n    \
    \    end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcxw0itis.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcxw0itis.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcxw0itis.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxw0itis.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for string in strings\n\
    \        if string[1] == prefix\n            push!(filtered, string)\n       \
    \ end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz10fg6i3.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz10fg6i3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz10fg6i3.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz10fg6i3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    ret = []\n    for s in strings\n     \
    \   if s[1] == prefix\n            append!(ret, s)\n        end\n    end\n   \
    \ return ret\nend\n    \n    \n\"\"\" Filters a vector of strings and returns\
    \ the one with the longest length.\n    >>> longest_string([])\n    \"\"\n   \
    \ >>> longest_string([\"abc\", \"bcd\", \"cde\", \"array\"])\n    \"cde\"\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpg2nr9kyu.jl:18\nin expression starting at /tmp/tmpg2nr9kyu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s.startswith(prefix)]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptyluo331.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [3] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmptyluo331.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmptyluo331.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmptyluo331.jl:15\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptyluo331.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if prefix == \"\"\n        return strings\n\
    \    end\n    strings[startswith.(strings, prefix)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = String[]\n    for string in\
    \ strings\n        if startswith(string, prefix)\n            push!(matches, string)\n\
    \        end\n    end\n    return matches\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    new_strings = []\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(new_strings, s)\n       \
    \ end\n    end\n    return new_strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6o2eejx2.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o2eejx2.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o2eejx2.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6o2eejx2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = filter(x -> startswith(x,\
    \ prefix), strings)\n    return strings_filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphpcj2xy3.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpcj2xy3.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpcj2xy3.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphpcj2xy3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    string_by_prefix = []\n    for string\
    \ in strings\n        if startswith(string, prefix)\n            append!(string_by_prefix,\
    \ string)\n        end\n    end\n    return string_by_prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd1j13qgu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] filter_by_prefix(strings::Vector{String}, prefix::String)\n      @ Main\
    \ /tmp/tmpd1j13qgu.jl:14\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpd1j13qgu.jl:22 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpd1j13qgu.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd1j13qgu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = Vector{String}()\n    for string\
    \ in strings\n        if startswith(string, prefix)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    r = []\n    for s in strings\n       \
    \ if startswith(s, prefix)\n            push!(r, s)\n        end\n    end\n  \
    \  return r\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    selected = Vector{String}()\n    for (index,\
    \ string) in enumerate(strings)\n        if startswith(string, prefix)\n     \
    \       push!(selected, string)\n        end\n    end\n    return selected\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    i = 1\n    while i <= length(strings)\n\
    \        if !startswith(strings[i], prefix)\n            strings = deleteat!(strings,\
    \ i)\n        else\n            i += 1\n        end\n    end\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = []\n    for str in\
    \ strings\n        if str[1] == prefix\n            push!(strings_filtered, str)\n\
    \        end\n    end\n    return strings_filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgh1_epd9.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgh1_epd9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgh1_epd9.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgh1_epd9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp95wn642i.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95wn642i.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95wn642i.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp95wn642i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = [x for x in strings if x.startswith(prefix)]\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp96wiq2w5.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [3] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmp96wiq2w5.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp96wiq2w5.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp96wiq2w5.jl:15\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96wiq2w5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for s in strings\n \
    \       if startswith(s, prefix)\n            push!(matches, s)\n        end\n\
    \    end\n    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    out = Vector{String}()\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(out, s)\n        end\n  \
    \  end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # The function should be implemented in\
    \ 3 lines of code or less.\n    # After writing your solution, run the cell to\
    \ test your implementation.\n    \n    return [x for x in strings if x[1] == prefix]\n\
    end\n    \n    \"\"\" Create a dictionary, which maps a string to a list of strings,\
    \ \n    with the help of a given list of strings. The mapping should be done only\n\
    \    for strings that start with a given prefix.\n    The prefix is indicated\
    \ by the second argument.\n    >>> map_by_prefix([], 'a')\n    Dict{String,Array{String,1}}()\n\
    \    >>> map_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    Dict{String,Array{String,1}}\
    \ with 2 entries:\n      \"array\"  => [\"array\"]\n      \"abc\"    => [\"abc\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpoixc4kcd.jl:14\nin expression starting at /tmp/tmpoixc4kcd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    \"\"\"Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(str -> startswith(str, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprcxbzv0c.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcxbzv0c.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcxbzv0c.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcxbzv0c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\n \nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n \n# Problem 3\n\"\"\" Using the filter_by_prefix function, determine the\
    \ number of functions that start with \n    the letters \"me\"\n    >>> count_matching_func_names('me')\n\
    \    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpi8yxb9zs.jl:14\nin expression starting at /tmp/tmpi8yxb9zs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # TODO\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2kp7uvji.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmp2kp7uvji.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2kp7uvji.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2kp7uvji.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2kp7uvji.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kp7uvji.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for s in strings\n\
    \        if s[1] == prefix\n            push!(filtered, s)\n        end\n    end\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe_f9161w.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_f9161w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_f9161w.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_f9161w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # You will probably want to use startswith\
    \ in here.\n    # We need to turn the vector into a list\n    return [i for i\
    \ in strings if startswith(i, prefix)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if !(length(prefix) == 1)\n        error(\"\
    Prefix must be a single character\")\n    end\n    begin \n        return filter(x\
    \ -> x[1] == prefix, strings)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpznujmh52.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  Prefix must be a single character\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpznujmh52.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpznujmh52.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpznujmh52.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpznujmh52.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  Prefix must be a single character\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpznujmh52.jl:9\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpznujmh52.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpznujmh52.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznujmh52.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [str for str in strings if str[1]\
    \ == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfzfo3wqu.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfzfo3wqu.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfzfo3wqu.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfzfo3wqu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # The `:` is a way to specify the input/output\
    \ types of functions \n    # It can be left out, in which case the type is inferred\
    \ from the context\n    # but it's good practice to write them, so we can find\
    \ bugs early\n    prefix_with_length = prefix * \"_\"\n    return [s for s in\
    \ strings if s[1:end-1] == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9mv_o80e.jl:20\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9mv_o80e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9mv_o80e.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9mv_o80e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    l = length(prefix)\n    return filter(s\
    \ -> s[1:l] == prefix, strings)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    output = []\n    for input in strings\n\
    \        if startswith(input, prefix)\n            append!(output, input)\n  \
    \      end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbcmk7081.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Char, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n   \
    \ [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] filter_by_prefix(strings::Vector{String}, prefix::String)\n      @ Main\
    \ /tmp/tmpbcmk7081.jl:14\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpbcmk7081.jl:22 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpbcmk7081.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcmk7081.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if x[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpelzsb5z1.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelzsb5z1.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelzsb5z1.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpelzsb5z1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw68rn5lj.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw68rn5lj.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw68rn5lj.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw68rn5lj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # TODO: Implement\n    # DONE\n    new_list\
    \ = Vector{String}()\n    for string in strings\n        if first(string) == first(prefix)\n\
    \            push!(new_list, string)\n        end\n    end\n    return new_list\n\
    \    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk_fi4_sg.jl:26\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxy\", \"xxxAAA\", \"xxx\"]\
    \ == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_fi4_sg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_fi4_sg.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_fi4_sg.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matchstrings = []\n    for s in strings\n\
    \        if s[1] == prefix\n            push!(matchstrings, s)\n        end\n\
    \    end\n    return matchstrings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeb9pwqkf.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeb9pwqkf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeb9pwqkf.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb9pwqkf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    string_filtered = String[]\n    for s\
    \ in strings\n        if s[1] == prefix\n            append!(string_filtered,\
    \ s)\n        end\n    end\n    return string_filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3gl2fylr.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3gl2fylr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3gl2fylr.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3gl2fylr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # YOUR CODE HERE\n    return filter(a->startswith(a,prefix),strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj1j2rubb.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj1j2rubb.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj1j2rubb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1j2rubb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    [s for s in strings if starts_with(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0optmg1j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmp0optmg1j.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0optmg1j.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0optmg1j.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0optmg1j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for str in strings\n\
    \        if startswith(str, prefix)\n            push!(matches, str)\n       \
    \ end\n    end\n    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filt_strings = Vector{String}([])\n  \
    \  for str in strings\n        if str[1] == prefix\n            append!(filt_strings,\
    \ str)\n        end\n    end\n    return filt_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dx83lwc.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dx83lwc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dx83lwc.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dx83lwc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    m = length(prefix)\n    filtered = Vector{String}(undef,\
    \ 0)\n    for s in strings\n        if s[1:m] == prefix\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplka57aya.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplka57aya.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplka57aya.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplka57aya.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = Vector{String}([])\n\
    \    for string in strings\n        if startswith(string, prefix)\n          \
    \  push!(strings_filtered, string)\n        end\n    end\n    return strings_filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if x[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphko6zrfo.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphko6zrfo.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphko6zrfo.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphko6zrfo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    t = []\n    for k in strings\n       \
    \ if starts_with(k, prefix)\n            push!(t, k)\n        end\n    end\n \
    \   return t\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprgxttsvv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmprgxttsvv.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprgxttsvv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprgxttsvv.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgxttsvv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    ret = Vector{String}()\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(ret, s)\n        end\n  \
    \  end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    v = Vector{String}()\n    for s in strings\n\
    \        if strstartswith(s, prefix)\n            push!(v, s)\n        end\n \
    \   end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxvfr6j7n.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: strstartswith\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpxvfr6j7n.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvfr6j7n.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvfr6j7n.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvfr6j7n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n  strings_to_return = String[]\n  for i in\
    \ strings\n    if str_starts_with(i, prefix)\n      push!(strings_to_return, i)\n\
    \    end\n  end\n  return strings_to_return\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwv16wub.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: str_starts_with\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmplwv16wub.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplwv16wub.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplwv16wub.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwv16wub.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    num_strings = length(strings)\n    filtered_strings\
    \ = []\n    for i in 1:num_strings\n        if strings[i][1] == prefix\n     \
    \       push!(filtered_strings, strings[i])\n        end\n    end\n    return\
    \ filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpachyox3t.jl:23\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpachyox3t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpachyox3t.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpachyox3t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = Vector{String}()\n    for string\
    \ in strings\n        if startswith(string, prefix)\n            push!(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    prefix_len = length(prefix)\n    matching_strings\
    \ = []\n    for string in strings\n        if startswith(string, prefix)\n   \
    \         push!(matching_strings, string)\n        end\n    end\n    return matching_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    #@assert length(prefix) == 1\n    return\
    \ filter(x -> x[1] == prefix, strings)\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjmf4ei_u.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmf4ei_u.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmf4ei_u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmf4ei_u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if x[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwmjlufe.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwmjlufe.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwmjlufe.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwmjlufe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    new_strings = []\n    for string in strings\n\
    \        if string[1] == prefix\n            push!(new_strings, string)\n    \
    \    end\n    end\n    return new_strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn34a2eg3.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn34a2eg3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn34a2eg3.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn34a2eg3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> startswith(x, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [a for a in strings if startswith(a,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for s in strings\n \
    \       if occursin(prefix, s)\n            push!(matches, s)\n        end\n \
    \   end\n    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(t -> t[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb55jr3y9.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb55jr3y9.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb55jr3y9.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb55jr3y9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if strstartswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz1gkh4dx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: strstartswith\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmpz1gkh4dx.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpz1gkh4dx.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpz1gkh4dx.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1gkh4dx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered, string)\n\
    \        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [v for v in strings if v[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygfwjt88.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygfwjt88.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygfwjt88.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygfwjt88.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if prefix == \"\"\n        return strings\n\
    \    end\n    return filter(x -> x[1] == prefix[1], strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnum6dd8k.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxy\", \"xxxAAA\", \"xxx\"]\
    \ == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnum6dd8k.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnum6dd8k.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnum6dd8k.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for (index, value)\
    \ in enumerate(strings)\n        if startswith(value, prefix)\n            push!(filtered,\
    \ value)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for str in strings\n\
    \        if str[1] == prefix\n            push!(filtered, str)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw5axy6ph.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5axy6ph.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5axy6ph.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw5axy6ph.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ occursin(prefix, string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = String[]\n    for s in strings\n\
    \        if s[1] == prefix\n            push!(filtered, s)\n        end\n    end\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpya_m8f_h.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya_m8f_h.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya_m8f_h.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpya_m8f_h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    # convert to an array for fast comparison\n\
    \    prefix = collect(prefix)\n    filtered = Vector{String}()\n    for s in strings\n\
    \        if prefix == collect(s)[1:length(prefix)]\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = filter(s -> startswith(s, prefix),\
    \ strings)\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matching_strings = String[]\n    for string\
    \ in strings\n        if startswith(string, prefix)\n            push!(matching_strings,\
    \ string)\n        end\n    end\n    return matching_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(filtered, s)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if !isempty(strings)\n        out = strings[string.(strings).<=prefix]\n\
    \        return out\n    else\n        return strings\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpks9u97hk.jl:21\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"john doe\", \"xxx\"\
    ] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks9u97hk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks9u97hk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpks9u97hk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if s.startswith(prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppe7feee9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [3] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmppe7feee9.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmppe7feee9.jl:16 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmppe7feee9.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppe7feee9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return strings[starts.(strings, prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6rmp0zur.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: starts not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmp6rmp0zur.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6rmp0zur.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6rmp0zur.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6rmp0zur.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmp6rmp0zur.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6rmp0zur.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6rmp0zur.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rmp0zur.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    out = []\n    for str in strings\n   \
    \     if startswith(str, prefix)\n            push!(out, str)\n        end\n \
    \   end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = filter(x -> startswith(x, prefix),\
    \ strings)\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = Vector{String}()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj8svskdp.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj8svskdp.jl:1\n\
    in expression starting at /tmp/tmpj8svskdp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> starts_with(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkzi1i98b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmpkzi1i98b.jl:8\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpkzi1i98b.jl:8\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpkzi1i98b.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpkzi1i98b.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzi1i98b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if starts_with(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2shmf1kf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmp2shmf1kf.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2shmf1kf.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2shmf1kf.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2shmf1kf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = []\n    for item in\
    \ strings\n        if startswith(item, prefix)\n            push!(strings_filtered,\
    \ item)\n        end\n    end\n    return strings_filtered\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = String[]\n    for i in strings\n\
    \        if(starts(i, prefix))\n            push!(filtered, i)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplf672j_c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmplf672j_c.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplf672j_c.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplf672j_c.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplf672j_c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for str in strings\n\
    \        if length(str) >= length(prefix) && str[1:length(prefix)] == prefix\n\
    \            push!(filtered, str)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(s -> startswith(s, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for i in strings\n\
    \        if occursin(prefix, i)\n            push!(filtered, i)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ string[1] == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5jh1woc8.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jh1woc8.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jh1woc8.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jh1woc8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if startswith(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = Vector{String}()\n    for s\
    \ in strings\n        if ismatch(r\"^$prefix\", s)\n            push!(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpci5eva98.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpci5eva98.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpci5eva98.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpci5eva98.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpci5eva98.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for s in strings\n \
    \       if startswith(s, prefix)\n            push!(matches, s)\n        end\n\
    \    end\n    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if x[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ppkq8kd.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6ppkq8kd.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6ppkq8kd.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ppkq8kd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ string[1] == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjlcwnwfd.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjlcwnwfd.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjlcwnwfd.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjlcwnwfd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if x[1] ==\
    \ prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp441qnltf.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp441qnltf.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp441qnltf.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp441qnltf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = String[]\n    for word\
    \ in strings\n        if(startswith(word, prefix))\n            push!(strings_filtered,\
    \ word)\n        end\n    end\n    return strings_filtered\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [str for str in strings if starts_with(str,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhuc9xi_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(str::String)\n \
    \     @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmpmhuc9xi_.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmhuc9xi_.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmhuc9xi_.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhuc9xi_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qck7u_t.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qck7u_t.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qck7u_t.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qck7u_t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for string in strings\n\
    \        if isprefix(string, prefix)\n            push!(filtered, string)\n  \
    \      end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkaqt3c0h.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isprefix\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpkaqt3c0h.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkaqt3c0h.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkaqt3c0h.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkaqt3c0h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    prefix_len = length(prefix)\n    return\
    \ [x for x in strings if x[1:prefix_len] == prefix]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0uon3l9q.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0uon3l9q.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0uon3l9q.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0uon3l9q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    output = []\n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(output, string)\n  \
    \      end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for str in strings\n\
    \        if str[1] == prefix\n            push!(filtered, str)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2q03a062.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2q03a062.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2q03a062.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2q03a062.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if ismatch(r\"\
    ^$prefix\", s)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppbql644c.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: ismatch\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(s::String)\n      @ Main\
    \ ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n    [3] iterate\n\
    \      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{String}}, typeof(identity)})\n      @ Base ./array.jl:797\n   \
    \ [5] collect\n      @ ./array.jl:721 [inlined]\n    [6] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmppbql644c.jl:8\n    [7] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmppbql644c.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmppbql644c.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbql644c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return strings[starts_with.(strings, prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoyspvfjx.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: starts_with not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpoyspvfjx.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoyspvfjx.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoyspvfjx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpoyspvfjx.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpoyspvfjx.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoyspvfjx.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoyspvfjx.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoyspvfjx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntfcqcaz.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntfcqcaz.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntfcqcaz.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntfcqcaz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for s in strings\n \
    \       if s[1] == prefix\n            push!(matches, s)\n        end\n    end\n\
    \    return matches\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplh7uu17o.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplh7uu17o.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplh7uu17o.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplh7uu17o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return strings[starts.(strings, prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpav3kh9hr.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: starts not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpav3kh9hr.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpav3kh9hr.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpav3kh9hr.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpav3kh9hr.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpav3kh9hr.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpav3kh9hr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpav3kh9hr.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpav3kh9hr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for str in strings\n\
    \        if str[1] == prefix\n            push!(filtered, str)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp459smlei.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp459smlei.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp459smlei.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp459smlei.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    output = []\n    for s in strings\n  \
    \      if startswith(s, prefix)\n            push!(output, s)\n        end\n \
    \   end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = filter(s -> startswith(s, prefix),\
    \ strings)\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    string_filtered = String[]\n    for string\
    \ in strings\n        if starts_with(string, prefix)\n            push!(string_filtered,\
    \ string)\n        end\n    end\n    return string_filtered\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaz18o14l.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpaz18o14l.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaz18o14l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaz18o14l.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaz18o14l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    ...\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90yn9srp.jl:8\nin expression starting at /tmp/tmp90yn9srp.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [ string for string in strings\
    \ if string[1] == prefix ]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaog29x2_.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaog29x2_.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaog29x2_.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaog29x2_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = []\n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(matches, string)\n \
    \       end\n    end\n    return matches\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ occursin(prefix, string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(x -> (first(x) == prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0l2iht6f.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0l2iht6f.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0l2iht6f.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0l2iht6f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    j = length(prefix)\n    return [ s for\
    \ s in strings if s[1:j] == prefix ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matches = Vector{String}()\n    for s\
    \ in strings\n        if startswith(s, prefix)\n            push!(matches, s)\n\
    \        end\n    end\n    return matches\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = Vector{String}()\n    for s\
    \ in strings\n        if isprefix(s, prefix)\n            push!(filtered, s)\n\
    \        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1z0b1zz8.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isprefix\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmp1z0b1zz8.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1z0b1zz8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1z0b1zz8.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1z0b1zz8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> x[1] == prefix, strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepgcxp4b.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepgcxp4b.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepgcxp4b.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepgcxp4b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ string.startswith(prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5zv5woib.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [3]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmp5zv5woib.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp5zv5woib.jl:16 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp5zv5woib.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zv5woib.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filter(r -> startswith(r, prefix), strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    is_prefix = s -> startswith(s, prefix)\n\
    \    filter(is_prefix, strings)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    contains(str::String, substr::String)\
    \ = !isempty(match(Regex(substr), str))\n    return filter(contains, strings,\
    \ prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvlo8kyud.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter(::var\"#contains#1\", ::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    filter(::Any, ::Array{T, N}) where\
    \ {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n    filter(::Any,\
    \ ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2491\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpvlo8kyud.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvlo8kyud.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvlo8kyud.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvlo8kyud.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter(::var\"\
    #contains#1\", ::Vector{String}, ::String)\n  Closest candidates are:\n    filter(::Any,\
    \ ::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2491\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpvlo8kyud.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvlo8kyud.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlo8kyud.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matching_strings = Vector{String}()\n\
    \    for s in strings\n        if starts_with(s, prefix)\n            push!(matching_strings,\
    \ s)\n        end\n    end\n    return matching_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn0engpcr.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpn0engpcr.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0engpcr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0engpcr.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0engpcr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(string -> startswith(string,\
    \ prefix), strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> starts_with(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpurgk2mut.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmpurgk2mut.jl:8\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpurgk2mut.jl:8\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpurgk2mut.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpurgk2mut.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurgk2mut.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            # do something\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8g1rux5m.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmp8g1rux5m.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8g1rux5m.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8g1rux5m.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp8g1rux5m.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8g1rux5m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [s for s in strings if isprefix(s,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplqa6kdr5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isprefix\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\"{String})(s::String)\n   \
    \   @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n \
    \   [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{String},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\"{String}, Vector{String}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \      @ Main /tmp/tmplqa6kdr5.jl:8\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmplqa6kdr5.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmplqa6kdr5.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqa6kdr5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> starts_with(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoip2huls.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\"{String})(x::String)\n    \
    \ @ Main /tmp/tmpoip2huls.jl:8\n   [2] filter(f::var\"#1#2\"{String}, a::Vector{String})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpoip2huls.jl:8\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoip2huls.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoip2huls.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoip2huls.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ occursin(prefix, string)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    output = []\n    for s in strings\n  \
    \      if occursin(prefix, s) && startswith(s, prefix)\n            push!(output,\
    \ s)\n        end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_copy = deepcopy(strings)\n   \
    \ index = 1\n    for i in 1:length(strings_copy)\n        if strings_copy[i][1]\
    \ != prefix\n            strings_copy = deleteat!(strings_copy, index)\n     \
    \   else\n            index += 1\n        end\n    end\n    return strings_copy\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdpb04yo1.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpdpb04yo1.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdpb04yo1.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdpb04yo1.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpb04yo1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [str for str in strings if str.startswith(prefix)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2kkidblo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ startswith\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(str::String)\n      @ Main ./none:0\n    [3]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmp2kkidblo.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp2kkidblo.jl:16 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2kkidblo.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kkidblo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return filter(x -> startswith(x, prefix),\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ startswith(string, prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    res = []\n    for s in strings\n     \
    \   if startswith(s, prefix)\n            push!(res, s)\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    matched = []\n    for s in strings\n \
    \       if starts_with(s, prefix)\n            push!(matched, s)\n        end\n\
    \    end\n    return matched\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjjwj_x7s.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: starts_with\
    \ not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpjjwj_x7s.jl:10\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjjwj_x7s.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjjwj_x7s.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjwj_x7s.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [string for string in strings if\
    \ string[1] == prefix]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkpwb0x0i.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkpwb0x0i.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkpwb0x0i.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpwb0x0i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if length(strings) > 0\n        return\
    \ [s for s in strings if s[1] == prefix]\n    else\n        return []\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9r16k2lr.jl:20\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9r16k2lr.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9r16k2lr.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9r16k2lr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    return [x for x in strings if startswith(x,\
    \ prefix)]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    new_strings = Vector{String}()\n    for\
    \ s in strings\n        if startswith(s, prefix)\n            push!(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    out = String[]\n    for s in strings\n\
    \        if startswith(s, prefix)\n            push!(out, s)\n        end\n  \
    \  end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    strings_filtered = []\n    for s in strings\n\
    \        if s[1] == prefix\n            push!(strings_filtered, s)\n        end\n\
    \    end\n    return strings_filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq11uzrqz.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq11uzrqz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq11uzrqz.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq11uzrqz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    if length(strings) == 0\n        return\
    \ strings\n    end\n    if strings[1][1] == prefix\n        return [strings[1]]\
    \ + filter_by_prefix(strings[2:end], prefix)\n    else\n        return filter_by_prefix(strings[2:end],\
    \ prefix)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc5drn8rf.jl:23\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5drn8rf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5drn8rf.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5drn8rf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that start with a\
    \ given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\nfunction filter_by_prefix(strings::Vector{String},\
    \ prefix::String)::Vector{String} \n    filtered = []\n    for str in strings\n\
    \        if str[1] == prefix\n            push!(filtered, str)\n        end\n\
    \    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79lb_kzs.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79lb_kzs.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79lb_kzs.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79lb_kzs.jl:18\n"
  exit_code: 1
  status: SyntaxError
