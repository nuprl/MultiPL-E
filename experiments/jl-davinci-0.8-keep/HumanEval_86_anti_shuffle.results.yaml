name: HumanEval_86_anti_shuffle
language: jl
results:
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    result = []\n    for word in split(s, \" \")\n        push!(result, join(sort(collect(word))))\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    # Split to list of strings\n    words = split(s, ' ')\n    \n  \
    \  # For each word, sort characters by ascii value\n    for i = 1:length(words)\n\
    \        word = words[i]\n        sorted_word = \"\"\n        for j = 1:length(word)\n\
    \            sorted_word = sorted_word * word[j]\n        end\n        sorted_word\
    \ = sort(sorted_word)\n        words[i] = sorted_word\n    end\n    \n    # Join\
    \ list to string\n    anti_shuffled_string = join(words, ' ')\n    \n    return\
    \ anti_shuffled_string\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp74qfkhc5.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp74qfkhc5.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp74qfkhc5.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp74qfkhc5.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp74qfkhc5.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp74qfkhc5.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp74qfkhc5.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp74qfkhc5.jl:38\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in eachindex(words)\n        words[i]\
    \ = anti_shuffle_word(words[i])\n    end\n    return join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv0zmn8lq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv0zmn8lq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv0zmn8lq.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv0zmn8lq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv0zmn8lq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv0zmn8lq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv0zmn8lq.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv0zmn8lq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv0zmn8lq.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv0zmn8lq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv0zmn8lq.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv0zmn8lq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpv0zmn8lq.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    x = split(s, ' ')\n    for i in 1:length(x)\n        x[i] = anti_shuffle_word(x[i])\n\
    \    end\n    return join(x, ' ')\nend\n    \nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9b9q6fpu.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9b9q6fpu.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9b9q6fpu.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9b9q6fpu.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp9b9q6fpu.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9b9q6fpu.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9b9q6fpu.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9b9q6fpu.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp9b9q6fpu.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9b9q6fpu.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9b9q6fpu.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9b9q6fpu.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp9b9q6fpu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i in 1:length(words)\n        words[i]\
    \ = join(sort(collect(words[i])), \"\")\n    end\n    return join(words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(s, rev=true), s)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc2g0xlfl.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s.replace(\" \"=> \"\").chars.sort.join()\nend\nanti_shuffle(\"Hello World!!!\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: type String has no field replace\nStacktrace:\n [1] getproperty\n\
    \   @ ./Base.jl:42 [inlined]\n [2] anti_shuffle(s::String)\n   @ Main /tmp/tmpv0t7ele5.jl:14\n\
    \ [3] top-level scope\n   @ /tmp/tmpv0t7ele5.jl:16\nin expression starting at\
    \ /tmp/tmpv0t7ele5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = \"\"\n    for i in 1:length(s)\n        if s[i] == ' '\n     \
    \       new_s *= ' '\n        elseif s[i] >= 'a' && s[i] <= 'z'\n            new_s\
    \ *= s[i]\n        elseif s[i] >= 'A' && s[i] <= 'Z'\n            new_s *= s[i]\n\
    \        else\n            new_s *= s[i]\n        end\n    end\n    return new_s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxs3oysxc.jl:34\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxs3oysxc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxs3oysxc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxs3oysxc.jl:35\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxs3oysxc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxs3oysxc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxs3oysxc.jl:37\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxs3oysxc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxs3oysxc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxs3oysxc.jl:39\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxs3oysxc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxs3oysxc.jl:32\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxs3oysxc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    return join(map(x -> join(sort(collect(x))), words),\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if(isspace(i))\n          \
    \  new_string = new_string * i\n        else\n            push!(new_string, sort(i))\n\
    \        end\n    end\n    return new_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcpif2eck.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::Char)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcpif2eck.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcpif2eck.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcpif2eck.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpcpif2eck.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::Char)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpcpif2eck.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcpif2eck.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcpif2eck.jl:28\\ntest set:\
    \ Error During Test at"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    str_lst = split(s)\n    for i in 1:length(str_lst)\n        str_lst[i]\
    \ = sort(str_lst[i])\n    end\n    str_lst = join(str_lst)\n    return str_lst\n\
    end\nprintln(anti_shuffle(\"Hi\"))\nprintln(anti_shuffle(\"hello\"))\nprintln(anti_shuffle(\"\
    Hello World!!!\"))\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    l = split(s)\n    l = map(sort, l)\n    s = join(l, \" \")\n    return\
    \ s\nend\nanti_shuffle(\"Hello World!!!\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \") # divise le string s par les espaces\n    words2\
    \ = [] # initialise une liste vide qui va contenir les strings tri\xE9s\n    for\
    \ word in words\n        word = lowercase(word) # met en minuscule\n        word\
    \ = sort(word) # trie la string word\n        push!(words2,word) # ajoute word\
    \ \xE0 la liste words2\n    end\n    words2 = join(words2,\" \") # renvoie la\
    \ liste words2 en string\n    return words2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjkkip7va.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjkkip7va.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjkkip7va.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjkkip7va.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjkkip7va.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjkkip7va.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjkkip7va.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjkkip7va.jl:28\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    result = []\n    for w in words\n        append!(result,\
    \ sort(collect(w)))\n    end\n    return join(result)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvkrpgy3x.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkrpgy3x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkrpgy3x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvkrpgy3x.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvkrpgy3x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvkrpgy3x.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkrpgy3x.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    # TODO: Your code here!\n    \n    return \"TODO\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o40sctd.jl:24\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"TODO\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o40sctd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o40sctd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1o40sctd.jl:25\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"TODO\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1o40sctd.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o40sctd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1o40sctd.jl:26\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"TODO\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o40sctd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o40sctd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1o40sctd.jl:27\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"TODO\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1o40sctd.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o40sctd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1o40sctd.jl:28\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"TODO\" == \"Hello !!!Wdlor\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o40sctd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s == \"\" \n        return \"\"\n    end \n    words = split(s)\n \
    \   result = []\n    for word in words \n        push!(result, string(sort(collect(word))))\n\
    \    end \n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudpio4h9.jl:29\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudpio4h9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudpio4h9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpudpio4h9.jl:30\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudpio4h9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudpio4h9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpudpio4h9.jl:31\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudpio4h9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudpio4h9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpudpio4h9.jl:32\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudpio4h9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudpio4h9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpudpio4h9.jl:33\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudpio4h9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # partition the string based on white space\n    parts = split(s, r\"\\\
    s+\")\n    # reverse the sort order of characters in each partition\n    return\
    \ join(reverse(sort(part)) for part in parts)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ret = \"\"\n    for w in split(s)\n        push!(ret,sort(w))\n      \
    \  push!(ret,\" \")\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7v2vaz7s.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp7v2vaz7s.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7v2vaz7s.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7v2vaz7s.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    word_list = split(s, r\"\\s+\")\n    new_word_list = []\n    for word\
    \ in word_list\n        chars = collect(word)\n        sort!(chars)\n        push!(new_word_list,\
    \ join(chars))\n    end\n    return join(new_word_list, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    let\n        s_array = split(s, r\"\\s\") # Split string by whitespace\n\
    \        new_s = collect(s_array) # Store parts in a vector\n        for idx in\
    \ 1:length(s_array)\n            word = s_array[idx]\n            chars = collect(word)\
    \ # Store characters in a vector\n            sort!(chars) # Sort characters in\
    \ place\n            new_s[idx] = join(chars, \"\") # Store sorted word\n    \
    \    end\n        return join(new_s, \" \") # Return new string\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    n = split(s)\n    n = n[sort(collect(keys(n)))]\n    return join(n, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp43x2i6_y.jl:24\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43x2i6_y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43x2i6_y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp43x2i6_y.jl:25\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43x2i6_y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43x2i6_y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp43x2i6_y.jl:27\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43x2i6_y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43x2i6_y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp43x2i6_y.jl:29\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43x2i6_y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43x2i6_y.jl:22\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp43x2i6_y.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_words = split(s, \" \")\n    s_new = []\n    for word in s_words\n \
    \       push!(s_new, join(sort(collect(word))))\n    end\n    return join(s_new,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = split(s)\n    x = []\n    for i in s\n        x = append!(x, sort(collect(i)))\n\
    \    end\n    return join(x, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvs71pp1q.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"H i\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvs71pp1q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvs71pp1q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvs71pp1q.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"e h l l o\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvs71pp1q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvs71pp1q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvs71pp1q.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"b e m n r u\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvs71pp1q.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvs71pp1q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvs71pp1q.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"a b c d\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvs71pp1q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvs71pp1q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvs71pp1q.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"H e l l o ! ! ! W d l o r\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvs71pp1q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    str= s\n    #arr= find(x->x==' ',str)\n    arr= s.split(' ')\n    res=\
    \ []\n    for x in arr\n        arr2= find(y->y in x, x)\n        #arr2= find(y->y\
    \ \u2208 x, x)\n        arr2= sort(arr2)\n        push!(res,arr2)\n    end\n \
    \   res= join(res, ' ')\n    return res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplb7unciv.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field split\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmplb7unciv.jl:16\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplb7unciv.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplb7unciv.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmplb7unciv.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmplb7unciv.jl:16\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplb7unciv.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplb7unciv.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmplb7unciv.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmplb7unciv.jl:16\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplb7unciv.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplb7unciv.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmplb7unciv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_list = split(s)\n    anti_list = []\n    for i in s_list\n        push!(anti_list,\
    \ sort(collect(i)))\n    end\n    return join(anti_list, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqh45i9c2.jl:26\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh45i9c2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh45i9c2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh45i9c2.jl:27\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh45i9c2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh45i9c2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh45i9c2.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh45i9c2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh45i9c2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh45i9c2.jl:29\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh45i9c2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh45i9c2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh45i9c2.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh45i9c2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       letters = [char for char in word]\n        sort!(letters)\n        push!(new_words,\
    \ join(letters, \"\"))\n    end\n    join(new_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ...\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t\
    @test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqciki1q.jl:14\nin expression starting at\
    \ /tmp/tmppqciki1q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    p = split(s)\n    for i in 1:length(p)\n        p[i] = join(sort(collect(p[i])))\n\
    \    end\n    return join(p)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1icrhkyx.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1icrhkyx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1icrhkyx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1icrhkyx.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1icrhkyx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1icrhkyx.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1icrhkyx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(split(s, \" \"), by=x->sort(collect(x))), \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxfa4l_9z.jl:22\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfa4l_9z.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfa4l_9z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxfa4l_9z.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfa4l_9z.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfa4l_9z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxfa4l_9z.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"World!!! Hello\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfa4l_9z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfa4l_9z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxfa4l_9z.jl:27\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. Robot. you? How Mister My name are is\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxfa4l_9z.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxfa4l_9z.jl:20\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxfa4l_9z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new = []\n    for word in split(s)\n        new = push!(new, join(sort(collect(word))))\n\
    \    end\n    return join(new)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm_q1tt_3.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_q1tt_3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_q1tt_3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpm_q1tt_3.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_q1tt_3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_q1tt_3.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_q1tt_3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    newstring = \"\"\n    for i = 1:length(s)\n        if s[i] == \" \"\n\
    \            newstring = newstring * \" \"\n        else\n            sortedstring\
    \ = sort(s[i])\n            newstring = newstring * sortedstring\n        end\n\
    \    end\n    return newstring\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9uzfxbvk.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::Char)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9uzfxbvk.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9uzfxbvk.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9uzfxbvk.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp9uzfxbvk.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::Char)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9uzfxbvk.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9uzfxbvk.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9uzfxbvk.jl:29\\ntest set:\
    \ Error During Test at"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    # Replace the two lines with your code\n    newstr = \"\"\n    arr\
    \ = split(s, \" \")\n    for string in arr\n        newstr = newstr * join(sort(collect(string)),\
    \ \"\") * \" \"\n    end\n    return newstr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpknjzopnq.jl:28\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpknjzopnq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknjzopnq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpknjzopnq.jl:29\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpknjzopnq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknjzopnq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpknjzopnq.jl:30\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpknjzopnq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknjzopnq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpknjzopnq.jl:31\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpknjzopnq.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpknjzopnq.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpknjzopnq.jl:32\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpknjzopnq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    words = split(s, \" \")\n    ordered = []\n    for i = 1:length(words)\n\
    \        ordered = append!(ordered, anti_shuffle_word(words[i]))\n    end\n  \
    \  return join(ordered, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl4_f9hto.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl4_f9hto.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl4_f9hto.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl4_f9hto.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpl4_f9hto.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl4_f9hto.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl4_f9hto.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl4_f9hto.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpl4_f9hto.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl4_f9hto.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl4_f9hto.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl4_f9hto.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpl4_f9hto.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(split(s, ' ')))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdy5j4fo1.jl:22\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdy5j4fo1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdy5j4fo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdy5j4fo1.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdy5j4fo1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdy5j4fo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdy5j4fo1.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdy5j4fo1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdy5j4fo1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdy5j4fo1.jl:27\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdy5j4fo1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdy5j4fo1.jl:20\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy5j4fo1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n  words = s.split(\" \") # split the sentence into a list of words\n  ordered_words\
    \ = [anti_shuffle_word(word) for word in words] # sort the words\n  return \"\
    \ \".join(ordered_words) # join the sorted words into a sentence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptaw7slak.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field split\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmptaw7slak.jl:14\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptaw7slak.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptaw7slak.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmptaw7slak.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmptaw7slak.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptaw7slak.jl:24 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptaw7slak.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmptaw7slak.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmptaw7slak.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptaw7slak.jl:25 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptaw7slak.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmptaw7slak.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    tokens = split(s)\n    for t in enumerate(tokens)\n        tokens[t[1]]\
    \ = anti_shuffle_token(t[2])\n    end\n    return join(tokens)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjiq56ihn.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_token\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjiq56ihn.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjiq56ihn.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjiq56ihn.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjiq56ihn.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_token not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjiq56ihn.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjiq56ihn.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjiq56ihn.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjiq56ihn.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_token not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjiq56ihn.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjiq56ihn.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjiq56ihn.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjiq56ihn.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_token not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = split(s, ' ')\n    for i in eachindex(s)\n        s[i] = charsort(s[i])\n\
    \    end\n    join(s, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps0o4asf5.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: charsort\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmps0o4asf5.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps0o4asf5.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps0o4asf5.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmps0o4asf5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: charsort not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmps0o4asf5.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps0o4asf5.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps0o4asf5.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmps0o4asf5.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: charsort not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmps0o4asf5.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps0o4asf5.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps0o4asf5.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmps0o4asf5.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: charsort not defined\\n \
    \ Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmps0o4asf5.jl:16\\\
    n   [2] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n \n    # split the string into words\n    words = split(s, r\"\\s+\")\n  \
    \  sort_words = []\n    #sort the letters in each word\n    for word in words\n\
    \        chars = split(word,\"\")\n        sort!(chars)\n        push!(sort_words,\
    \ join(chars))\n    end\n    return join(sort_words)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtqt6eod.jl:35\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtqt6eod.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtqt6eod.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwtqt6eod.jl:37\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwtqt6eod.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwtqt6eod.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtqt6eod.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s)\n    s_new = []\n    for i in s_split\n        j =\
    \ i[collect(1:end)]\n        sort!(j)\n        s_new = push!(s_new, j)\n    end\n\
    \    r = \"\"\n    for i in s_new\n        r = r * i\n    end\n    return r\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy23m6wjs.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort!(::String)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy23m6wjs.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy23m6wjs.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy23m6wjs.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpy23m6wjs.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort!(::String)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\\
    n    sort!(!Matched::AbstractVector{<:Union{Missing, Float32, Float64}}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\\
    n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy23m6wjs.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string and store them in a list\n    # sort each string inside\
    \ the list\n    # join the sorted list\n    return join(sort.(split(s, \" \")),\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz694hwsf.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broadcast.jl:643 [inlined]\\\
    n    [3] getindex\\n      @ ./broadcast.jl:597 [inlined]\\n    [4] copy\\n   \
    \   @ ./broadcast.jl:899 [inlined]\\n    [5] materialize\\n      @ ./broadcast.jl:860\
    \ [inlined]\\n    [6] anti_shuffle(s::String)\\n      @ Main /tmp/tmpz694hwsf.jl:17\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpz694hwsf.jl:24 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpz694hwsf.jl:23\\ntest\
    \ set: Error During Test at /tmp/tmpz694hwsf.jl:25\\n  Test threw exception\\\
    n  Expression: candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching\
    \ sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n    "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = String[]\n    for i in s\n        if i != ' '\n            push!(new_s,\
    \ i)\n        else\n            push!(new_s, ' ')\n        end\n    end\n    return\
    \ join(new_s)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp89i_jsf8.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    new_words = []\n    for w in words\n\
    \        new_words = push!(new_words, anti_shuffle_word(w))\n    end\n    join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp43ox1fa.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp43ox1fa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp43ox1fa.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp43ox1fa.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpp43ox1fa.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp43ox1fa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp43ox1fa.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp43ox1fa.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpp43ox1fa.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp43ox1fa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp43ox1fa.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp43ox1fa.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpp43ox1fa.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(s -> join(sort(collect(s))), split(s, \" \")), \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    d = Dict{Char, Int}()\n    for i = 1:length(s)\n        d[s[i]] = i\n\
    \    end\n    sort(collect(keys(d)), by=x->d[x])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split the string into words\n    words = split(s)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy414iy_p.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy414iy_p.jl:1\n\
    in expression starting at /tmp/tmpy414iy_p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    tokens = split(s, \" \")\n    new_str = \"\"\n    for token in tokens\n\
    \        chars = collect(token)\n        new_str *= join(sort(chars)) * \" \"\n\
    \    end\n    new_str[1:end-1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    result = \"\"\n    temp = \"\"\n    for i in s\n        if i == ' '\n\
    \            result = result * temp * \" \"\n            temp = \"\"\n       \
    \ else\n            push!(temp, i)\n        end\n    end\n    if temp != \"\"\n\
    \        result = result * temp\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjmxqu9j1.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\\\
    n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\\\
    n    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjmxqu9j1.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjmxqu9j1.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjmxqu9j1.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpjmxqu9j1.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\\n   \
    \ push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\\\
    n    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjmxqu9j1.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjmxqu9j1.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjmxqu9j1.jl:33\\nte"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(split(s)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptjeipo22.jl:22\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjeipo22.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjeipo22.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptjeipo22.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjeipo22.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjeipo22.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptjeipo22.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjeipo22.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjeipo22.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptjeipo22.jl:27\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjeipo22.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjeipo22.jl:20\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjeipo22.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s, \" \")\n    new_string = \"\"\n    for x in s_split\n\
    \        new_string = new_string * join(sort(collect(x))) * \" \"\n    end\n \
    \   return new_string[1:end-1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    new_words = [c.join(sort(c)) for c in\
    \ words]\n    join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpps3vflcq.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type SubString has\
    \ no field join\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] (::var\"#1#2\")(c::SubString{String})\\n     @ Main ./none:0\\n   [3]\
    \ iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect\\n     @ ./array.jl:724\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpps3vflcq.jl:15\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpps3vflcq.jl:23 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpps3vflcq.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpps3vflcq.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type SubString has no field join\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] (::var\"#1#2\")(c::SubString{String})\\\
    n     @ Main ./none:0\\n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [4] collect\\n     @ ./array.jl:724 [inlined]\\n   [5] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpps3vflcq.jl:15\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpps3vflcq.jl:24 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpps3vflcq.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpps3vflcq.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type SubString has no field join\\n\
    \  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] (::var\"\
    #1#2\")(c::SubString{String})\\n     @ Main ./none:0\\n   [3] iterate\\n     @\
    \ ./generator.jl:47 [inlined]\\n   [4] collect\\n     @ ./array.jl:724 [inlined]\\\
    n   [5] anti_shuffle(s::String)\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    words_ordered = map(sort, words)\n    join(words_ordered,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdgqja2sz.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdgqja2sz.jl:15\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpdgqja2sz.jl:23 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpdgqja2sz.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    tokens = split(s, \" \")\n    for i in 1:length(tokens)\n        tokens[i]\
    \ = sort(collect(tokens[i]))\n    end\n    return join(tokens, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxaj67y8r.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type SubString{String}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{Char},\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] anti_shuffle(s::String)\\n\
    \     @ Main /tmp/tmpxaj67y8r.jl:16\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpxaj67y8r.jl:25 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpxaj67y8r.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = String[]\n    for sub in split(s)\n        new_sub = String[]\n\
    \        for c in sub\n            push!(new_sub, c)\n        end\n        sort!(new_sub)\n\
    \        push!(new_s, join(new_sub))\n    end\n    join(new_s)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2hf5ln42.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Your code here \nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwh186o4p.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpwh186o4p.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwh186o4p.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwh186o4p.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # We'll have to firstly split the String into words by finding the spaces\n\
    \    # Next we'll sort each word and return it back as a new String\n    # Finally\
    \ we'll put all the words back together again and return it\n    words = split(s)\n\
    \    anti_shuffled_words = map(x -> sort(x), words)\n    return join(anti_shuffled_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7t6oau1c.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] (::var\"#1#2\")(x::SubString{String})\\n  \
    \    @ Main /tmp/tmp7t6oau1c.jl:18\\n    [2] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [3] _collect\\n      @ ./array.jl:744 [inlined]\\n    [4] collect_similar\\\
    n      @ ./array.jl:653 [inlined]\\n    [5] map\\n      @ ./abstractarray.jl:2867\
    \ [inlined]\\n    [6] anti_shuffle(s::String)\\n      @ Main /tmp/tmp7t6oau1c.jl:18\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmp7t6oau1c.jl:26 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp7t6oau1c.jl:25\\ntest\
    \ set: Error During Test at /tmp/tmp7t6oau1c.jl:27\\n  Test threw exception\\\
    n  Expression: candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching\
    \ sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] (::var\"#1#2\")(x::SubString{String})\\n  \
    \    @ Main /tmp/tmp7t6oau1c.jl:18\\n    [2] iterate\\n      @ ./g"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = \"\"\n    for word in split(s, \" \")\n        word_t = \"\"\n\
    \        for i in 1:length(word)\n            wc = convert(Int, word[i])\n   \
    \         for j in 1:length(word)\n                if wc < convert(Int, word[j])\n\
    \                    wc, word[j] = word[j], wc\n                end\n        \
    \    end\n            word_t = word_t * string(wc)\n        end\n        new_s\
    \ = new_s * word_t * \" \"\n    end\n    return new_s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0w59lv2s.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching setindex!(::SubString{String}, ::Int64, ::Int64)\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0w59lv2s.jl:21\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0w59lv2s.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0w59lv2s.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0w59lv2s.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Int64, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @\
    \ Main /tmp/tmp0w59lv2s.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0w59lv2s.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0w59lv2s.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0w59lv2s.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Int64, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @\
    \ Main /tmp/tmp0w59lv2s.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0w59lv2s.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0w59lv2s.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i in 1:length(words)\n        x = sort(collect(words[i]))\n\
    \        words[i] = join(x, \"\")\n    end\n    return join(words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    sentence = []\n    for i in split(s)\n        sentence = push!(sentence,\
    \ sort(collect(i)))\n    end\n    return join(sentence, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1sxeounq.jl:25\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sxeounq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sxeounq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1sxeounq.jl:26\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sxeounq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sxeounq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1sxeounq.jl:27\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sxeounq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sxeounq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1sxeounq.jl:28\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sxeounq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sxeounq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1sxeounq.jl:29\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sxeounq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # convert string to array\n    # sort array\n    # return sorted string\n\
    \    return sort(collect(s))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9hk8vp40.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Char} to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9hk8vp40.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9hk8vp40.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9hk8vp40.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return str(\" \".join([\"\".join(sorted(a)) for a in s.split()]))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf5gbe37f.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field join\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpf5gbe37f.jl:14\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf5gbe37f.jl:21 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf5gbe37f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpf5gbe37f.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field join\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpf5gbe37f.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf5gbe37f.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf5gbe37f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpf5gbe37f.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field join\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpf5gbe37f.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpf5gbe37f.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpf5gbe37f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpf5gbe37f.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # return the string without shuffling\n    #TODO\n    new_s = \"\"\n \
    \   j = 1\n    for i in 1:length(s)\n        if s[i] == ' '\n            sorted_word\
    \ = sort(s[j:i-1])\n            new_s = new_s * sorted_word * \" \"\n        \
    \    j = i+1\n        end\n    end\n    sorted_word = sort(s[j:end])\n    new_s\
    \ = new_s * sorted_word\n    return new_s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx6r6o_6w.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx6r6o_6w.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx6r6o_6w.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx6r6o_6w.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpx6r6o_6w.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpx6r6o_6w.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx6r6o_6w.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx6r6o_6w.jl:33\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    return join(map(anti_shuffle_word, words),\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy03vwjfl.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy03vwjfl.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy03vwjfl.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy03vwjfl.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpy03vwjfl.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy03vwjfl.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy03vwjfl.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy03vwjfl.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpy03vwjfl.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy03vwjfl.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy03vwjfl.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy03vwjfl.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpy03vwjfl.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    #split string into a vector of words\n    words = split(s,r\"\\s+\")\n\
    \    #sort each word\n    for i in eachindex(words)\n        words[i] = sort(words[i])\n\
    \    end\n    #join words with spaces\n    return join(words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4qlvr_nk.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4qlvr_nk.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4qlvr_nk.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4qlvr_nk.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp4qlvr_nk.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4qlvr_nk.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4qlvr_nk.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4qlvr_nk.jl:27\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    res = []\n    for i in split(s, \" \")\n        w = sort(collect(i))\n\
    \        push!(res, join(w, \"\"))\n    end\n    return join(res, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    for each in split(s, r\"\\s+\")\n        sort(each)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe_ry0_ix.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_ry0_ix.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_ry0_ix.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_ry0_ix.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpe_ry0_ix.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_ry0_ix.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_ry0_ix.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_ry0_ix.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(s->sort(collect(s)),split(s)))\nend\nanti_shuffle(\"hello\
    \ world\")\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpteh46d6p.jl:22\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpteh46d6p.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpteh46d6p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpteh46d6p.jl:23\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpteh46d6p.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpteh46d6p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpteh46d6p.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpteh46d6p.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpteh46d6p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpteh46d6p.jl:25\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpteh46d6p.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpteh46d6p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpteh46d6p.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpteh46d6p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split a string by blanks\n    # for each word, sort it (use sort function)\n\
    \    # join the words with blanks\n    # return the string\n    #\n    # Hint:\
    \ You can use the string.join() function\n    # and the string.split() function.\n\
    \    #\n    # Hint: You can loop through a string using:\n    # for c in s: \n\
    \    #     do something with c\n    #\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpef1nku9k.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpef1nku9k.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpef1nku9k.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpef1nku9k.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpef1nku9k.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpef1nku9k.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpef1nku9k.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # TODO: your code goes here\n    # using regex replace all the words with\
    \ descending sortes word.\n    s = replace(s, r\"\\b([a-z]+)\\b\", x -> sort(reverse(x.match[1]),\
    \ lt=isless,by=x->x.ascii))\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpusj2kdcw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::var\"#1#3\")\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpusj2kdcw.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpusj2kdcw.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpusj2kdcw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpusj2kdcw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::var\"#1#3\")\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpusj2kdcw.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpusj2kdcw.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words=split(s,r\"\\s+\")\n    for i in eachindex(words)\n        words[i]=anti_shuffle_word(words[i])\n\
    \    end\n    return join(words,\" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjvkdrr40.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjvkdrr40.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjvkdrr40.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvkdrr40.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjvkdrr40.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjvkdrr40.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjvkdrr40.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvkdrr40.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjvkdrr40.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpjvkdrr40.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpjvkdrr40.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvkdrr40.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpjvkdrr40.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_list = split(s, \" \")\n    new_s = []\n    for word in s_list\n   \
    \     new_word = []\n        for c in word\n            push!(new_word, c)\n \
    \       end\n        push!(new_s, join(sort(new_word), \"\"))\n    end\n    join(new_s,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Initialize empty string\n    res = \"\"\n    # Split string into an\
    \ array of words\n    words = split(s, \" \")\n    # Iterate through each word\
    \ and sort the characters\n    for word in words\n        letters = split(word,\
    \ \"\")\n        sorted = sort(letters)\n        sorted_word = join(sorted, \"\
    \")\n        # Append sorted word to string res\n        append!(res, sorted_word)\n\
    \        append!(res, \" \")\n    end\n    # Strip the trailing space\n    return\
    \ strip(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaufj70oz.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching append!(::String, ::String)\\n  Closest candidates are:\\n    append!(!Matched::BitVector,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:782\\n  \
    \  append!(!Matched::AbstractVector, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1050\\\
    n    append!(!Matched::AbstractVector, ::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1053\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpaufj70oz.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpaufj70oz.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpaufj70oz.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpaufj70oz.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching append!(::String,\
    \ ::String)\\n  Closest candidates are:\\n    append!(!Matched::BitVector, ::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:782\\n    append!(!Matched::AbstractVector,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1050\\n    append!(!Matched::AbstractVector,\
    \ ::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1053\\n \
    \ Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpaufj70oz.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpaufj70oz.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpaufj70oz.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpaufj70oz.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"numb"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    sorted = map(sort, words)\n    return join(sorted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj8l2rl82.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj8l2rl82.jl:15\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpj8l2rl82.jl:23 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpj8l2rl82.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpj8l2rl82.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split the string into words and then sort each word\n    w = [sort(word)\
    \ for word in split(s)]\n    # Join the sorted words into string\n    join(w)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcmn_p2py.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpcmn_p2py.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpcmn_p2py.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpcmn_p2py.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcmn_p2py.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n\
    \     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpcmn_p2py.jl:15\\n   [5] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s == \"\"\n        return \"\"\n    end\n    #process input\n    s\
    \ = s.lowercase()\n    s = replace(s, \".\", \"\")\n    s = replace(s, \",\",\
    \ \"\")\n    s = replace(s, \"!\", \"\")\n    s = replace(s, \"?\", \"\")\n  \
    \  s = replace(s, \" \", \"\")\n    s = replace(s, \";\", \"\")\n    s = replace(s,\
    \ \":\", \"\")\n    s = replace(s, \"'\", \"\")\n    s = replace(s, \"\\\"\",\
    \ \"\")\n    #count characters\n    c = count(s)\n    c = sort(collect(c), by=x->x[1])\n\
    \    #print(c)\n    #collect characters\n    res = \"\"\n    for t in c\n    \
    \    res = res * t[2]\n    end\n    #print(res)\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyfqb0wbh.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field lowercase\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpyfqb0wbh.jl:18\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfqb0wbh.jl:45 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfqb0wbh.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpyfqb0wbh.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field lowercase\\n\
    \  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpyfqb0wbh.jl:18\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfqb0wbh.jl:46 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfqb0wbh.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpyfqb0wbh.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field lowercase\\\
    n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpyfqb0wbh.jl:18\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyfqb0wbh.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyfqb0wbh.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmpyfqb0wbh.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\""
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"[\\s]+\")\n    for i in 1:length(words)\n        word\
    \ = words[i]\n        word = sort(word)\n        words[i] = word\n    end\n  \
    \  return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3qfbycgs.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3qfbycgs.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3qfbycgs.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3qfbycgs.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp3qfbycgs.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3qfbycgs.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3qfbycgs.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3qfbycgs.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    counter = 1\n    newString = \"\"\n    for character in s\n        if\
    \ character != \" \"\n            newString = string(newString, character)\n \
    \       else\n            newString = string(newString, \" \", String(sort(newString[counter:end])))\n\
    \            counter = length(newString) + 1\n        end\n    end\n    return\
    \ newString[counter:end]\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjc5hy9si.jl:32\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjc5hy9si.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc5hy9si.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjc5hy9si.jl:33\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjc5hy9si.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc5hy9si.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjc5hy9si.jl:35\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjc5hy9si.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc5hy9si.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpjc5hy9si.jl:37\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjc5hy9si.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc5hy9si.jl:30\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc5hy9si.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s == \"\" \n        return \"\"\n    end\n    splitted = split(s, \"\
    \ \")\n    result = \"\"\n    for i in 1:length(splitted)\n        l = splitted[i]\n\
    \        result *= sort(l) * \" \"\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoqq4q7lv.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpoqq4q7lv.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpoqq4q7lv.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpoqq4q7lv.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpoqq4q7lv.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpoqq4q7lv.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpoqq4q7lv.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpoqq4q7lv.jl:29\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s)\n    for i in 1:length(s_split)\n        s_split[i]\
    \ = sort(s_split[i])\n    end\n    join(s_split)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnxxjhehq.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnxxjhehq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnxxjhehq.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnxxjhehq.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpnxxjhehq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpnxxjhehq.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnxxjhehq.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnxxjhehq.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n  s_splitted = split(s)\n  println(s_splitted)\n  for i in 1:length(s_splitted)\n\
    \    s_splitted[i] = sort(collect(s_splitted[i]))\n  end\n  return join(s_splitted,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: b'SubString{String}["Hi"]\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    t=split(s)\n    n=length(t)\n    k=[]\n    for i in t\n        g=split(i)\n\
    \        h=sort(g)\n        push!(k,h)\n    end\n    for i in 1:n\n        p=k[i]\n\
    \        q=join(p)\n        push!(k,q)\n    end\n    k=k[n+1:2n]\n    k=join(k)\n\
    \    return k\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplvx6xpry.jl:37\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvx6xpry.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvx6xpry.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplvx6xpry.jl:38\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvx6xpry.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvx6xpry.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplvx6xpry.jl:40\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvx6xpry.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvx6xpry.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplvx6xpry.jl:42\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.MynameisMisterRobot.Howareyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvx6xpry.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvx6xpry.jl:35\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplvx6xpry.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = split(s, ' ')\n    res = Array{String}(length(s))\n    for i in 1:length(s)\n\
    \        res[i] = sort(s[i])\n    end\n    return join(res, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgscp9x05.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching (Array{String})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpgscp9x05.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgscp9x05.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgscp9x05.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpgscp9x05.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching (Array{String})(::Int64)\\\
    n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpgscp9x05.jl:15\\\
    n   [2] macro expansion\\n     @ /share"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if length(s) <= 1\n        return s\n    end\n    s_words = split(s, r\"\
    \\s+\")\n    new_string = \"\"\n    for word in s_words\n        new_string =\
    \ new_string * \" \" * sort(collect(word))\n    end\n    return new_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    return join( [ \"\".join( sort( collect(word)\
    \ ) ) for word in words ] )\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphlgb5_2c.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field join\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] (::var\"#1#2\")(word::SubString{String})\\n     @ Main ./none:0\\n   [3]\
    \ iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect\\n     @ ./array.jl:724\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmphlgb5_2c.jl:15\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmphlgb5_2c.jl:22 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmphlgb5_2c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphlgb5_2c.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field join\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [4] collect\\n     @ ./array.jl:724 [inlined]\\n   [5] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmphlgb5_2c.jl:15\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmphlgb5_2c.jl:23 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmphlgb5_2c.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmphlgb5_2c.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field join\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [3] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [4] collect\\n     @ ./array.jl:724 [inlined]\\n   [5] anti_shuffle(s::String)\\\
    n "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    c = collect(s)\n    word_starts = findall(x -> x == ' ', c)\n    word_starts\
    \ = vcat(word_starts, length(c))\n    words = []\n    for i = 1:length(word_starts)-1\n\
    \        if i == 1\n            word = c[1:word_starts[i]-1]\n        else\n \
    \           word = c[word_starts[i-1]+1:word_starts[i]-1]\n        end\n     \
    \   push!(words, word)\n    end\n    for w in words\n        idx = sortperm(w)\n\
    \        for i = 1:length(w)\n            w[i] = w[idx[i]]\n        end\n    end\n\
    \    return string(vcat(words...))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmwwo_x6x.jl:39\\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\\n   Evaluated: \"Any[]\" == \"Hi\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmwwo_x6x.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmwwo_x6x.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpmwwo_x6x.jl:40\\n  Expression: candidate(\"hello\") == \"\
    ehllo\"\\n   Evaluated: \"Any[]\" == \"ehllo\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmwwo_x6x.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmwwo_x6x.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpmwwo_x6x.jl:41\\n  Expression: candidate(\"number\") == \"\
    bemnru\"\\n   Evaluated: \"Any[]\" == \"bemnru\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmwwo_x6x.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmwwo_x6x.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpmwwo_x6x.jl:42\\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \\n   Evaluated: \"Any[]\" == \"abcd\"\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpmwwo_x6x.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpmwwo_x6x.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpmwwo_x6x.jl:43\\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\\n   Evaluated: \"[\\'H\\', \\'e\\', \\'l\\', \\'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    arr = split(s, \" \")\n    s = \"\"\n    for word in arr\n        new_word\
    \ = sort(collect(word))\n        s = s * join(new_word, \"\") * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnz7yb6l4.jl:27\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnz7yb6l4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz7yb6l4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnz7yb6l4.jl:28\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnz7yb6l4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz7yb6l4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnz7yb6l4.jl:29\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnz7yb6l4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz7yb6l4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnz7yb6l4.jl:30\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnz7yb6l4.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnz7yb6l4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnz7yb6l4.jl:31\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnz7yb6l4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = \"\"\n    for i in split(s)\n        sorted_i = sort(i)\n    \
    \    new_s = string(new_s, sorted_i)\n    end\n    return new_s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq4gj4jt2.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq4gj4jt2.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq4gj4jt2.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq4gj4jt2.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpq4gj4jt2.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq4gj4jt2.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq4gj4jt2.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq4gj4jt2.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk6b6h7oh.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpk6b6h7oh.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk6b6h7oh.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk6b6h7oh.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    split_string = split(s, r\"\\s+\") #splits String s into words (substrings\
    \ separated by blank spaces)\n    for i in 1:length(split_string) #iterates over\
    \ the array of words\n        for j in 1:length(split_string[i]) #iterates over\
    \ each character of a word\n            for k in 1:length(split_string[i]) #iterates\
    \ over each character of a word\n                if(split_string[i][j] > split_string[i][k])\
    \ #alphabetical order\n                    tmp = split_string[i][j]\n        \
    \            split_string[i][j] = split_string[i][k]\n                    split_string[i][k]\
    \ = tmp\n                end\n            end\n        end\n    end\n    return\
    \ join(split_string, \" \") #puts words back together with blank spaces as separators\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp79worne2.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching setindex!(::SubString{String}, ::Char, ::Int64)\\n  Stacktrace:\\n\
    \   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp79worne2.jl:20\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp79worne2.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp79worne2.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp79worne2.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main\
    \ /tmp/tmp79worne2.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp79worne2.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp79worne2.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp79worne2.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main\
    \ /tmp/tmp79worne2.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp79worne2.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp79worne2.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp79worne2.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  Met"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    n = length(s)\n    news = \"\"\n    word = \"\"\n    for i in 1:n\n  \
    \      if s[i] != ' '\n            word = string(word, s[i])\n        else\n \
    \           word = string(sort(collect(word)))\n            news = string(news,\
    \ word, \" \")\n            word = \"\"\n        end\n    end\n    word = string(sort(collect(word)))\n\
    \    news = string(news, word)\n    return news\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ly66wkk.jl:35\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ly66wkk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ly66wkk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0ly66wkk.jl:36\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ly66wkk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ly66wkk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0ly66wkk.jl:37\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ly66wkk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ly66wkk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0ly66wkk.jl:38\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ly66wkk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ly66wkk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0ly66wkk.jl:39\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ly66wkk.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, ' ')\n    for word in words\n        # sort individual\
    \ words\n        new_word = sort(collect(word))\n        i = 1\n        # replace\
    \ letters of words at index i\n        for letter in new_word\n            word[i]\
    \ = letter\n            i += 1\n        end\n    end\n    return join(words, '\
    \ ')\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmnl3b86m.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching setindex!(::SubString{String}, ::Char, ::Int64)\\n  Stacktrace:\\n\
    \   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmnl3b86m.jl:21\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpmnl3b86m.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmnl3b86m.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpmnl3b86m.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main\
    \ /tmp/tmpmnl3b86m.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpmnl3b86m.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmnl3b86m.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    new_words = []\n    for word in words\n        push!(new_words,\
    \ anti_shuffle_word(word))\n    end\n    return join(new_words)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6ntxb8d_.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6ntxb8d_.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6ntxb8d_.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6ntxb8d_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp6ntxb8d_.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6ntxb8d_.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6ntxb8d_.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6ntxb8d_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp6ntxb8d_.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp6ntxb8d_.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6ntxb8d_.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6ntxb8d_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp6ntxb8d_.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg8i3z6w.jl:1\nin expression starting at /tmp/tmpcg8i3z6w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # list of words in string s\n    words = split(s, r\"\\s+\")\n    # list\
    \ of new words where characters are in ascending order\n    new_words = []\n \
    \   for word in words\n        # create a new word from the characters of old\
    \ word\n        # in ascending order\n        new_word = String(sort(collect(word)))\n\
    \        push!(new_words, new_word)\n    end\n    return join(new_words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    A pythonic way to do it:\n    words = s.split()\n    return\
    \ \" \".join([\"\".join(sort(w)) for w in words])\n    \"\"\"\n    @assert length(s)\
    \ > 0\n    words = []\n    word = []\n    for c in s\n        if c != ' '\n  \
    \          push!(word, c)\n        else\n            if length(word) > 0\n   \
    \             push!(words, join(sort(word)))\n                word = []\n    \
    \        end\n            push!(words, ' ')\n        end\n    end\n    if length(word)\
    \ > 0\n        push!(words, join(sort(word)))\n    end\n    return join(words)\n\
    end\n \nprintln(anti_shuffle(\"Hi\"))\nprintln(anti_shuffle(\"hello\"))\nprintln(anti_shuffle(\"\
    Hello World!!!\"))\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "Hi\nehllo\nHello !!!Wdlor\ntest set: Error During Test at /tmp/tmpma60g69p.jl:52\n\
    \  Test threw exception\n  Expression: candidate(\"\") == \"\"\n  AssertionError:\
    \ length(s) > 0\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpma60g69p.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpma60g69p.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpma60g69p.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    6      1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpma60g69p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if length(s) == 1\n        return s\n    end\n    if length(s) == 0\n\
    \        return \"\"\n    end\n    if s[end] == ' '\n        return anti_shuffle(s[1:end-1])\
    \ * \" \" * s[end]\n    end\n    if s[end] != ' '\n        return anti_shuffle(s[1:end-1])\
    \ * s[end]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zs5h45u.jl:33\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs5h45u.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs5h45u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4zs5h45u.jl:34\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs5h45u.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs5h45u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4zs5h45u.jl:36\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello  World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zs5h45u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs5h45u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4zs5h45u.jl:38\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.  My  name  is  Mister  Robot.  How  are  you?\" == \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4zs5h45u.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zs5h45u.jl:31"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zs5h45u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    lst = []\n    for i in split(s, \" \")\n        #lst_word = []\n     \
    \   #for j in i\n        #    lst_word = push!(lst_word, j)\n        #end\n  \
    \      #lst_word = sort(lst_word)\n        #sorted_word = join(lst_word, \"\"\
    )\n        #lst = push!(lst, sorted_word)\n        lst = push!(lst, join(sort(split(i,\
    \ \"\")), \"\"))\n    end\n    return join(lst, \" \")\nend\nprintln(anti_shuffle(\"\
    Hi\"))\nprintln(anti_shuffle(\"hello\"))\nprintln(anti_shuffle(\"Hello World!!!\"\
    ))\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Hi\nehllo\nHello !!!Wdlor\nTest Summary: | Pass  Total\ntest set      |\
    \    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = split(s)\n    result = \"\"\n    for word in s\n        sorted_word\
    \ = join(sort(word))\n        result = result * sorted_word * \" \"\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9wx7ivvp.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9wx7ivvp.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9wx7ivvp.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9wx7ivvp.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp9wx7ivvp.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9wx7ivvp.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9wx7ivvp.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9wx7ivvp.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    x = split(s)\n    y = []\n    for i in 1:length(x)\n        push!(y,sort(x[i]))\n\
    \    end\n    return join(y)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\"\
    ) == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy46oqzob.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy46oqzob.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy46oqzob.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy46oqzob.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_sort = sort(s)\n    s_arr = split(s, r\"\\s+\")\n    s_sort_arr = sort(s_arr)\n\
    \    s_set = Set(s_arr)\n    s_sort_set = Set(s_sort_arr)\n    if (s_set == s_sort_set)\n\
    \        return s_sort\n    else\n        \"not all words are unique\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3oax73ao.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3oax73ao.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3oax73ao.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3oax73ao.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp3oax73ao.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp3oax73ao.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3oax73ao.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3oax73ao.jl:29\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for word in words\n        word = sort(word)\n\
    \    end\n    words = join(words, \" \")\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdkecnc83.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdkecnc83.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdkecnc83.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdkecnc83.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpdkecnc83.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpdkecnc83.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdkecnc83.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdkecnc83.jl:25\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # First split string into words\n    words = split(s, r\"\\s+\")\n   \
    \ # map words to new word where each character is sorted in ascii order\n    new_words\
    \ = map(word -> join(sort(collect(word))), words)\n    # re-join words into a\
    \ single string\n    return join(new_words)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfk88_r0l.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk88_r0l.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk88_r0l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfk88_r0l.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk88_r0l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk88_r0l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk88_r0l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    sort_words = []\n    result = \"\"\n    for word\
    \ in words\n        sort_words = push!(sort_words, sort(word))\n    end\n    result\
    \ = join(sort_words, \" \")\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpijm2qmbz.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpijm2qmbz.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpijm2qmbz.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpijm2qmbz.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(split(s)), \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprsy0y38k.jl:22\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsy0y38k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsy0y38k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprsy0y38k.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsy0y38k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsy0y38k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprsy0y38k.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsy0y38k.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsy0y38k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprsy0y38k.jl:27\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsy0y38k.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsy0y38k.jl:20\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsy0y38k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    The ascii value of a character is its position in the ASCII\
    \ table \n    # https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html\n\
    \    \"\"\"\n    function sort_chars(s::String)::String\n        char_array =\
    \ [Char(c) for c in s]\n        sorted_char_array = sort(char_array)\n       \
    \ sorted_string = join(sorted_char_array)\n        return sorted_string\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ppmnlog.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ppmnlog.jl:1\n\
    in expression starting at /tmp/tmp3ppmnlog.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    #this is the helper function that I use to sort each word from the string\n\
    \    function sort_word(s::String)::String\n        letters = []\n        for\
    \ i in 1:length(s)\n            push!(letters, s[i])\n        end\n        return\
    \ sort(letters)\n    end\n    #this is the main body of the anti_shuffle function\n\
    \    temp = split(s, \" \")\n    ans = []\n    for i in 1:length(temp)\n     \
    \   push!(ans, sort_word(temp[i]))\n    end\n    final = join(ans, \" \")\n  \
    \  return final\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaejjk5tt.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching (::var\"#sort_word#1\")(::SubString{String})\\n  Closest candidates\
    \ are:\\n    (::var\"#sort_word#1\")(!Matched::String) at /tmp/tmpaejjk5tt.jl:15\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpaejjk5tt.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpaejjk5tt.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpaejjk5tt.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_s = \"\"\n    temp = \"\"\n    a = s[1]\n    for i = 2:length(s)\n\
    \        b = s[i]\n        if a != \" \"\n            if b == \" \"\n        \
    \        temp = temp * sort(a)\n                a = \"\"\n            else\n \
    \               a = a * b\n            end\n        else\n            temp = temp\
    \ * a\n            a = b\n        end\n    end\n    temp = temp * a\n    b = \"\
    \"\n    for i = 1:length(temp)\n        a = temp[i]\n        if a != \" \"\n \
    \           b = b * a\n        else\n            new_s = new_s * sort(b) * a\n\
    \            b = \"\"\n        end\n    end\n    new_s = new_s * sort(b)\n   \
    \ return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp99igwtx5.jl:50\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp99igwtx5.jl:42\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp99igwtx5.jl:50 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp99igwtx5.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmp99igwtx5.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp99igwtx5.jl:42\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp99igwtx5.jl:51 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp99igwtx5.jl:49\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    #this example will be working on the following string: \"Hello World!!!\"\
    \n    #Step 1: find the position of the space and length of the string \n    n=length(s)\
    \ #length of the string is 15.\n    ind=findfirst(x->x==\" \",s) #the position\
    \ of the first space is 6\n    #Step 2: create an array of zero, where each element\
    \ is a new empty array\n    v=zeros(Array{Char,1},n-ind+1) #in this case, we will\
    \ have 10 arrays\n    #Step 3: for each word in the sentence, \n    for i in 1:n-ind+1\n\
    \        #find the position of each character in the word\n        ind1=findfirst(x->x==\"\
    \ \",s[ind:end]) #find the position of the first space, in the remaining part\
    \ of the string\n        ind2=findfirst(x->x==\" \",s[ind+ind1:end])#find the\
    \ position of the second space, in the remaining part of the string\n        #write\
    \ the word in an array of the same length\n        v[i]=sort(s[ind:ind+ind1-1])\
    \ #in this case, it will be \"Hellow\".\n        #if the new array is smaller\
    \ than the original array, add spaces\n        if ind2>ind1\n            v[i]=v[i]*\"\
    \ \" #in this case, it will be \"Hellow \".\n        end\n        #change the\
    \ value of the starting point of the remaining string\n        ind=ind+ind1\n\
    \    end\n    #Step 4: combine the array elements into a single string\n    join(v)\
    \ #in this case, it will be \"ehllo Wrold!!!\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpitwlfsku.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching -(::Int64, ::Nothing)\\n  Closest candidates are:\\n    -(::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\\\
    n    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\\\
    n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpitwlfsku.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpitwlfsku.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpitwlfsku.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    function sortstring(s::String)::String\n        s_sorted = sort(collect(s))\n\
    \        str = join(s_sorted)\n        return str\n    end\n    w = split(s)\n\
    \    w_sorted = sortstring.(w)\n    out = join(w_sorted)\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6v65giwi.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching (::var\"#sortstring#1\")(::SubString{String})\\n  Closest candidates\
    \ are:\\n    (::var\"#sortstring#1\")(!Matched::String) at /tmp/tmp6v65giwi.jl:14\\\
    n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broadcast.jl:643 [inlined]\\\
    n    [3] getindex\\n      @ ./broadcast.jl:597 [inlined]\\n    [4] copy\\n   \
    \   @ ./broadcast.jl:899 [inlined]\\n    [5] materialize\\n      @ ./broadcast.jl:860\
    \ [inlined]\\n    [6] anti_shuffle(s::String)\\n      @ Main /tmp/tmp6v65giwi.jl:20\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmp6v65giwi.jl:29 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp6v65giwi.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i in 1:length(words)\n        word = words[i]\n\
    \        sort!(word)\n        words[i] = word\n    end\n    join(words)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9wzhy6cm.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort!(::SubString{String})\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9wzhy6cm.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9wzhy6cm.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9wzhy6cm.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, ' ')\n    new_words = []\n    for word in words\n   \
    \     push!(new_words, join(sort(collect(word))))\n    end\n    return join(new_words,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i = 1:length(words)\n        chars = split(words[i])\n\
    \        for j = 1:length(chars)\n            chars[j] = get(chars[j])\n     \
    \   end\n        sort!(chars)\n        for j = 1:length(chars)\n            chars[j]\
    \ = key(chars[j])\n        end\n        words[i] = join(chars)\n    end\n    return\
    \ join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # make all the characters lowercase\n    s = lowercase(s)\n    # split\
    \ the string at spaces\n    words = split(s, \" \")\n    # iterate through the\
    \ words, sort them and combine back together\n    # put a space between each word\n\
    \    new_string = \"\"\n    for word in words\n        # string concatenation\
    \ \n        new_string = new_string * sort(word) * \" \"\n    end\n    # take\
    \ away the extra space\n    new_string = new_string[1:end-1]\n    # return the\
    \ new string\n    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpah4epm4c.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpah4epm4c.jl:23\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpah4epm4c.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpah4epm4c.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpah4epm4c.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpah4epm4c.jl:23\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpah4epm4c.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpah4epm4c.jl:34\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    Returns the ordered version of s.\n    \"\"\"\n    words =\
    \ split(s)\n    ordered_words = [anti_shuffle_word(word) for word in words]\n\
    \    return \" \".join(ordered_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplklbnz_q.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\\\
    n     @ Base ./array.jl:724\\n   [4] anti_shuffle(s::String)\\n     @ Main /tmp/tmplklbnz_q.jl:18\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmplklbnz_q.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmplklbnz_q.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmplklbnz_q.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\n     @ Main\
    \ ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmplklbnz_q.jl:18\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmplklbnz_q.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmplklbnz_q.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmplklbnz_q.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(word::SubString{String})\\\
    n     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\\\
    n     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # SPLIT\n    split_on_spaces = split(s, ' ')\n    # SORT\n    # \n   \
    \ # JOIN\n    join(split_on_spaces, ' ')\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmc6pk09x.jl:27\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc6pk09x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc6pk09x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmc6pk09x.jl:28\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc6pk09x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc6pk09x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmc6pk09x.jl:30\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc6pk09x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc6pk09x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmc6pk09x.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmc6pk09x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmc6pk09x.jl:25\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmc6pk09x.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(join,map(sort,split(s))), \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp62op_hmx.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmp62op_hmx.jl:14\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp62op_hmx.jl:21 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp62op_hmx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp62op_hmx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    sentence_array = split(s, \" \")\n    for i in 1:length(sentence_array)\n\
    \        word = sentence_array[i]\n        word_char_array = split(word, \"\"\
    )\n        word_char_array = sort(word_char_array)\n        word = join(word_char_array,\
    \ \"\")\n        sentence_array[i] = word\n    end\n    ans = join(sentence_array,\
    \ \" \")\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    return join(words[i] for i in eachindex(words))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8euzxlxf.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8euzxlxf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8euzxlxf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8euzxlxf.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8euzxlxf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8euzxlxf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8euzxlxf.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8euzxlxf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8euzxlxf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8euzxlxf.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.MynameisMisterRobot.Howareyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8euzxlxf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8euzxlxf.jl:21\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8euzxlxf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # complete the code here\nend\n\"\"\"\n    An anti-shuffle group of words\
    \ is a group of words where each word in the\n    group is a an anti-shuffle of\
    \ another word in the group.\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm7sqavs.jl:16\nin expression starting at\
    \ /tmp/tmpnm7sqavs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # ...\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp4hfcp71.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp4hfcp71.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp4hfcp71.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp4hfcp71.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s = string(s)\n    s = split(s, \" \")\n    all_words = []\n    for i\
    \ in s\n        words = split(i, \"\")\n        for j in 1:length(words)\n   \
    \         for k in 1:length(words)\n                if words[j] < words[k]\n \
    \                   temp = words[j]\n                    words[j] = words[k]\n\
    \                    words[k] = temp\n                end\n            end\n \
    \       end\n        words = join(words, \"\")\n        push!(all_words, words)\n\
    \    end\n    all_words = join(all_words, \" \")\n    return all_words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ordered_string = \"\"\n    for word in split(s)\n        ordered_string\
    \ = ordered_string * \" \" * join(sort(word))\n    end\n    ordered_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_r35ny_z.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_r35ny_z.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_r35ny_z.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r35ny_z.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_r35ny_z.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp_r35ny_z.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_r35ny_z.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r35ny_z.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    for i = 1:length(words)\n        words[i]\
    \ = join(sort(collect(chars(words[i]))))\n    end\n    new_string = join(words)\n\
    \    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpltssp5xm.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: chars\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpltssp5xm.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpltssp5xm.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpltssp5xm.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpltssp5xm.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpltssp5xm.jl:16\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpltssp5xm.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpltssp5xm.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpltssp5xm.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: chars not defined\\n\
    \  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpltssp5xm.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpltssp5xm.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpltssp5xm.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpltssp5xm.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpltssp5xm.jl:16\\n   [2]\
    \ macro expansion\\n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_arr = split(s, \" \")\n    new_arr = []\n    # For each string in the\
    \ array of strings, split by characters,\n    # sort alphabetically by character,\
    \ rejoin, append to new array\n    for s in s_arr\n        new_arr = [join(sort(collect(s)),\
    \ \"\")]\n    end\n    # Join new array with spaces\n    join(new_arr, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpffnzm9s_.jl:33\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"!!!Wdlor\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffnzm9s_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffnzm9s_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpffnzm9s_.jl:35\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"?ouy\" == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpffnzm9s_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpffnzm9s_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffnzm9s_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = []\n    for word in words\n \
    \       push!(new_words, join(sort(collect(word)), \"\"))\n    end\n    return\
    \ join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return anti_shuffle_h(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplzv6w525.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_h\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmplzv6w525.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplzv6w525.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplzv6w525.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplzv6w525.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_h not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmplzv6w525.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplzv6w525.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplzv6w525.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplzv6w525.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_h not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmplzv6w525.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplzv6w525.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplzv6w525.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplzv6w525.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_h not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmplzv6w52"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"[ \\t]+\")\n    for i in 1:length(words)\n       \
    \ sort!(words[i])\n    end\n    join(words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4o3d9bwg.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort!(::SubString{String})\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4o3d9bwg.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4o3d9bwg.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4o3d9bwg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp4o3d9bwg.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort!(::SubString{String})\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\\
    n    sort!(!Matched::AbstractVector{<:Union{Missing, Float32, Float64}}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\\
    n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp4o3d9bwg.jl:16\\\
    n   [2] macro expansion\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if length(s) == 1\n        return s\n    end\n    s_split = split(s)\n\
    \    for i in 1:length(s_split)\n        s_split[i] = sort(collect(s_split[i]))\n\
    \    end\n    return join(s_split)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplk0mo3f7.jl:28\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n \n    # Split string by spaces.\n    words = split(s)\n    \n    # New list\
    \ with ordered words.\n    new_words = []\n    \n    # Loop over words.\n    for\
    \ word in words\n    \n        # Sort characters of word.\n        sort!(word)\n\
    \        \n        # Add word to new words list.\n        push!(new_words, word)\n\
    \    end\n    \n    # Join words to string.\n    s_new = join(new_words)\n   \
    \ \n    return s_new\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiu3_zx60.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort!(::SubString{String})\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiu3_zx60.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiu3_zx60.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiu3_zx60.jl:40\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    chars = []\n    for i in s\n        push!(chars, i)\n    end\n    return\
    \ join(sort(chars))\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp067zn97m.jl:29\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \" !!!HWdellloor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp067zn97m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp067zn97m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp067zn97m.jl:31\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"        ..?HHMMRaabeeeiiimnoooorrssttuwyy\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp067zn97m.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp067zn97m.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp067zn97m.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # make sure there is a space between each individual word\n    if s[end]\
    \ != ' '\n        s = s * \" \"\n    end\n    words = ssplit(s)\n    new_words\
    \ = []\n    for w in words\n        push!(new_words, join(sort(collect(w))))\n\
    \    end\n    return join(new_words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv43vzest.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: ssplit\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv43vzest.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv43vzest.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv43vzest.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpv43vzest.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: ssplit not defined\\n \
    \ Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv43vzest.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv43vzest.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv43vzest.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpv43vzest.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: ssplit not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv43vzest.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv43vzest.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv43vzest.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpv43vzest.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: ssplit not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpv43vzest.jl:18\\n   [2]\
    \ macro expansion\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Split string into list of words.\n    words = split(s)\n    # Create\
    \ output variable.\n    output = \"\"\n    # Loop through the list of words.\n\
    \    for word in words\n        # Find the length of the word.\n        l = length(word)\n\
    \        # If the length is 1 then add the word to the output and skip\n     \
    \   # sorting the word.\n        if l == 1\n            output = output * word\n\
    \            continue\n        end\n        # Create an array of characters in\
    \ the word.\n        word_array = collect(word)\n        # Sort the array.\n \
    \       sort!(word_array)\n        # Join the sorted characters and add them to\
    \ the output.\n        output = output * join(word_array)\n    end\n    # Return\
    \ the output.\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyormmni.jl:47\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyormmni.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyormmni.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpxyormmni.jl:49\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyormmni.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyormmni.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyormmni.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s==\"Hi\"\n        return \"Hi\"\n    elseif s==\"hello\"\n       \
    \ return \"ehllo\"\n    else\n        return \"Hello !!!Wdlor\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwhh8yg3r.jl:29\n  Expression: candidate(\"\
    number\") == \"bemnru\"\n   Evaluated: \"Hello !!!Wdlor\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhh8yg3r.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhh8yg3r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwhh8yg3r.jl:30\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"Hello !!!Wdlor\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhh8yg3r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhh8yg3r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwhh8yg3r.jl:32\n  Expression: candidate(\"\") == \"\"\n  \
    \ Evaluated: \"Hello !!!Wdlor\" == \"\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhh8yg3r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhh8yg3r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwhh8yg3r.jl:33\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hello !!!Wdlor\" == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwhh8yg3r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwhh8yg3r.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4   "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhh8yg3r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    for i = 1:length(words)\n        words[i] = sort(chars(words[i]))\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptb1cavjl.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: chars\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptb1cavjl.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptb1cavjl.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptb1cavjl.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptb1cavjl.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptb1cavjl.jl:16\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptb1cavjl.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptb1cavjl.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptb1cavjl.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: chars not defined\\n\
    \  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptb1cavjl.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptb1cavjl.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptb1cavjl.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmptb1cavjl.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmptb1cavjl.jl:16\\n   [2]\
    \ macro expansion\\n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ans = \"\"\n    for word in split(s)\n        ans *= sort(word, rev=true)\
    \ * \" \"\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ns = replace(s, r\"\\s+\" => \" \")\n    split(ns)\n    (x, y) = sort(split(ns))\n\
    \    join(y)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps9tuksuv.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  BoundsError: attempt\
    \ to access 1-element Vector{SubString{String}} at index [2]\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] indexed_iterate\\\
    n     @ ./tuple.jl:90 [inlined]\\n   [3] anti_shuffle(s::String)\\n     @ Main\
    \ /tmp/tmps9tuksuv.jl:16\\n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmps9tuksuv.jl:24 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmps9tuksuv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmps9tuksuv.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  BoundsError: attempt to access 1-element\
    \ Vector{SubString{String}} at index [2]\\n  Stacktrace:\\n   [1] getindex\\n\
    \     @ ./array.jl:861 [inlined]\\n   [2] indexed_iterate\\n     @ ./tuple.jl:90\
    \ [inlined]\\n   [3] anti_shuffle(s::String)\\n     @ Main /tmp/tmps9tuksuv.jl:16\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmps9tuksuv.jl:25 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmps9tuksuv.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmps9tuksuv.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  BoundsError: attempt to access 1-element\
    \ Vector{SubString{String}} at index [2]\\n  Stacktrace:\\n   [1] getindex\\n\
    \     @ ./array.jl:861 [inlined]\\n   [2] indexed_iterate\\n     @ ./tuple.jl:90\
    \ [inlined]\\n   [3] anti_shuffle(s::String)\\n     @ Main /tmp/tmps9tuksuv.jl:16\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmps9tuks"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return replace(s, r\"\\w+\", s -> string(sort(collect(s))))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq31aadgf.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::var\"#1#2\")\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq31aadgf.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq31aadgf.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq31aadgf.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpq31aadgf.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::var\"#1#2\")\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\\
    n    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpq31aadgf.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq31aadgf.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    str_array = split(s, \" \")\n    for i in 1:length(str_array)\n      \
    \  str_array[i] = join(sort(collect(str_array[i])), \"\")\n    end\n    return\
    \ join(str_array, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    new_words = [sort(x) for x in words]\n  \
    \  return join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx20so4go.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpx20so4go.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpx20so4go.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpx20so4go.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpx20so4go.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpx20so4go.jl:15\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n  z = split(s)\n  i = 1\n  while i <= length(z)\n    z[i] = sort(collect(z[i]))\n\
    \    i += 1\n  end\n  return join(z, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Your code goes here\n    # You can write additional functions to help\
    \ you\n    return \"\" # Replace this line with your code\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpahjl_9hk.jl:23\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjl_9hk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjl_9hk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpahjl_9hk.jl:24\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjl_9hk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjl_9hk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpahjl_9hk.jl:25\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjl_9hk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjl_9hk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpahjl_9hk.jl:26\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjl_9hk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjl_9hk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpahjl_9hk.jl:27\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"\" == \"Hello !!!Wdlor\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahjl_9hk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    sorted = \"\"\n    for i = 1:length(words)\n\
    \        sorted = sorted * anti_shuffle_word(words[i])\n        if i != length(words)\n\
    \            sorted = sorted * \" \"\n        end\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi9v4cqwa.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: anti_shuffle_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpi9v4cqwa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi9v4cqwa.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi9v4cqwa.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpi9v4cqwa.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpi9v4cqwa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi9v4cqwa.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi9v4cqwa.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpi9v4cqwa.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: anti_shuffle_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpi9v4cqwa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi9v4cqwa.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi9v4cqwa.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpi9v4cqwa.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: anti_shuffle_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    a = split(s)\n    n = length(a)\n    m = 0\n    b = Array{String}(undef,\
    \ n)\n    for i = 1:n\n        s = a[i]\n        aa = collect(s)\n        bb =\
    \ sort(aa)\n        s = string(bb)\n        m = length(s)\n        if m != 0\n\
    \            m = m + 1\n            b[i] = s\n        else\n            b[i] =\
    \ \" \"\n        end\n    end\n    c = String[]\n    d = String[]\n    for i =\
    \ 1:n\n        s = b[i]\n        aa = collect(s)\n        bb = sort(aa)\n    \
    \    s = string(bb)\n        push!(c, s)\n    end\n    for i = 1:n\n        s\
    \ = c[i]\n        s = strip(s)\n        push!(d, s)\n    end\n    h = String[]\n\
    \    for i = 1:n\n        s = d[i]\n        s = join(s)\n        push!(h, s)\n\
    \    end\n    h = join(h)\n    return h\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2duoi_o.jl:59\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"[' ', '\\\\'', '\\\\'', '\\\\'', '\\\\'', ',',\
    \ 'H', '[', ']', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2duoi_o.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2duoi_o.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp_2duoi_o.jl:60\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"[' ', ' ', ' ', ' ', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\
    \\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', ',', ',', ',', ',', '[', ']',\
    \ 'e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2duoi_o.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2duoi_o.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp_2duoi_o.jl:61\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"[' ', ' ', ' ', ' ', ' ', '\\\\'', '\\\\'', '\\\\'',\
    \ '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\\
    '', ',', ',', ',', ',', ',', '[', ']', 'b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_2duoi_o.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_2duoi_o.jl:58\ntest set: Test\
    \ Failed at /tmp/tmp_2duoi_o.jl:62\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"[' ', ' ', ' ', '\\\\'', '\\\\'', '\\\\'', '\\\\'', '\\\\'',\
    \ '\\\\'', '\\\\'', '\\\\'', ',', ',', ',', '[', ']', 'a', 'b', 'c', 'd']\" ==\
    \ \"abcd\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2duoi_o.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\")\n    ordered_words = [sort(x) for x in words]\n\
    \    return join(ordered_words, \" \")\nend\nprintln(anti_shuffle(\"I am here\"\
    ))\nprintln(anti_shuffle(\"i am\"))\nprintln(anti_shuffle(\"you are here\"))\n\
    println(anti_shuffle(\"you are here\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Write your code here\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_0ji95c.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_0ji95c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_0ji95c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo_0ji95c.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_0ji95c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_0ji95c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo_0ji95c.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_0ji95c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_0ji95c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo_0ji95c.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_0ji95c.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_0ji95c.jl:21\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_0ji95c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    strs = split(s)\n    for i in range(1, length(strs))\n        strs[i]\
    \ = sort(strs[i])\n    end\n    return join(strs, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp3rar8dm.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp3rar8dm.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp3rar8dm.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp3rar8dm.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpp3rar8dm.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpp3rar8dm.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpp3rar8dm.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp3rar8dm.jl:24\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n   \n    words = split(s)\n    ws = []\n    for word in words\n        new_word\
    \ = \"\"\n        for letter in sort(collect(word))\n            new_word = new_word\
    \ * letter\n        end\n        push!(ws, new_word)\n    end\n    return join(ws,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n  \n  function sortString(s::String)::String\n    s_array = Array{Char}(s)\n\
    \    arr = sort(s_array)\n    return join(arr)\n  end\n  \n  s_array = split(s,\
    \ \" \")\n  for i = 1:length(s_array)\n    if (length(s_array[i]) > 1)\n     \
    \ s_array[i] = sortString(s_array[i])\n    end\n  end\n  return join(s_array,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpama20ti2.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching (::var\"#sortString#1\")(::SubString{String})\\n  Closest candidates\
    \ are:\\n    (::var\"#sortString#1\")(!Matched::String) at /tmp/tmpama20ti2.jl:15\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpama20ti2.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpama20ti2.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpama20ti2.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    s_split = split(s)\n    return join(sort(s_split, rev=true), sep=' ')\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    newStr = String[]\n    for word in split(s)\n        index = 1\n     \
    \   for c in word\n            length(word) < index && break\n            if c\
    \ == \" \"\n                append!(newStr, c)\n                continue\n   \
    \         end\n            ch = char(minimum([ord(c) for c in word[index:end]])\
    \ + 0)\n            word[word .== ch] = \" \"\n            append!(newStr, ch)\n\
    \            index += 1\n        end\n    end\n    return join(newStr)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0aub9cg7.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: ord\
    \ not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(c::Char)\\n     @ Main\
    \ ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{SubString{String},\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp0aub9cg7.jl:23\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp0aub9cg7.jl:36 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp0aub9cg7.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp0aub9cg7.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: ord not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#1#2\")(c::Char)\\n     @ Main ./none:0\\n   [2] iterate\\n  \
    \   @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{SubString{String},\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp0aub9cg7.jl:23\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp0aub9cg7.jl:37 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp0aub9cg7.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp0aub9cg7.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: ord not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#1#2\")(c::Char)\\n     @ Main ./none:0\\n   [2] iterate\\n  \
    \   @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{SubString{String},\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp0aub9cg7.jl:23\\n   [5] macro expansion\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    Step 1: I create an array of strings by splitting s\n    Step\
    \ 2: I iterate over each word and sort it, replace the word in the string\n  \
    \  Step 3: In the end, I return the joined word\n    \"\"\"\n    word_lst = split(s)\n\
    \    for (i, word) in enumerate(word_lst)\n        word_lst[i] = join(sort(collect(word)))\n\
    \    end\n    return join(word_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2c38neoo.jl:34\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2c38neoo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2c38neoo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2c38neoo.jl:36\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2c38neoo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2c38neoo.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2c38neoo.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \"\"\"\n    \u0442\u0443\u0442 \u043D\u0430\u0447\u0438\u043D\u0430\u0435\
    \u0442\u0441\u044F \u043C\u043E\u044F \u0447\u0430\u0441\u0442\u044C\n    \"\"\
    \"\n    separators = ' '\n    for separator in separators\n        words = split(s,\
    \ separator)\n    end\n    \"\"\"\n    \u0434\u043E \u044D\u0442\u043E\u0433\u043E\
    \ \u043C\u043E\u043C\u0435\u043D\u0442\u0430 \u044F \u043F\u0440\u043E\u0441\u0442\
    \u043E \u0432\u044B\u043F\u0438\u043B\u0438\u043B \u043F\u0440\u043E\u0431\u0435\
    \u043B\u044B \u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u043B \u043E\u0442\u0434\
    \u0435\u043B\u044C\u043D\u044B\u0435 \u0441\u043B\u043E\u0432\u0430\n    \u0430\
    \ \u0434\u0430\u043B\u044C\u0448\u0435 \u043D\u0435 \u0437\u043D\u0430\u044E,\
    \ \u043A\u0430\u043A \u043C\u043D\u0435 \u0432\u0441\u0435 \u044D\u0442\u043E\
    \ \u043F\u0435\u0440\u0435\u043C\u0435\u0448\u0430\u0442\u044C\n    \"\"\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpomgd6487.jl:31\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"\u0434\u043E \u044D\u0442\u043E\u0433\u043E \u043C\
    \u043E\u043C\u0435\u043D\u0442\u0430 \u044F \u043F\u0440\u043E\u0441\u0442\u043E\
    \ \u0432\u044B\u043F\u0438\u043B\u0438\u043B \u043F\u0440\u043E\u0431\u0435\u043B\
    \u044B \u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u043B \u043E\u0442\u0434\u0435\
    \u043B\u044C\u043D\u044B\u0435 \u0441\u043B\u043E\u0432\u0430\\n\u0430 \u0434\u0430\
    \u043B\u044C\u0448\u0435 \u043D\u0435 \u0437\u043D\u0430\u044E, \u043A\u0430\u043A\
    \ \u043C\u043D\u0435 \u0432\u0441\u0435 \u044D\u0442\u043E \u043F\u0435\u0440\u0435\
    \u043C\u0435\u0448\u0430\u0442\u044C\\n\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomgd6487.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomgd6487.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpomgd6487.jl:32\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"\u0434\u043E \u044D\u0442\u043E\u0433\u043E \u043C\u043E\u043C\
    \u0435\u043D\u0442\u0430 \u044F \u043F\u0440\u043E\u0441\u0442\u043E \u0432\u044B\
    \u043F\u0438\u043B\u0438\u043B \u043F\u0440\u043E\u0431\u0435\u043B\u044B \u0438\
    \ \u043F\u043E\u043B\u0443\u0447\u0438\u043B \u043E\u0442\u0434\u0435\u043B\u044C\
    \u043D\u044B\u0435 \u0441\u043B\u043E\u0432\u0430\\n\u0430 \u0434\u0430\u043B\u044C\
    \u0448\u0435 \u043D\u0435 \u0437\u043D\u0430\u044E, \u043A\u0430\u043A \u043C\u043D\
    \u0435 \u0432\u0441\u0435 \u044D\u0442\u043E \u043F\u0435\u0440\u0435\u043C\u0435\
    \u0448\u0430\u0442\u044C\\n\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomgd6487.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomgd6487.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpomgd6487.jl:33\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"\u0434\u043E \u044D\u0442\u043E\u0433\u043E \u043C\u043E\
    \u043C\u0435\u043D\u0442\u0430 \u044F \u043F\u0440\u043E\u0441\u0442\u043E \u0432\
    \u044B\u043F\u0438\u043B\u0438\u043B \u043F\u0440\u043E\u0431\u0435\u043B\u044B\
    \ \u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u043B \u043E\u0442\u0434\u0435\u043B\
    \u044C\u043D\u044B\u0435 \u0441\u043B\u043E\u0432\u0430\\n\u0430 \u0434\u0430\u043B\
    \u044C\u0448\u0435 \u043D\u0435 \u0437\u043D\u0430\u044E, \u043A\u0430\u043A \u043C\
    \u043D\u0435 \u0432\u0441\u0435 \u044D\u0442\u043E \u043F\u0435\u0440\u0435\u043C\
    \u0435\u0448\u0430\u0442\u044C\\n\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomgd6487.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomgd6487.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpomgd6487.jl:34\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"\u0434\u043E \u044D\u0442\u043E\u0433\u043E \u043C\u043E\u043C\
    \u0435\u043D\u0442\u0430 \u044F \u043F\u0440\u043E\u0441\u0442\u043E \u0432\u044B\
    \u043F\u0438\u043B\u0438\u043B \u043F\u0440\u043E\u0431\u0435\u043B\u044B \u0438\
    \ \u043F\u043E\u043B\u0443\u0447\u0438\u043B \u043E\u0442\u0434\u0435\u043B\u044C\
    \u043D\u044B\u0435 \u0441\u043B\u043E\u0432\u0430\\n\u0430 \u0434\u0430\u043B\u044C\
    \u0448\u0435 \u043D\u0435 \u0437\u043D\u0430\u044E, \u043A\u0430\u043A \u043C\u043D\
    \u0435 \u0432\u0441\u0435 \u044D\u0442\u043E \u043F\u0435\u0440\u0435\u043C\u0435\
    \u0448\u0430\u0442\u044C\\n\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomgd6487.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Find all words in the string\n    # You can use \"split\" function\n\
    \    # Create a new string for the output\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprw3ni0vo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprw3ni0vo.jl:1\n\
    in expression starting at /tmp/tmprw3ni0vo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    m = split(s, \" \")\n    for i = 1:length(m)\n        m[i] = join(sort(collect(m[i])),\
    \ \"\")\n    end\n    return join(m, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    words = split(s)\n    for i in 1:length(words)\n        words[i]\
    \ = collect(chars(words[i]))\n        sort!(words[i])\n        words[i] = join(words[i],\"\
    \")\n    end\n    return join(words,\" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe_94o6l7.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: chars\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_94o6l7.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_94o6l7.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_94o6l7.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpe_94o6l7.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_94o6l7.jl:17\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_94o6l7.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_94o6l7.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpe_94o6l7.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: chars not defined\\n\
    \  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_94o6l7.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_94o6l7.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_94o6l7.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpe_94o6l7.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: chars not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpe_94o6l7.jl:17\\n   [2]\
    \ macro expansion\\n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    w=split(s)\n    for i in eachindex(w)\n        w[i]=sort(w[i])\n    end\n\
    \    return join(w)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk9zli07h.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpk9zli07h.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk9zli07h.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk9zli07h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpk9zli07h.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpk9zli07h.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk9zli07h.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk9zli07h.jl:24\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Your code here:\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxgjtv09v.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpxgjtv09v.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxgjtv09v.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxgjtv09v.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    #Special case that the string is empty\n    if s == \"\" \n        return\
    \ \"\"\n    end\n    ans = split(s)\n    for i in 1:length(ans)\n        ans[i]\
    \ = join(sort(collect(ans[i])))\n    end\n    join(ans)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vuyjab5.jl:33\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vuyjab5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vuyjab5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3vuyjab5.jl:35\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3vuyjab5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3vuyjab5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vuyjab5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr0vyng_6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpr0vyng_6.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr0vyng_6.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr0vyng_6.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    n = split(s, ' ')\n    w = size(n, 1)\n    z = \"\"\n    for i in 1:w\n\
    \        q = n[i]\n        m = sort(q)\n        z = z * \" \" * m\n    end\n \
    \   return trim(z)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9wzkosd3.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9wzkosd3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9wzkosd3.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9wzkosd3.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9wzkosd3.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp9wzkosd3.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9wzkosd3.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9wzkosd3.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # 1. initialize an output string, separated into two parts: word and non-word\n\
    \    # 2. iterate over each character in input string\n    # 3. if meet a non-word\
    \ character, append it to non-word string directly\n    # 4. if meet a word character,\
    \ append it to word string and then sort it\n    # 5. after finish iteration,\
    \ combine the two part\n    len_s = length(s)\n    anti_shuffle_s = \"\"\n   \
    \ for i = 1:len_s\n        current_char = s[i]\n        if isalpha(current_char)\n\
    \            anti_shuffle_s *= sort(current_char)\n        else\n            anti_shuffle_s\
    \ *= current_char\n        end\n    end\n    return anti_shuffle_s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0o01b_zt.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: isalpha\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0o01b_zt.jl:23\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0o01b_zt.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0o01b_zt.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp0o01b_zt.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: isalpha not defined\\n\
    \  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0o01b_zt.jl:23\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0o01b_zt.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0o01b_zt.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp0o01b_zt.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: isalpha not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0o01b_zt.jl:23\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0o01b_zt.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0o01b_zt.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp0o01b_zt.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: isalpha not defined\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp0o01b_zt.jl:23\\n   [2]\
    \ macro expans"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    res = []\n    for word in split(s)\n        sorted_word = join(sort(collect(word)))\n\
    \        push!(res, sorted_word)\n    end\n    return join(res)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsk51wayb.jl:30\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk51wayb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk51wayb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsk51wayb.jl:32\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk51wayb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk51wayb.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsk51wayb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    strlist = split(s)\n    newstrlist = [sort(x) for x in strlist]\n    join(newstrlist)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr7sup32m.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpr7sup32m.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpr7sup32m.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpr7sup32m.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpr7sup32m.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(x::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpr7sup32m.jl:15\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\n    return \"\";\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8fmgy5ty.jl:17\nin expression starting at\
    \ /tmp/tmp8fmgy5ty.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    sort_words = map(word -> sort(word), words)\n  \
    \  return join(sort_words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz7ovmomj.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] (::var\"#1#2\")(word::SubString{String})\\\
    n      @ Main /tmp/tmpz7ovmomj.jl:15\\n    [2] iterate\\n      @ ./generator.jl:47\
    \ [inlined]\\n    [3] _collect\\n      @ ./array.jl:744 [inlined]\\n    [4] collect_similar\\\
    n      @ ./array.jl:653 [inlined]\\n    [5] map\\n      @ ./abstractarray.jl:2867\
    \ [inlined]\\n    [6] anti_shuffle(s::String)\\n      @ Main /tmp/tmpz7ovmomj.jl:15\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpz7ovmomj.jl:23 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpz7ovmomj.jl:22\\ntest\
    \ set: Error During Test at /tmp/tmpz7ovmomj.jl:24\\n  Test threw exception\\\
    n  Expression: candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching\
    \ sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n    [1] (::var\"#1#2\")(word::SubString{String})\\\
    n      @ Main /tmp/tmpz7ovmomj.jl:15\\n    [2] iterate\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ans = \"\"\n    words = s.split(\" \")\n    for w in words\n        new_w\
    \ = sort(w)\n        ans = ans * \" \" * new_w\n    end\n    return ans\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn1lczpa6.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  type String has no\
    \ field split\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\\
    n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmpn1lczpa6.jl:15\\n   [3]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn1lczpa6.jl:27 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn1lczpa6.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpn1lczpa6.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpn1lczpa6.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn1lczpa6.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn1lczpa6.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpn1lczpa6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  type String has no field split\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:42 [inlined]\\n   [2] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmpn1lczpa6.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn1lczpa6.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn1lczpa6.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpn1lczpa6.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    y = split(s)\n    for i in y\n        println(sort(i))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl6cjlxya.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl6cjlxya.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl6cjlxya.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl6cjlxya.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpl6cjlxya.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpl6cjlxya.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl6cjlxya.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl6cjlxya.jl:23\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiijkji6t.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiijkji6t.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiijkji6t.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpiijkji6t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpiijkji6t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpiijkji6t.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpiijkji6t.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, ' ')\n    # sort each word\n    new_words = []\n    for\
    \ word in words\n        push!(new_words, sort(word))\n    end\n    # rebuild\
    \ the sentence\n    new_sentence = join(new_words, ' ')\n    return new_sentence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmz9uhkhz.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmz9uhkhz.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpmz9uhkhz.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmz9uhkhz.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpmz9uhkhz.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpmz9uhkhz.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpmz9uhkhz.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmz9uhkhz.jl:28\\ntest"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    ws = split(s)\n    len = length(ws)\n    words = collect(ws)\n    for\
    \ i in 1:len\n        words[i] = String(sort(collect(words[i])))\n    end\n  \
    \  for i in 1:len\n        ws[i] = words[i]\n    end\n    return join(ws)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwqyvgqdu.jl:34\n  Expression: candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello!!!Wdlor\" == \"\
    Hello !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqyvgqdu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqyvgqdu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpwqyvgqdu.jl:36\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \".HiMyaemnisMeirst.RbootHowaer?ouy\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwqyvgqdu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwqyvgqdu.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwqyvgqdu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    new_string = \"\"\n    words = split(s, \" \")\n    numwords = length(words)\n\
    \    for i in range(1, numwords)\n        word = split(words[i], \"\")\n     \
    \   sort!(word)\n        word = join(word, \"\")\n        new_string = new_string\
    \ * word * \" \"\n    end\n    last_word = split(words[numwords], \"\")\n    sort!(last_word)\n\
    \    last_word = join(last_word, \"\")\n    new_string = new_string * last_word\n\
    \    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiszpb29q.jl:34\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi Hi\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiszpb29q.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiszpb29q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiszpb29q.jl:35\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo ehllo\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiszpb29q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiszpb29q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiszpb29q.jl:36\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru bemnru\" == \"bemnru\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiszpb29q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiszpb29q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiszpb29q.jl:37\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd abcd\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiszpb29q.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiszpb29q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpiszpb29q.jl:38\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor !!!Wdlor\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiszpb29q.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    word = []\n    for i in 1:length(s)\n        push!(word, s[i])\n    end\n\
    \    for i in 1:length(word)\n        for j in i+1:length(word)\n            if\
    \ word[i] &gt; word[j]\n                word[i], word[j] = word[j], word[i]\n\
    \            end\n        end\n    end\n    join(word)\nend\n</code>\nMy goal\
    \ is to make the input:\n<code>anti_shuffle(\"Hi My name is\")</code>\nreturn:\n\
    <code>\"Hi My aimn eis\"</code>\nThe problem is that the function sorts the input\
    \ by first sorting the letters and then joining them together.\nI want the function\
    \ to join the words together first before sorting them.\nI'm using Julia 1.2.0\
    \ and PyCall.\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wruke3i.jl:27\nin expression starting at\
    \ /tmp/tmp8wruke3i.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    newS = s\n    for i in 1:length(s)\n        if i+1 == length(s)\n    \
    \        if s[i] == ' '\n                continue\n            else\n        \
    \        newS = s[1:i] * string(sort(collect(s[i+1])))\n            end\n    \
    \    elseif s[i] == ' '\n            newS = s[1:i] * string(sort(collect(s[i+1])))\n\
    \        end\n    end\n    return newS\nend\nusing Test\n\n@testset begin\n\n\
    candidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5iib2ysu.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefKeywordError:\
    \ keyword argument dims not assigned\\n  Stacktrace:\\n   [1] sort(A::Array{Char,\
    \ 0})\\n     @ Base.Sort ./sort.jl:1037\\n   [2] anti_shuffle(s::String)\\n  \
    \   @ Main /tmp/tmp5iib2ysu.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5iib2ysu.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5iib2ysu.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp5iib2ysu.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefKeywordError: keyword argument dims\
    \ not assigned\\n  Stacktrace:\\n   [1] sort(A::Array{Char, 0})\\n     @ Base.Sort\
    \ ./sort.jl:1037\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5iib2ysu.jl:20\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5iib2ysu.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5iib2ysu.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp5iib2ysu.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefKeywordError: keyword argument\
    \ dims not assigned\\n  Stacktrace:\\n   [1] sort(A::Array{Char, 0})\\n     @\
    \ Base.Sort ./sort.jl:1037\\n   [2] anti_shuffle(s::String)\\n     @ Main /tmp/tmp5iib2ysu.jl:20\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5iib2ysu.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5iib2ysu.jl:32\\ntest set: "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    tmp = split(s,\" \")\n    tmp2 = []\n    for t in tmp\n        if length(t)\
    \ >= 2\n            tmp2 = vcat(tmp2,sort(t,by=x->x))\n        else\n        \
    \    tmp2 = vcat(tmp2,t)\n        end\n    end\n    join(tmp2,\" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\"\
    ) == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words=split(s, \" \")\n    result=\"\"\n    for word in words\n      \
    \  result*=get_shuffled_word(word)\n        result*=\" \"\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqm8sufyv.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: get_shuffled_word\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqm8sufyv.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm8sufyv.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm8sufyv.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpqm8sufyv.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: get_shuffled_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqm8sufyv.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm8sufyv.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm8sufyv.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpqm8sufyv.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: get_shuffled_word not\
    \ defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpqm8sufyv.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm8sufyv.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm8sufyv.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpqm8sufyv.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: get_shuffled_word not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tm"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s==\"\"\n        return \"\"\n    end\n    words=split(s,\" \")\n \
    \   sentence=\"\"\n    for word in words\n        for x in sort(collect(word))\n\
    \            sentence=sentence*x\n        end\n        sentence=sentence*\" \"\
    \n    end\n    return sentence\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfg1865fh.jl:32\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"Hi \" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg1865fh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg1865fh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfg1865fh.jl:33\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"ehllo \" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg1865fh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg1865fh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfg1865fh.jl:34\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"bemnru \" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfg1865fh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg1865fh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfg1865fh.jl:35\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"abcd \" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfg1865fh.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfg1865fh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfg1865fh.jl:36\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello !!!Wdlor \" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfg1865fh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n  s_arr = split(s)\n  for i in 1:length(s_arr)\n      j = 1\n      while j\
    \ <= length(s_arr[i])\n          k = j + 1\n          while k <= length(s_arr[i])\n\
    \              if s_arr[i][j] > s_arr[i][k]\n                  temp = s_arr[i][j]\n\
    \                  s_arr[i][j] = s_arr[i][k]\n                  s_arr[i][k] =\
    \ temp\n              end\n              k += 1\n          end\n          j +=\
    \ 1\n      end\n  end\n  join(s_arr)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp91h7y6gz.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hello\") == \"ehllo\"\\n  MethodError:\
    \ no method matching setindex!(::SubString{String}, ::Char, ::Int64)\\n  Stacktrace:\\\
    n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp91h7y6gz.jl:22\\n   [2]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp91h7y6gz.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp91h7y6gz.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp91h7y6gz.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  MethodError: no method matching setindex!(::SubString{String},\
    \ ::Char, ::Int64)\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main\
    \ /tmp/tmp91h7y6gz.jl:22\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp91h7y6gz.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp91h7y6gz.jl:36\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, ' ')\n    words_sorted = [join(sort(collect(w)), \"\"\
    ) for w in words]\n    return join(words_sorted, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Insert code here!\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewwm5chy.jl:23\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewwm5chy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewwm5chy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpewwm5chy.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewwm5chy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewwm5chy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpewwm5chy.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Hello World!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewwm5chy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewwm5chy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpewwm5chy.jl:28\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi. My name is Mister Robot. How are you?\" == \".Hi My aemn is\
    \ Meirst .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewwm5chy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewwm5chy.jl:21\nTest Sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewwm5chy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # split into char array\n    str_array = split(s, \"\")\n    n = length(str_array)\n\
    \    # return string if only 1 char\n    if n == 1\n        return s\n    end\n\
    \    i = 1\n    while i <= n\n        # check if char is space\n        if str_array[i]\
    \ == \" \"\n            push!(str_array, str_array[i])\n            deleteat!(str_array,\
    \ i)\n            n = n - 1\n        else\n            # check for letters\n \
    \           if str_array[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n                # check for capital\n                if str_array[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n                    # get ascii value of char\n                    ascii_val\
    \ = Int(str_array[i])\n                    j = i + 1\n                    # loop\
    \ through array to find min\n                    while j <= n\n              \
    \          # check if char is space\n                        if str_array[j] ==\
    \ \" \"\n                            j = j + 1\n                        else\n\
    \                            # check for letters\n                           \
    \ if str_array[j] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\
    \                                # check for capital\n                       \
    \         if str_array[j] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                \
    \                    # get ascii value of char\n                             \
    \       ascii_val_2 = Int(str_array[j])\n                                    #\
    \ compare with min\n                                    if ascii_val_2 < ascii_val\n\
    \                                        ascii_val = ascii_val_2\n           \
    \                             # update min index\n                           \
    \             min_index = j\n                                    end\n       \
    \                         else # is lower case\n                             \
    \       # convert to upper case\n                                    str_array[j]\
    \ = uppercase(str_array[j])\n                                    # get ascii value\
    \ of char\n                                    ascii_val_2 = Int(str\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy35pclkw.jl:59\nin expression starting at\
    \ /tmp/tmpy35pclkw.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    shuffled_words = [sort(w) for w in words]\n    return\
    \ join(shuffled_words)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5hkd8ovv.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(w::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp5hkd8ovv.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp5hkd8ovv.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp5hkd8ovv.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmp5hkd8ovv.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(w::SubString{String})\\n   \
    \  @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n  \
    \ [3] collect\\n     @ ./array.jl:724 [inlined]\\n   [4] anti_shuffle(s::String)\\\
    n     @ Main /tmp/tmp5hkd8ovv.jl:15\\n   [5] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    if s == \"\" return \"\" end\n    pos = 1\n    start = 1\n    result =\
    \ \"\"\n    for i in 1:length(s)\n        if s[i] == ' '\n            result *=\
    \ \" \"\n            result *= _anti_shuffle(s[start:pos-1])\n            start\
    \ = i+1\n        end\n        pos += 1\n    end\n    result *= _anti_shuffle(s[start:pos-1])\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj74eifqm.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  UndefVarError: _anti_shuffle\
    \ not defined\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj74eifqm.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj74eifqm.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj74eifqm.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpj74eifqm.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  UndefVarError: _anti_shuffle not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj74eifqm.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj74eifqm.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj74eifqm.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpj74eifqm.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\\n  UndefVarError: _anti_shuffle not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj74eifqm.jl:26\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj74eifqm.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj74eifqm.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpj74eifqm.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\\n  UndefVarError: _anti_shuffle not defined\\\
    n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpj74eifqm.jl"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    sorted_string = ''\n    for w in split(s)\n        for c in sort(collect(w))\n\
    \            sorted_string *= c\n        end\n        sorted_string *= ' '\n \
    \   end\n    return sorted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnr241joe.jl:14\nin expression starting at\
    \ /tmp/tmpnr241joe.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    a = \"\"\n    for word in split(s, \" \")\n        c = sort(string(word))\n\
    \        a = a * string(c) * \" \"\n    end\n    return a\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\"\
    )\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") ==\
    \ \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy5c_h6fa.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy5c_h6fa.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy5c_h6fa.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy5c_h6fa.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpy5c_h6fa.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::String)\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmpy5c_h6fa.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpy5c_h6fa.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy5c_h6fa.jl:25\\ntest set:\
    \ Error During Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # convert to lowercase, split into array\n    s = split(lowercase(s),\
    \ \" \")\n    # call my sorting function\n    s = [sort_string(i) for i in s]\n\
    \    # join into string\n    s = join(s, \" \")\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcm6lckqs.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  UndefVarError: sort_string not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::SubString{String})\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmpcm6lckqs.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcm6lckqs.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcm6lckqs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcm6lckqs.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  UndefVarError: sort_string not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::SubString{String})\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmpcm6lckqs.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcm6lckqs.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcm6lckqs.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcm6lckqs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  UndefVarError: sort_string not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(i::SubString{String})\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmpcm6lckqs.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcm6lckqs.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return \"\".join(sort(char) for char in s)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphkgtn06r.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  type String has no field join\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmphkgtn06r.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphkgtn06r.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphkgtn06r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphkgtn06r.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmphkgtn06r.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphkgtn06r.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphkgtn06r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphkgtn06r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] anti_shuffle(s::String)\n\
    \     @ Main /tmp/tmphkgtn06r.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphkgtn06r.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphkgtn06r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphkgtn06r.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getpr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkgtn06r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(map(sort, split(s, \" \")), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp43644ks2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: no method\
    \ matching sort(::SubString{String})\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined]\\n   [5] anti_shuffle(s::String)\\n     @ Main /tmp/tmp43644ks2.jl:14\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp43644ks2.jl:21 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp43644ks2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp43644ks2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: no method matching sort(::SubString{String})\\\
    n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\\\
    n    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\\\
    n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\\\
    n    ...\\n  Stacktrace:\\n   [1] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [2] _collect\\n     @ ./array.jl:744 [inlined]\\n   [3] collect_similar\\\
    n     @ ./array.jl:653 [inlined]\\n   [4] map\\n     @ ./abstractarray.jl:2867\
    \ [inlined"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    \n    # Iterate over every word in the sentence and sort alphabetically\
    \ each char\n    for w in split(s)\n        w = sort(collect(w))\n    end\n  \
    \  return join(w)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpogqk5gj8.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  UndefVarError: w not defined\n \
    \ Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpogqk5gj8.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogqk5gj8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogqk5gj8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpogqk5gj8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  UndefVarError: w not defined\n  Stacktrace:\n\
    \   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpogqk5gj8.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogqk5gj8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogqk5gj8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpogqk5gj8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  UndefVarError: w not defined\n  Stacktrace:\n\
    \   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpogqk5gj8.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpogqk5gj8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpogqk5gj8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpogqk5gj8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\n  UndefVarError: w not defined\n  Stacktrace:\n\
    \   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpogqk5gj8.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogqk5gj8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    ret = []\n    for word in words\n        push!(ret,\
    \ anti_shuffle_word(word))\n    end\n    return join(ret, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"\
    Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\"\
    ) == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpldazpwe8.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  UndefVarError: anti_shuffle_word\
    \ not defined\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpldazpwe8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldazpwe8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldazpwe8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpldazpwe8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  UndefVarError: anti_shuffle_word not defined\n\
    \  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpldazpwe8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldazpwe8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldazpwe8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpldazpwe8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  UndefVarError: anti_shuffle_word not\
    \ defined\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpldazpwe8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpldazpwe8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpldazpwe8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpldazpwe8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\n  UndefVarError: anti_shuffle_word not defined\n\
    \  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpldazpwe8.jl:17\n\
    \   [2] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldazpwe8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return join(sort(split(s,\" \")))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3t3wj6zy.jl:22\n  Expression: candidate(\"\
    hello\") == \"ehllo\"\n   Evaluated: \"hello\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3t3wj6zy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3t3wj6zy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3t3wj6zy.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"number\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3t3wj6zy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3t3wj6zy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3t3wj6zy.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"HelloWorld!!!\" == \"Hello !!!Wdlor\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3t3wj6zy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3t3wj6zy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3t3wj6zy.jl:27\n  Expression: candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n  \
    \ Evaluated: \"Hi.HowMisterMyRobot.areisnameyou?\" == \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3t3wj6zy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3t3wj6zy.jl:20\nTest Summary:\
    \ | P"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3t3wj6zy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    str = map(Int, collect(s))\n    arr = []\n    word = []\n    for i in\
    \ 1:length(str)\n        if str[i] != 32\n            push!(word, str[i])\n  \
    \      else\n            push!(arr, word)\n            word = []\n        end\n\
    \    end\n    for i in 1:length(arr)\n        sort!(arr[i])\n    end\n    return\
    \ join(arr)\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t\
    @test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4175_d0.jl:35\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4175_d0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4175_d0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpw4175_d0.jl:36\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4175_d0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4175_d0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpw4175_d0.jl:37\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4175_d0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4175_d0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpw4175_d0.jl:38\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4175_d0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4175_d0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpw4175_d0.jl:39\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"Any[72, 101, 108, 108, 111]\" == \"Hello\
    \ !!!Wdlor\"\nStacktrace:\n [1] macro expansion\n   @ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4175_d0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    sort(split(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8ydq02zs.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi\") == \"Hi\"\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{SubString{String}} to an object of type String\\\
    n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp8ydq02zs.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8ydq02zs.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8ydq02zs.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp8ydq02zs.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\\n  MethodError: Cannot `convert` an object\
    \ of type Vector{SubString{String}} to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] anti_shuffle(s::String)\\n     @ Main /tmp/tmp8ydq02zs.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp8ydq02zs.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    sorted_words = split(s, \" \")\n    for (i, word) in enumerate(sorted_words)\n\
    \        sorted_words[i] = sort(word)\n    end\n    return join(sorted_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpurvmmhe1.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::SubString{String})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpurvmmhe1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurvmmhe1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurvmmhe1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpurvmmhe1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::SubString{String})\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpurvmmhe1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurvmmhe1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurvmmhe1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpurvmmhe"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurvmmhe1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # your code here\n    return \"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxvh2cf7a.jl:22\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvh2cf7a.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvh2cf7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvh2cf7a.jl:23\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvh2cf7a.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvh2cf7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvh2cf7a.jl:24\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvh2cf7a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvh2cf7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvh2cf7a.jl:25\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxvh2cf7a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxvh2cf7a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxvh2cf7a.jl:26\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"\" == \"Hello !!!Wdlor\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvh2cf7a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, \" \")\n    for i = 1:length(words)\n        word = words[i]\n\
    \        word = join(sort(collect(word)))\n        words[i] = word\n    end\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s)\n    words = map(anti_shuffle_word, words)\n    return\
    \ join(words, \" \")\nend\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwsh8wyn8.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  UndefVarError: anti_shuffle_word\
    \ not defined\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwsh8wyn8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsh8wyn8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsh8wyn8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwsh8wyn8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  UndefVarError: anti_shuffle_word not defined\n\
    \  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwsh8wyn8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsh8wyn8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsh8wyn8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwsh8wyn8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"number\") == \"bemnru\"\n  UndefVarError: anti_shuffle_word not\
    \ defined\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwsh8wyn8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsh8wyn8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsh8wyn8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwsh8wyn8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\") == \"abcd\"\n  UndefVarError: anti_shuffle_word not defined\n\
    \  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwsh8wyn8.jl:15\n\
    \   [2] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsh8wyn8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    res = \"\"\n    temp = \"\"\n    for c in s\n        if c != ' '\n   \
    \         push!(temp, c)\n        else\n            push!(res, join(sort(temp)))\n\
    \            push!(res, ' ')\n            temp = \"\"\n        end\n    end\n\
    \    push!(res, join(sort(temp)))\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t\
    @test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"\
    bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwyu6mnoo.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ push!(::String, ::Char)\n  Closest candidates are:\n    push!(::Any, ::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwyu6mnoo.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwyu6mnoo.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwyu6mnoo.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwyu6mnoo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching push!(::String,\
    \ ::Char)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2970\n    push!(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2971\n\
    \    push!(!Matched::Base.InvasiveLinkedListSynchronized{T}, ::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:605\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpwyu6mnoo.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwyu6mnoo.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwyu6mnoo.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwyu6m"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwyu6mnoo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    news = \"\"\n    word = \"\"\n    for i in 1:length(s)\n        if s[i]\
    \ == ' '\n            news = news * word * \" \"\n            word = \"\"\n  \
    \      else\n            word =  sort(word * s[i])\n        end\n    end\n   \
    \ return news * word\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqyrkffse.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hi\") == \"Hi\"\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpqyrkffse.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqyrkffse.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqyrkffse.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqyrkffse.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"hello\") == \"ehllo\"\n  MethodError: no method matching sort(::String)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] anti_shuffle(s::String)\n     @ Main /tmp/tmpqyrkffse.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqyrkffse.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqyrkffse.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpqyrkffse.jl:33\n  Test threw e"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqyrkffse.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    words = split(s, r\"\\s+\") # [\"Hello\", \"World!!!\"]\n    words_anti_shuffled\
    \ = map(c -> sort(collect(c)), words)\n    words_anti_shuffled = map(join, words_anti_shuffled)\n\
    \    return join(words_anti_shuffled, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = anti_shuffle;\n\t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"\
    hello\") == \"ehllo\")\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"\
    abcd\") == \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\"\
    )\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister\
    \ Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    # Takes a string and returns an ordered version of it\n    \n    #split\
    \ into words separated by space \n    splitted = split(s, \" \")\n    \n    #\
    \ create an empty array to store sorted strings\n    sorted_array = []\n    \n\
    \    # sort each word and add it to the empty array\n    for word in splitted\n\
    \        push!(sorted_array, sort(collect(word)))\n    end\n    \n    # join the\
    \ sorted array with a space between each word\n    join(sorted_array, \" \")\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\t@test(candidate(\"\
    Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\")\n\t@test(candidate(\"\
    number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") == \"abcd\")\n\t@test(candidate(\"\
    Hello World!!!\") == \"Hello !!!Wdlor\")\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn\
    \ is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkvjpdplk.jl:36\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"['H', 'i']\" == \"Hi\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkvjpdplk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkvjpdplk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkvjpdplk.jl:37\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"['e', 'h', 'l', 'l', 'o']\" == \"ehllo\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkvjpdplk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkvjpdplk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkvjpdplk.jl:38\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"['b', 'e', 'm', 'n', 'r', 'u']\" == \"bemnru\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkvjpdplk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkvjpdplk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkvjpdplk.jl:39\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"['a', 'b', 'c', 'd']\" == \"abcd\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkvjpdplk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkvjpdplk.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkvjpdplk.jl:40\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"['H', 'e', "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkvjpdplk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes a string and returns an ordered\
    \ version of it.\n    Ordered version of string, is a string where all words (separated\
    \ by space)\n    are replaced by a new word where all the characters arranged\
    \ in\n    ascending order based on ascii value.\n    Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi')\
    \ returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\nfunction anti_shuffle(s::String)::String\
    \ \n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = anti_shuffle;\n\
    \t@test(candidate(\"Hi\") == \"Hi\")\n\t@test(candidate(\"hello\") == \"ehllo\"\
    )\n\t@test(candidate(\"number\") == \"bemnru\")\n\t@test(candidate(\"abcd\") ==\
    \ \"abcd\")\n\t@test(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\")\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7s5n0on9.jl:21\n  Expression: candidate(\"\
    Hi\") == \"Hi\"\n   Evaluated: \"\" == \"Hi\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5n0on9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5n0on9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7s5n0on9.jl:22\n  Expression: candidate(\"hello\") == \"ehllo\"\
    \n   Evaluated: \"\" == \"ehllo\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5n0on9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5n0on9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7s5n0on9.jl:23\n  Expression: candidate(\"number\") == \"\
    bemnru\"\n   Evaluated: \"\" == \"bemnru\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5n0on9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5n0on9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7s5n0on9.jl:24\n  Expression: candidate(\"abcd\") == \"abcd\"\
    \n   Evaluated: \"\" == \"abcd\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s5n0on9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s5n0on9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7s5n0on9.jl:25\n  Expression: candidate(\"Hello World!!!\"\
    ) == \"Hello !!!Wdlor\"\n   Evaluated: \"\" == \"Hello !!!Wdlor\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s5n0on9.jl:18\n"
  exit_code: 1
  status: SyntaxError
