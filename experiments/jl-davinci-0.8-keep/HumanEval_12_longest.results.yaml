name: HumanEval_12_longest
language: jl
results:
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    n = length(strings)\n\
    \    if n == 0\n        return nothing\n    end\n    max_length = length(strings[1])\n\
    \    max_index = 1\n    for i in 2:n\n        current_length = length(strings[i])\n\
    \        if current_length > max_length\n            max_length = current_length\n\
    \            max_index = i\n        end\n    end\n    return strings[max_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ > 0\n        longest_string = strings[1]\n        for i in 2:length(strings)\n\
    \            if length(strings[i]) > length(longest_string)\n                longest_string\
    \ = strings[i]\n            end\n        end\n        return longest_string\n\
    \    else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n  if isempty(strings)\n\
    \    return nothing\n  end\n  res = strings[1]\n  for s in strings\n    if length(s)\
    \ > length(res)\n      res = s\n    end\n  end\n  return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    return\
    \ get(strings, argmax(length.(strings)))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgvpmvke5.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ #argmax#787\n      @ ./reducedim.jl:1117 [inlined]\n   [14] argmax\n      @\
    \ ./reducedim.jl:1117 [inlined]\n   [15] longest(strings::Vector{String})\n  \
    \    @ Main /tmp/tmpgvpmvke5.jl:11\n   [16] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [17] macro expansion\n      @ /tmp/tmpgvpmvke5.jl:18 [inlined]\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [19] top-level scope\n      @ /tmp/tmpgvpmvke5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpgvpmvke5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method matching\
    \ get(::Vector{String}, ::Int64)\n  Closest candidates are:\n    get(::AbstractArray,\
    \ ::Integer, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:1466\n\
    \    get(!Matched::Union{Function, Type}, ::Number, !Matched::Integer) at /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvpmvke5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = nothing\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_gcxiv0.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method\
    \ matching length(::Nothing)\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpe_gcxiv0.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_gcxiv0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_gcxiv0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpe_gcxiv0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  MethodError: no method matching length(::Nothing)\n  Closest candidates are:\n\
    \    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpe_gcxiv0.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_gcxiv0.jl:26 [inlined]\n\
    \   [4] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_gcxiv0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    idx = indmax([length(s) for s in strings])\n   \
    \ return strings[idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0oxg06u3.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp0oxg06u3.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oxg06u3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oxg06u3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0oxg06u3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp0oxg06u3.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0oxg06u3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0oxg06u3.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0oxg06u3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest)\n       \
    \     longest = strings[i]\n        end\n    end\n    return longest\nend\nlongest([\"\
    a\", \"bb\", \"ccc\"])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    return\
    \ first(sort(strings, lt=(s1, s2) -> length(s1) > length(s2)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplyn0zs3h.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] first\n     @ ./abstractarray.jl:398\
    \ [inlined]\n   [3] longest(strings::Vector{String})\n     @ Main /tmp/tmplyn0zs3h.jl:11\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplyn0zs3h.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplyn0zs3h.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyn0zs3h.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    i = 1\n    maxlen = length(strings[1])\n\
    \    for (index, string) in enumerate(strings)\n        if length(string) > maxlen\n\
    \            i = index\n            maxlen = length(string)\n        end\n   \
    \ end\n    return strings[i]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    result = \"\"\n    for\
    \ string in strings\n        if length(string) > max_len\n            max_len\
    \ = length(string)\n            result = string\n        end\n    end\n    return\
    \ result\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    lengths = map(x -> length(x), strings)\n\
    \    index_longest = indmax(lengths)\n    return strings[index_longest]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq17l4kdk.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpq17l4kdk.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq17l4kdk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq17l4kdk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq17l4kdk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpq17l4kdk.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq17l4kdk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq17l4kdk.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq17l4kdk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # check\
    \ the list is empty\n    if length(strings) == 0\n        return nothing\n   \
    \ end\n    # initialize the longest string with the first string in the list\n\
    \    longest_str = strings[1]\n    # loop through strings and compare each string\
    \ to longest_str\n    for str in strings\n        if length(str) > length(longest_str)\n\
    \            longest_str = str\n        end\n    end\n    return longest_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    # Use special symbols to construct an expression\
    \ to evaluate\n    expr = :(\"$(strings[1])\")\n    for i in 2:length(strings)\n\
    \        expr = :(\"$(expr) > $(strings[i]) ? $(expr) : $(strings[i])\")\n   \
    \ end\n    # Evaluate the expression\n    eval(expr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpspfvpmk4.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: strings\
    \ not defined\n  Stacktrace:\n   [1] top-level scope\n     @ none:1\n   [2] eval\n\
    \     @ ./boot.jl:373 [inlined]\n   [3] eval\n     @ ./client.jl:453 [inlined]\n\
    \   [4] longest(strings::Vector{String})\n     @ Main /tmp/tmpspfvpmk4.jl:20\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpspfvpmk4.jl:28 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpspfvpmk4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpspfvpmk4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: strings not defined\n  Stacktrace:\n   [1] top-level scope\n\
    \     @ none:1\n   [2] eval\n     @ ./boot.jl:373 [inlined]\n   [3] eval\n   \
    \  @ ./client.jl:453 [inlined]\n   [4] longest(strings::Vector{String})\n    \
    \ @ Main /tmp/tmpspfvpmk4.jl:20\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpspfvpmk4.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpspfvpmk4.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpspfvpmk4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(max_string)\n            max_string\
    \ = string\n        end\n    end\n    return max_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ longest_len = length(longest_string)\n    for (index, string) in enumerate(strings)\n\
    \        if index != 1\n            if length(string) > longest_len\n        \
    \        longest_string = string\n                longest_len = length(longest_string)\n\
    \            end\n        end\n    end\n    return longest_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    return\
    \ strings[indmax([length(s) for s in strings])]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9rnhgzvh.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp9rnhgzvh.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9rnhgzvh.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rnhgzvh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9rnhgzvh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmp9rnhgzvh.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9rnhgzvh.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rnhgzvh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9rnhgzvh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp9rnhgzvh.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9rnhgzvh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rnhgzvh.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rnhgzvh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    n = length(strings)\n\
    \    if n == 0\n        return nothing\n    end\n    max_length = 0\n    max_string\
    \ = \"\"\n    for string in strings\n        if length(string) > max_length\n\
    \            max_length = length(string)\n            max_string = string\n  \
    \      end\n    end\n    return max_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    if length(strings) == 1\n        return\
    \ strings[1]\n    end\n    current_longest = strings[1]\n    for s in strings[2:end]\n\
    \        if length(s) > length(current_longest)\n            current_longest =\
    \ s\n        end\n    end\n    return current_longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_length = 0\n    longest_string =\
    \ nothing\n    for i = 1:length(strings)\n        current_length = length(strings[i])\n\
    \        if current_length > longest_length\n            longest_length = current_length\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    string_lengths\
    \ = [length(s) for s in strings]\n    if isempty(string_lengths)\n        return\
    \ nothing\n    else\n        max_idx = argmax(string_lengths)\n        return\
    \ strings[max_idx]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_word = strings[1]\n    for\
    \ word in strings\n        if length(word) > length(longest_word)\n          \
    \  longest_word = word\n        end\n    end\n    return longest_word\nend\n@assert\
    \ longest([]) == nothing\n@assert longest([\"a\", \"b\", \"c\"]) == \"a\"\n@assert\
    \ longest([\"a\", \"bb\", \"ccc\"]) == \"ccc\"\n \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching longest(::Vector{Any})'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for i in 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = \"\"\n    for string in strings\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02mt24r4.jl:24\n  Expression: candidate(Vector{String}([]))\
    \ == nothing\n   Evaluated: \"\" == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp02mt24r4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp02mt24r4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02mt24r4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    # Initialize max_length and max_string\n\
    \    max_length = length(strings[1])\n    max_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > max_length\n            max_length\
    \ = length(strings[i])\n            max_string = strings[i]\n        end\n   \
    \ end\n    return max_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return nothing\n    end\n    best_string = \"\"\n    for s in strings\n\
    \        if length(s) > length(best_string)\n            best_string = s\n   \
    \     end\n    end\n    return best_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    max_length\
    \ = maximum([length(s) for s in strings])\n    for s in strings\n        if length(s)\
    \ == max_length\n            return s\n        end\n    end\n    return \nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpktc5rkd7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] longest(strings::Vector{String})\n      @ Main /tmp/tmpktc5rkd7.jl:11\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpktc5rkd7.jl:24 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpktc5rkd7.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktc5rkd7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    max_string\
    \ = \"\"\n    for str in strings\n        if length(str) > length(max_string)\n\
    \            max_string = str\n        end\n    end\n    return max_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphehodb3t.jl:24\n  Expression: candidate(Vector{String}([]))\
    \ == nothing\n   Evaluated: \"\" == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphehodb3t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphehodb3t.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphehodb3t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = nothing\n    for string in strings\n        is_longer = length(string) > length(longest)\n\
    \        longest = string if is_longer else longest\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp44d7m2ts.jl:12 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp44d7m2ts.jl:14\n\
    in expression starting at /tmp/tmp44d7m2ts.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for str in\
    \ strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    len =\
    \ length(strings)\n    if len == 0\n        return nothing\n    end\n    max_string\
    \ = strings[1]\n    max_len = length(max_string)\n    for i = 2:len\n        str\
    \ = strings[i]\n        if length(str) > max_len\n            max_string = str\n\
    \            max_len = length(str)\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return strings[ findmax( [length(string)\
    \ for string in strings] )[2] ]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    isempty(strings)\
    \ && return nothing\n    max_length = -1\n    longest_string = nothing\n    for\
    \ s in strings\n        l = length(s)\n        l > max_length && (max_length =\
    \ l; longest_string = s)\n    end\n    longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = nothing\n    for s in strings\n        if longest === nothing || length(s)\
    \ > length(longest)\n            longest = s\n        end\n    end\n    return\
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return \n    end\n    longest = strings[1]\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_length = 0\n    long = nothing\n\
    \    for string in strings\n        if length(string) > longest_length\n     \
    \       long = string\n            longest_length = length(string)\n        end\n\
    \    end\n    return long\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    maximum_length\
    \ = 0\n    longest_string = nothing\n    for item in strings\n        length =\
    \ length(item)\n        if length > maximum_length\n            maximum_length\
    \ = length\n            longest_string = item\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8085zqxf.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp8085zqxf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8085zqxf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8085zqxf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8085zqxf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: length not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp8085zqxf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8085zqxf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8085zqxf.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8085zqxf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for i = 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ > 0\n        n = length(strings[1])\n        p = 1\n        for i in 2:length(strings)\n\
    \            if length(strings[i]) > n\n                n = length(strings[i])\n\
    \                p = i\n            end\n        end\n        return strings[p]\n\
    \    else\n        return nothing\n    end\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    len =\
    \ 0\n    lstring = nothing\n    for s in strings\n        l = length(s)\n    \
    \    if l > len\n            len = l\n            lstring = s\n        end\n \
    \   end\n    return lstring\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n \n    if\
    \ isempty(strings)\n        nothing\n    else\n        max_len = 0\n        longest_word\
    \ = \"\"\n        for i in strings\n            if length(i) > max_len\n     \
    \           max_len = length(i)\n                longest_word = i\n          \
    \  end\n        end\n    end\n    longest_word\nend\nprintln(longest([\"a\", \"\
    b\", \"c\"]))\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "a\nccc\ntest set: Error During Test at /tmp/tmpocb3spma.jl:33\n  Test threw\
    \ exception\n  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError:\
    \ longest_word not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpocb3spma.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpocb3spma.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocb3spma.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpocb3spma.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    isempty(strings)\
    \ && return nothing\n    index = indmax([length(str) for str in strings])\n  \
    \  return strings[index]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjr6anhd.jl:21\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpsjr6anhd.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjr6anhd.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjr6anhd.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsjr6anhd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpsjr6anhd.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjr6anhd.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjr6anhd.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjr6anhd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    max_length = 0\n    max_string =\
    \ \"\"\n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    best_string\
    \ = nothing\n    best_length = 0\n    for s in strings\n        if length(s) >\
    \ best_length\n            best_string = s\n            best_length = length(s)\n\
    \        end\n    end\n    return best_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    len_str\
    \ = length(strings)\n    if len_str == 0\n        return nothing\n    end\n  \
    \  if len_str == 1\n        return strings[1]\n    end\n    longest_i = 1\n  \
    \  for i = 2:len_str\n        if length(strings[i]) > length(strings[longest_i])\n\
    \            longest_i = i\n        end\n    end\n    return strings[longest_i]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest_string\
    \ = nothing\n    for string in strings\n        if longest_string === nothing\
    \ || length(string) > length(longest_string)\n            longest_string = string\n\
    \        end\n    end\n    return longest_string\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    sorted = sort(strings, rev=true,\
    \ by=length)\n    return sorted[1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    ret = strings[1]\n    for s in strings\n\
    \        if length(s) > length(ret)\n            ret = s\n        end\n    end\n\
    \    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    current = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(current)\n       \
    \     current = strings[i]\n        end\n    end\n    return current\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n  return isempty(strings)\
    \ ? nothing : reduce(max, strings)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1ijpddk.jl:19\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp1ijpddk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp1ijpddk.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1ijpddk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    lens =\
    \ map(x -> length(x), strings)\n    index = indmax(lens)\n    if isempty(strings)\n\
    \        return nothing\n    else\n        return strings[index]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppaa1zfvz.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmppaa1zfvz.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaa1zfvz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaa1zfvz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmppaa1zfvz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmppaa1zfvz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaa1zfvz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaa1zfvz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmppaa1zfvz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmppaa1zfvz.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaa1zfvz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaa1zfvz.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppaa1zfvz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_len = 0\n    longest_str = \"\"\n\
    \    for str in strings\n        if length(str) > longest_len\n            longest_len\
    \ = length(str)\n            longest_str = str\n        end\n    end\n    return\
    \ longest_str\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    current = strings[1]\n    for s\
    \ in strings\n        if length(s) > length(current)\n            current = s\n\
    \        end\n    end\n    return current\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for str in\
    \ strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    max_length::Int = 0\n    max_string::String\
    \ = \"\"\n    for string in strings\n        if length(string) > max_length\n\
    \            max_length = length(string)\n            max_string = string\n  \
    \      end\n    end\n    return max_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for str in\
    \ strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    long = strings[1]\n    for i = 2:length(strings)\n\
    \        if length(strings[i]) > length(long)\n            long = strings[i]\n\
    \        end\n    end\n    return long\nend\nlongest([\"aaaaa\", \"bbb\", \"ccccccc\"\
    ])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    len =\
    \ 0\n    max_str = \"\"\n    for i in strings\n        if length(i) > len\n  \
    \          len = length(i)\n            max_str = i\n        end\n    end\n  \
    \  return max_str\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfk6bk8yx.jl:26\n  Expression: candidate(Vector{String}([]))\
    \ == nothing\n   Evaluated: \"\" == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk6bk8yx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk6bk8yx.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk6bk8yx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    l = [length(s)\
    \ for s in strings]\n    if all(x == 0 for x in l)\n        return nothing\n \
    \   else\n        return strings[indmax(l)]\n    end\nend\nlongest([\"a\",\"\"\
    ,\"bb\"])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: indmax not defined\nStacktrace:\n [1]\
    \ longest(strings::Vector{String})\n   @ Main /tmp/tmp90lo9gw8.jl:15\n [2] top-level\
    \ scope\n   @ /tmp/tmp90lo9gw8.jl:18\nin expression starting at /tmp/tmp90lo9gw8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxlen = length(strings[1])\n    maxidx\
    \ = 1\n    for (i, s) in enumerate(strings)\n        if length(s) > maxlen\n \
    \           maxlen = length(s)\n            maxidx = i\n        end\n    end\n\
    \    return strings[maxidx]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    return\
    \ strings[findmax(length.(strings))[2]]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hhynnws.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp8hhynnws.jl:11\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp8hhynnws.jl:18 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp8hhynnws.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hhynnws.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    best = strings[1]\n    for s in strings\n\
    \        if length(s) > length(best)\n            best = s\n        end\n    end\n\
    \    return best\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n  # Sample\
    \ implementation. Please replace with your implementation.\n  # Note that the\
    \ type of the output is Union{String, Nothing}\n  # which means that it can be\
    \ either a string or nothing (as in the signature)\n  i = 0\n  for s in strings\n\
    \    i = max(i, length(s))\n  end\n  for s in strings\n    if length(s) == i\n\
    \      return s\n    end\n  end\n  return nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    sorted = sort(strings, by=length,\
    \ rev=true)\n    return sorted[1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for str in strings\n\
    \        if length(str) > length(longest)\n            longest = str\n       \
    \ end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    max_length = length(strings[1])\n\
    \    max_length_idx = 1\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > max_length\n            max_length = length(strings[i])\n            max_length_idx\
    \ = i\n        end\n    end\n    return strings[max_length_idx]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    res =\
    \ nothing\n    for s in strings\n        if res == nothing || length(s) > length(res)\n\
    \            res = s\n        end\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return strings[argmax(length.(strings))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        longest_string = max(longest_string, strings[i])\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmmtoz6wd.jl:26\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmtoz6wd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmtoz6wd.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmtoz6wd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # your\
    \ code here\n    # remember to use the return keyword\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9v2vn952.jl:21\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: nothing == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9v2vn952.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9v2vn952.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9v2vn952.jl:22\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: nothing == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9v2vn952.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9v2vn952.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9v2vn952.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    res = strings[1]\n    for str in strings\n\
    \        if length(str) > length(res)\n            res = str\n        end\n  \
    \  end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    max_length\
    \ = 0\n    longest_string = nothing\n    for i = 1:length(strings)\n        if\
    \ length(strings[i]) > max_length\n            max_length = length(strings[i])\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxlen = 0\n    maxstr = \"\"\n    for string\
    \ in strings\n        if length(string) > maxlen\n            maxlen = length(string)\n\
    \            maxstr = string\n        end\n    end\n    return maxstr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # output\
    \ is either a string or nothing\n    n = length(strings)\n    if n == 0\n    \
    \    return  # return nothing\n    end\n    longest = strings[1]\n    for i in\
    \ 2:n\n        if length(strings[i]) > length(longest)\n            longest =\
    \ strings[i]\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = length(strings[1])\n    result\
    \ = strings[1]\n    for i in 2:length(strings)\n        string = strings[i]\n\
    \        if length(string) > max_length\n            max_length = length(string)\n\
    \            result = string\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len, max_str = 0, \"\"\n    for s in\
    \ strings\n        if length(s) > max_len\n            max_len, max_str = length(s),\
    \ s\n        end\n    end\n    return max_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    max_length = 0\n    longest_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > max_length\n    \
    \        max_length = length(s)\n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest_str)\n            longest_str = s\n   \
    \     end\n    end\n    return longest_str\nend\nlongest([\"a\", \"bb\", \"ccc\"\
    ])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for s in strings\n        if length(s) > length(longest_string)\n          \
    \  longest_string = s\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_one = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length(longest_one)\n            longest_one\
    \ = strings[i]\n        end\n    end\n    return longest_one\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n  maxlen =\
    \ maximum([length(s) for s in strings])\n  for s in strings\n    if length(s)\
    \ == maxlen\n      return s\n    end\n  end\n  return\nend\nlongest([\"a\", \"\
    bb\", \"ccc\"])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2eqwn0a_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] longest(strings::Vector{String})\n      @ Main /tmp/tmp2eqwn0a_.jl:11\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp2eqwn0a_.jl:25 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp2eqwn0a_.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2eqwn0a_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return \n    end\n    return strings[argmax(map(length, strings))]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for str in\
    \ strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_str = strings[1]\n    for\
    \ str in strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    long = strings[1]\n    for s in strings\n\
    \        if length(s) > length(long)\n            long = s\n        end\n    end\n\
    \    return long\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    long_str = strings[1]\n    for s in strings\n\
    \        if length(s) > length(long_str)\n            long_str = s\n        end\n\
    \    end\n    return long_str\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return reduce(f, strings)\nend\nlongest(['a',\
    \ 'bb', 'ccc'])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3jsfu0c1.jl:16\nin expression\
    \ starting at /tmp/tmp3jsfu0c1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return \n    end\n    index_of_longest = 1\n    len_of_longest = length(strings[1])\n\
    \    for (i, string) in enumerate(strings)\n        if length(string) > len_of_longest\n\
    \            index_of_longest = i\n            len_of_longest = length(string)\n\
    \        end\n    end\n    return strings[index_of_longest]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return nothing\n    end\n    max_length = -1\n    longest_string =\
    \ nothing\n    for s in strings\n        l = length(s)\n        if l > max_length\n\
    \            max_length = l\n            longest_string = s\n        end\n   \
    \ end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longestString = strings[1]\n    for\
    \ s in strings\n        if length(s) > length(longestString)\n            longestString\
    \ = s\n        end\n    end\n    return longestString\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    len = 0\n    longest = \"\"\n    for s in\
    \ strings\n        if length(s) > len\n            len = length(s)\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    longest_string = strings[1]\n  \
    \  for s in strings\n        if length(s) > length(longest_string)\n         \
    \   longest_string = s\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    strlen\
    \ = [length(s) for s in strings]\n    longest_str = findmax(strlen)[2]\n    if\
    \ isempty(longest_str)\n        return nothing\n    else\n        return strings[longest_str]\n\
    \    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_z_r7moz.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmp_z_r7moz.jl:12\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp_z_r7moz.jl:25 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp_z_r7moz.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_z_r7moz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    lenghts\
    \ = [length(s) for s in strings]\n    lenghts == zero(lengths) && return nothing\n\
    \    index = findfirst(x -> x == maximum(lengths), lengths)\n    return strings[index]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcv1k_zgj.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: lengths\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpcv1k_zgj.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv1k_zgj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv1k_zgj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcv1k_zgj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: lengths not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpcv1k_zgj.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv1k_zgj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv1k_zgj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcv1k_zgj.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: lengths not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpcv1k_zgj.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv1k_zgj.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv1k_zgj.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv1k_zgj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    if length(strings) == 1\n       \
    \ return strings[1]\n    end\n    candidate = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length(candidate)\n            candidate = strings[i]\n\
    \        end\n    end\n    return candidate\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    l = length(strings[1])\n    result\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > l\n            l = length(strings[i])\n            result = strings[i]\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    # could also use maximum here\n    return\
    \ strings[argmax(length.(strings))]\nend\n    \nstrings = [\"a\", \"bb\", \"ccc\"\
    ]\nprintln(longest(strings))\nprintln(longest(strings))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ccc\nccc\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxlen = maximum(length.(strings))\n   \
    \ for string in strings\n        if length(string) == maxlen\n            return\
    \ string\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxlength = length(strings[1])\n    maxstring\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > maxlength\n            maxlength = length(strings[i])\n            maxstring\
    \ = strings[i]\n        end\n    end\n    return maxstring\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    longest = strings[1]\n    for str in strings\n \
    \       if length(str) > length(longest)\n            longest = str\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if !isempty(strings)\n\
    \        longest = strings[1]\n        for s in strings\n            if length(s)\
    \ > length(longest)\n                longest = s\n            end\n        end\n\
    \        return longest\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return strings[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00kjerc3.jl:23\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00kjerc3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00kjerc3.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00kjerc3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest)\n            longest = s\n \
    \       end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    longest_string = \"\"\n\
    \    for i = 1:length(strings)\n        if length(strings[i]) > max_len\n    \
    \        max_len = length(strings[i])\n            longest_string = strings[i]\n\
    \        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    max_str = strings[1]\n    for string in strings\n\
    \        if length(string) > length(max_str)\n            max_str = string\n \
    \       end\n    end\n    return max_str\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = length(strings[1])\n    longest_word\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > max_len\n            max_len = length(strings[i])\n            longest_word\
    \ = strings[i]\n        end\n    end\n    return longest_word\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longeststring::String = strings[1]\n   \
    \ for i in 2:length(strings)\n        if length(strings[i]) > length(longeststring)\n\
    \            longeststring = strings[i]\n        end\n    end\n    return longeststring\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    n = 0\n    longest_string = \"\"\n    for\
    \ s in strings\n        if length(s) > n\n            n = length(s)\n        \
    \    longest_string = s\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    lengths = map(x -> length(x), strings)\n\
    \    long_string = strings[findmax(lengths)[2]]\n    return long_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    string_lengths = [length(string) for string\
    \ in strings]\n    max_length = maximum(string_lengths)\n    max_length_index\
    \ = findall(x -> x == max_length, string_lengths)[1]\n    return strings[max_length_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = length(strings[1])\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > max_length\n\
    \            max_length = length(string)\n            longest_string = string\n\
    \        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    max = 0\n    for s in strings\n \
    \       if length(s) > max\n            max = length(s)\n        end\n    end\n\
    \    for s in strings\n        if length(s) == max\n            return s\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return nothing\n    end\n    best = strings[1]\n    for x in\
    \ strings[2:end]\n        if length(x) > length(best)\n            best = x\n\
    \        end\n    end\n    return best\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # your\
    \ code here\n    if length(strings) == 0\n        return nothing\n    end\n  \
    \  best_str = strings[1]\n    for str in strings\n        if length(str) > length(best_str)\n\
    \            best_str = str\n        end\n    end\n    return best_str\nend\n\
    longest([\"aaa\",\"zzz\",\"hhhhh\",\"x\",\"oo\",\"fdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdgfdg\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ct9kr6b.jl:30\nin expression starting at\
    \ /tmp/tmp7ct9kr6b.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max = length(strings[1])\n    longest =\
    \ strings[1]\n    for i in 2:length(strings)\n        if length(strings[i]) >\
    \ max\n            max = length(strings[i])\n            longest = strings[i]\n\
    \        end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # check\
    \ for empty input\n    if length(strings) == 0\n        return nothing\n    end\n\
    \    # check for length 1\n    if length(strings) == 1\n        return strings[1]\n\
    \    end\n    # iterate over strings\n    longest_element = strings[1]\n    for\
    \ i in 2:length(strings)\n        if length(strings[i]) > length(longest_element)\n\
    \            longest_element = strings[i]\n        end\n    end\n    return longest_element\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for str in\
    \ strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    m = length(strings)\n\
    \    if m == 0\n        return nothing\n    end\n    longest_s = strings[1]\n\
    \    longest_l = length(longest_s)\n    for i = 2:m\n        s = strings[i]\n\
    \        l = length(s)\n        if l > longest_l\n            longest_s = s\n\
    \            longest_l = l\n        end\n    end\n    return longest_s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    s_longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(s_longest)\n            s_longest = s\n       \
    \ end\n    end\n    return s_longest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # handle\
    \ empty input case\n    if isempty(strings)\n        return nothing\n    end\n\
    \    \n    # iterate through the list and keep track of longest string\n    longest_string\
    \ = strings[1]\n    for i = 2:length(strings)\n        if length(strings[i]) >\
    \ length(longest_string)\n            longest_string = strings[i]\n        end\n\
    \    end\n    \n    return longest_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = \"\"\n    for i in strings\n \
    \       if length(i) > length(longest)\n            longest = i\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len, max_str = 0, \"\"\n    for s in\
    \ strings\n        if length(s) > max_len\n            max_len, max_str = length(s),\
    \ s\n        end\n    end\n    return max_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_6i8c38.jl:19\n  Expression: candidate([\"\
    x\", \"y\", \"z\"]) == \"x\"\n   Evaluated: nothing == \"x\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_6i8c38.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_6i8c38.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp8_6i8c38.jl:20\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: nothing == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8_6i8c38.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8_6i8c38.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_6i8c38.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return strings[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0i7bvff.jl:23\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa0i7bvff.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa0i7bvff.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0i7bvff.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for str\
    \ in strings\n        if length(str) > length(longest_string)\n            longest_string\
    \ = str\n        end\n    end\n    return longest_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    long = strings[1]\n    for s in strings\n\
    \        if length(s) > length(long)\n            long = s\n        end\n    end\n\
    \    return long\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest = strings[1]\n    for i in\
    \ strings\n        if length(i) > length(longest)\n            longest = i\n \
    \       end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest_length\
    \ = -1 \n    longest_string = \"\"\n    for s in strings\n        if length(s)\
    \ > longest_length\n            longest_length = length(s)\n            longest_string\
    \ = s\n        end\n    end\n    if longest_length > 0\n        return longest_string\n\
    \    else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    l = 1\n    for i = 2:length(strings)\n \
    \       if length(strings[i]) > length(strings[l])\n            l = i\n      \
    \  end\n    end\n    return strings[l]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return nothing\n    end\n    max_len = 0\n    for string in strings\n\
    \        if length(string) > max_len\n            max_len = length(string)\n \
    \           longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcg3s__4v.jl:29\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: longest_string\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpcg3s__4v.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcg3s__4v.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcg3s__4v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcg3s__4v.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: longest_string not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpcg3s__4v.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcg3s__4v.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcg3s__4v.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcg3s__4v.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for str in strings\n        if length(str) > length(longest_string)\n      \
    \      longest_string = str\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest = strings[1]\n    for (index,\
    \ string) in enumerate(strings)\n        if length(string) > length(longest)\n\
    \            longest = string\n        end\n    end\n    return longest\nend\n\
    longest(strings::Vector{String}) = maximum(strings, lt=length)\nprintln(longest([\"\
    a\", \"ab\", \"abc\"]))\nprintln(longest([]))\nprintln(longest([\"a\", \"b\",\
    \ \"c\"]))\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching mapreduce(::typeof(identity),\
    \ ::typeof(max), ::Vector{String}; lt=length)'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for str in strings\n\
    \        if length(str) > length(longest)\n            longest = str\n       \
    \ end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    first_str = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length(first_str)\n            first_str = strings[i]\n\
    \        end\n    end\n    return first_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    len_longest = 0\n    len_this = 0\n    longest_string\
    \ = \"\"\n    for i in strings\n        len_this = length(i)\n        if len_this\
    \ > len_longest\n            len_longest = len_this\n            longest_string\
    \ = i\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    x, y = strings[1], strings[1]\n    for string\
    \ in strings\n        if length(string) > length(x)\n            x = string\n\
    \        end\n    end\n    x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxLength = 0\n    longestString = \"\"\n\
    \    for s in strings\n        if length(s) > maxLength\n            maxLength\
    \ = length(s)\n            longestString = s\n        end\n    end\n    return\
    \ longestString\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    result = nothing\n \
    \   for i in strings\n        if length(i) > max_length\n            max_length\
    \ = length(i)\n            result = i\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longeststring\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longeststring)\n\
    \            longeststring = string\n        end\n    end\n    return longeststring\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm6x7lmp4.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpm6x7lmp4.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm6x7lmp4.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm6x7lmp4.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6x7lmp4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    longest_str = strings[1]\n    for str in strings\n\
    \        if length(str) > length(longest_str)\n            longest_str = str\n\
    \        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    maxlen, maxstring = (length(strings[1]),\
    \ strings[1])\n    for str in strings[2:end]\n        if length(str) > maxlen\n\
    \            maxlen, maxstring = (length(str), str)\n        end\n    end\n  \
    \  return maxstring\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    max_str = \"\"\n    for\
    \ s in strings\n        if length(s) > max_len\n            max_len = length(s)\n\
    \            max_str = s\n        end\n    end\n    return max_str\nend\nprintln(longest([\"\
    a\", \"bb\", \"ccc\"]))\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ccc\nTest Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    lens = [length(s) for s in strings]\n  \
    \  max_i = indmax(lens)\n    return strings[max_i]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmparo9049y.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: indmax\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmparo9049y.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmparo9049y.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmparo9049y.jl:22\ntest set:\
    \ Error During Test at /tmp/tmparo9049y.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: indmax not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmparo9049y.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmparo9049y.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmparo9049y.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparo9049y.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for i = 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest_string\
    \ = nothing\n    if !isempty(strings)\n        longest_string = strings[1]\n \
    \       for string in strings\n            if length(string) > length(longest_string)\n\
    \                longest_string = string\n            end\n        end\n    end\n\
    \    return longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\
    \ \n        return nothing\n    end\n    longest_string = strings[1]\n    for\
    \ i = 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    n = length(strings)\n    longest = strings[1]\n\
    \    for s in strings[2:n]\n        if length(s) > length(longest)\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    max_length\
    \ = maximum([length(string) for string in strings])\n    if length(strings) ==\
    \ 0\n        return nothing\n    elseif max_length == 0\n        return \"\"\n\
    \    else\n        longest_strings = filter(x -> length(x) == max_length, strings)\n\
    \        return longest_strings[1]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbtwi0xqg.jl:26\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] longest(strings::Vector{String})\n      @ Main /tmp/tmpbtwi0xqg.jl:11\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpbtwi0xqg.jl:26 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpbtwi0xqg.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbtwi0xqg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    return strings[argmax(length, strings)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgqsy83ph.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  ArgumentError: invalid\
    \ index: \"x\" of type String\n  Stacktrace:\n    [1] to_index(i::String)\n  \
    \    @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String}, i::String)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpgqsy83ph.jl:14\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgqsy83ph.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgqsy83ph.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgqsy83ph.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  ArgumentError: invalid index: \"zzzz\" of type String\n  Stacktrace:\n   \
    \ [1] to_index(i::String)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::String)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] longest(strings::Vector{String})\n\
    \      @ Main /tmp/tmpgqsy83ph.jl:14\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgqsy83ph.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgqsy83ph.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqsy83ph.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    out = strings[1]\n    for s in strings\n\
    \        if length(s) > length(out)\n            out = s\n        end\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return\n    end\n    max_length = length(strings[1])\n    max_index\
    \ = 1\n    for i = 2:length(strings)\n        if length(strings[i]) > max_length\n\
    \            max_length = length(strings[i])\n            max_index = i\n    \
    \    end\n    end\n    return strings[max_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    best_string = strings[1]\n    for s in strings\n\
    \        if length(s) > length(best_string)\n            best_string = s\n   \
    \     end\n    end\n    return best_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = length(strings[1])\n    longest_string\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > max_length\n            max_length = length(strings[i])\n            longest_string\
    \ = strings[i]\n        end\n    end\n    return longest_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    longest_str_len\
    \ = length(longest_str)\n    for s in strings[2:end]\n        l = length(s)\n\
    \        if l > longest_str_len\n            longest_str = s\n            longest_str_len\
    \ = l\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    max_len\
    \ = 0\n    longest_str = nothing\n    for s in strings\n        if length(s) >\
    \ max_len\n            max_len = length(s)\n            longest_str = s\n    \
    \    end\n    end\n    return longest_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    longest = strings[1]\n    for s in strings[2:end]\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    n = length(strings)\n    max = 0\n    max_idx\
    \ = 0\n    for i = 1:n\n        if length(strings[i]) > max\n            max =\
    \ length(strings[i])\n            max_idx = i\n        end\n    end\n    return\
    \ strings[max_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    long = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length(long)\n            long = strings[i]\n\
    \        end\n    end\n    return long\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for i = 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\n# If length(strings) == 0, return nothing; otherwise, \n# initialize longest_string\
    \ to the first string in strings,\n# and then iterate over the rest of the strings\
    \ to see if any is longer\n# than the current longest_string.\n# Time complexity\
    \ is O(n), where n is the length of the input list.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = length(strings[1])\n    longest_string\
    \ = strings[1]\n    for i in 2:length(strings)\n        if length(strings[i])\
    \ > max_length\n            max_length = length(strings[i])\n            longest_string\
    \ = strings[i]\n        end\n    end\n    return longest_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    return strings[1]\nend\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx5cpl_8c.jl:25\n  Expression: candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated:\
    \ \"x\" == \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5cpl_8c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5cpl_8c.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx5cpl_8c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    best = strings[1]\n    for s in strings\n\
    \        if length(s) > length(best)\n            best = s\n        end\n    end\n\
    \    return best\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest = strings[1]\n    for i =\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest)\n       \
    \     longest = strings[i]\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if !isempty(strings)\n\
    \        #get the length of the longest string\n        longest_length = maximum(length.(strings))\n\
    \        #find the first string with the longest length\n        first_longest_string\
    \ = strings[findfirst(length.(strings) .== longest_length)]\n        return first_longest_string\n\
    \    else\n        return nothing\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    curr_longest = strings[1]\n    for\
    \ s in strings\n        if length(s) > length(curr_longest)\n            curr_longest\
    \ = s\n        end\n    end\n    return curr_longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    length(strings) == 0 && return nothing\n\
    \    l = strings[1]\n    for i in 2:length(strings)\n        s = strings[i]\n\
    \        l = s > l ? s : l\n    end\n    return l\nend\nprintln(longest([\"a\"\
    , \"b\", \"c\"]))\nprintln(longest([\"a\", \"bb\", \"ccc\"]))\nprintln(longest([]))\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "c\nccc\n"
  stderr: "ERROR: LoadError: MethodError: no method matching longest(::Vector{Any})\n\
    Closest candidates are:\n  longest(!Matched::Vector{String}) at /tmp/tmpldgpzbuk.jl:10\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpldgpzbuk.jl:24\nin expression\
    \ starting at /tmp/tmpldgpzbuk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return\n    end\n    longest = strings[1]\n    for string in strings\n\
    \        if length(string) > length(longest)\n            longest = string\n \
    \       end\n    end\n    return longest\nend\n\"\"\"\n    Out of a list of strings,\
    \ return another list of strings where only the \n    longest ones are kept. \n\
    \    >>> longest(['a', 'b', 'c'])\n    ['a', 'b', 'c']\n    >>> longest(['a',\
    \ 'bb', 'ccc'])\n    ['ccc']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpwp19_wc1.jl:22\nin expression starting at /tmp/tmpwp19_wc1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    if length(strings) == 1\n        return\
    \ strings[1]\n    end\n    max_len = length(strings[1])\n    max_len_index = 1\n\
    \    for i = 2:length(strings)\n        if length(strings[i]) > max_len\n    \
    \        max_len = length(strings[i])\n            max_len_index = i\n       \
    \ end\n    end\n    return strings[max_len_index]\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # precondition:\
    \ input is a list of strings, \n    #               no element is empty string\n\
    \    assert(length(strings) != 0)\n    length(strings) == 0 && return nothing\n\
    \    max_len = 0\n    max_string = \"\"\n    for string in strings\n        length(string)\
    \ > max_len && (max_len = length(string)) && (max_string = string)\n    end\n\
    \    return max_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5zy0547j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmp5zy0547j.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5zy0547j.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5zy0547j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5zy0547j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmp5zy0547j.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5zy0547j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5zy0547j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5zy0547j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: assert not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp5zy0547j.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5zy0547j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5zy0547j.jl:26\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zy0547j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    i = 1\n    max_length = length(strings[1])\n\
    \    for string in strings\n        if length(string) > max_length\n         \
    \   max_length = length(string)\n            i = strings.index(string)\n     \
    \   end\n    end\n    return strings[i]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf4biq2lz.jl:31\n  Test threw exception\n\
    \  Expression: candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"\
    ]) == \"zzzz\"\n  type Array has no field index\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] longest(strings::Vector{String})\n    \
    \ @ Main /tmp/tmpf4biq2lz.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf4biq2lz.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf4biq2lz.jl:28\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4biq2lz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    # Selecting\
    \ the subvector with the longest length will be done using `reduce`. The\n   \
    \ # element(s) with the longest length can be found by calling the maxlength()\n\
    \    # function on the subvector. As this will return a subvector, the head of\
    \ it is\n    # extracted.\n    return get(\n        reduce(\n            u ->\
    \ u[maxlength(u)],\n            strings,\n            []\n        ),\n       \
    \ 1,\n        nothing\n    )\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcyd558fb.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: no method\
    \ matching reduce(::var\"#1#2\", ::Vector{String}, ::Vector{Any})\n  Closest candidates\
    \ are:\n    reduce(::Any, ::AbstractArray; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:371\n\
    \    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpcyd558fb.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyd558fb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcyd558fb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcyd558fb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  MethodError: no method matching\
    \ reduce(::var\"#1#2\", ::Vector{String}, ::Vector{Any})\n  Closest candidates\
    \ are:\n    reduce(::Any, ::AbstractArray; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:371\n\
    \    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    ...\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpcyd558fb.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcyd558fb.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcyd558fb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcyd558fb.jl:32\n  Test threw exception\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyd558fb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    pass\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuy02bks9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpuy02bks9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy02bks9.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy02bks9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpuy02bks9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: pass not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpuy02bks9.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy02bks9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy02bks9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpuy02bks9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpuy02bks9.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuy02bks9.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuy02bks9.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuy02bks9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_length = 0\n    longest_string\
    \ = \"\"\n    for string in strings\n        if length(string) > longest_length\n\
    \            longest_length = length(string)\n            longest_string = string\n\
    \        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if strings\
    \ == []\n        return nothing\n    end\n    max_index = 1\n    max_len = length(strings[1])\n\
    \    for i in 2:length(strings)\n        if length(strings[i]) > max_len\n   \
    \         max_index = i\n            max_len = length(strings[i])\n        end\n\
    \    end\n    return strings[max_index]\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = maximum(length.(strings))\n  \
    \  first_longest = strings[findall(length.(strings) .== max_len)[1]]\n    return\
    \ first_longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    n = length(strings)\n\
    \    if n == 0\n        return nothing\n    end\n    if n == 1\n        return\
    \ strings[1]\n    end\n    longest_ = strings[1]\n    for i = 2:n\n        if\
    \ length(strings[i]) > length(longest_)\n            longest_ = strings[i]\n \
    \       end\n    end\n    return longest_\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_str = strings[1]\n    for\
    \ str in strings\n        if length(str) > length(longest_str)\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    return\
    \ ifelse(empty(strings), nothing, strings[findfirst(==(maximum(lengths(strings))),\
    \ lengths(strings))])\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkvurfmf4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  UndefVarError: lengths\
    \ not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @\
    \ Main /tmp/tmpkvurfmf4.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvurfmf4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvurfmf4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkvurfmf4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  UndefVarError: lengths not defined\n\
    \  Stacktrace:\n   [1] longest(strings::Vector{String})\n     @ Main /tmp/tmpkvurfmf4.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvurfmf4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvurfmf4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpkvurfmf4.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  UndefVarError: lengths not defined\n  Stacktrace:\n   [1] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpkvurfmf4.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkvurfmf4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkvurfmf4.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkvurfmf4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    # initialize longest_string\n    longest_string\
    \ = strings[1]\n    for string in strings\n        if length(string) > length(longest_string)\n\
    \            longest_string = string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    lenlist\
    \ = map(string -> length(string), strings)\n    max_len = maximum(lenlist)\n \
    \   max_idx = findall(lenlist .== max_len)[1]\n    if isempty(strings)\n     \
    \   return nothing\n    else\n        return strings[max_idx]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7jgz3fl0.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] longest(strings::Vector{String})\n      @ Main /tmp/tmp7jgz3fl0.jl:12\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp7jgz3fl0.jl:25 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp7jgz3fl0.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jgz3fl0.jl:22\n"
  exit_code: 1
  status: SyntaxError
