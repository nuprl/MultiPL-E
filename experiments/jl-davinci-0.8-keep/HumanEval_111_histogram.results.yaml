name: HumanEval_111_histogram
language: jl
results:
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpksz2htwq.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpksz2htwq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksz2htwq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpksz2htwq.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpksz2htwq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksz2htwq.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpksz2htwq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in test\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0jbr5zw5.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp0jbr5zw5.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp0jbr5zw5.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp0jbr5zw5.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp0jbr5zw5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0jbr5zw5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpay09lhid.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay09lhid.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay09lhid.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpay09lhid.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpay09lhid.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpay09lhid.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpay09lhid.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d1=Dict() \n    for i in split(test) \n        d1[i]=get(d1,i,0)+1 \n\
    \    end \n    return d1 \nend \nhistogram(\"b b b b a\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2jx8ujdv.jl:27\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jx8ujdv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jx8ujdv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2jx8ujdv.jl:30\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jx8ujdv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jx8ujdv.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jx8ujdv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letter_count = Dict{String, Int64}()\n    highest_count = 0\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt996okn4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt996okn4.jl:1\n\
    in expression starting at /tmp/tmpt996okn4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n \n    \n    dict = Dict{String, Int64}()\n    # test2 = char.(lowercase(test))\n\
    \    test2 = split(lowercase(test))\n    count = 0\n    if length(test2) == 0\n\
    \        dict\n        return dict\n    end\n    # test2 = split(test2)\n    #\
    \ test2 = strip(test2)\n    println(test2)\n    for i in 1:length(test2)\n   \
    \     for j in 1:length(test2)\n            if test2[i] == test2[j]\n        \
    \        count += 1\n            end\n        end\n        dict[test2[i]] = count\n\
    \        count = 0\n    end\n    # return maximum(values(dict))\n    return dict\n\
    end\n# histogram('a b c')\nhistogram('b b b b a')\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp2uvdqco2.jl:41\nin expression\
    \ starting at /tmp/tmp2uvdqco2.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict([(c, count(test, c)) for c in unique(test)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq14f2be5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ objects of type String are not callable\n  Stacktrace:\n    [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] count(f::String,\
    \ itr::Char; init::Int64)\n      @ Base ./reduce.jl:1201\n    [3] count(f::String,\
    \ itr::Char)\n      @ Base ./reduce.jl:1201\n    [4] (::var\"#1#2\"{String})(c::Char)\n\
    \      @ Main ./none:0\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [6] collect\n      @ ./array.jl:724 [inlined]\n    [7] histogram(test::String)\n\
    \      @ Main /tmp/tmpq14f2be5.jl:14\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpq14f2be5.jl:21 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpq14f2be5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq14f2be5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n    [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] count(f::String,\
    \ itr::Char; init::Int64)\n      @ Base ./reduce.jl:1201\n    [3] count(f::String,\
    \ itr::Char)\n      @ Base ./reduce.jl:1201\n    [4] (::var\"#1#2\"{String})(c::Char)\n\
    \      @ Main ./none:0\n    [5] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [6] collect\n      @ ./array.jl:724 [inlined]\n    [7] histogram(test::String)\n\
    \      @ Main /tmp/tmpq14f2be5.jl:14\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpq14f2be5.jl:22 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpq14f2be5.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq14f2be5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if length(test) == 0\n        return Dict{String, Int64}()\n    end\n\
    \    letters::Array{String, 1} = split(test)\n    d::Dict{String, Int64} = Dict{String,\
    \ Int64}()\n    for l in letters\n        if haskey(d, l)\n            d[l] +=\
    \ 1\n        else\n            d[l] = 1\n        end\n    end\n    return d\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt881ywrr.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt881ywrr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt881ywrr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpt881ywrr.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt881ywrr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt881ywrr.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt881ywrr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create dictionary to store counts of letters\n    letter_counts = Dict{String,\
    \ Int64}()\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82hapg_s.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp82hapg_s.jl:1\n\
    in expression starting at /tmp/tmp82hapg_s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    output = Dict{String, Int64}()\n    for c in test\n        output[c] =\
    \ get(output, c, 0) + 1\n    end\n    output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpglx1gith.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpglx1gith.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpglx1gith.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpglx1gith.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpglx1gith.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpglx1gith.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglx1gith.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    my_dict = Dict{String, Int64}()\n    for letter in test\n        if (haskey(my_dict,\
    \ letter))\n            my_dict[letter] += 1\n        else\n            my_dict[letter]\
    \ = 1\n        end\n    end\n    max_value = maximum(values(my_dict))\n    to_return\
    \ = Dict{String, Int64}()\n    for (key, value) in my_dict\n        if value ==\
    \ max_value\n            to_return[key] = value\n        end\n    end\n    return\
    \ to_return\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpumip_uyy.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpumip_uyy.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpumip_uyy.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpumip_uyy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpumip_uyy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpumip_uyy.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumip_uyy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # init dictionary\n    h = Dict{String, Int64}()\n    # get each lowercase\
    \ letter and count occurrences\n    for letter in test\n        if letter != '\
    \ '\n            h[string(letter)] = get(h, string(letter), 0) + 1\n        end\n\
    \    end\n    # get keys from the dictionary\n    get_keys = collect(keys(h))\n\
    \    # get highest count of the dictionary\n    get_highest_count = maximum(values(h))\n\
    \    # init dictionary of the letters that have the same highest occurrences\n\
    \    highest_values = Dict{String, Int64}()\n    # add the letters that have the\
    \ same highest occurrences\n    for key in get_keys\n        if h[key] == get_highest_count\n\
    \            highest_values[key] = get_highest_count\n        end\n    end\n \
    \   # return the dictionary with letters that have the same highest occurrences\n\
    \    return highest_values\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9dujn142.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp9dujn142.jl:25\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp9dujn142.jl:48 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp9dujn142.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9dujn142.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test::Dict{String, Int64} = Dict()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4p4s99xe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4p4s99xe.jl:1\n\
    in expression starting at /tmp/tmp4p4s99xe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict(a->1, b->1, c->1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpks6l2v7d.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching Dict(::var\"#1#4\", ::var\"#2#5\", ::var\"#3#6\")\n  Closest\
    \ candidates are:\n    Dict(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:127\n\
    \  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpks6l2v7d.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks6l2v7d.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks6l2v7d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpks6l2v7d.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching Dict(::var\"#1#4\", ::var\"#2#5\", ::var\"#3#6\")\n  Closest\
    \ candidates are:\n    Dict(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:127\n\
    \  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpks6l2v7d.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks6l2v7d.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks6l2v7d.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpks6l2v7d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  MethodError: no method matching Dict(::var\"#1#4\", ::var\"\
    #2#5\", ::var\"#3#6\")\n  Closest candidates are:\n    Dict(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:127\n\
    \  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpks6l2v7d.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpks6l2v7d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist_dict = Dict{String, Int64}()\n    for letter in test\n        if\
    \ hist_dict[letter] == nothing\n            hist_dict[letter] = 1\n        else\n\
    \            hist_dict[letter] += 1\n        end\n    end\n    return hist_dict\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeilinlga.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpeilinlga.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeilinlga.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeilinlga.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpeilinlga.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpeilinlga.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeilinlga.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeilinlga.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpeilinlga.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String,\
    \ Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpeilinlga.jl:16\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeilinlga.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeilinlga.jl:28\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeilinlga.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict{String, Int64}()\n    for c in test\n        if haskey(dict,\
    \ c)\n            dict[c] += 1\n        else\n            dict[c] = 1\n      \
    \  end\n    end\n    dict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_gumdedu.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_gumdedu.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_gumdedu.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_gumdedu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_gumdedu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_gumdedu.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gumdedu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # initialize the output dictionary\n    hist = Dict{String, Int64}()\n\
    \    # split the string in list of words\n    words = split(test)\n    # iterate\
    \ over all words\n    for w in words\n        # if the word is not already in\
    \ the dictionary add it and initialize the count\n        if haskey(hist, w) ==\
    \ false\n            hist[w] = 0\n        end\n        # increase the count of\
    \ the word\n        hist[w] += 1\n    end\n    # sort the dictionary by value\n\
    \    return sort(hist, by=x->x[2], rev=true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjzl6_2xs.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching sort(::Dict{String, Int64}; by=var\"#1#2\"(), rev=true)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword arguments \"by\", \"rev\"\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported\
    \ keyword arguments \"by\", \"rev\"\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpjzl6_2xs.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzl6_2xs.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzl6_2xs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjzl6_2xs.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching sort(::Dict{String, Int64}; by=var\"#1#2\"(), rev=true)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword arguments \"by\", \"rev\"\n    sort(!Matched::AbstractRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported\
    \ keyword arguments \"by\", \"rev\"\n    sort(!Matched::SparseArrays.SparseVector{Tv,\
    \ Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpjzl6_2xs.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzl6_2xs.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict()\n    for c in split(test, \" \")\n        d[c] = get(d, c,\
    \ 0) + 1\n    end\n    d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphl288guw.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphl288guw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphl288guw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphl288guw.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphl288guw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphl288guw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphl288guw.jl:31\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphl288guw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphl288guw.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphl288guw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test.replace(\" \", \"\")\n\
    \        hist[c] = get(hist, c, 0) + 1\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmposlwdohb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ String has no field replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmposlwdohb.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmposlwdohb.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmposlwdohb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmposlwdohb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type String has\
    \ no field replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmposlwdohb.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmposlwdohb.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmposlwdohb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmposlwdohb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type String has no field replace\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmposlwdohb.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmposlwdohb.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmposlwdohb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmposlwdohb.jl:28\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmposlwdohb.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict()\n    for c in test\n        if haskey(d, c)\n            d[c]\
    \ += 1\n        else\n            d[c] = 1\n        end\n    end\n    return d\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8xmp0567.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp8xmp0567.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8xmp0567.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8xmp0567.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8xmp0567.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8xmp0567.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    let counter::Dict{String, Int64} = Dict(c => count(test, c) for c in Set(test))\n\
    \    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjtb89w_f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjtb89w_f.jl:1\n\
    in expression starting at /tmp/tmpjtb89w_f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    t = split(test)\n    letter = []\n    count = []\n    for i in t\n   \
    \     if i in letter\n            count[findfirst(x->x==i, letter)] += 1\n   \
    \     else\n            push!(letter, i)\n            push!(count, 1)\n      \
    \  end\n    end\n    return Dict(letter[i] => count[i] for i in 1:length(letter))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9nqq0_nj.jl:33\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nqq0_nj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nqq0_nj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9nqq0_nj.jl:36\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9nqq0_nj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9nqq0_nj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9nqq0_nj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    values = values(hist)\n    maxval\
    \ = maximum(values)\n    maxdict = Dict{String, Int64}()\n    for (key, value)\
    \ in hist\n        if value == maxval\n            maxdict[key] = value\n    \
    \    end\n    end\n    return maxdict\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9at3qmsc.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ values not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmp9at3qmsc.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9at3qmsc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9at3qmsc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp9at3qmsc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: values\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp9at3qmsc.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9at3qmsc.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9at3qmsc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp9at3qmsc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: values not defined\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmp9at3qmsc.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9at3qmsc.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9at3qmsc.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp9at3qmsc.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ values not defined\n  Stacktrace:\n   [1] histogram(te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9at3qmsc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if length(test) == 0\n        return Dict{String, Int64}()\n    end\n\
    \    if length(test) == 1\n        return Dict(test => 1)\n    end\n    test =\
    \ replace(test, \" \", \"\")\n    histo = Dict{String, Int64}()\n    for i in\
    \ 1:length(test)\n        if haskey(histo, test[i])\n            histo[test[i]]\
    \ += 1\n        else\n            histo[test[i]] = 1\n        end\n    end\n \
    \   return histo\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmo_1hfns.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpmo_1hfns.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmo_1hfns.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmo_1hfns.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmo_1hfns.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpmo_1hfns.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmo_1hfns.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmo_1hfns.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    count = Dict()\n    for char in test\n        if haskey(count,char)\n\
    \            count[char] += 1\n        else\n            count[char] = 1\n   \
    \     end\n    end\n    count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcck49hr.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpxcck49hr.jl:23\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxcck49hr.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxcck49hr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxcck49hr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcck49hr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    countDict = Dict{String, Int64}()\n    for word in split(test)\n     \
    \   if haskey(countDict, word)\n            countDict[word] += 1\n        else\n\
    \            countDict[word] = 1\n        end\n    end\n    maxCount = maximum(values(countDict))\n\
    \    d = Dict{String, Int64}()\n    for (key, value) in countDict\n        if\
    \ value == maxCount\n            d[key] = value\n        end\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoah01a74.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpoah01a74.jl:22\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpoah01a74.jl:42 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpoah01a74.jl:35\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoah01a74.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if test == \"\"\n        return(Dict())\n    end\n    hist = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        hist[c] = get(hist, c, 0) + 1\n\
    \    end\n    max_count = maximum(hist.values)\n    return(hist[[k for k in hist\
    \ if hist[k] == max_count]])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0mqvdgdk.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ Dict has no field values\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0mqvdgdk.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0mqvdgdk.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0mqvdgdk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp0mqvdgdk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type Dict has no\
    \ field values\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp0mqvdgdk.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0mqvdgdk.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0mqvdgdk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp0mqvdgdk.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type Dict has no field values\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0mqvdgdk.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0mqvdgdk.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0mqvdgdk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp0mqvdgdk.jl:32\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mqvdgdk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for ch in split(test)\n        try\n\
    \            hist[ch] += 1\n        catch\n            hist[ch] = 1\n        end\n\
    \    end\n    return hist\nend\nhistogram(\"a b c\")\nhistogram(\"a b b a\")\n\
    histogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\")\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0x9h6d0h.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x9h6d0h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x9h6d0h.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0x9h6d0h.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x9h6d0h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x9h6d0h.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x9h6d0h.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    testDict = Dict{String, Int64}()\n    max_value = 0\n    max_key = \"\"\
    \n    for s in test\n        if !haskey(testDict, s)\n            testDict[s]\
    \ = 1\n        else\n            testDict[s] += 1\n        end\n        if testDict[s]\
    \ > max_value\n            max_value = testDict[s]\n            max_key = s\n\
    \        end\n    end\n    for s in test\n        if testDict[s] == max_value\n\
    \            max_key = s\n        end\n    end\n    return testDict\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwq9d4l3a.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpwq9d4l3a.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwq9d4l3a.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwq9d4l3a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwq9d4l3a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpwq9d4l3a.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq9d4l3a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppqgk9chk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmppqgk9chk.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqgk9chk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqgk9chk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppqgk9chk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmppqgk9chk.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqgk9chk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqgk9chk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict()\n    dict = count(split(test))\n    dict = sort(dict, by=last)\n\
    \    dict = filter(dict)\n    dict = maximum(dict)\n    return dict\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp797d1wm2.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  TypeError:\
    \ non-boolean (SubString{String}) used in boolean context\n  Stacktrace:\n   \
    \ [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n    [2] _count\n    \
    \  @ ./reducedim.jl:407 [inlined]\n    [3] #count#735\n      @ ./reducedim.jl:405\
    \ [inlined]\n    [4] #count#734\n      @ ./reducedim.jl:404 [inlined]\n    [5]\
    \ count\n      @ ./reducedim.jl:404 [inlined]\n    [6] histogram(test::String)\n\
    \      @ Main /tmp/tmp797d1wm2.jl:15\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp797d1wm2.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp797d1wm2.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp797d1wm2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  TypeError: non-boolean\
    \ (SubString{String}) used in boolean context\n  Stacktrace:\n    [1] _simple_count\n\
    \      @ ./reduce.jl:1206 [inlined]\n    [2] _count\n      @ ./reducedim.jl:407\
    \ [inlined]\n    [3] #count#735\n      @ ./reducedim.jl:405 [inlined]\n    [4]\
    \ #count#734\n      @ ./reducedim.jl:404 [inlined]\n    [5] count\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [6] histogram(test::String)\n      @ Main /tmp/tmp797d1wm2.jl:15\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp797d1wm2.jl:27 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp797d1wm2.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp797d1wm2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  TypeError: non-boolean (SubString{String}) u"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp797d1wm2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict{String, Int64}()\n    for word in test\n        if word\
    \ in keys(counts)\n            counts[word] += 1\n        else\n            counts[word]\
    \ = 1\n        end\n    end\n    return counts\nend\nhistogram(\"a b c\")\nhistogram(\"\
    a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \   @ Base ./dict.jl:373\n [2] histogram(test::String)\n   @ Main /tmp/tmpixtajy79.jl:19\n\
    \ [3] top-level scope\n   @ /tmp/tmpixtajy79.jl:24\nin expression starting at\
    \ /tmp/tmpixtajy79.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n \n    histogram = Dict()\n    letters = split(test, \" \")\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzundn6uv.jl:28\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzundn6uv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzundn6uv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzundn6uv.jl:31\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzundn6uv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzundn6uv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzundn6uv.jl:33\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzundn6uv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzundn6uv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzundn6uv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    letters = Dict{String, Int64}()\n    for l in test\n        if haskey(letters,\
    \ l)\n            letters[l] += 1\n        else\n            letters[l] = 1\n\
    \        end\n    end\n    return letters\nend\nhistogram(\"a b c\")\nhistogram(\"\
    a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b b a\")\nhistogram(\"\"\
    )\n \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \   @ Base ./dict.jl:373\n [2] histogram(test::String)\n   @ Main /tmp/tmpotyqthub.jl:20\n\
    \ [3] top-level scope\n   @ /tmp/tmpotyqthub.jl:25\nin expression starting at\
    \ /tmp/tmpotyqthub.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict()\n    for c in test\n        if haskey(counts, c)\n   \
    \         counts[c] += 1\n        else\n            counts[c] = 1\n        end\n\
    \    end\n    return counts\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc7g0h2v2.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpc7g0h2v2.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc7g0h2v2.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc7g0h2v2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc7g0h2v2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7g0h2v2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict()\n    max_count = 0\n    for letter in test\n      \
    \  if !haskey(histogram, letter)\n            histogram[letter] = 1\n        else\n\
    \            histogram[letter] += 1\n        end\n        if histogram[letter]\
    \ > max_count\n            max_count = histogram[letter]\n        end\n    end\n\
    \    return filter(x -> x[2] == max_count, histogram)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp7kda4zo.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpp7kda4zo.jl:26\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp7kda4zo.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp7kda4zo.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpp7kda4zo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7kda4zo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    str_test = split(test, \" \")\n    hist = Dict{String, Int64}()\n    for\
    \ i in str_test\n        if(haskey(hist, i))\n            hist[i] += 1\n     \
    \   else\n            hist[i] = 1\n        end\n    end\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_svl7kl.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_svl7kl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_svl7kl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo_svl7kl.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_svl7kl.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_svl7kl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpo_svl7kl.jl:36\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_svl7kl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_svl7kl.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_svl7kl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwd7nbmye.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd7nbmye.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd7nbmye.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpwd7nbmye.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwd7nbmye.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwd7nbmye.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwd7nbmye.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    words = split(test)\n    counts = Dict()\n    for word in words\n\
    \        counts[word] = get(counts, word, 0) + 1\n    end\n    return counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxls3k4yl.jl:28\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxls3k4yl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxls3k4yl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxls3k4yl.jl:31\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxls3k4yl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxls3k4yl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxls3k4yl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict(unique(split(test)))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqqkfb3va.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError:\
    \ Dict(kv): kv needs to be an iterator of tuples or pairs\n  Stacktrace:\n   [1]\
    \ Dict(kv::Vector{SubString{String}})\n     @ Base ./dict.jl:132\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpqqkfb3va.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqqkfb3va.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqqkfb3va.jl:20\n  \n  caused\
    \ by: BoundsError: attempt to access 1-codeunit SubString{String} at index [2]\n\
    \  Stacktrace:\n   [1] indexed_iterate(I::SubString{String}, i::Int64, state::Int64)\n\
    \     @ Base ./tuple.jl:98\n   [2] grow_to!(dest::Dict{Any, Any}, itr::Vector{SubString{String}})\n\
    \     @ Base ./dict.jl:142\n   [3] dict_with_eltype\n     @ ./abstractdict.jl:544\
    \ [inlined]\n   [4] Dict(kv::Vector{SubString{String}})\n     @ Base ./dict.jl:129\n\
    \   [5] histogram(test::String)\n     @ Main /tmp/tmpqqkfb3va.jl:14\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpqqkfb3va.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpqqkfb3va.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqqkfb3va.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError: Dict(kv):\
    \ kv needs to be an iterator of tuples or pairs\n  Stacktrace:\n   [1] Dict(kv::Vector{SubString{String}})\n\
    \     @ Base ./dict.jl:132\n   [2] histogram(test::String)\n     @ Main /tmp/tmpqqkfb3va.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqkfb3va.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a counter map of the test string\n    hist = Dict(x => count(x\
    \ == c for c in test) for x in test)\n    # get the maximum occurrence\n    maxcount\
    \ = maximum(collect(values(hist)))\n    # extract the corresponding keys \n  \
    \  maxhist = filter(hist) do kv\n        kv[2] == maxcount\n    end\n    # return\
    \ the dict\n    return maxhist\nend\n# test\ntesthisto = histogram(\"a b c\")\n\
    testhisto2 = histogram(\"a b b a\")\ntesthisto3 = histogram(\"a b c a b\")\ntesthisto4\
    \ = histogram(\"b b b b a\")\ntesthisto5 = histogram(\"\")\nprintln(testhisto)\n\
    println(testhisto2)\nprintln(testhisto3)\nprintln(testhisto4)\nprintln(testhisto5)\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\\nClosest candidates are:\\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n  ...\\nStacktrace:\\n [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\\
    n   @ '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict{String, Int64}()\n    word = split(test)\n    for s in word\n\
    \        if haskey(dict, s)\n            dict[s] += 1\n        else\n        \
    \    dict[s] = 1\n        end\n    end\n    return dict\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyfk_myuf.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfk_myuf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfk_myuf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpyfk_myuf.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfk_myuf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfk_myuf.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyfk_myuf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = []\n    for i in test\n        push!(histogram, Dict(i=>count(test,\
    \ i)))\n    end\n    test = Dict(histogram...)\n    return test\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2uieynlm.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ objects of type String are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String,\
    \ itr::Char)\n     @ Base ./reduce.jl:1201\n   [4] histogram(test::String)\n \
    \    @ Main /tmp/tmp2uieynlm.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2uieynlm.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2uieynlm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2uieynlm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String,\
    \ itr::Char)\n     @ Base ./reduce.jl:1201\n   [4] histogram(test::String)\n \
    \    @ Main /tmp/tmp2uieynlm.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2uieynlm.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2uieynlm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2uieynlm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  MethodError: objects of type String are not callable\n  Stacktrace:\n\
    \   [1] _simple_count(pred::String, itr::Char, init::Int64)\n     @ Base ./reduce.jl:1206\n\
    \   [2] count(f::String,"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2uieynlm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n\nend\n \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_x7mu0zw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp_x7mu0zw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_x7mu0zw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_x7mu0zw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_x7mu0zw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp_x7mu0zw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_x7mu0zw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_x7mu0zw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test_hist = Dict{String, Int64}()\n    for key in split(test)\n      \
    \  test_hist[key] = get(test_hist, key, 0) + 1\n    end\n    return test_hist\n\
    end\n# test cases\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcab_at27.jl:27\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcab_at27.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcab_at27.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcab_at27.jl:30\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcab_at27.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcab_at27.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcab_at27.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for (idx, letter) in enumerate(test)\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5lol61rc.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp5lol61rc.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5lol61rc.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5lol61rc.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5lol61rc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lol61rc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #define the dictionary to be returned\n    results = Dict{String, Int64}()\n\
    \    #split the string into characters\n    words = split(test)\n    #loop through\
    \ the characters\n    for word in words\n        if !haskey(results, word)\n \
    \           results[word] = 1\n        else\n            results[word] += 1\n\
    \        end\n    end\n    return results\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplikt0m25.jl:34\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplikt0m25.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplikt0m25.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplikt0m25.jl:37\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplikt0m25.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplikt0m25.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplikt0m25.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    println(\"sou um teste\")\n    \n    return Dict(\"a\" => 1, \"\
    b\" => 2)\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "sou um teste\ntest set: Test Failed at /tmp/tmpaaths1qo.jl:24\n  Expression:\
    \ candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"\
    b\" => 2, \"a\" => 1) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaaths1qo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaaths1qo.jl:23\nsou um teste\n\
    test set: Test Failed at /tmp/tmpaaths1qo.jl:25\n  Expression: candidate(\"a b\
    \ c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"b\" => 2, \"\
    a\" => 1) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaaths1qo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaaths1qo.jl:23\nsou um teste\n\
    test set: Test Failed at /tmp/tmpaaths1qo.jl:26\n  Expression: candidate(\"a b\
    \ c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n\
    \   Evaluated: Dict(\"b\" => 2, \"a\" => 1) == Dict(\"g\" => 1, \"c\" => 1, \"\
    b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaaths1qo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaaths1qo.jl:23\nsou um teste\n\
    test set: Test Failed at /tmp/tmpaaths1qo.jl:27\n  Expression: candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"b\" =>\
    \ 2, \"a\" => 1) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaaths1qo.jl:27 [inlined]\n [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaaths1qo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    new_dict = Dict{String, Int64}()\n    for letter in split(test) \n   \
    \     if !haskey(new_dict, letter)\n            new_dict[letter] = 1\n       \
    \ else\n            new_dict[letter] += 1\n        end\n    end\n    new_dict\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp97uqqwz.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp97uqqwz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp97uqqwz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpp97uqqwz.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp97uqqwz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp97uqqwz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp97uqqwz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letter_counts = Dict{String, Int64}()\n    letters = split(test)\n   \
    \ for i = 1:length(letters)\n        letter = letters[i]\n        if letter in\
    \ keys(letter_counts)\n            letter_counts[letter] += 1\n        else\n\
    \            letter_counts[letter] = 1\n        end\n    end\n    return letter_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4rruc10n.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rruc10n.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rruc10n.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4rruc10n.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rruc10n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rruc10n.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4rruc10n.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmuylhcvf.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmuylhcvf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmuylhcvf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmuylhcvf.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmuylhcvf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmuylhcvf.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmuylhcvf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    words = split(test)\n    letters = countmap(words)\n    return letters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpltc1esvr.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @\
    \ Main /tmp/tmpltc1esvr.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltc1esvr.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltc1esvr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpltc1esvr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: countmap\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpltc1esvr.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltc1esvr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltc1esvr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpltc1esvr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: countmap not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpltc1esvr.jl:15\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltc1esvr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltc1esvr.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpltc1esvr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] hist"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltc1esvr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    result::Dict{String, Int64} = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        result[letter] = get(result, letter, 0) + 1\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo26aa1t2.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo26aa1t2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo26aa1t2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpo26aa1t2.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo26aa1t2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo26aa1t2.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo26aa1t2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test_set = split(test, \" \") \n    hist = Dict{String, Int64}()\n   \
    \ hist_max = 0\n    hist_max_all = []\n    keys = []\n    for i in test_set\n\
    \        hist[i] = get(hist, i, 0) + 1\n        if hist[i] > hist_max\n      \
    \      hist_max = hist[i]\n            hist_max_all = [i]\n        elseif hist[i]\
    \ == hist_max\n            append!(hist_max_all, i)\n        end\n    end\n  \
    \  keys = []\n    for i in hist_max_all\n        push!(keys, i)\n    end\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp17bglacz.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type SubString{String}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:SubString at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\\
    n    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(A::Vector{SubString{String}}, x::Char,\
    \ i1::Int64)\\n     @ Base ./array.jl:903\\n   [2] _append!(a::Vector{SubString{String}},\
    \ #unused#::Base.HasLength, iter::SubString{String})\\n     @ Base ./array.jl:1060\\\
    n   [3] append!\\n     @ ./array.jl:1050 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmp17bglacz.jl:25\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp17bglacz.jl:39 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp17bglacz.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp17bglacz.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type SubString{String}\\n \
    \ Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:SubString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:56\\n \
    \   convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:54\\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/j"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    letters = Dict{String, Int64}()\n    for str in split(test)\n  \
    \      if !haskey(letters, str)\n            letters[str] = 1\n        else\n\
    \            letters[str] += 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8pvqfro8.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pvqfro8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pvqfro8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8pvqfro8.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pvqfro8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pvqfro8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pvqfro8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    str = split(test, ' ')\n    d = Dict()\n    for i in str\n        d[i]\
    \ = get(d, i, 0) + 1\n    end\n    (d, maximum(values(d)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm1bty1ou.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Tuple{Dict{Any, Any},\
    \ Int64} to an object of type Dict{String, Int64}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\\
    n    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmpm1bty1ou.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm1bty1ou.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm1bty1ou.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpm1bty1ou.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Tuple{Dict{Any, Any}, Int64} to an object of type\
    \ Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\\\
    n    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\\\
    n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\n     @ Main /tmp/tmpm1bty1ou.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm1bty1ou.jl:27 [inlin"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    my_dict = Dict()\n    for word in split(test, ' ')\n        if word in\
    \ keys(my_dict)\n            my_dict[word] += 1\n        else\n            my_dict[word]\
    \ = 1\n        end\n    end\n    max = findmax(values(my_dict))[1]\n    filtered_dict\
    \ = filter(x -> x[2] == max, my_dict)\n    return filtered_dict\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnmoesco0.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching keys(::Base.ValueIterator{Dict{Any, Any}})\n  Closest candidates\
    \ are:\n    keys(!Matched::IndexStyle, !Matched::AbstractArray, !Matched::AbstractArray...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:350\n    keys(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:72\n    keys(!Matched::Tuple,\
    \ !Matched::Tuple...) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:77\n\
    \    ...\n  Stacktrace:\n   [1] pairs(collection::Base.ValueIterator{Dict{Any,\
    \ Any}})\n     @ Base ./abstractdict.jl:138\n   [2] findmax(f::typeof(identity),\
    \ domain::Base.ValueIterator{Dict{Any, Any}})\n     @ Base ./reduce.jl:803\n \
    \  [3] _findmax(a::Base.ValueIterator{Dict{Any, Any}}, #unused#::Colon)\n    \
    \ @ Base ./reduce.jl:829\n   [4] findmax(itr::Base.ValueIterator{Dict{Any, Any}})\n\
    \     @ Base ./reduce.jl:828\n   [5] histogram(test::String)\n     @ Main /tmp/tmpnmoesco0.jl:22\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpnmoesco0.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpnmoesco0.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpnmoesco0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching keys(::Base.ValueIterator{Dict{Any, Any}})\n  Closest candidates\
    \ are:\n    keys(!Matched::IndexStyle, !Matched::AbstractArray, !Matched::AbstractArray...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:350\n    keys(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:72\n    keys(!Matched::Tuple,\
    \ !Matched::Tuple...) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:77\n\
    \    ...\n  Stacktrace:\n   [1] pairs(collection::Base."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnmoesco0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    myDict = Dict{String, Int64}()\n    for word in split(test)\n        if\
    \ haskey(myDict, word)\n            myDict[word] += 1\n        else\n        \
    \    myDict[word] = 1\n        end\n    end\n    return myDict\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntrt2ioz.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntrt2ioz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntrt2ioz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpntrt2ioz.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntrt2ioz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntrt2ioz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntrt2ioz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = countmap(test)\n    maximum = maximum(collect(values(letters)))\n\
    \    return filter(x -> letters[x] == maximum, keys(letters))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpov7il2zo.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @\
    \ Main /tmp/tmpov7il2zo.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpov7il2zo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpov7il2zo.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpov7il2zo.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: countmap\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpov7il2zo.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpov7il2zo.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpov7il2zo.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpov7il2zo.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: countmap not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpov7il2zo.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpov7il2zo.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpov7il2zo.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpov7il2zo.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] hist"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpov7il2zo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        try\n\
    \            hist[letter] += 1\n        catch e\n            hist[letter] = 1\n\
    \        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxq2al2__.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxq2al2__.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxq2al2__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxq2al2__.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxq2al2__.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxq2al2__.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxq2al2__.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #Returns a dictionary containing the number of times a character appears\
    \ in the string\n    #If the string is empty, returns empty dictionary\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7vnbzey8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7vnbzey8.jl:1\n\
    in expression starting at /tmp/tmp7vnbzey8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict()\n    for c in test\n        if haskey(counts, c)\n   \
    \         counts[c] += 1\n        else\n            counts[c] = 1\n        end\n\
    \    end\n    return counts\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppo_xc1bp.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmppo_xc1bp.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppo_xc1bp.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppo_xc1bp.jl:28\ntest set:\
    \ Error During Test at /tmp/tmppo_xc1bp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo_xc1bp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Your code here\nend\n@assert histogram('a b c') == Dict('a' => 1, 'b'\
    \ => 1, 'c' => 1)\n@assert histogram('a b b a') == Dict('a' => 2, 'b' => 2)\n\
    @assert histogram('a b c a b') == Dict('a' => 2, 'b' => 2)\n@assert histogram('b\
    \ b b b a') == Dict('b' => 4)\n@assert histogram('') == Dict{String, Int64}()\n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpt5wx3gx3.jl:16\nin expression\
    \ starting at /tmp/tmpt5wx3gx3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    valDict = Dict{String, Int64}()\n    for char in test\n        if char\
    \ in keys(valDict)\n            valDict[char] += 1\n        else\n           \
    \ valDict[char] = 1\n        end\n    end\n    valDict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsa2gatqo.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpsa2gatqo.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsa2gatqo.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsa2gatqo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsa2gatqo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpsa2gatqo.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa2gatqo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    let \n        result::Dict{String, Int64} = Dict()\n        for c in test\n\
    \            result[c] = get(result, c, 0) + 1\n        end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6v9k60mm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6v9k60mm.jl:1\n\
    in expression starting at /tmp/tmp6v9k60mm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    for w in split(test)\n        if w in keys(d)\n\
    \            d[w] += 1\n        else\n            d[w] = 1\n        end\n    end\n\
    \    d\nend\ntest = histogram(\"a b c\")\ntest[\"a\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdqkim_14.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqkim_14.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqkim_14.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdqkim_14.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdqkim_14.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdqkim_14.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqkim_14.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = split(test)\n    counts = Int64[]\n    for l in letters\n  \
    \      push!(counts, count(x -> x == l, letters))\n    end\n    return Dict(zip(letters,\
    \ counts))\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxnlu97qk.jl:27\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnlu97qk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnlu97qk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxnlu97qk.jl:30\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnlu97qk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnlu97qk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxnlu97qk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    let\n        result::Dict{String, Int64} = Dict()\n        split_string\
    \ = split(test, \" \")\n        for i in split_string\n            if result[i]\
    \ == nothing\n                result[i] = 1\n            else\n              \
    \  result[i] += 1\n            end\n        end\n        return result\n    end\n\
    end\nhistogram(\"b b b b a\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: KeyError: key \"b\" not found\nStacktrace:\n [1] getindex\n\
    \   @ ./dict.jl:481 [inlined]\n [2] histogram(test::String)\n   @ Main /tmp/tmpij5x31m8.jl:18\n\
    \ [3] top-level scope\n   @ /tmp/tmpij5x31m8.jl:27\nin expression starting at\
    \ /tmp/tmpij5x31m8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogramDict = Dict()\n    for letter in test \n        if !haskey(histogramDict,\
    \ letter)\n            histogramDict[letter] = 1\n        else\n            histogramDict[letter]\
    \ += 1\n        end\n    end\n    return histogramDict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp14qj02rv.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp14qj02rv.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp14qj02rv.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp14qj02rv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp14qj02rv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14qj02rv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n  \n    letters_dict = Dict{String, Int64}()\n    \n    for letter in split(test)>\n\
    \        if haskey(letters_dict, letter)>\n            letters_dict[letter] +=\
    \ 1>\n        else>\n            letters_dict[letter] = 1>\n        end>\n   \
    \ end>\n    \n    biggest_letter = \"\">\n    biggest_count = 0>\n    \n    for\
    \ key in keys(letters_dict)>\n        if letters_dict[key] > biggest_count>\n\
    \            biggest_count = letters_dict[key]>\n            biggest_letter =\
    \ key>\n        end>\n    end>\n    \n    results = Dict{String, Int64}()>\n \
    \   \n    for key in keys(letters_dict)>\n        if letters_dict[key] == biggest_count>\n\
    \            results[key] = biggest_count>\n        end>\n    end>\n    \n   \
    \ return results>\n  \nend>\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"+=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujmagwap.jl:19\nin expression starting at\
    \ /tmp/tmpujmagwap.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    w = letters(lowercase(test))\n    wsort = sort(w)\n    i = 2\n    count\
    \ = 1\n    str = \"\"\n    d = Dict{String, Int64}()\n    while i <= length(wsort)\n\
    \        if wsort[i] == wsort[i-1]\n            count += 1\n        elseif count\
    \ > 1\n            str = string(wsort[i-1])\n            push!(d, str => count)\n\
    \            count = 1\n        end\n        i += 1\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpggd8eg_v.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ letters not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmpggd8eg_v.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggd8eg_v.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggd8eg_v.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpggd8eg_v.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: letters\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpggd8eg_v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggd8eg_v.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggd8eg_v.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpggd8eg_v.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: letters not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpggd8eg_v.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggd8eg_v.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggd8eg_v.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpggd8eg_v.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ letters not defined\n  Stacktrace:\n   [1] histogra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpggd8eg_v.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return {c=>count(test,c) for c in test}\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmpulb5hd_6.jl:14\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpulb5hd_6.jl:1\nin expression starting\
    \ at /tmp/tmpulb5hd_6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict{String, Int64}()\n    for c in test\n        dict[c] = get(dict,\
    \ c, 0) + 1\n    end\n    return dict\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp53ktx8tm.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp53ktx8tm.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53ktx8tm.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53ktx8tm.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp53ktx8tm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp53ktx8tm.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53ktx8tm.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    #Check if empty string, return empty dict\n    if test == \"\"\n\
    \        return Dict{String, Int64}()\n    end\n    \n    #Seperate letters into\
    \ array\n    text = split(test)\n    \n    #Create a dict to store the output\n\
    \    dict = Dict{String, Int64}()\n    \n    #Define our value for evaluating\
    \ the maximum\n    max_count = 0\n    \n    #Loop through text\n    for i in text\n\
    \        if !haskey(dict, i)\n            dict[i] = 1\n        else\n        \
    \    dict[i] += 1\n        end\n        \n        #Check if i key is at max value.\n\
    \        if dict[i] > max_count\n            max_count = dict[i]\n        end\n\
    \    end\n    \n    #Iterate over dict, removing all keys not equal to max_count\n\
    \    for (k, v) in dict\n        if v != max_count\n            delete!(dict,\
    \ k)\n        end\n    end\n    \n    return dict\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dct = Dict{String, Int64}()\n    for letter in test\n        dct[letter]\
    \ = get(dct, letter, 0) + 1\n    end\n    return dct\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1qyfjiih.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1qyfjiih.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1qyfjiih.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1qyfjiih.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1qyfjiih.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1qyfjiih.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qyfjiih.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #TODO\n    return Dict{String, Int64}()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpir1olhkw.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir1olhkw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir1olhkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpir1olhkw.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir1olhkw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir1olhkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpir1olhkw.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir1olhkw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpir1olhkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpir1olhkw.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpir1olhkw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpir1olhkw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    words=split(test)\n    out=Dict{String, Int64}()\n    for w in words\n\
    \        if haskey(out,w)\n            out[w]+=1\n        else\n            out[w]=1\n\
    \        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzmymu2i4.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmymu2i4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmymu2i4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzmymu2i4.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzmymu2i4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzmymu2i4.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmymu2i4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    newDict = Dict()\n    for c in test\n        if in(c, keys(newDict))\n\
    \            newDict[c] += 1\n        else\n            newDict[c] = 1\n     \
    \   end\n    end\n    return newDict\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpktq77087.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpktq77087.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpktq77087.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpktq77087.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpktq77087.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktq77087.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict{String, Int64}()\n    for word in split(test)\n        if\
    \ haskey(counts, word)\n            counts[word] += 1\n        else\n        \
    \    counts[word] = 1\n        end\n    end\n    counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4jz2cprq.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jz2cprq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jz2cprq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4jz2cprq.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jz2cprq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jz2cprq.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jz2cprq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n  count = Dict{String, Int64}()\n  for word in split(test, \" \")\n    if\
    \ haskey(count, word)\n      count[word] += 1\n    else\n      count[word] = 1\n\
    \    end\n  end\n  return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpphf3qhlu.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphf3qhlu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphf3qhlu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpphf3qhlu.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphf3qhlu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphf3qhlu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpphf3qhlu.jl:35\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphf3qhlu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphf3qhlu.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphf3qhlu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    max_count = 0\n    letter_max_count = \"\"\n    histogram = Dict{String,\
    \ Int64}()\n    for letter in test\n        if haskey(histogram, letter) == false\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n        if histogram[letter] > max_count\n            max_count\
    \ = histogram[letter]\n            letter_max_count = letter\n        end\n  \
    \  end\n    max_count_letters = filter(x -> x == max_count, values(histogram))\n\
    \    max_count_keys = collect(keys(histogram))[filter(x -> x == max_count, values(histogram))]\n\
    \    histogram_max_count = Dict{String, Int64}()\n    for i in 1:length(max_count_letters)\n\
    \        histogram_max_count[max_count_keys[i]] = max_count_letters[i]\n    end\n\
    \    return histogram_max_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu3z_q2gg.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpu3z_q2gg.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu3z_q2gg.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu3z_q2gg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpu3z_q2gg.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpu3z_q2gg.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3z_q2gg.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict{String, Int64}()\n    for letter in split(test)\n      \
    \  if haskey(counts, letter)\n            counts[letter] += 1\n        else\n\
    \            counts[letter] = 1\n        end\n    end\n    return counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1v682oqo.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v682oqo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v682oqo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1v682oqo.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1v682oqo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1v682oqo.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1v682oqo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    @assert typeof(test) == String\n    count = Dict{String, Int64}()\n  \
    \  for l in split(test)\n        if haskey(count, l)\n            count[l] +=\
    \ 1\n        else\n            count[l] = 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjp_nxfp.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp_nxfp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp_nxfp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpyjp_nxfp.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjp_nxfp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjp_nxfp.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjp_nxfp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # YOUR CODE HERE\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcqsge9ny.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpcqsge9ny.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqsge9ny.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcqsge9ny.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcqsge9ny.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpcqsge9ny.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcqsge9ny.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqsge9ny.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    max_count = 0\n    counts = Dict{String, Int64}()\n    for ch in test\n\
    \        if haskey(counts, ch)\n            counts[ch] += 1\n        else\n  \
    \          counts[ch] = 1\n        end\n        if counts[ch] > max_count\n  \
    \          max_count = counts[ch]\n        end\n    end\n    return filter(kv\
    \ -> kv[2] == max_count, counts)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjswmbkm5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjswmbkm5.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjswmbkm5.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjswmbkm5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjswmbkm5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjswmbkm5.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjswmbkm5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict{String, Int64}()\n    for c in test\n        if haskey(dict,\
    \ c)\n            dict[c] += 1\n        else\n            dict[c] = 1\n      \
    \  end\n    end\n    dict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp09q51400.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp09q51400.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp09q51400.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp09q51400.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp09q51400.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp09q51400.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09q51400.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n  return Dict(test)\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdzl13djm.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError:\
    \ Dict(kv): kv needs to be an iterator of tuples or pairs\n  Stacktrace:\n   [1]\
    \ Dict(kv::String)\n     @ Base ./dict.jl:132\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpdzl13djm.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdzl13djm.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdzl13djm.jl:20\n  \n  caused\
    \ by: BoundsError: attempt to access Char at index [2]\n  Stacktrace:\n   [1]\
    \ indexed_iterate(I::Char, i::Int64, state::Bool)\n     @ Base ./tuple.jl:98\n\
    \   [2] grow_to!\n     @ ./dict.jl:142 [inlined]\n   [3] dict_with_eltype(DT_apply::Base.var\"\
    #317#319\", kv::String, t::Type)\n     @ Base ./abstractdict.jl:544\n   [4] Dict(kv::String)\n\
    \     @ Base ./dict.jl:129\n   [5] histogram(test::String)\n     @ Main /tmp/tmpdzl13djm.jl:14\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpdzl13djm.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpdzl13djm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdzl13djm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError: Dict(kv):\
    \ kv needs to be an iterator of tuples or pairs\n  Stacktrace:\n   [1] Dict(kv::String)\n\
    \     @ Base ./dict.jl:132\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdzl13djm.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdzl13djm.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzl13djm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    for i in 1:length(test)\n        if haskey(d,\
    \ test[i])\n            d[test[i]] += 1\n        else\n            d[test[i]]\
    \ = 1\n        end\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt9jfz3_2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpt9jfz3_2.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9jfz3_2.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9jfz3_2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpt9jfz3_2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpt9jfz3_2.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9jfz3_2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #<type definition of dictionary>\n    res = Dict{String, Int64}() #<string-key\
    \ value pairs are to be stored>\n    testlist = split(test) #<splits into a list>\n\
    \    for i in testlist\n        res[i] == get(res, i, 0) + 1 #<stores into dictionary>\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc4ec80l5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpc4ec80l5.jl:18\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc4ec80l5.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc4ec80l5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc4ec80l5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpc4ec80l5.jl:18\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc4ec80l5.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc4ec80l5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc4ec80l5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpc4ec80l5.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc4ec80l5.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc4ec80l5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc4ec80l5.jl:30\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4ec80l5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict(tuple(i => count(x -> x == i, split(test)))...)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoggbg_ps.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ i not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpoggbg_ps.jl:14\n    [2] _simple_count\n      @ ./reduce.jl:1206\
    \ [inlined]\n    [3] _count\n      @ ./reducedim.jl:407 [inlined]\n    [4] #count#735\n\
    \      @ ./reducedim.jl:405 [inlined]\n    [5] count\n      @ ./reducedim.jl:405\
    \ [inlined]\n    [6] histogram(test::String)\n      @ Main /tmp/tmpoggbg_ps.jl:14\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpoggbg_ps.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpoggbg_ps.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpoggbg_ps.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: i\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpoggbg_ps.jl:14\n    [2] _simple_count\n      @ ./reduce.jl:1206\
    \ [inlined]\n    [3] _count\n      @ ./reducedim.jl:407 [inlined]\n    [4] #count#735\n\
    \      @ ./reducedim.jl:405 [inlined]\n    [5] count\n      @ ./reducedim.jl:405\
    \ [inlined]\n    [6] histogram(test::String)\n      @ Main /tmp/tmpoggbg_ps.jl:14\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpoggbg_ps.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpoggbg_ps.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpoggbg_ps.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: i not defined\n  Stacktrace:\n    [1] (::var\"\
    #1#2\")(x::SubS"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoggbg_ps.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # first we get the count of all letters using the count() function\n \
    \   counts = Dict{String, Int64}()\n    for letter in split(test)\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    end\n    # so we have a dictionary like this\n\
    \    # counts = Dict('a' => 2, 'b' => 2, 'c' => 1)\n    # we get the values of\
    \ the count like this\n    values = [v for (k, v) in counts]\n    # we use set\
    \ to remove duplicates, so we only have the distinct values\n    uniques = set(values)\n\
    \    # we reverse the order so we know the biggest value first\n    uniques =\
    \ reverse(sort(uniques))\n    # we create a new dictionary to contain the letters\
    \ with the highest count\n    result = Dict{String, Int64}()\n    for unique in\
    \ uniques\n        # here we add only the letters with the highest count to the\
    \ result\n        for (k, v) in counts\n            if v == unique\n         \
    \       result[k] = v\n            end\n        end\n        # and we check if\
    \ the result has any elements\n        if length(result) > 0\n            # if\
    \ so, we return the result, as we are guaranteed to have the highest count\n \
    \           return result\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjx5szvji.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmpjx5szvji.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjx5szvji.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjx5szvji.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpjx5szvji.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: set\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpjx5szvji.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjx5szvji.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjx5szvji.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpjx5szvji.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: set not defined\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpjx5szvji.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjx5szvji.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjx5szvji.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpjx5szvji.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] histogram(test::String)\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjx5szvji.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if test == \"\"\n        return Dict{String, Int64}()\n    end\n    hist\
    \ = Dict{String, Int64}()\n    for item in split(test)\n        if haskey(hist,\
    \ item)\n            hist[item] += 1\n        else\n            hist[item] = 1\n\
    \        end\n    end\n    maximum = maximum(values(hist))\n    temp = Dict{String,\
    \ Int64}()\n    for key in keys(hist)\n        if hist[key] == maximum\n     \
    \       temp[key] = maximum\n        end\n    end\n    return temp\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiyytgme7.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmpiyytgme7.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyytgme7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyytgme7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpiyytgme7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpiyytgme7.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyytgme7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyytgme7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpiyytgme7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: maximum not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpiyytgme7.jl:25\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyytgme7.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyytgme7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpiyytgme7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogra"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyytgme7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #Dict{Char, Int64}>\n    hist = Dict{String, Int64}() #Dict{Char, Int64}()\n\
    \    for c in test\n        hist[c] = get(hist, c, 0) + 1\n    end\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0mv1k2mw.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0mv1k2mw.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0mv1k2mw.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0mv1k2mw.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp0mv1k2mw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp0mv1k2mw.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mv1k2mw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letter_array = unique(split(test, \" \"))\n    letter_count = Dict{String,\
    \ Int64}()\n    for letter in letter_array\n        letter_count[letter] = count(test,\
    \ letter)\n    end\n    max_count = maximum(values(letter_count))\n    max_letters\
    \ = filter(x -> letter_count[x] == max_count, keys(letter_count))\n    max_dictionary\
    \ = Dict{String, Int64}()\n    for letter in max_letters\n        max_dictionary[letter]\
    \ = max_count\n    end\n    return max_dictionary\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5sngq7hs.jl:32\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"b\" => 0, \"\
    a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sngq7hs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sngq7hs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5sngq7hs.jl:33\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 0, \"b\" => 0, \"\
    a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sngq7hs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sngq7hs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5sngq7hs.jl:34\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"g\" => 0, \"c\" => 0, \"b\" => 0, \"a\" => 0, \"d\" => 0) == Dict(\"\
    g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sngq7hs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sngq7hs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5sngq7hs.jl:35\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"g\" => 0, \"t\" => 0,\
    \ \"r\" => 0) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sngq7hs.jl:35 [inlined]\n [3]\
    \ ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5sngq7hs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = [0 for _ in test]\n    for letter in test\n        histogram[letter]\
    \ += 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfvmbzi06.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError:\
    \ invalid index: 'a' of type Char\n  Stacktrace:\n    [1] to_index(i::Char)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Char)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] histogram(test::String)\n  \
    \    @ Main /tmp/tmpfvmbzi06.jl:16\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfvmbzi06.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfvmbzi06.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfvmbzi06.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  ArgumentError: invalid\
    \ index: 'a' of type Char\n  Stacktrace:\n    [1] to_index(i::Char)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Char)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] histogram(test::String)\n   \
    \   @ Main /tmp/tmpfvmbzi06.jl:16\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfvmbzi06.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfvmbzi06.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfvmbzi06.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  ArgumentError: invalid index: 'a' "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvmbzi06.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8398lnam.jl:23\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398lnam.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398lnam.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8398lnam.jl:24\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398lnam.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398lnam.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8398lnam.jl:25\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398lnam.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398lnam.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp8398lnam.jl:26\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398lnam.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8398lnam.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test = split(test)\n    hist = Dict{String, Int64}()\n    for word in\
    \ test\n        if haskey(hist, word)\n            hist[word] += 1\n        else\n\
    \            hist[word] = 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3tc2xtba.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tc2xtba.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tc2xtba.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3tc2xtba.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tc2xtba.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tc2xtba.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tc2xtba.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    # Initialize a dictionary to store the letter-count pairs\n    hist\
    \ = Dict()\n    \n    # Iterate through the characters in the string and store\
    \ the letter-count pairs\n    for i in test\n        if (hist[i] != 0)\n     \
    \       hist[i] += 1\n        else\n            hist[i] = 1\n        end\n   \
    \ end\n    \n    # Return the dictionary hist\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4a285mte.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp4a285mte.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4a285mte.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4a285mte.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4a285mte.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp4a285mte.jl:20\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4a285mte.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4a285mte.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4a285mte.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp4a285mte.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4a285mte.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4a285mte.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4a285mte.jl:38\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4a285mte.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    split_string = split(test)\n    histogram = Dict{String, Int64}()\n\
    \    \n    for i in split_string\n        \n        if !haskey(histogram, i)\n\
    \            histogram[i] = 1\n        else\n            histogram[i] += 1\n \
    \       end\n    end\n    \n    max_occurence = maximum(values(histogram))\n \
    \   max_occurence_characters = Dict{String, Int64}()\n    \n    for key in keys(histogram)\n\
    \        if histogram[key] == max_occurence\n            max_occurence_characters[key]\
    \ = max_occurence\n        end\n    end\n    \n    return max_occurence_characters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpniap8ko3.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpniap8ko3.jl:27\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpniap8ko3.jl:49 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpniap8ko3.jl:42\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpniap8ko3.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Dictionary for lowercase letter to appear\n    hist_dict = Dict{String,\
    \ Int64}()\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4q1ct9zu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4q1ct9zu.jl:1\n\
    in expression starting at /tmp/tmp4q1ct9zu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    h = {}\n    for i in split(test, \" \")\n        if i in keys(h)\n   \
    \         h[i] += 1\n        else\n            h[i] = 1\n        end\n    end\n\
    \    h\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmpl_f7v1iq.jl:14\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_f7v1iq.jl:1\nin expression starting\
    \ at /tmp/tmpl_f7v1iq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # First, split the string in a list of strings\n    # Then, convert the\
    \ string to lowercase (lower) and sort the list \n    words = split(lowercase(test))\
    \ \n    sort!(words)\n    # We create a dictionary for the words\n    d = Dict{String,\
    \ Int64}()\n    # We check if the list is empty\n    if isempty(words)\n     \
    \   return d\n    else\n        # If not, we set a counter for the occurences\n\
    \        counter = 1\n        i = 2\n        # For each word in the list, we check\
    \ if the same word is after it\n        while i <= length(words)\n           \
    \ if words[i] == words[i-1]\n                counter += 1\n            end\n \
    \           # If not, we add the word and its occurence to the dictionary\n  \
    \          if words[i] != words[i-1] || i == length(words)\n                d[words[i-1]]\
    \ = counter\n                counter = 1\n            end\n            i += 1\n\
    \        end\n    end\n    # And then we return the dictionary\n    return d\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7llpfu0j.jl:50\n  Expression: candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1)\n   Evaluated: Dict(\"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1) == Dict(\"\
    g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7llpfu0j.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7llpfu0j.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp7llpfu0j.jl:51\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"g\" => 1, \"r\" => 1)\
    \ == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7llpfu0j.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7llpfu0j.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp7llpfu0j.jl:52\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7llpfu0j.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7llpfu0j.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp7llpfu0j.jl:53\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"g\" => 1, \"r\" => 1)\
    \ == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7llpfu0j.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7llpfu0j.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code goes here\n    dic = Dict{String, Int64}()\n    j = 1\n  \
    \  n = length(test)\n    i = 1\n    while i <= n\n        c = 1\n        while\
    \ j <= n\n            if test[i] == test[j]\n                c = c + 1\n     \
    \       end\n            j = j + 1\n        end\n        dic[test[i]] = c\n  \
    \      i = i + 1\n        j = i\n    end\n    return dic\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjmru6uag.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjmru6uag.jl:27\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjmru6uag.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjmru6uag.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjmru6uag.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjmru6uag.jl:27\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmru6uag.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for i in test\n        hist[i] = get(hist,\
    \ i, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr99p4uer.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpr99p4uer.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr99p4uer.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr99p4uer.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpr99p4uer.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpr99p4uer.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr99p4uer.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #Each character of the string represents one letter, and thus is separated\
    \ by a space. \n    #Let's split the string by spaces to create a list of characters.\n\
    \    test = split(test)\n    #create a dictionary with a character as a key and\
    \ its count as a value\n    #the length of the dictionary should be equal to the\
    \ number of unique characters\n    result = Dict{String, Int64}()\n    for i in\
    \ test\n        if i in keys(result)\n            result[i] += 1\n        else\n\
    \            result[i] = 1\n        end\n    end\n    #find the maximum count\
    \ in the dictionary\n    max_value = maximum(values(result))\n    #create a dictionary\
    \ with the maximum count as a key and a list of the corresponding letters as a\
    \ value\n    #(in case of several letters having the same count)\n    new_result\
    \ = Dict{Int64, Array{String, 1}}()\n    for i in keys(result)\n        if result[i]\
    \ in keys(new_result)\n            push!(new_result[result[i]], i)\n        else\n\
    \            new_result[result[i]] = [i]\n        end\n    end\n    #create the\
    \ final result - a dictionary with the maximum count as a key and the corresponding\
    \ letters in a string as a value\n    new_result = string(new_result[max_value])\n\
    \    final_result = Dict{String, Int64}()\n    final_result[new_result] = max_value\n\
    \    #return the final result\n    return final_result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplfdosu61.jl:51\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"[\\\"b\\\", \\\
    \"a\\\"]\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfdosu61.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfdosu61.jl:50\ntest set: Test\
    \ Failed at /tmp/tmplfdosu61.jl:52\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"[\\\"b\\\", \\\"a\\\"]\"\
    \ => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfdosu61.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfdosu61.jl:50\ntest set: Test\
    \ Failed at /tmp/tmplfdosu61.jl:53\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"[\\\"g\\\", \\\"c\\\", \\\"b\\\", \\\"a\\\", \\\"d\\\"]\" => 1) == Dict(\"\
    g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfdosu61.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfdosu61.jl:50\ntest set: Test\
    \ Failed at /tmp/tmplfdosu61.jl:54\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"[\\\"g\\\", \\\"t\\\"\
    , \\\"r\\\"]\" => 1) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplfdosu61.jl:54 [inlined]\n [3]\
    \ macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplfdosu61.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict()\n    for letter in test\n        if letter != ' '\n \
    \           letters[letter] = get(letters, letter, 0) + 1\n        end\n    end\n\
    \    return letters\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_p2gtfqi.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp_p2gtfqi.jl:20\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_p2gtfqi.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_p2gtfqi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_p2gtfqi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_p2gtfqi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    str=split(test) #split the string in to a array\n    d=Dict{String, Int64}()\
    \ # set up a dictionary\n    for item in str # go through the array and count\
    \ the number of the same letters\n        if haskey(d, item)\n            d[item]+=1\n\
    \        else\n            d[item]=1\n        end\n    end\n    max=0 # find the\
    \ max value of the dictionary\n    for item in values(d)\n        if item>max\n\
    \            max=item\n        end\n    end\n    new=Dict{String, Int64}() #set\
    \ up a new dictionary\n    for item in keys(d) # insert the letter with the most\
    \ repetition to the new dictionary\n        if d[item]==max\n            new[item]=max\n\
    \        end\n    end\n    return new # return new dictionary\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplovm4bas.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplovm4bas.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplovm4bas.jl:24\ntest set: Test\
    \ Failed at /tmp/tmplovm4bas.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplovm4bas.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplovm4bas.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplovm4bas.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    for token in split(test)\n        if haskey(d,\
    \ token)\n            d[token] += 1\n        else\n            d[token] = 1\n\
    \        end\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpznkm6al2.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznkm6al2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznkm6al2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpznkm6al2.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznkm6al2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznkm6al2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznkm6al2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    jstr= split(test)\n    hist = Dict()\n    for i in jstr\n        if haskey(hist,\
    \ i)\n            hist[i] += 1\n        else\n            hist[i] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8hisxih.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8hisxih.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8hisxih.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_8hisxih.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8hisxih.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8hisxih.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8hisxih.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n   \n    dict = Dict{String, Int64}();\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6za3i_6d.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6za3i_6d.jl:1\n\
    in expression starting at /tmp/tmp6za3i_6d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   return\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxvy_dhj3.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpxvy_dhj3.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvy_dhj3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvy_dhj3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxvy_dhj3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpxvy_dhj3.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvy_dhj3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvy_dhj3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    result = Dict{String, Int64}()\n    for letter in split(test)\n      \
    \  if !(letter in keys(result))\n            result[letter] = 1\n        else\n\
    \            result[letter] += 1\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphk39v8st.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk39v8st.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk39v8st.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphk39v8st.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk39v8st.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk39v8st.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphk39v8st.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpff649xrq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpff649xrq.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpff649xrq.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpff649xrq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpff649xrq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpff649xrq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n  h = Dict{String, Int64}()\n  for c in test\n    if !haskey(h, c)\n     \
    \ h[c] = 1\n    else\n      h[c] += 1\n    end\n  end\n  return h\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1d3q9yce.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1d3q9yce.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1d3q9yce.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1d3q9yce.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1d3q9yce.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1d3q9yce.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1d3q9yce.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict()\n    for letter in split(test)\n        if !haskey(dict,\
    \ letter)\n            dict[letter] = 1\n        else\n            dict[letter]\
    \ += 1\n        end\n    end\n    dict\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp33xmoul5.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33xmoul5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33xmoul5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp33xmoul5.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp33xmoul5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp33xmoul5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp33xmoul5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n  \n    counts = Dict{String, Int64}()\n    \n    for c in test\n        key\
    \ = string(c)\n        counts[key] = get(counts, key, 0) + 1\n    end\n    \n\
    \    vals = sort(collect(values(counts)), rev=true)\n    max_val = vals[1]\n \
    \   \n    max_counts = Dict{String, Int64}()\n    for key in keys(counts)\n  \
    \      if counts[key] == max_val\n            max_counts[key] = max_val\n    \
    \    end\n    end\n    \n    return max_counts\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpso9v8iao.jl:39\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\" \" => 3) ==\
    \ Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpso9v8iao.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpso9v8iao.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpso9v8iao.jl:40\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\" \" => 4) == Dict(\"b\" =>\
    \ 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpso9v8iao.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpso9v8iao.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpso9v8iao.jl:41\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\" \" => 4) == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"\
    d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpso9v8iao.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpso9v8iao.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpso9v8iao.jl:42\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\" \" => 2) == Dict(\"g\"\
    \ => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpso9v8iao.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpso9v8iao.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test = #sort function\n    histo = # a dictionary\n    max_val = 0\n \
    \   max_keys = []\n    for elem in test\n        histo[elem] = #add corresponding\
    \ value\n        if histo[elem] > max_val\n            max_val = histo[elem]\n\
    \            max_keys = []\n            max_keys.append(elem)\n        elseif\
    \ histo[elem] == max_val\n            max_keys.append(elem)\n        end\n   \
    \ end\n    max_histo = #new dictionary\n    for key in max_keys\n        max_histo[key]\
    \ = max_val\n    end\n    return max_histo\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi3_abvn.jl:34\nin expression starting at\
    \ /tmp/tmpdi3_abvn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict()\n    for letter in test\n        if letter in keys(counts)\n\
    \            counts[letter] += 1\n        else\n            counts[letter] = 1\n\
    \        end\n    end\n    return counts\nend\ntest_string = \"hello my name is\
    \ bob\"\nhistogram(test_string)\n\"\"\"Given a dictionary of the letter with the\
    \ most repetition and containing the corresponding count,\n    return a string\
    \ representing the letters with the most repetition and the number of occurrences.\n\
    \    If several letters have the same occurrence, return all of them.\n    \n\
    \    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    \    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Char\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \   @ Base ./dict.jl:373\n [2] Dict{String, Int64}(kv::Dict{Any, Any})\n   @ Base\
    \ ./dict.jl:104\n [3] convert\n   @ ./abstractdict.jl:528 [inlined]\n [4] histogram(test::String)\n\
    \   @ Main /tmp/tmpswsb1tel.jl:22\n [5] top-level scope\n   @ /tmp/tmpswsb1tel.jl:25\n\
    in expression starting at /tmp/tmpswsb1tel.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        hist[c] = get(hist,\
    \ c, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_00h9ibk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_00h9ibk.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_00h9ibk.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_00h9ibk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp_00h9ibk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_00h9ibk.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_00h9ibk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict()\n    for s in split(test)\n        d[s] = get(d, s, 0) + 1\n\
    \    end\n    d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeiun9ax1.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeiun9ax1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeiun9ax1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpeiun9ax1.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeiun9ax1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeiun9ax1.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeiun9ax1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    mydictionary = Dict{String, Int64}()\n    items = split(test, \" \")\n\
    \    for item in items\n        if mydictionary[item] == nothing\n           \
    \ mydictionary[item] = 1\n        else\n            mydictionary[item] += 1\n\
    \        end\n    end\n    return mydictionary\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdw_hesjr.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpdw_hesjr.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw_hesjr.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw_hesjr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdw_hesjr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpdw_hesjr.jl:17\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw_hesjr.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw_hesjr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdw_hesjr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdw_hesjr.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdw_hesjr.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdw_hesjr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdw_hesjr.jl:33\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdw_hesjr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict(string(c) => count(test, string(c)) for c in test)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38_04fzo.jl:21\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\" \" => 0, \"\
    b\" => 0, \"a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38_04fzo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38_04fzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp38_04fzo.jl:22\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 0, \" \" => 0, \"\
    b\" => 0, \"a\" => 0) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38_04fzo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38_04fzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp38_04fzo.jl:23\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"g\" => 0, \"c\" => 0, \" \" => 0, \"b\" => 0, \"a\" => 0, \"d\" => 0)\
    \ == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38_04fzo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38_04fzo.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp38_04fzo.jl:24\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"g\" => 0, \" \" => 0,\
    \ \"t\" => 0, \"r\" => 0) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38_04fzo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    count_letters = Dict{String, Int64}()\n    for (letter, _) in test\n \
    \       if letter != ' '\n            count_letters[letter] = get(count_letters,\
    \ letter, 0) + 1\n        end\n    end\n    return count_letters\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy6nrble8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  BoundsError:\
    \ attempt to access Char at index [2]\n  Stacktrace:\n   [1] indexed_iterate(I::Char,\
    \ i::Int64, state::Bool)\n     @ Base ./tuple.jl:98\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpy6nrble8.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6nrble8.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy6nrble8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpy6nrble8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  BoundsError: attempt\
    \ to access Char at index [2]\n  Stacktrace:\n   [1] indexed_iterate(I::Char,\
    \ i::Int64, state::Bool)\n     @ Base ./tuple.jl:98\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpy6nrble8.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6nrble8.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy6nrble8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpy6nrble8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  BoundsError: attempt to access Char at index [2]\n  Stacktrace:\n\
    \   [1] indexed_iterate(I::Char, i::Int64, state::Bool)\n     @ Base ./tuple.jl:98\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpy6nrble8.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy6nrble8.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6nrble8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary of the letters and the counts\n    # Create a dictionary\
    \ of the letters and the counts\n    counter = Dict{String, Int64}()\n    for\
    \ letter in test\n        if haskey(counter, letter)\n            counter[letter]\
    \ += 1\n        else\n            counter[letter] = 1\n        end\n    end\n\
    \    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7u383f__.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp7u383f__.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7u383f__.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7u383f__.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7u383f__.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp7u383f__.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7u383f__.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letter_counts = Dict()\n    for letter in test\n        if haskey(letter_counts,\
    \ letter) == false\n            letter_counts[letter] = 1\n        else\n    \
    \        letter_counts[letter] += 1\n        end\n    end\n    return letter_counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp17ybuyew.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmp17ybuyew.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp17ybuyew.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp17ybuyew.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp17ybuyew.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17ybuyew.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dicto = Dict{String, Int64}()\n    for i in test\n        if haskey(dicto,\
    \ i)\n            dicto[i] += 1\n        else\n            dicto[i] = 1\n    \
    \    end\n    end\n    dicto\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpds0yo4ph.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpds0yo4ph.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpds0yo4ph.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpds0yo4ph.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpds0yo4ph.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpds0yo4ph.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpds0yo4ph.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict()\n    for element in split(test)\n        if haskey(histogram,\
    \ element)\n            histogram[element] += 1\n        else\n            histogram[element]\
    \ = 1\n        end\n    end\n    histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpijk6nsel.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijk6nsel.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijk6nsel.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpijk6nsel.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpijk6nsel.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpijk6nsel.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpijk6nsel.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict{String, Int64}()\n    for word in split(test)\n        if\
    \ haskey(dict, word) == false\n            dict[word] = 1\n        else\n    \
    \        dict[word] += 1\n        end\n    end\n    dict\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2op_26h0.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2op_26h0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2op_26h0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2op_26h0.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2op_26h0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2op_26h0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2op_26h0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Your code goes here\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8uxwx26v.jl:16\nin expression starting at /tmp/tmp8uxwx26v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \"\"\"Returns a dictionary with the most repeated keys and their corresponding\
    \ counts.\n    \n    Input:\n    :param test: A string\n    \n    Output:\n  \
    \  :return: dictionary\n    \"\"\"\n    dict1=Dict()\n    test1=split(test)\n\
    \    for i in test1\n        if haskey(dict1,i)\n            dict1[i]=dict1[i]+1\n\
    \        else\n            dict1[i]=1\n        end\n    end\n    dict2=Dict()\n\
    \    for key in keys(dict1)\n        if haskey(dict2,dict1[key])\n           \
    \ dict2[dict1[key]]=dict2[dict1[key]]*string(key)\n        else\n            dict2[dict1[key]]=string(key)\n\
    \        end\n    end\n    dict3=Dict()\n    for i in keys(dict2)\n        for\
    \ j in split(dict2[i])\n            dict3[j]=i\n        end\n    end\n    return\
    \ dict3\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7v8naozr.jl:52\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"ba\" => 2) ==\
    \ Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v8naozr.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v8naozr.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp7v8naozr.jl:53\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"ba\" => 2) ==\
    \ Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v8naozr.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v8naozr.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp7v8naozr.jl:54\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"gcbad\" => 1) == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v8naozr.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v8naozr.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp7v8naozr.jl:55\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"gtr\" => 1) == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v8naozr.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7v8naozr.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8cmmv8ht.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp8cmmv8ht.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8cmmv8ht.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8cmmv8ht.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8cmmv8ht.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp8cmmv8ht.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8cmmv8ht.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8cmmv8ht.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    vals = values(hist)\n    maximum =\
    \ maximum(vals)\n    output = Dict{String, Int64}()\n    for (k, v) in hist\n\
    \        if v == maximum\n            output[k] = v\n        end\n    end\n  \
    \  return output\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp99e1w58y.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmp99e1w58y.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99e1w58y.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99e1w58y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp99e1w58y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp99e1w58y.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99e1w58y.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99e1w58y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp99e1w58y.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: maximum not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmp99e1w58y.jl:19\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp99e1w58y.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp99e1w58y.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp99e1w58y.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] histogra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99e1w58y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for c in test\n        letters[c]\
    \ = get(letters, c, 0) + 1\n    end\n    letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp3e40aa7.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp3e40aa7.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp3e40aa7.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp3e40aa7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp3e40aa7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpp3e40aa7.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3e40aa7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict{String, Int64}()\n    for ch in test\n        if haskey(histogram,\
    \ ch)\n            histogram[ch] += 1\n        else\n            histogram[ch]\
    \ = 1\n        end\n    end\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdja8mjl3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdja8mjl3.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdja8mjl3.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdja8mjl3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpdja8mjl3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdja8mjl3.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdja8mjl3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for l in split(test)\n        if\
    \ haskey(letters, l) \n            letters[l] += 1\n        else\n           \
    \ letters[l] = 1\n        end\n    end\n    return letters\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfc5df2nc.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfc5df2nc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfc5df2nc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfc5df2nc.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfc5df2nc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfc5df2nc.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfc5df2nc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    h = Dict{String, Int64}()\n    for c in split(test)\n        if haskey(h,\
    \ c)\n            h[c] += 1\n        else\n            h[c] = 1\n        end\n\
    \    end\n    maxval = maximum(values(h))\n    maxkeys = [k for (k, v) in h if\
    \ v == maxval]\n    return Dict(zip(maxkeys, repeat(maxval)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwokfz__.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching repeat(::Int64)\n  Closest candidates are:\n    repeat(!Matched::AbstractArray;\
    \ inner, outer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarraymath.jl:276\n\
    \    repeat(!Matched::AbstractArray, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarraymath.jl:239\n\
    \    repeat(!Matched::Char, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:334\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmplwokfz__.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplwokfz__.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplwokfz__.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplwokfz__.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching repeat(::Int64)\n  Closest candidates are:\n    repeat(!Matched::AbstractArray;\
    \ inner, outer) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarraymath.jl:276\n\
    \    repeat(!Matched::AbstractArray, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarraymath.jl:239\n\
    \    repeat(!Matched::Char, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:334\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmplwokfz__.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplwokfz__.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplwokfz__.jl:30\ntest set:\
    \ Error Duri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwokfz__.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict()\n    max_repetition = 0\n    for letter in split(test)\n\
    \        if letter in keys(histogram)\n            histogram[letter] += 1\n  \
    \      else\n            histogram[letter] = 1\n        end\n        if histogram[letter]\
    \ >= max_repetition\n            max_repetition = histogram[letter]\n        end\n\
    \    end\n    for (key, value) in histogram\n        if value != max_repetition\n\
    \            delete!(histogram, key)\n        end\n    end\n    return histogram\n\
    end\nend\nhistogram(\"a b c\")\nhistogram(\"a b b a\")\nhistogram(\"a b c a b\"\
    )\nhistogram(\"b b b b a\")\nhistogram(\"\")\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpso3y2rbq.jl:33\nin expression starting at /tmp/tmpso3y2rbq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if length(test) < 1\n        return Dict{String, Int64}()\n    end\n \
    \   # split string by spaces\n    splitted = split(test, \" \")\n    hist = Dict{String,\
    \ Int64}()\n    # get count of each letter\n    for letter in splitted\n     \
    \   if !haskey(hist, letter)\n            hist[letter] = 1\n        else\n   \
    \         hist[letter] += 1\n        end\n    end\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphutgsxsj.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphutgsxsj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphutgsxsj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphutgsxsj.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphutgsxsj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphutgsxsj.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphutgsxsj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histo = Dict{String, Int64}()\n    for char in test\n        if !haskey(histo,\
    \ char)\n            histo[char] = 1\n        else\n            histo[char] +=\
    \ 1\n        end\n    end\n    max = maximum(values(histo))\n    for key in keys(histo)\n\
    \        if histo[key] != max\n            delete!(histo, key)\n        end\n\
    \    end\n    return histo\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_or3mjvs.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_or3mjvs.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_or3mjvs.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_or3mjvs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp_or3mjvs.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_or3mjvs.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_or3mjvs.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n   lst = split(test)\n   chars = Dict{String, Int64}()\n   for c in lst\n\
    \       if c in keys(chars)\n           chars[c] += 1\n       else\n         \
    \  chars[c] = 1\n       end\n   end\n   return chars\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdhk_4cm7.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhk_4cm7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhk_4cm7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdhk_4cm7.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhk_4cm7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhk_4cm7.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdhk_4cm7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Test for empty string\n    if test == \"\" \n        return Dict()\n\
    \    end\n    \n    # Split string into array of chars\n    out = Dict()\n   \
    \ for c in split(test)\n        # Initialize if not already there\n        out[c]\
    \ = get(out, c, 0) + 1\n    end\n    \n    # Find the maximum count\n    max =\
    \ 0\n    for (k, v) in out\n        if v > max\n            max = v\n        end\n\
    \    end\n    \n    # Build dict from values that equal max\n    out = Dict()\n\
    \    for (k, v) in out\n        if v == max\n            out[k] = v\n        end\n\
    \    end\n    \n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptqa_3hge.jl:49\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqa_3hge.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqa_3hge.jl:48\ntest set: Test\
    \ Failed at /tmp/tmptqa_3hge.jl:50\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqa_3hge.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqa_3hge.jl:48\ntest set: Test\
    \ Failed at /tmp/tmptqa_3hge.jl:51\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqa_3hge.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqa_3hge.jl:48\ntest set: Test\
    \ Failed at /tmp/tmptqa_3hge.jl:52\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqa_3hge.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqa_3hge.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram(test::String)::Dict{String, Int64}\n    word_dict = Dict()\n\
    \    for letter in test\n        if letter != \" \"\n            word_dict[letter]\
    \ = get(word_dict, letter, 0) + 1\n        end\n    end\n    max_value = get(word_dict,\
    \ \"a\", 0)\n    for key in keys(word_dict)\n        max_value = max(word_dict[key],\
    \ max_value)\n    end\n    max_dict = Dict{String, Int64}()\n    for key in keys(word_dict)\n\
    \        if word_dict[key] == max_value\n            max_dict[key] = max_value\n\
    \        end\n    end\n    return max_dict\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nt7jdlo.jl:1\nin expression starting at /tmp/tmp5nt7jdlo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if test == \"\"\n        return Dict{String, Int64}()\n    end\n    res\
    \ = Dict{String, Int64}()\n    for s in split(test)\n        res[s] = 0\n    end\n\
    \    for s in split(test)\n        res[s] += 1\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcocass03.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcocass03.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcocass03.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpcocass03.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcocass03.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcocass03.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcocass03.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64vrn119.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64vrn119.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64vrn119.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp64vrn119.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64vrn119.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64vrn119.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64vrn119.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n   \n    hist_dict = Dict()\n    test_list = split(test)\n    for item in\
    \ test_list\n        if haskey(hist_dict, item)\n            hist_dict[item] +=\
    \ 1\n        else\n            hist_dict[item] = 1\n        end\n    end\n   \
    \ return hist_dict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprz1otnc2.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz1otnc2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz1otnc2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprz1otnc2.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz1otnc2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz1otnc2.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz1otnc2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dic = Dict{String, Int64}()\n    for i in test\n        if !haskey(dic,\
    \ i)\n            dic[i] = 1\n        else\n            dic[i] += 1\n        end\n\
    \    end\n    dic\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpma7dh8f_.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpma7dh8f_.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpma7dh8f_.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpma7dh8f_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpma7dh8f_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpma7dh8f_.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpma7dh8f_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n   hist = Dict{String, Int64}()\n   for c in test\n       hist[c] = get(hist,\
    \ c, 0) + 1\n   end\n   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbpo5xy_d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpbpo5xy_d.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbpo5xy_d.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbpo5xy_d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbpo5xy_d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpbpo5xy_d.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbpo5xy_d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for i in split(test)\n        if i in\
    \ keys(hist)\n            hist[i] += 1\n        else\n            hist[i] = 1\n\
    \        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwx3scpo.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwx3scpo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwx3scpo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfwx3scpo.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwx3scpo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwx3scpo.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwx3scpo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    for c in test\n        d[c] = get(d, c,\
    \ 0) + 1\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjsfrsuid.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjsfrsuid.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjsfrsuid.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjsfrsuid.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjsfrsuid.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpjsfrsuid.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsfrsuid.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d::Dict{String, Int64} = Dict()\n    for letter in split(test)\n     \
    \   d[letter] = get(d, letter, 0) + 1\n    end\n    return d\nend\nhistogram(\"\
    a b c\")\nhistogram(\"a b b a\")\nhistogram(\"a b c a b\")\nhistogram(\"b b b\
    \ b a\")\nhistogram(\"\")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizrdgord.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizrdgord.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizrdgord.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpizrdgord.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizrdgord.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizrdgord.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizrdgord.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram_dict = Dict()\n    for letter in test\n        if letter !=\
    \ \" \"\n            if !haskey(histogram_dict, letter)\n                histogram_dict[letter]\
    \ = 1\n            else\n                histogram_dict[letter] += 1\n       \
    \     end\n        end\n    end\n    return histogram_dict\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv4t8spju.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpv4t8spju.jl:24\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpv4t8spju.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpv4t8spju.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpv4t8spju.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4t8spju.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test = split(test)\n    n_elements = length(test)\n    dict_test = Dict{String,\
    \ Int64}()\n    for i in test\n        dict_test[i] = get(dict_test, i, 0) + 1\n\
    \    end\n    dict_test = filter(x -> x[2] == maximum(values(dict_test)), dict_test)\n\
    \    return dict_test\nend\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a\
    \ b c a b')\nhistogram('b b b b a')\nhistogram('')\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmprljgh53z.jl:23\nin expression\
    \ starting at /tmp/tmprljgh53z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if test == \"\"\n        return Dict{String, Int64}()\n    end\n    histogram\
    \ = Dict{String, Int64}()\n    for letter in test\n        if letter == ' '\n\
    \            continue\n        end\n        if haskey(histogram, letter)\n   \
    \         histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    histogram\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1htqokio.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1htqokio.jl:25\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1htqokio.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1htqokio.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1htqokio.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp1htqokio.jl:25\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1htqokio.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    let\n        words = countmap(lowercase(split(test, r\"\\s+\")))\n   \
    \     histogram(words) = sort(collect(words), by=x->x[2], rev=true)\n    end\n\
    \    histogram(words)\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5pk9isjp.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching lowercase(::Vector{SubString{String}})\n  Closest candidates\
    \ are:\n    lowercase(!Matched::T) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:249\n\
    \    lowercase(!Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:540\n\
    \  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp5pk9isjp.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5pk9isjp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5pk9isjp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5pk9isjp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching lowercase(::Vector{SubString{String}})\n  Closest candidates\
    \ are:\n    lowercase(!Matched::T) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:249\n\
    \    lowercase(!Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:540\n\
    \  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp5pk9isjp.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5pk9isjp.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5pk9isjp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5pk9isjp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  MethodError: no method matching lowercase(::Vector{SubString{String}})\n\
    \  Closest candi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5pk9isjp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #break up the string into a Vector of String\n    strArr = split(test)\n\
    \    #initialize a dictionary with the keys being letters and values being zeros\n\
    \    char_counts = Dict(string(i) => 0 for i in 'a':'z')\n    #Update values in\
    \ the dictionary by looping through the string of lowercase letters\n    for c\
    \ in strArr\n        char_counts[c] += 1\n    end\n    return char_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpne5nfac6.jl:29\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"f\" => 0, \"\
    c\" => 0, \"e\" => 0, \"b\" => 2, \"x\" => 0, \"r\" => 0, \"a\" => 2, \"h\" =>\
    \ 0, \"t\" => 0, \"q\" => 0\u2026) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne5nfac6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne5nfac6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpne5nfac6.jl:30\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"f\" => 0, \"c\" => 1, \"\
    e\" => 0, \"b\" => 2, \"x\" => 0, \"r\" => 0, \"a\" => 2, \"h\" => 0, \"t\" =>\
    \ 0, \"q\" => 0\u2026) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne5nfac6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne5nfac6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpne5nfac6.jl:31\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"f\" => 0, \"c\" => 1, \"e\" => 0, \"b\" => 1, \"x\" => 0, \"r\" => 0,\
    \ \"a\" => 1, \"h\" => 0, \"t\" => 0, \"q\" => 0\u2026) == Dict(\"g\" => 1, \"\
    c\" => 1, \"b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpne5nfac6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpne5nfac6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpne5nfac6.jl:32\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"f\" => 0, \"c\" => 0,\
    \ \"e\" => 0, \"b\" => 0, \"x\" => 0, \"r"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpne5nfac6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    dict = Dict()\n    for char in split(test)\n        if char in keys(dict)\n\
    \            dict[char] += 1\n        else\n            dict[char] = 1\n     \
    \   end\n    end\n    max = 0\n    for (k, v) in dict\n        if max < v\n  \
    \          max = v\n        end\n    end\n    out = Dict()\n    for (k, v) in\
    \ dict\n        if v == max\n            out[k] = v\n        end\n    end\n  \
    \  return out\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \"\"\"\n        Code here.\n    \"\"\"\n    return\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8alnjap_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp8alnjap_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8alnjap_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8alnjap_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8alnjap_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp8alnjap_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8alnjap_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8alnjap_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # We need a hash table to do this\n    h = OrderedDict{String, Int64}()\n\
    \    # Splitting the string on the space character\n    words = split(test, \"\
    \ \")\n    # Function to insert into the hash table\n    # if the value exists,\
    \ we increment it, otherwise, we add it with a value of 1\n    function insert(s::String)\n\
    \        if haskey(h, s)\n            h[s] += 1\n        else\n            h[s]\
    \ = 1\n        end\n    end\n    # Then we loop through the dictionary\n    for\
    \ word in words\n        insert(word)\n    end\n    # We now need to find the\
    \ highest value\n    max = 0\n    for (key, value) in h\n        if max < value\n\
    \            max = value\n        end\n    end\n    # We can now construct our\
    \ result\n    result = OrderedDict{String, Int64}()\n    for (key, value) in h\n\
    \        if value == max\n            result[key] = value\n        end\n    end\n\
    \    return result\nend\nprintln(histogram(\"a b c\"))\nprintln(histogram(\"a\
    \ b b a\"))\nprintln(histogram(\"a b c a b\"))\nprintln(histogram(\"b b b b a\"\
    ))\nprintln(histogram(\"\"))\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: OrderedDict not defined\nStacktrace:\n\
    \ [1] histogram(test::String)\n   @ Main /tmp/tmprsyftfkv.jl:15\n [2] top-level\
    \ scope\n   @ /tmp/tmprsyftfkv.jl:47\nin expression starting at /tmp/tmprsyftfkv.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # use the lower case letters for keys for the histogram\n    letter_count\
    \ = Dict{String, Int64}()\n    for letter in test\n        get!(letter_count,\
    \ letter, 0) # if key is found, return its value\n        letter_count[letter]\
    \ += 1\n    end\n    return letter_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5542dkmt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] get!(default::Function, h::Dict{String, Int64},\
    \ key0::Char)\n     @ Base ./dict.jl:451\n   [2] get!(t::Dict{String, Int64},\
    \ key::Char, default::Int64)\n     @ Base ./abstractdict.jl:512\n   [3] histogram(test::String)\n\
    \     @ Main /tmp/tmp5542dkmt.jl:17\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5542dkmt.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5542dkmt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5542dkmt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] get!(default::Function, h::Dict{String, Int64},\
    \ key0::Char)\n     @ Base ./dict.jl:451\n   [2] get!(t::Dict{String, Int64},\
    \ key::Char,"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5542dkmt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    mydict = {}\n    for c in split(test, ' ')\n        if c in keys(mydict)\n\
    \            mydict[c] += 1\n        else\n            mydict[c] = 1\n       \
    \ end\n    end\n    return mydict\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: { } vector syntax is discontinued around /tmp/tmpxhf5lydv.jl:14\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhf5lydv.jl:1\nin expression starting\
    \ at /tmp/tmpxhf5lydv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for char in test\n        if haskey(hist, char)\n \
    \           hist[char] += 1\n        else\n            hist[char] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprh_qxc9t.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmprh_qxc9t.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprh_qxc9t.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprh_qxc9t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprh_qxc9t.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh_qxc9t.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n        \n    v = test;\n    c = countmap(split(v));\n    b = values(c);\n\
    \    d = max(b);\n    e = [];\n    for (i,j) in c\n        if j == d\n       \
    \     push!(e,i)\n        end\n    end\n        \n    g = (e => d);\n    println(g)\n\
    \    return g\n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqd5w9040.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @\
    \ Main /tmp/tmpqd5w9040.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqd5w9040.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqd5w9040.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpqd5w9040.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: countmap\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpqd5w9040.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqd5w9040.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqd5w9040.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpqd5w9040.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: countmap not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpqd5w9040.jl:16\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqd5w9040.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqd5w9040.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpqd5w9040.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] hist"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqd5w9040.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyiqp49yf.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main\
    \ /tmp/tmpyiqp49yf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyiqp49yf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyiqp49yf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyiqp49yf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpyiqp49yf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyiqp49yf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyiqp49yf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyiqp49yf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmpyiqp49yf.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyiqp49yf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyiqp49yf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyiqp49yf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] histogram(test::Stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyiqp49yf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    counts = Dict{String, Int64}()\n    for i in split(test)\n        if !haskey(counts,\
    \ i)\n            counts[i] = 1\n        else\n            counts[i] += 1\n  \
    \      end\n    end\n    return counts\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_eulpp7.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_eulpp7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_eulpp7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj_eulpp7.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_eulpp7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_eulpp7.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_eulpp7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n        \n        #initialize a dictionary with no entries\n        hist =\
    \ Dict{String, Int64}()\n        \n        #split the string into an array of\
    \ characters\n        split_test = test[1:end]\n        split_test = split(split_test,\
    \ \" \")\n        \n        #for each element in the array, increment the value\
    \ in the dictionary\n        for i = 1:length(split_test)\n            element\
    \ = split_test[i]\n            get(hist, element, 0)\n            hist[element]\
    \ += 1\n        end\n        \n        return hist\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp091fx8ux.jl:31\nin expression starting at /tmp/tmp091fx8ux.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n\n# Solution\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkq2sbm3l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkq2sbm3l.jl:1\n\
    in expression starting at /tmp/tmpkq2sbm3l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    emptyDict = Dict{String, Int64}()\n    for char in test\n        emptyDict[char]\
    \ = get(emptyDict, char, 0) + 1\n    end\n    maxVal = maximum(values(emptyDict))\n\
    \    return filter(x -> x[2] == maxVal, emptyDict)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpybif6czm.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpybif6czm.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpybif6czm.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpybif6czm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpybif6czm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpybif6czm.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybif6czm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Code\nend\n@testset \"Empty string test\" begin\n    @test histogram(\"\
    \") == Dict{String, Int64}()\nend\n@testset \"Basic test\" begin\n    @test histogram(\"\
    a b c\") == Dict{String, Int64}('a' => 1, 'b' => 1, 'c' => 1)\n    @test histogram(\"\
    a b b a\") == Dict{String, Int64}('a' => 2, 'b' => 2)\n    @test histogram(\"\
    a b c a b\") == Dict{String, Int64}('a' => 2, 'b' => 2)\n    @test histogram(\"\
    b b b b a\") == Dict{String, Int64}('b' => 4)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmphl_76okl.jl:16\nin expression starting at /tmp/tmphl_76okl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    for i in 1:length(test)\n        if length(test) == 0\n            return\
    \ Dict{String, Int64}()\n        else\n            split(test, \" \")\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp8gqps82t.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8gqps82t.jl:1\n\
    in expression starting at /tmp/tmp8gqps82t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    max = 0\n    dict = Dict{String, Int64}()\n    for i = 1:length(test)\n\
    \        count = (length(filter(isequal(test[i]), test)))\n        if count >=\
    \ max\n            dict[test[i]] = count\n            max = count\n        end\n\
    \    end\n    dict\nend\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('a\
    \ b c a b')\nhistogram('b b b b a')\nhistogram('')\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdds8ag2.jl:25\nin expression\
    \ starting at /tmp/tmpzdds8ag2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Extract letters from input\n    letters = split(test)\n    # Initialize\
    \ dictionary\n    histo = Dict{String, Int64}()\n    # Iterate over letters, count\
    \ repetitions, and add to dictionary\n    for letter in letters\n        if !(haskey(histo,\
    \ letter))\n            histo[letter] = 1\n        else\n            histo[letter]\
    \ += 1\n        end\n    end\n    # Figure out which letters had the most repetitions\n\
    \    most = maximum(values(histo))\n    # Create output dictionary by including\
    \ letters with most repetitions\n    output = Dict{String, Int64}()\n    for (key,\
    \ value) in histo\n        if value == most\n            output[key] = value\n\
    \        end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp20kald6p.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:330\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #maximum#258\n      @ ./reduce.jl:737 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:737 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp20kald6p.jl:27\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmp20kald6p.jl:48 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp20kald6p.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20kald6p.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split string into individual letters and count.\n    test = split(test)\n\
    \    hist = countmap(test)\n    \n    # Get letter with the maximum count.\n \
    \   max_value = maximum(values(hist))\n    \n    # Create dictionary to return,\
    \ containing all letters with the same maximum.\n    return_dict = Dict{String,\
    \ Int64}(k => v for (k, v) in hist if v == max_value)\n    \n    return return_dict\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmsqs97ec.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @\
    \ Main /tmp/tmpmsqs97ec.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmsqs97ec.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmsqs97ec.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmsqs97ec.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: countmap\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpmsqs97ec.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmsqs97ec.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmsqs97ec.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmsqs97ec.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: countmap not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpmsqs97ec.jl:16\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmsqs97ec.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmsqs97ec.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpmsqs97ec.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] hist"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsqs97ec.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    t = (ch for ch in test)\n    m = Dict{String, Int64}()\n    for i in t\
    \ \n        if haskey(m, i)\n            m[i] += 1\n        else\n           \
    \ m[i] = 1\n        end\n    end\n    m\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3e0hwd7u.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp3e0hwd7u.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3e0hwd7u.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3e0hwd7u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3e0hwd7u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp3e0hwd7u.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3e0hwd7u.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #pre allocate\n    freq = Dict{String, Int64}()\n    #iterate through\
    \ the test string\n    for i in test\n        #set the dictionary key to the string\
    \ and the value to 0\n        freq[i] = 0\n    end\n    #iterate through the test\
    \ string\n    for i in test\n        #add one to the current key if it is there\n\
    \        freq[i] += 1\n    end\n    #return dictionary\n    return freq\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdc5yq3ao.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdc5yq3ao.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdc5yq3ao.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdc5yq3ao.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpdc5yq3ao.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpdc5yq3ao.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc5yq3ao.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    count = Dict()\n    for c in test\n        if c == ' '\n            continue\n\
    \        end\n        if c in keys(count)\n            count[c] += 1\n       \
    \ else\n            count[c] = 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpebagb4ra.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpebagb4ra.jl:25\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpebagb4ra.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpebagb4ra.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpebagb4ra.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebagb4ra.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histo = Dict()\n    for i in test\n        if i in keys(histo)\n     \
    \       histo[i] += 1\n        else\n            histo[i] = 1\n        end\n \
    \   end\n    max_elm = sort(collect(values(histo)), rev=true)[1]\n    final_histo\
    \ = Dict()\n    for i in keys(histo)\n        if histo[i] == max_elm\n       \
    \     final_histo[i] = max_elm\n        end\n    end\n    return final_histo\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm8ydr0k5.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpm8ydr0k5.jl:29\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpm8ydr0k5.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpm8ydr0k5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpm8ydr0k5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8ydr0k5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    for word in split(test)\n        if haskey(d,\
    \ word)\n            d[word] += 1\n        else\n            d[word] = 1\n   \
    \     end\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfuxiwcga.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuxiwcga.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuxiwcga.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfuxiwcga.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuxiwcga.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuxiwcga.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuxiwcga.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for char in split(test)\n        hist[char]\
    \ = get(hist, char, 0) + 1\n    end\n    hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcqg3s4yx.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqg3s4yx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqg3s4yx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpcqg3s4yx.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcqg3s4yx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcqg3s4yx.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqg3s4yx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = split(test, \" \")\n    dict = Dict{String, Int64}()\n    for\
    \ letter in letters\n        dict[letter] = get(dict, letter, 0) + 1\n    end\n\
    \    return dict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7fzdmer.jl:27\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7fzdmer.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7fzdmer.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx7fzdmer.jl:30\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7fzdmer.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7fzdmer.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx7fzdmer.jl:32\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7fzdmer.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7fzdmer.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7fzdmer.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict{String, Int64}(map(x -> (x, count(test, x)), unique(test))...)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp17womszf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ objects of type String are not callable\n  Stacktrace:\n    [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] count(f::String,\
    \ itr::Char; init::Int64)\n      @ Base ./reduce.jl:1201\n    [3] count(f::String,\
    \ itr::Char)\n      @ Base ./reduce.jl:1201\n    [4] (::var\"#1#2\"{String})(x::Char)\n\
    \      @ Main /tmp/tmp17womszf.jl:14\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect\n      @ ./array.jl:744 [inlined]\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] histogram(test::String)\n      @ Main /tmp/tmp17womszf.jl:14\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmp17womszf.jl:21 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmp17womszf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp17womszf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n    [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\n      @ Base ./reduce.jl:1206\n    [2] count(f::String,\
    \ itr::Char; init::Int64)\n      @ Base ./reduce.jl:1201\n    [3] count(f::String,\
    \ itr::Char)\n      @ Base ./reduce.jl:1201\n    [4] (::var\"#1#2\"{String})(x::Char)\n\
    \      @ Main /tmp/tmp17womszf.jl:14\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect\n      @ ./array.jl:744 [inlined]\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] histogram(test::String)\n      @ Main /tmp/tmp17womszf.jl:14\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17womszf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n       \n    #CREATE EMPTY DICTIONARY\n    histo = Dict()\n    #LOOP THROUGH\
    \ STRING AND COUNTER\n    for i = eachindex(test)\n        #IF CHARACTER ALREADY\
    \ IN DICTIONARY\n        if haskey(histo,test[i])\n            #ADD ONE TO COUNTER\n\
    \            histo[test[i]] = histo[test[i]] + 1\n        #IF CHARACTER NOT IN\
    \ DICTIONARY    \n        else\n            #INSERT CHARACTER WITH VALUE 1\n \
    \           histo[test[i]] = 1\n        end\n    end\n    #FIND LARGEST VALUE\
    \ IN DICTIONARY\n    largenum = maximum(values(histo))\n    #CREATE EMPTY DICTIONARY\n\
    \    largedict = Dict()\n    #LOOP THROUGH DICTIONARY\n    for key in keys(histo)\n\
    \        #IF CHARACTER HAS LARGEST VALUE\n        if histo[key] == largenum\n\
    \            #INSERT INTO DICTIONARY WITH ORIGINAL VALUE\n            largedict[key]\
    \ = largenum\n        end\n    end\n    #RETURN LARGEST DICTIONARY\n    return\
    \ largedict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvz76fqpy.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpvz76fqpy.jl:42\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpvz76fqpy.jl:49 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpvz76fqpy.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpvz76fqpy.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvz76fqpy.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    h = countmap(split(test))\n    maxVal = 0\n    maxKey = \"\"\n    out\
    \ = Dict()\n    for k in keys(h)\n        if h[k] > maxVal\n            maxVal\
    \ = h[k]\n            maxKey = k\n        end\n    end\n    for k in keys(h)\n\
    \        if h[k] == maxVal\n            out[k] = maxVal\n        end\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpazvb8cxp.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @\
    \ Main /tmp/tmpazvb8cxp.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpazvb8cxp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpazvb8cxp.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpazvb8cxp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  UndefVarError: countmap\
    \ not defined\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmpazvb8cxp.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpazvb8cxp.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpazvb8cxp.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpazvb8cxp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  UndefVarError: countmap not defined\n  Stacktrace:\n   [1]\
    \ histogram(test::String)\n     @ Main /tmp/tmpazvb8cxp.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpazvb8cxp.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpazvb8cxp.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpazvb8cxp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1)\n  UndefVarError:\
    \ countmap not defined\n  Stacktrace:\n   [1] hist"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazvb8cxp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    output::Dict{String, Int64} = Dict{String, Int64}()\n    for l in test\n\
    \        if output.haskey(l)\n            output[l] += 1\n        else\n     \
    \       output[l] = 1\n        end\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkzup04sy.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ Dict has no field haskey\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpkzup04sy.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzup04sy.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzup04sy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkzup04sy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type Dict has no\
    \ field haskey\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpkzup04sy.jl:16\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzup04sy.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzup04sy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkzup04sy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type Dict has no field haskey\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpkzup04sy.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzup04sy.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzup04sy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkzup04sy.jl:32\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzup04sy.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letterCount = Dict()\n    for char in test\n        if char in keys(letterCount)\n\
    \            letterCount[char] += 1\n        else\n            letterCount[char]\
    \ = 1\n        end\n    end\n    return letterCount\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuiod3nc7.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpuiod3nc7.jl:22\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuiod3nc7.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuiod3nc7.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpuiod3nc7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuiod3nc7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split the string by space\n    string_vector = split(test, \" \")\n\
    \    # Initialize the dictionary with nothing\n    dict = Dict()\n    # Loop through\
    \ each word to count\n    for word in string_vector\n        # If the word is\
    \ in the dictionary, increase the count by 1\n        if word in keys(dict)\n\
    \            dict[word] += 1\n        # If the word is not in the dictionary,\
    \ set the count as 1\n        else\n            dict[word] = 1\n        end\n\
    \    end\n    return dict\nend\n# Test the function\nhistogram(\"a b c\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplokllldr.jl:38\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplokllldr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplokllldr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplokllldr.jl:41\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplokllldr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplokllldr.jl:36\ntest set: Test\
    \ Failed at /tmp/tmplokllldr.jl:43\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplokllldr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplokllldr.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplokllldr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    words = split(test)\n    dic = Dict{String, Int64}()\n    for word in\
    \ words\n        if !haskey(dic, word)\n            dic[word] = 1\n        else\n\
    \            dic[word] += 1\n        end\n    end\n    dic\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnolxu44x.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnolxu44x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnolxu44x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnolxu44x.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnolxu44x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnolxu44x.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnolxu44x.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    \n    # Example:\n    assert(histogram('a b c') == {'a': 1, 'b':\
    \ 1, 'c': 1})\n    assert(histogram('a b b a') == {'a': 2, 'b': 2})\n    assert(histogram('a\
    \ b c a b') == {'a': 2, 'b': 2})\n    assert(histogram('b b b b a') == {'b': 4})\n\
    \    assert(histogram('') == {})\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp79636l4p.jl:17\nin expression\
    \ starting at /tmp/tmp79636l4p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist_dict=Dict{String, Int64}()\n    for i in split(test)\n        if\
    \ i in keys(hist_dict)\n            hist_dict[i] += 1\n        else\n        \
    \    hist_dict[i] = 1\n        end\n    end\n    return hist_dict\nend\nhistogram(\"\
    \")\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvoaxsl40.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvoaxsl40.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvoaxsl40.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvoaxsl40.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvoaxsl40.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvoaxsl40.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvoaxsl40.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict{String, Int64}()\n    test_a = split(test)\n    max_count\
    \ = 0\n    for i in test_a\n        histogram[i] = get(histogram, i, 0) + 1\n\
    \        if histogram[i] > max_count\n            max_count = histogram[i]\n \
    \       end\n    end\n    for (key, value) in histogram\n        if value != max_count\n\
    \            delete!(histogram, key)\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for s in split(test)\n        if haskey(hist,\
    \ s)\n            hist[s] += 1\n        else\n            hist[s] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5szdwk55.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5szdwk55.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5szdwk55.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5szdwk55.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5szdwk55.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5szdwk55.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5szdwk55.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \"\"\"Return the histogram of the input string.\"\"\"\n    if test ==\
    \ \"\"\n        return Dict{String, Int64}()\n    end\n    dict = Dict{String,\
    \ Int64}()\n    letternum = 1\n    for c in test\n        if haskey(dict, c)\n\
    \            dict[c] += 1\n        else\n            dict[c] = 1\n        end\n\
    \    end\n    dict = filter(x -> x[2] >= maximum(values(dict)), dict)\n    return\
    \ dict\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpetqwgifa.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpetqwgifa.jl:24\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpetqwgifa.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpetqwgifa.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpetqwgifa.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmpetqwgifa.jl:24\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetqwgifa.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    l = length(test)\n    test_split = split(test, \" \")\n    test_dict =\
    \ Dict{String, Int64}()\n    for i in 1:l\n        if test_split[i] in keys(test_dict)\n\
    \            test_dict[test_split[i]] += 1\n        else\n            test_dict[test_split[i]]\
    \ = 1\n        end\n    end\n    return test_dict\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplbwoajqk.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  BoundsError:\
    \ attempt to access 4-element Vector{SubString{String}} at index [5]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmplbwoajqk.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplbwoajqk.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplbwoajqk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplbwoajqk.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  BoundsError: attempt\
    \ to access 5-element Vector{SubString{String}} at index [6]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmplbwoajqk.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplbwoajqk.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplbwoajqk.jl:30\ntest set:\
    \ Error During Test at /tmp/tmplbwoajqk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  BoundsError: attempt to access 5-element Vector{SubString{String}}\
    \ at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmplbwoajqk.jl:18\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplbwoajqk.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplbwoajqk.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    s = Dict()\n    for c in test\n        s[c] = get(s, c, 0) + 1\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwbflsz18.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:528 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpwbflsz18.jl:18\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwbflsz18.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwbflsz18.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwbflsz18.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] Dict{String, In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbflsz18.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    d = Dict{String, Int64}()\n    d[\"a\"] = 1\n    d[\"b\"] = 1\n    d[\"\
    c\"] = 1\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnouvs99a.jl:25\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 1, \"a\" => 1) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnouvs99a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnouvs99a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnouvs99a.jl:26\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"b\" => 1, \"\
    a\" => 1) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnouvs99a.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnouvs99a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnouvs99a.jl:27\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict(\"c\" => 1, \"b\" => 1, \"a\" => 1) == Dict(\"g\" => 1, \"c\" => 1, \"\
    b\" => 1, \"a\" => 1, \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnouvs99a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnouvs99a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnouvs99a.jl:28\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict(\"c\" => 1, \"b\" => 1,\
    \ \"a\" => 1) == Dict(\"g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnouvs99a.jl:28 [inlined]\n [3]\
    \ macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnouvs99a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5n9g5rcl.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n\
    \    convert(::Type{T}, !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp5n9g5rcl.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5n9g5rcl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5n9g5rcl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp5n9g5rcl.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:525\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:527\n\
    \    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp5n9g5rcl.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5n9g5rcl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5n9g5rcl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \n    # declare an empty dictionary\n    d = Dict()\n    \n    # split\
    \ the string by whitespace and iterate through the letters\n    for i in split(test)\n\
    \        \n        # assign the value of the dictionary as the number of occurrences\
    \ of i in the string\n        d[i] = count(test, i)\n    end\n    \n    # sort\
    \ the entries in the dictionary by key (letter)\n    sort!(d)\n    \n    # return\
    \ the sorted dictionary\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__zgbcc8.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ no method matching sort!(::Dict{Any, Any})\n  Closest candidates are:\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp__zgbcc8.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp__zgbcc8.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__zgbcc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp__zgbcc8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: no\
    \ method matching sort!(::Dict{Any, Any})\n  Closest candidates are:\n    sort!(!Matched::AbstractUnitRange)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1305\n    sort!(!Matched::AbstractVector{<:Union{Missing,\
    \ Float32, Float64}}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1234\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering,\
    \ <:Vector{<:Union{Missing, Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\n\
    \    ...\n  Stacktrace:\n   [1] histogram(test::String)\n     @ Main /tmp/tmp__zgbcc8.jl:26\n\
    \   [2] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__zgbcc8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    \"\"\"Return the dictionary of the letter with the most repetition and\
    \ its corresponding\n        count\n        \n        \"\"\"\n    count = Dict()\n\
    \    testlist = split(test)\n    for i in testlist\n        if haskey(count, i)\n\
    \            count[i] += 1\n        else\n            count[i] = 1\n        end\n\
    \    end\n    return count\nend\n        \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0ezvk3l.jl:38\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0ezvk3l.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0ezvk3l.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpw0ezvk3l.jl:41\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0ezvk3l.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0ezvk3l.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0ezvk3l.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in test\n        if haskey(letters,\
    \ letter)\n            letters[letter] += 1\n        else\n            letters[letter]\
    \ = 1\n        end\n    end\n    return letters\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_4fuyg0h.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_4fuyg0h.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_4fuyg0h.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_4fuyg0h.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_4fuyg0h.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:373\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_4fuyg0h.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4fuyg0h.jl:26\n"
  exit_code: 1
  status: SyntaxError
