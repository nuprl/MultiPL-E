name: HumanEval_108_count_nums
language: jl
prompt: "\"\"\"\n    Write a function count_nums which takes an array of integers\
  \ and returns\n    the number of elements which has a sum of digits > 0.\n    If\
  \ a number is negative, then its first signed digit will be negative:\n    e.g.\
  \ -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1,\
  \ 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3,\
  \ 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
  \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\
  \t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
completions: ["    count = 0\n    for n in arr\n        if n < 0\n            s =\
    \ string(n)\n            sum = parse(Int64, s[2]) + parse(Int64, s[3]) + parse(Int64,\
    \ s[4])\n        else\n            sum = 0\n            while n > 0\n        \
    \        sum += n % 10\n                n = n % 10\n            end\n        end\n\
    \        if sum > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    val = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            val += 1\n        end\n    end\n    return val\nend", "   \
    \ count = 0\n    for i in arr\n        if i < 0\n            i = -i\n        end\n\
    \        if sum(digits(i)) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for a in arr\n        sum = 0\n \
    \       if a < 0\n            a = -a\n        end\n        while a > 0\n     \
    \       sum += a % 10\n            a = div(a, 10)\n        end\n        if sum\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   # Write your code here\nend\n\"\"\"\n    Write a function list_complement\
    \ which takes two lists of integers as\n    inputs and returns a vector of all\
    \ integers in the first list which are\n    not in the second list.\n    >>> sort(list_complement([1,\
    \ 2, 3], [2, 3, 4])) == [1]\n    >>> sort(list_complement([1, 2, 3], [1, 2, 3]))\
    \ == []\n    >>> sort(list_complement([1, 2, 3], [])) == [1, 2, 3]\n    >>> sort(list_complement([],\
    \ [1, 2, 3])) == []\n    \"\"\"", "    if length(arr) == 0\n        return 0\n\
    \    end\n    num = 0\n    for i in arr\n        if abs(i) < 10\n            num\
    \ += 1\n        elseif abs(i) < 100\n            if abs(i) % 10 == 0\n       \
    \         continue\n            else\n                num += 1\n            end\n\
    \        elseif abs(i) < 1000\n            if abs(i) % 100 == 0\n            \
    \    continue\n            else\n                num += 1\n            end\n \
    \       elseif abs(i) < 10000\n            if abs(i) % 1000 == 0\n           \
    \     continue\n            else\n                num += 1\n            end\n\
    \        elseif abs(i) < 100000\n            if abs(i) % 10000 == 0\n        \
    \        continue\n            else\n                num += 1\n            end\n\
    \        elseif abs(i) < 1000000\n            if abs(i) % 100000 == 0\n      \
    \          continue\n            else\n                num += 1\n            end\n\
    \        elseif abs(i) < 10000000\n            if abs(i) % 1000000 == 0\n    \
    \            continue\n            else\n                num += 1\n          \
    \  end\n        elseif abs(i) < 100000000\n            if abs(i) % 10000000 ==\
    \ 0\n                continue\n            else\n                num += 1\n  \
    \          end\n        elseif abs(i) < 1000000000\n            if abs(i) % 100000000\
    \ == 0\n                continue\n            else\n                num += 1\n\
    \            end\n        elseif abs(i) < 10000000000\n            if abs(i) %\
    \ 1000000000 == 0\n                continue\n            else\n              \
    \  num += 1\n            end\n        elseif abs(i) < 100000000000\n         \
    \   if abs(i) % 10000000000 == 0\n                continue\n            else\n\
    \                num += 1\n            end\n        elseif abs(i) < 1000000000000\n\
    \            if abs(i) % 100000000000 == 0\n                continue\n       \
    \     else\n                num += 1\n            end\n        elseif abs(i) <\
    \ 10000000000000\n            if abs(i) % 1000000000000 == 0\n               \
    \ continue\n            else\n                num += 1\n            end\n    \
    \    elseif abs(i) < 100000000000000\n            if abs(i) % 10000000000000 ==\
    \ 0\n                continue\n", "    \"\"\"\n    >>> count_nums([]) == 0\n \
    \   >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n \
    \   \"\"\"\n    return 0\nend", "    count = 0 \n    for i = 1:length(arr)\n \
    \       if signed_digits_sum(arr[i]) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for i in arr\n        if\
    \ ispositive(i) && i != 0\n            count += 1\n        elseif i == 0\n   \
    \         count += 1\n        else\n            while i != 0\n               \
    \ if mod(i,10) > 0\n                    count += 1\n                    break\n\
    \                end\n                i = div(i,10)\n            end\n       \
    \ end\n    end\n    return count\nend", "    sum_digits = 0\n    cnt = 0\n   \
    \ for i in arr\n        i == negative(i) ? sum_digits += abs(i) : sum_digits +=\
    \ i\n        if sum_digits > 0\n            cnt += 1\n        end\n    end\n \
    \   return cnt\nend\n \n \n\"\"\"\n    Write a function is_multiple which takes\
    \ an integer n and returns true\n    if the number is a multiple of 3.\n    >>>\
    \ is_multiple(3) == true\n    >>> is_multiple(4) == false\n    \"\"\"", "    count\
    \ = 0\n    for i in arr\n        if sum_digits(i) > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    for i in arr\n\
    \        if sum(digits(abs(i))) > 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    return sum(sum(abs.(digits(x))) > 0 for x\
    \ in arr)\nend", "    # YOUR CODE HERE\n    count=0\n    for i in arr\n      \
    \  if sum_of_digits(i)>0\n            count+=1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for num in arr\n        if num < 0\n      \
    \      sum = sum_of_digits(-num)\n        else\n            sum = sum_of_digits(num)\n\
    \        end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    sum = 0\n    for i in arr\n        if i < 0\n  \
    \          i = -i\n        end\n        sum += sum_digits(i)\n    end\n    if\
    \ sum > 0\n        return 1\n    else\n        return 0\n    end\nend", "    \n\
    \    c = 0\n    for i = 1:length(arr)\n        if arr[i]>=0\n            if sum_digits(arr[i])\
    \ > 0\n                c = c + 1\n            end\n        else\n            if\
    \ sum_digits(abs(arr[i])) > 0\n                c = c + 1\n            end\n  \
    \      end\n    end\n    return c\nend", "    count = 0\n    for i in arr\n  \
    \      if signed_digits_sum(i) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n ", "    n = 0\n    for x in arr\n        if sum(digits(abs(x)))\
    \ > 0\n            n += 1\n        end\n    end\n    return n\nend", "    count\
    \ = 0\n    for i in arr\n        if sum(abs.(digits(i))) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i in arr\n        if sumdigits(i) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for x in arr\n        if\
    \ sum_digits(x) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for i in arr\n        if i != 0\n         \
    \   while i != 0\n                if i > 0\n                    count += i % 10\n\
    \                    i = i - (i % 10)\n                    i = i / 10\n      \
    \          else\n                    i = i * -1\n                    count +=\
    \ i % 10\n                    i = i - (i % 10)\n                    i = i / 10\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    count = 0 \n    for item in arr \n        # Handle negative numbers\n\
    \        if item < 0 \n            item = -item \n        end \n        sum_of_digits\
    \ = 0 \n        while item != 0 \n            sum_of_digits += item % 10 \n  \
    \          item = item / 10 \n        end \n        if sum_of_digits > 0 \n  \
    \          count += 1 \n        end \n    end \n    return count \nend ", "  \
    \  result = 0\n    for i in arr\n        if i >= 0 \n            sum = 0\n   \
    \         while i >= 10\n                sum += i % 10\n                i = trunc(Int64,\
    \ i / 10)\n            end\n            if sum + i > 0\n                result\
    \ += 1\n            end\n        else\n            sum = 0\n            for i\
    \ in abs(i)\n                sum += i % 10\n                i = trunc(Int64, i\
    \ / 10)\n            end\n            if sum > 0\n                result += 1\n\
    \            end\n        end\n    end\n    return result\nend", "    return sum(sum(abs.(digits(x)))\
    \ > 0 for x in arr)\nend", "    count = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum(count_num(x) for x in arr)\nend", "    s = 0 \n    for n in arr \n   \
    \     if digitsum(n) > 0 \n            s += 1 \n        end \n    end \n    return\
    \ s \nend \n \n \n \n \n\"\"\"\n    Write a function count_letters which takes\
    \ a string and returns the\n    number of characters in the string which have\
    \ an ord value > 100.\n    >>> count_letters(\"\") == 0\n    >>> count_letters(\"\
    asdf\") == 4\n    >>> count_letters(\"Asdf\") == 3\n    \"\"\"", "    count =\
    \ 0\n    for num in arr\n        count += sum(digits(abs(num))) > 0 ? 1 : 0\n\
    \    end\n    return count\nend", "    count = 0\n    for i in arr\n        if\
    \ sum_digits(i) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    total = 0\n    for value in arr\n        #if sum(digits(abs(value)))\
    \ > 0\n        if sum(digits(value)) > 0\n            total += 1\n        end\n\
    \    end\n    return total\nend", "    count = 0\n    for i in arr\n        if\
    \ sumdigits(i)>0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for x in arr\n        if x > 0\n            s = sum(digits(x))\n\
    \        else\n            s = sum(digits(-x))\n        end\n        if s > 0\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    return\
    \ sum(abs(x) < 10 ? x > 0 : digit_sum(x) > 0 for x in arr)\nend", "    count =\
    \ 0\n    for i in arr\n        if i < 0\n            n = abs(i)\n        else\n\
    \            n = i\n        end\n        if sum_digits(n) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nprintln(count_nums([-1, 11,\
    \ -11]))", "    count = 0\n    for x in arr\n        if x > 0\n            count\
    \ += 1\n        else\n            x = -x\n            y = (x-mod(x,10))/10\n \
    \           while y > 9\n                x = y\n                y = (x-mod(x,10))/10\n\
    \            end\n            if y == 1 || y == 2 || y == 3 || y == 4 || y ==\
    \ 5 || y == 6 || y == 7 || y == 8 || y == 9\n                count += 1\n    \
    \        end\n        end\n    end\n    return count\nend", "    arr_of_sign_nums\
    \ = map(x -> map(x -> sign(x), digits(x)), arr)\n    arr_of_sign_nums = map(x\
    \ -> reduce(+, x), arr_of_sign_nums)\n    return count(x -> x > 0, arr_of_sign_nums)\n\
    end", "    elements::Int64 = 0\n    for i in arr\n        sum::Int64 = 0\n   \
    \     if i < 0\n            i = -i\n        end\n        while i > 0\n       \
    \     sum += i % 10\n            i = div(i, 10)\n        end\n        if sum >\
    \ 0\n            elements += 1\n        end\n    end\n    return elements\nend",
  "    count = 0\n    for i in arr\n        if ssum(i) > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    answer = 0\n    for num in\
    \ arr\n        if sum_digits(num) > 0\n            answer += 1\n        end\n\
    \    end\n    return answer\nend", "    n = 0\n    for i in arr\n        for j\
    \ in digits(i)\n            n += j\n        end\n    end\n    return n\nend\n\
    @test function count_nums_tests()\n    @testset \"empty list\" begin\n       \
    \ @test count_nums([]) == 0\n    end\n    @testset \"negative numbers\" begin\n\
    \        @test count_nums([-1, 11, -11]) == 1\n    end\n    @testset \"positive\
    \ numbers\" begin\n        @test count_nums([1, 1, 2]) == 3\n    end\nend", " \
    \   count = 0\n    for a in arr\n        if a < 0\n            a = a * -1\n  \
    \      end\n        if sum_of_digits(a) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\n#     >>> count_nums([-1, 11, -11]) == 1\n@test\
    \ count_nums([-1, 11, -11]) == 1\n#     >>> count_nums([1, 1, 2]) == 3\n@test\
    \ count_nums([1, 1, 2]) == 3", "    cnt = 0\n    for i in arr\n        cnt +=\
    \ sum(digits(abs(i))) > 0 ? 1 : 0\n    end\n    return cnt\nend", "    nonzero_count\
    \ = 0\n    for i in arr\n        digits = digits(i)\n        if sum(digits) >\
    \ 0\n            nonzero_count += 1\n        end\n    end\n    return nonzero_count\n\
    end", "    count = 0\n    sum = 0\n    for x in arr\n        for s in string(x)\n\
    \            if x > 0\n                sum += parse(Int64, s)\n            else\n\
    \                sum += -parse(Int64, s)\n            end\n        end\n     \
    \   if sum > 0\n            count += 1\n        end\n        sum = 0\n    end\n\
    \    return count\nend", "    counter::Int64 = 0\n    for i in arr\n        if\
    \ signed_sum(i) > 0\n            counter += 1\n        end\n    end\n    return\
    \ counter\nend", "    count = 0\n    for number in arr\n        if number < 0\n\
    \            number = -1 * number\n        end\n        if sum(digits(number))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum = 0\n    for i in arr\n        if i >= 0\n            while i > 0\n  \
    \              sum += i % 10\n                i = floor(i / 10)\n            end\n\
    \        else\n            while i < 0\n                sum += abs(i % 10)\n \
    \               i = floor(i / 10)\n            end\n        end\n    end\n   \
    \ return sum\nend", "    s = 0\n    for n in arr\n        s += sum(abs(digits(n)))\
    \ > 0 ? 1 : 0\n    end\n    return s\nend", "     count = 0\n     for num in arr\n\
    \        if (num == 0)\n            next\n        end\n        sum = 0\n     \
    \   for i in digits(num)\n            sum += i\n        end\n        if (sum >\
    \ 0)\n            count += 1\n        end\n     end\n     return count\nend",
  "    count = 0\n    for i in arr\n        s = sum(abs.(digits(i)))\n        if s\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        if signed_sum(i) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    return length(filter(x\
    \ -> sum(signed_digits(x)) > 0, arr))\nend", "    count = 0\n    for i in arr\n\
    \        if i < 0\n            i = -i\n        end\n        while i > 0\n    \
    \        count += i % 10\n            i = i // 10\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for i in arr\n        s = abs(i)\n        d\
    \ = 0\n        while s > 0\n            d += s % 10\n            s = s / 10\n\
    \        end\n        if d > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        if signed_digits_sum(i)\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        sum = 0\n        for j in string(i)\n\
    \            sum += parse(Int64, j)\n        end\n        if sum > 0\n       \
    \     count += 1\n        end\n    end\n    return count\nend", "    \"\"\"\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\n    n = 0\n    for v in arr\n        r = 0\n        for c in string(v)\n\
    \            r += parse(Int64, c)\n        end\n        if r > 0\n           \
    \ n += 1\n        end\n    end\n    return n\nend", "    count = 0\n    for i\
    \ in arr\n        if i < 0\n            i = -i\n        end\n        while i >\
    \ 0\n            count += i % 10\n            i = i // 10\n        end\n    end\n\
    \    return count\nend", "    cnt = 0\n    for num in arr\n        if sum(abs.(digits(num)))\
    \ > 0\n            cnt += 1\n        end\n    end\n    return cnt\nend", "   \
    \ s = 0\n    for i in arr\n        if iszero(i) \n            s += 0\n       \
    \ elseif i < 0\n            s += abs(i) \n        else\n            s += i\n \
    \       end\n    end\n    return s\nend", "    count = 0\n    for i in arr\n \
    \       sum = 0\n        if i < 0\n            i = -i\n        end\n        while\
    \ i > 0\n            sum += i % 10\n            i = i \xF7 10\n        end\n \
    \       if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return sum(abs(i) for i in arr) > 0 ? length(arr) : 0\nend", "    sum_arr\
    \ = zero(Int64)\n    for i in 1:length(arr)\n        if abs(arr[i]) < 10\n   \
    \         if arr[i] != 0\n                sum_arr += 1\n            end\n    \
    \    else\n            a = abs(arr[i])\n            sum_digit = zero(Int64)\n\
    \            while a != 0\n                sum_digit += a % 10\n             \
    \   a = floor(Int64, a / 10)\n            end\n            if sum_digit != 0\n\
    \                sum_arr += 1\n            end\n        end\n    end\n    return\
    \ sum_arr\nend", "    count = 0\n    for i = 1:length(arr)\n        arr[i] = abs(arr[i])\n\
    \        while arr[i] > 0\n            count += arr[i] % 10\n            arr[i]\
    \ = arr[i] \xF7 10\n        end\n    end\n    return count\nend", "    count =\
    \ 0\n    for x in arr\n        ssum = sum_signed_digits(x)\n        if ssum >\
    \ 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   i = 0\n    while i <= length(arr)\n        total = 0\n        if arr[i] <\
    \ 0\n            arr[i] = abs(arr[i])\n            total += -1\n        end\n\
    \        while arr[i] > 0\n            total += arr[i] % 10\n            arr[i]\
    \ = arr[i] \xF7 10\n        end\n        if total > 0\n            return i +\
    \ 1\n        end\n        i += 1\n    end\n    return 0\nend", "    count = 0\n\
    \    for i in arr\n        if i != 0\n            if i < 0\n                i\
    \ = -i\n            end\n            temp = i\n            sum = 0\n         \
    \   while temp != 0\n                sum += rem(temp, 10)\n                temp\
    \ = div(temp, 10)\n            end\n            if sum > 0\n                count\
    \ += 1\n            end\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i in arr\n        digitsum = 0\n        if i < 0\n            for\
    \ d in digits(abs(i), base=10)\n                digitsum += d\n            end\n\
    \            digitsum *= -1\n        else\n            for d in digits(i, base=10)\n\
    \                digitsum += d\n            end\n        end\n        if digitsum\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   count = 0\n    for i in arr\n        if sum(signed_digits(i)) > 0\n      \
    \      count += 1\n        end\n    end\n    return count\nend", "    count::Int64\
    \ = 0\n    for i in arr\n        if sum(digits(abs(i))) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    count = 0\n    for\
    \ i = 1:length(arr)\n        if sum(digits(arr[i])) > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    nums = 0\n    for i in\
    \ arr\n        sum = 0\n        if i < 0\n            i = -i\n        end\n  \
    \      while i != 0\n            sum += i % 10\n            i = i \xF7 10\n  \
    \      end\n        if sum > 0\n            nums += 1\n        end\n    end\n\
    \    return nums\nend", "    count = 0\n    for i = 1:length(arr)\n        if\
    \ arr[i] < 0\n            temp = abs(arr[i])\n            sum = -(temp % 10)\n\
    \            while (temp > 0)\n                temp = temp % 10\n            \
    \    sum += temp\n                temp = floor(temp / 10)\n            end\n \
    \       else\n            temp = arr[i]\n            sum = 0\n            while\
    \ (temp > 0)\n                sum += temp % 10\n                temp = floor(temp\
    \ / 10)\n            end\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    ln = length(arr)\n   \
    \ cnt = 0\n    for i = 1:ln\n        num = arr[i]\n        total = 0\n       \
    \ while num != 0\n            total += abs(num % 10)\n            num = floor(Int64,\
    \ num / 10)\n        end\n        if total > 0\n            cnt += 1\n       \
    \ end\n    end\n    return cnt\nend", "    count = 0\n    for n in arr\n     \
    \   if n < 0\n            n = -n\n        end\n        sum = 0\n        while\
    \ n > 0\n            sum += n % 10\n            n = n // 10\n        end\n   \
    \     if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    cnt = 0\n    for n in arr\n        if n < 0\n            n = -n\n \
    \       end\n        n = n % 10\n        if n != 0\n            cnt += 1\n   \
    \     end\n    end\n    return cnt\nend", "    counter = 0\n    for i in arr\n\
    \        x = abs(i)\n        sum = 0\n        while (x > 0)\n            sum +=\
    \ x % 10\n            x = div(x, 10)\n        end\n        if sum > 0\n      \
    \      counter += 1\n        end\n    end\n    return counter\nend", "    count::Int64\
    \ = 0\n    for i in arr\n        if sum_digits(i) > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    # iterate through\
    \ each integer\n    for i in arr\n        # get the digits of each integer\n \
    \       a = digits(i)\n        # iterate through the digits of each integer\n\
    \        # check if each digit is greater than 0\n        # if it is, add one\
    \ to the count\n        for d in a\n            if d > 0\n                count\
    \ += 1\n            end\n        end\n    end\n    # return the final count\n\
    \    return count\nend", "    return sum(map(x -> x > 0 ? 1 : 0, map(get_signed_digits_sum,\
    \ arr)))\nend", "    count = 0\n    for i in arr\n        if digitsum(i)>0\n \
    \           count+=1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i in arr\n        sum_num = 0\n        if i < 0\n            num\
    \ = abs(i)\n            while num > 0\n                sum_num += num % 10\n \
    \               num = floor(Int64, num / 10)\n            end\n            sum_num\
    \ *= -1\n        else\n            num = i\n            while num > 0\n      \
    \          sum_num += num % 10\n                num = floor(Int64, num / 10)\n\
    \            end\n        end\n        if sum_num > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    for i in arr\n\
    \        sum = 0\n        if i < 0\n            j = i\n            while j < 0\n\
    \                sum += j % 10\n                j = j / 10\n            end\n\
    \        else\n            j = i\n            while j > 0\n                sum\
    \ += j % 10\n                j = j / 10\n            end\n        end\n      \
    \  if sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    sum = 0\n    for num in arr\n        sum += get_sum_signed_digits(num)\n\
    \    end\n    return sum\nend", "    num = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            num += 1\n        end\n    end\n    return num\nend", "   \
    \ c = 0\n    for x in arr\n        s = 0\n        if x < 0\n            x = -x\n\
    \        end\n        while x > 0\n            s += x % 10\n            x = div(x,\
    \ 10)\n        end\n        if s > 0\n            c += 1\n        end\n    end\n\
    \    return c\nend", "    cnt = 0\n    for i in arr\n        digits = abs(div(i,\
    \ 10))\n        sum = abs(i) - digits*10\n        while digits != 0\n        \
    \    sum += digits % 10\n            digits = div(digits, 10)\n        end\n \
    \       if sum > 0\n            cnt += 1\n        end\n    end\n    return cnt\n\
    end", "    count = 0\n    for n in arr\n        if n < 0\n            ns = -n\n\
    \        else\n            ns = n\n        end\n        s = 0\n        while ns\
    \ > 0\n            s += ns % 10\n            ns = div(ns, 10)\n        end\n \
    \       if s > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    counter = 0\n    for i in arr\n        if sumdigits(i) > 0\n      \
    \      counter += 1\n        end\n    end\n    return counter\nend", "    count\
    \ = 0\n    for i in arr\n        if i < 0\n            i = -i\n        end\n \
    \       if sum(int(j) for j in digits(i)) > 0\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    count = 0\n    for i in arr\n  \
    \      sum_of_digits = 0\n        if i < 0\n            i = -i\n        end\n\
    \        while i > 0\n            sum_of_digits += i % 10\n            i = div(i,\
    \ 10)\n        end\n        if sum_of_digits > 0\n            count += 1\n   \
    \     end\n    end\n    return count\nend", "    count = 0\n    for num in arr\n\
    \        if num > 0\n            count += 1\n        else\n            #if num\
    \ == 0 continue\n            count += 1\n        end\n    end\n    return count\n\
    end", "    return sum(map(x -> abs(x)>9 ? sum(digits(abs(x))) : abs(x), arr))>0\n\
    end", "    count = 0\n    for i in arr\n        x = abs(i)\n        sum = 0\n\
    \        while x != 0\n            sum += x % 10\n            x = div(x, 10)\n\
    \        end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    n = 0\n    for i in arr\n        if sum_digits(i)>0\n\
    \            n += 1\n        end\n    end\n    return n\nend", "    count::Int64\
    \ = 0\n    for i = 1:length(arr)\n        number = arr[i]\n        sum_nums =\
    \ 0\n        if number < 0\n            sum_nums = number*-1\n        else\n \
    \           sum_nums = number\n        end\n        while sum_nums >= 1\n    \
    \        tmp = sum_nums%10\n            sum_nums = div(sum_nums, 10)\n       \
    \     count += tmp\n        end\n        if count > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    if isempty(arr)\n        return\
    \ 0\n    end\n    nums = 0\n    for num in arr\n        sum = 0\n        if num\
    \ > 0\n            new_num = num\n        else\n            new_num = -num\n \
    \       end\n        while new_num > 0\n            sum += new_num % 10\n    \
    \        new_num = new_num \xF7 10\n        end\n        if sum > 0\n        \
    \    nums += 1\n        end\n    end\n    return nums\nend", "    result = 0\n\
    \    for num in arr\n        if sum_digits(num) > 0\n            result += 1\n\
    \        end\n    end\n    return result\nend", "    n = length(arr)\n    count\
    \ = 0\n    for i in 1:n\n        if sum(abs.(digits(arr[i]))) > 0\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    i = 0\n    for\
    \ num in arr\n        digits = digits_sum(num)\n        if digits > 0\n      \
    \      i += 1\n        end\n    end\n    return i\nend", "    count = 0\n    for\
    \ x in arr\n        if x >= 0 \n            if sum(digits(x)) > 0\n          \
    \      count += 1\n            end\n        else\n            if sum(digits(-x))\
    \ > 0\n                count += 1\n            end\n        end\n    end\n   \
    \ return count\nend", "    cnt = 0\n    for a in arr\n        sum = 0\n      \
    \  if a < 0\n            sum += a % 10\n            sum += abs(floor(a / 10))\n\
    \        else\n            while a > 0\n                sum += a % 10\n      \
    \          a = floor(a / 10)\n            end\n        end\n        if sum > 0\n\
    \            cnt += 1\n        end\n    end\n    return cnt\nend", "    count\
    \ = 0\n    for i in arr\n        if i >= 0\n            count += sum(digits(i))\
    \ > 0 ? 1 : 0\n        else\n            count += sum(digits(-i)) > 0 ? 1 : 0\n\
    \        end\n    end\n    return count\nend", "    res = 0\n    for i in arr\n\
    \        if sum(abs.(digits(i))) > 0\n            res += 1\n        end\n    end\n\
    \    return res\nend", "    count = 0\n    for i in arr\n        if i < 0\n  \
    \          i = -i\n        end\n        while i > 0\n            count += i %\
    \ 10\n            i = i // 10\n        end\n    end\n    return count\nend\n \
    \       \ncount_nums([-1, 11, -11])", "    new_arr = abs.(arr)\n    sum = 0\n\
    \    for i in 1:length(new_arr)\n        sum += sum_digits(new_arr[i])\n    end\n\
    \    if sum > 0\n        return length(new_arr)\n    else\n        return 0\n\
    \    end\nend", "    count = 0\n    for i = 1:length(arr)\n        if sign(arr[i])\
    \ * sum(digits(abs(arr[i]))) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    n = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            n += 1\n        end\n    end\n    return n\nend", "    sum\
    \ = 0\n    for x in arr\n        sum += sum_digits(x)\n    end\n    return sum\n\
    end", "    num_count = 0\n    for num in arr\n        if sum_digits(num) > 0\n\
    \            num_count += 1\n        end\n    end\n    return num_count\nend\n\
    println(count_nums([-1, 11, -11]))", "    nums = 0 \n    for num in arr \n   \
    \     dnum = 0 \n        if num < 0 \n            num = -num \n        end \n\
    \        for i in 1:floor(log10(num))+1 \n            dnum += (num%10^i - num%10^(i-1))/10^(i-1)\
    \ \n        end \n        if dnum > 0 \n            nums += 1 \n        end \n\
    \    end \n    return nums \nend", "    count = 0\n    for x in arr\n        count\
    \ += (sum_of_digits(x) > 0) ? 1 : 0\n    end\n    return count\nend", "    sumdigits(a)\
    \ = sum(digits(abs(a)))\n    return sum(map(sumdigits, arr)) > 0 ? length(arr)\
    \ : 0\nend", "    \"\"\"\n    counts the number of elements which have a sum of\
    \ digits > 0\n    \"\"\"\n    sum::Int64 = 0\n    count::Int64 = 0\n    for i\
    \ in arr\n        sum = countDigits(i)\n        if sum > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n ", "    count = 0\n    for\
    \ i in arr\n        if i >= 0\n            if sum(digits(i)) > 0\n           \
    \     count += 1\n            end\n        else\n            if sum(digits(-i))\
    \ > 0\n                count += 1\n            end\n        end\n    end\n   \
    \ return count\nend", "    n = length(arr)\n    res = 0\n    if n == 0\n     \
    \   return res\n    end\n    for i in arr\n        if i < 0\n            res +=\
    \ signed_sum(i * -1)\n        else\n            res += signed_sum(i)\n       \
    \ end\n    end\n    return res\nend", "    if length(arr) == 0\n        return\
    \ 0\n    end\n    if arr[1] < 0\n        return 1 + count_nums(arr[2:end])\n \
    \   elseif sum(digits(arr[1])) > 0\n        return 1 + count_nums(arr[2:end])\n\
    \    else\n        return count_nums(arr[2:end])\n    end\nend", "    count =\
    \ 0\n    for i in arr\n        if sum(abs.(digits(i))) > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    \n    return length(findall(i\
    \ -> sum(digits(abs(i))) > 0, arr))\nend", "    count = 0\n    for num in arr\n\
    \        if num < 0\n            num = -num\n        end\n        sum_digits =\
    \ 0\n        while num != 0\n            digit = num % 10\n            sum_digits\
    \ += digit\n            num = div(num, 10)\n        end\n        if sum_digits\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum = 0\n    for num in arr\n        num_str = str(num)\n        num_sum =\
    \ 0\n        for c in num_str\n            num_sum += parse(Int64, c)\n      \
    \  end\n        if num_sum > 0\n            sum += 1\n        end\n    end\n \
    \   return sum\nend", "    # stores number of elements which have a sum of digits\
    \ > 0\n    n = 0\n    for i in arr\n        # if the number is negative, sum negative\
    \ digits\n        if i < 0\n            digits = digits(-i)\n        else\n  \
    \          digits = digits(i)\n        end\n        if sum(digits) > 0\n     \
    \       n += 1\n        end\n    end\n    return n\nend", "    n = 0\n    for\
    \ i in arr\n        if sum(digits(abs(i))) > 0\n            n += 1\n        end\n\
    \    end\n    return n\nend", "    count = 0\n    for i in arr\n        if i >\
    \ 0 \n            count += 1\n        else\n            i = -i\n            nums\
    \ = digits(i)\n            if sum(nums) > 0\n                count += 1\n    \
    \        end\n        end\n    end\n    return count\nend", "    n = length(arr)\n\
    \    count = 0\n    for i in arr\n        if i < 0\n            i = -i\n     \
    \   end\n        s = 0\n        while i > 0\n            s += i % 10\n       \
    \     i = div(i, 10)\n        end\n        if s > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    for i in arr\n\
    \        if (sum(digits(abs(i))) > 0)\n            count += 1\n        end\n \
    \   end\n    return count\nend", "    cnt::Int64 = 0\n    for a in arr\n     \
    \   if signed_digits_sum(a) > 0\n            cnt += 1\n        end\n    end\n\
    \    return cnt\nend", "    result = 0\n    for i in arr\n        if sum([digit\
    \ for digit in digits(i)]) > 0\n            result += 1\n        end\n    end\n\
    \    return result\nend", "    count = 0\n    for i in arr\n        if i >= 0\n\
    \            val = i\n        else\n            val = -i\n        end\n      \
    \  total = 0\n        while val > 0\n            total += val % 10\n         \
    \   val = val \xF7 10\n        end\n        if total > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    count = 0\n    for i in\
    \ arr\n        if !(sum(digits(abs(i))) == 0)\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    count = 0\n    for i = 1:length(arr)\n\
    \        if sum(digits(arr[i])) > 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend", "    count = 0\n    for i in arr\n        dsum\
    \ = 0\n        for d in digits(i)\n            dsum += d\n        end\n      \
    \  if dsum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    n = 0\n    # YOUR CODE HERE\n    return n\nend", "    count = 0\n \
    \   for x in arr\n        if sumdigits(x) > 0\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    n::Int64 = 0\n    for i in arr\n\
    \        if i >= 0\n            if sum(digits(i)) > 0\n                n += 1\n\
    \            end\n        else\n            if sum(digits(-i)) > 0\n         \
    \       n += 1\n            end\n        end\n    end\n    return n\nend", " \
    \   count::Int64 = 0\n    for i in arr\n        if get_sum_of_digits(i) > 0\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = 0\n    for i in arr\n        if sum_digits(i) > 0\n            count += 1\n\
    \        end\n    end\n    return count\nend", "    count = 0\n    for x in arr\n\
    \        if x == 0\n            count += 1\n        else\n            count +=\
    \ sum(digits(abs(x)))\n        end\n    end\n    return count\nend", "    arr\
    \ = abs.(arr)\n    count = 0\n    for (i, x) in enumerate(arr)\n        sum =\
    \ 0\n        while x > 0\n            x, rem = divrem(x, 10)\n            sum\
    \ += rem\n        end\n        if sum > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    count = 0\n    for x in arr\n        if\
    \ sum(map(abs, digits(x))) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        s = 0\n   \
    \     if i < 0\n            i = abs(i)\n        end\n        while i > 0\n   \
    \         s += i % 10\n            i = div(i, 10)\n        end\n        if s >\
    \ 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   t = 0\n    for i in arr\n        if i>0\n            t += sum(digits(i))\n\
    \        else\n            t += sum(digits(-i))\n        end\n    end\n    return\
    \ t\nend\ncount_nums([]) == 0\ncount_nums([-1, 11, -11]) == 1\ncount_nums([1,\
    \ 1, 2]) == 3", "    count = 0\n    for num in arr\n        if sum(digits(abs(num)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   return count(int -> int > 0, [sum(digits(int)) for int in arr])\nend", " \
    \   count = 0\n    for i in arr\n        if i != 0\n            if i < 0\n   \
    \             i = i * -1\n            end\n            # Convert to string\n \
    \           i = string(i)\n            sum = 0\n            for ch in i\n    \
    \            sum += parse(Int64, ch)\n            end\n            if sum > 0\n\
    \                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    cnt = 0\n    for i in arr\n        s = 0\n        for j in\
    \ digits(i)\n            s += j\n        end\n        if s > 0\n            cnt\
    \ += 1\n        end\n    end\n    return cnt\nend", "    n = 0\n    for i in arr\n\
    \        if count_signed_digits(i) > 0\n            n += 1\n        end\n    end\n\
    \    return n\nend", "    \"\"\"\n    Sum up the digits of each number and return\
    \ count of \n    numbers with positive sum of digits.\n    \"\"\"\n    sum_of_digits\
    \ = [sum(sum_of_digits_in_num(n)) for n in arr]\n    return count(sum_of_digits)\
    \ do n\n        n > 0\n    end\nend", "    count = 0\n    for el in arr\n    \
    \    nums = abs(el)\n        el_sum = 0\n        while nums != 0\n           \
    \ el_sum += nums % 10\n            nums = div(nums, 10)\n        end\n       \
    \ if el_sum > 0\n            count += 1\n        end\n    end\n    return count\n\
    end", "    \n    count = 0\n    for i in arr\n        if i == 0\n            count\
    \ = count\n        elseif i < 0\n            i = -i\n            count = sum_of_digits(i)\n\
    \        else\n            count = sum_of_digits(i)\n        end\n        if count\
    \ > 0\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i in arr\n        sum = 0\n        if i < 0\n  \
    \          i = -i\n        end\n        while i != 0\n            sum += i % 10\n\
    \            i = i / 10\n        end\n        if sum > 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    suma = 0\n    for i in\
    \ arr\n        if i < 0\n            suma += sum(x->x, abs.(digits(i)))\n    \
    \    else\n            suma += sum(x->x, digits(i))\n        end\n    end\n  \
    \  return suma\nend", "    n::Int64 = 0\n    for i::Int64 in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            n += 1\n        end\n    end\n    return n\nend", "    count\
    \ = 0\n    for num in arr\n        if num == 0\n            continue\n       \
    \ end\n        if num > 0\n            count += sum(digits(num))\n        else\n\
    \            count += sum(digits(-num))\n        end\n    end\n    return count\n\
    end", "    n_count = 0\n    for i in arr\n        if sum_digits(i) > 0\n     \
    \       n_count += 1\n        end\n    end\n    return n_count\nend", "    N =\
    \ length(arr)\n    res = 0\n    for i in 1:N\n        if sum(digits(abs(arr[i])))\
    \ > 0\n            res += 1\n        end\n    end\n    return res\nend", "   \
    \ result = 0\n    for i in arr\n        if i > 0\n            if sum(digits(i))\
    \ > 0\n                result += 1\n            end\n        else\n          \
    \  if sum(digits(-i)) > 0\n                result += 1\n            end\n    \
    \    end\n    end\n    return result\nend", "    counter = 0\n    for i in arr\n\
    \        if sum(digits(abs(i))) != 0\n            counter += 1\n        end\n\
    \    end\n    return counter\nend\n@testset \"testing count_nums\" begin\n   \
    \ @test count_nums([]) == 0\n    @test count_nums([-1, 11, -11]) == 1\n    @test\
    \ count_nums([1, 1, 2]) == 3\nend", "    count = 0\n    for i = 1:length(arr)\n\
    \        if arr[i] > 0\n            digit_sum = sum(digits(arr[i]))\n        elseif\
    \ arr[i] < 0\n            digit_sum = sum(digits(-arr[i])) + arr[i]\n        else\n\
    \            digit_sum = 0\n        end\n        if digit_sum > 0\n          \
    \  count += 1\n        end\n    end\n    return count\nend", "    \n    n = 0\n\
    \    temp = 0\n    for i in arr\n        temp = 0\n        if i < 0\n        \
    \    i = i * -1\n        end\n        for j in string(i)\n            temp +=\
    \ parse(Int64, j)\n        end\n        if temp > 0\n            n += 1\n    \
    \    end\n    end\n    return n\nend", "    count = 0\n    for el in arr\n   \
    \     if sum_digits(el) > 0\n            count += 1\n        end\n    end\n  \
    \  return count\nend", "    if length(arr) == 0\n        return 0\n    end\n \
    \   if arr[1] > 0\n        return 1 + count_nums(arr[2:end])\n    elseif arr[1]\
    \ < 0\n        return 1 + count_nums(arr[2:end])\n    else\n        return count_nums(arr[2:end])\n\
    \    end\nend", "    length(filter(s -> sum(digits(s)) > 0, arr))\nend", "   \
    \ acc = 0\n    for x in arr\n        if abs(x) % 10 != 0 \n            acc +=\
    \ 1\n        end\n    end\n    return acc\nend\n@testset \"Problem 3\" begin\n\
    \    @test count_nums([]) == 0\n    @test count_nums([-1, 11, -11]) == 1\n   \
    \ @test count_nums([1, 1, 2]) == 3\nend", "    total = 0\n    for i in arr\n \
    \       sum = 0\n        if i < 0\n            i = -i\n        end\n        while\
    \ i > 0\n            sum += i % 10\n            i = i / 10\n        end\n    \
    \    if sum > 0\n            total += 1\n        end\n    end\n    return total\n\
    end", "    l=[]\n    for i in arr\n        x=digits(abs(i))\n        if sum(x)>0\n\
    \            push!(l,i)\n        end\n    end\n    return length(l)\nend", " \
    \   count = 0\n    for num in arr\n        sum = 0\n        if num < 0\n     \
    \       sum = sum + -1\n            num = num * -1\n        end\n        while\
    \ num != 0\n            sum = sum + num % 10\n            num = num \xF7 10\n\
    \        end\n        if sum > 0\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    sum = 0\n    for el in arr\n        if\
    \ el > 0\n            num = el\n        else\n            num = -el\n        end\n\
    \        while num > 0\n            sum += num % 10\n            num = num % 10\n\
    \        end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    for i in arr\n        if sum_digits(i)\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   sum_ = 0\n    for i in arr\n        if i>=0\n            sum_ += sum(digits(i))\n\
    \        else\n            sum_ += sum(digits(-i))\n        end\n    end\n   \
    \ return sum_\nend", "    count = 0\n    for i in arr\n        sum_digits = 0\n\
    \        while i != 0\n            sum_digits += i % 10\n            i = i / 10\n\
    \        end\n        if sum_digits > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend", "    res = 0\n    for i = 1:length(arr)\n  \
    \      if sum(split(string(arr[i]), \"\")...) > 0\n            res += 1\n    \
    \    end\n    end\n    return res\nend", "    # sum([i > 0 ? 1 : 0 for i in arr])\n\
    \    sum([i > 0 ? i : 0 for i in arr])\nend", "    count = 0\n    for i in arr\n\
    \        if num_digits(i) > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    arr_filtered = filter(arr) do i \n        count_digits(i)\
    \ > 0 \n    end\n    return length(arr_filtered)\nend", "    count = 0\n    for\
    \ i in arr\n        if digitsum(i) > 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\n@testset \"count_nums\" begin\n    @test count_nums([])\
    \ == 0\n    @test count_nums([-1, 11, -11]) == 1\n    @test count_nums([1, 1,\
    \ 2]) == 3\nend", "    ans = 0\n    i = 1\n    while i <= length(arr)\n      \
    \  sum = 0\n        if arr[i] >= 0\n            while arr[i] > 0\n           \
    \     sum += arr[i] % 10\n                arr[i] = div(arr[i], 10)\n         \
    \   end\n        else\n            while arr[i] < 0\n                sum += arr[i]\
    \ % 10\n                arr[i] = div(arr[i], 10)\n            end\n        end\n\
    \        if sum > 0\n            ans += 1\n        end\n        i += 1\n    end\n\
    \    return ans\nend", "    count::Int64 = 0\n    for i in arr\n        if i <\
    \ 0\n            sum::Int64 = 0\n            str = string(i)\n            for\
    \ char in str[2:end]\n                sum += parse(Int64, char)\n            end\n\
    \            if sum > 0\n                count += 1\n            end\n       \
    \ else\n            sum::Int64 = 0\n            str = string(i)\n            for\
    \ char in str\n                sum += parse(Int64, char)\n            end\n  \
    \          if sum > 0\n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend\n \n @test count_nums([]) == 0\n @test count_nums([-1,\
    \ 11, -11]) == 1\n @test count_nums([1, 1, 2]) == 3", "    count = 0\n    for\
    \ i in arr\n        sum = 0\n        if i < 0\n            i = -i\n        end\n\
    \        while i > 0\n            sum += i % 10\n            i = i \xF7 10\n \
    \       end\n        if sum > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    sum_digits(x) = sum(digits(abs(x))) > 0\n    filter(x\
    \ -> sum_digits(x), arr)\nend", "    res = 0\n    for i in arr\n        if i >\
    \ 0\n            res += count_digits(i)\n        else\n            res += count_digits(-i)\n\
    \        end\n    end\n    return res\nend", "    num = 0\n    arr_digits = [digits(a)\
    \ for a in arr]\n    for i in arr_digits\n        sum_digits = 0\n        for\
    \ j in i\n            sum_digits += j\n        end\n        if sum_digits > 0\n\
    \            num += 1\n        end\n    end\n    return num\nend", "    @assert\
    \ length(arr)>=0\n    n = 0\n    for a in arr\n        s = 0\n        if a<0\n\
    \            a=-a\n        end\n        while a>0\n            s += a%10\n   \
    \         a = a//10\n        end\n        if s>0\n            n += 1\n       \
    \ end\n    end\n    return n\nend", "    sum = 0\n    for i in arr\n        if\
    \ i < 0\n            i = i*-1\n        end\n        while i > 0\n            sum\
    \ += i%10\n            i = i/10\n        end\n        if sum > 0\n           \
    \ sum = 0\n            continue\n        end\n        sum = 0\n        return\
    \ 0\n    end\n    return 1\nend", "    count = 0\n    for x in arr\n        if\
    \ sum(digits(abs(x))) > 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    count = 0\n    for i in arr\n        if i > 0\n          \
    \  sum = 0\n            while i > 0\n                sum += i % 10\n         \
    \       i = i \xF7 10\n            end\n            if sum > 0\n             \
    \   count += 1\n            end\n        else\n            i = -i\n          \
    \  sum = 0\n            while i > 0\n                sum += i % 10\n         \
    \       i = i \xF7 10\n            end\n            if sum > 0\n             \
    \   count += 1\n            end\n        end\n    end\n    return count\nend",
  "    n = length(arr)\n    count = 0\n    for i in 1:n\n        if sumdigits(arr[i])\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   c = 0\n    sum = 0\n    for i in arr\n        if i < 0\n            i = i\
    \ * -1\n        end\n        s = 0\n        while i > 0\n            s = s + mod(i,\
    \ 10)\n            i = i \xF7 10\n        end\n        if s > 0\n            c\
    \ = c + 1\n        end\n    end\n    return c\nend", "    count = 0\n    for i\
    \ in arr\n        count += sum(abs.(digits(i))) > 0 ? 1 : 0\n    end\n    return\
    \ count\nend", "    return length(filter(a -> a > 0, [sum(digits(abs(a))) for\
    \ a in arr]))\nend", "    \"your code here\"\nend", "    count = 0\n    for i\
    \ in arr\n        if i > 0 \n            count += sum(digits(i))\n        else\n\
    \            count += sum(digits(-i))\n        end\n    end\n    return count\n\
    end", "    count = 0\n    for i in arr\n        if i == 0\n            continue\n\
    \        end\n        # count += ifelse(i<0, sum(Int.(digits(abs(i)))), sum(Int.(digits(i))))\n\
    \        count += sum(Int.(digits(abs(i))))\n    end\n    return count\nend",
  "    num = 0\n    for x in arr\n        if x < 0\n            l = abs(x)\n     \
    \   else\n            l = x\n        end\n        if l < 10\n            num +=\
    \ 1\n        else\n            while l > 0\n                num += l % 10\n  \
    \              l = l // 10\n            end\n        end\n    end\n    return\
    \ num\nend", "    return length(findall(x -> sum(digits(x)) > 0, arr))\nend",
  "    nums = 0 \n    for i in arr \n        sum = 0 \n        if i >= 0 \n      \
    \      for j in string(i) \n                sum += Int64(j) - 48 \n          \
    \  end \n        else \n            for j in string(i)[2:end] \n             \
    \   sum += Int64(j) - 48 \n            end \n            sum += -1*(Int64(string(i)[1])\
    \ - 48)\n        end \n        if sum > 0 \n            nums += 1 \n        end\
    \ \n    end \n    return nums \nend\ncount_nums([])", "    val::Int64 = 0\n  \
    \  for i in arr\n        if i > 0\n            val += sum(digits(i)) > 0 ? 1 :\
    \ 0\n        else\n            val += sum(digits(-i)) > 0 ? 1 : 0\n        end\n\
    \    end\n    return val\nend", "    count = 0\n    for i in arr\n        if sum(digits(abs(i)))\
    \ > 0\n            count += 1\n        end\n    end\n    return count\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
