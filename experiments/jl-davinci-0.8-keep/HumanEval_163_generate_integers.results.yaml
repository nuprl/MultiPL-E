name: HumanEval_163_generate_integers
language: jl
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjbp_xdte.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbp_xdte.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbp_xdte.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjbp_xdte.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbp_xdte.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbp_xdte.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjbp_xdte.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbp_xdte.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbp_xdte.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjbp_xdte.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjbp_xdte.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbp_xdte.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    res = []\n    if a > b\n        a, b = b, a\n    end\n    if a % 2 ==\
    \ 0\n        a += 2\n    end\n    while a <= b\n        push!(res, a)\n      \
    \  a += 2\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5soi9323.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5soi9323.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5soi9323.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5soi9323.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5soi9323.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5soi9323.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5soi9323.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5soi9323.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5soi9323.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5soi9323.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5soi9323.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5soi9323.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        v = a:2:b\n    elseif a > b\n        v = b:2:a\n  \
    \  else\n        v = [a]\n    end\n    v\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3iv05gr.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3iv05gr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3iv05gr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt3iv05gr.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3iv05gr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3iv05gr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt3iv05gr.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3iv05gr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3iv05gr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt3iv05gr.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt3iv05gr.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3iv05gr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n \n   numbers = []\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5h204k9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5h204k9.jl:1\n\
    in expression starting at /tmp/tmpi5h204k9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    start = min(a, b)\n    stop = max(a, b)\n    numbers = collect(start:stop)\n\
    \    return filter(n -> n % 2 == 0, numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmt1ma9_i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmt1ma9_i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmt1ma9_i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt1ma9_i.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmt1ma9_i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmt1ma9_i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt1ma9_i.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmt1ma9_i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmt1ma9_i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt1ma9_i.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmt1ma9_i.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmt1ma9_i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    low = min(a, b)\n    high = max(a, b)\n    if low % 2 == 1\n        low\
    \ += 1\n    end\n    if high % 2 == 1\n        high -= 1\n    end\n    if low\
    \ > high\n        return []\n    end\n    (low:2:high)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsf0lr6kl.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0lr6kl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0lr6kl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsf0lr6kl.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0lr6kl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0lr6kl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsf0lr6kl.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0lr6kl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0lr6kl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsf0lr6kl.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsf0lr6kl.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf0lr6kl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    #  (1) verify a \u2264 b \n    #      (a) if a \u2264 b, then a:b generates\
    \ an ascending range\n    #      (b) if a > b, then b:a generates an ascending\
    \ range\n    #  (2) use the .^2 method to get squared values of the range\n  \
    \  #  (3) use the .==0 method to get a Bool vector, then sum() its values\n  \
    \  #  (4) use the .& method to compare the Bool vector and the range\n    minVal\
    \ = min(a, b)\n    maxVal = max(a, b)\n    rng = minVal:maxVal\n    rngSquared\
    \ = rng.^2\n    boolVec = rngSquared .== 0\n    boolSum = sum(boolVec)\n    return\
    \ rng[boolVec]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw9pv0w6x.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw9pv0w6x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw9pv0w6x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9pv0w6x.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw9pv0w6x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw9pv0w6x.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9pv0w6x.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw9pv0w6x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw9pv0w6x.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9pv0w6x.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # This is a solution that I came up with after reading the problem.\n\
    \    # It is more complex than it needs to be, but it was an interesting\n   \
    \ # exercise for me. \n    if a == b return [a] end\n    if b < a\n        temp\
    \ = a\n        a = b\n        b = temp\n    end\n    if b - a == 1 && a % 2 ==\
    \ 0\n        return [a]\n    elseif b - a == 1 && a % 2 == 1\n        return []\n\
    \    end\n    temp = a:2:b\n    if temp[end] != b\n        if b % 2 == 0\n   \
    \         append!(temp, b)\n        end\n    end\n    return temp\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp35d9uum9.jl:38\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35d9uum9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35d9uum9.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp35d9uum9.jl:39\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35d9uum9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35d9uum9.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp35d9uum9.jl:40\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp35d9uum9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp35d9uum9.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp35d9uum9.jl:41\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp35d9uum9.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp35d9uum9.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return generate_integers_helper(a, b, [])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7l3ed7e1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: generate_integers_helper\
    \ not defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmp7l3ed7e1.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l3ed7e1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l3ed7e1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7l3ed7e1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: generate_integers_helper\
    \ not defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmp7l3ed7e1.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l3ed7e1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l3ed7e1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7l3ed7e1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: generate_integers_helper\
    \ not defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmp7l3ed7e1.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l3ed7e1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l3ed7e1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp7l3ed7e1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: generate_integers_helper\
    \ not defined\n  Stacktrace:\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7l3ed7e1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    sort([2a, 2b]...)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzbi50hxb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ sort(::Int64, ::Int64)\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpzbi50hxb.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzbi50hxb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzbi50hxb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzbi50hxb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching sort(::Int64,\
    \ ::Int64)\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n    \
    \ @ Main /tmp/tmpzbi50hxb.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzbi50hxb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzbi50hxb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzbi50hxb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  MethodError: no method matching sort(::Int64,\
    \ ::Int64)\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n    \
    \ @ Main /tmp/tmpzbi50hxb.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzbi50hxb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzbi50hxb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzbi50hxb.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  MethodError: no method matching sort(::Int64,\
    \ ::Int64)\n  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzbi50hxb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [2i for i in a:b if\
    \ 2i <= b]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxk2hu410.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxk2hu410.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxk2hu410.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk2hu410.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxk2hu410.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxk2hu410.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk2hu410.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxk2hu410.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxk2hu410.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxk2hu410.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [34, 36, 38, 40, 42, 44, 46, 48, 50, 52  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxk2hu410.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxk"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxk2hu410.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    lo, hi = sort([a, b])\n    div(hi, 2) - div(lo, 2) + 1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpee_ekh_0.jl:19\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpee_ekh_0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee_ekh_0.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpee_ekh_0.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpee_ekh_0.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpee_ekh_0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee_ekh_0.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpee_ekh_0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        low = a\n        high = b\n    else\n        low = b\n\
    \        high = a\n    end\n    answer = Int64[]\n    for i in low:high\n    \
    \    if i % 2 == 0\n            push!(answer, i)\n        end\n    end\n    return\
    \ answer\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0x06zznw.jl:31\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x06zznw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x06zznw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0x06zznw.jl:32\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x06zznw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x06zznw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0x06zznw.jl:33\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0x06zznw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0x06zznw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0x06zznw.jl:34\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0x06zznw.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x06zznw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    sorted_values = sort([a, b])\n    numbers = []\n    for i in sorted_values[1]:sorted_values[2]\n\
    \        if iseven(i)\n            push!(numbers, i)\n        end\n    end\n \
    \   return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnhfg7gnr.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhfg7gnr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhfg7gnr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnhfg7gnr.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhfg7gnr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhfg7gnr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnhfg7gnr.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhfg7gnr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhfg7gnr.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpnhfg7gnr.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnhfg7gnr.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhfg7gnr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    r = []\n\
    \    for i in a:b\n        if i % 2 == 0\n            push!(r, i)\n        end\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwef7hm4x.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwef7hm4x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwef7hm4x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwef7hm4x.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwef7hm4x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwef7hm4x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwef7hm4x.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwef7hm4x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwef7hm4x.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwef7hm4x.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwef7hm4x.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwef7hm4x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    evens = []\n    if a > b\n        b, a = a, b\n    end\n    for i in a:b\n\
    \        if (i % 2) == 0\n            push!(evens, i)\n        end\n    end\n\
    \    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk8o1uhr0.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8o1uhr0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8o1uhr0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk8o1uhr0.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8o1uhr0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8o1uhr0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk8o1uhr0.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk8o1uhr0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk8o1uhr0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpk8o1uhr0.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk8o1uhr0.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8o1uhr0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        a, b = b, a \n    end \n    retval = [] \n    for c\
    \ = a:b \n        if c % 2 == 0 \n            push!(retval, c) \n        end \n\
    \    end \n    return retval \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetv01ewf.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetv01ewf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetv01ewf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpetv01ewf.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetv01ewf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetv01ewf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpetv01ewf.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetv01ewf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetv01ewf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpetv01ewf.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpetv01ewf.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetv01ewf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        return [x for x in a:b if iseven(x)]\n    else\n  \
    \      return [x for x in b:a if iseven(x)]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpng6wnus4.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpng6wnus4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpng6wnus4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpng6wnus4.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpng6wnus4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpng6wnus4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpng6wnus4.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpng6wnus4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpng6wnus4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpng6wnus4.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpng6wnus4.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpng6wnus4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    @assert a >= 0 && b >= 0\n    if a > b\n        (a, b) = (b, a)\n    end\n\
    \    # something\nend\n@assert generate_integers(2, 8) == [2, 4, 6, 8]\n@assert\
    \ generate_integers(8, 2) == [2, 4, 6, 8]\n@assert generate_integers(10, 14) ==\
    \ []\n@assert generate_integers(0, 0) == [0]\n@assert generate_integers(1, 1)\
    \ == []\n@assert generate_integers(2, 5) == [2, 4]\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\nClosest candidates are:\n  convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \  convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \  ...\nStacktrace:\n [1] generate_integers(a::Int64, b::Int64)\n   @ Main /tmp/tmprtr7an_o.jl:13\n\
    \ [2] top-level scope\n   @ /tmp/tmprtr7an_o.jl:17\nin expression starting at\
    \ /tmp/tmprtr7an_o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    vect1 = collect(2:2:a)\n    vect2 = collect(2:2:b)\n    vect1 == vect2\
    \ ? vect1 : vect1 == reverse(vect2) ? reverse(vect1) : []\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2revy70.jl:20\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2revy70.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2revy70.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpm2revy70.jl:21\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2revy70.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2revy70.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpm2revy70.jl:22\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2revy70.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2revy70.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2revy70.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    v = []\n    if a < b\n        for i in a:b\n            if i % 2 == 0\n\
    \                push!(v, i)\n            end\n        end\n    else\n       \
    \ for i in b:a\n            if i % 2 == 0\n                push!(v, i)\n     \
    \       end\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1lhma8jb.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhma8jb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhma8jb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1lhma8jb.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhma8jb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhma8jb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1lhma8jb.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhma8jb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhma8jb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1lhma8jb.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1lhma8jb.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1lhma8jb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = min(a, b), max(a, b)\n    nums = collect(a:b)\n    return filter(x\
    \ -> x % 2 == 0, nums)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps36hrhha.jl:20\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps36hrhha.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps36hrhha.jl:19\ntest set: Test\
    \ Failed at /tmp/tmps36hrhha.jl:21\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps36hrhha.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps36hrhha.jl:19\ntest set: Test\
    \ Failed at /tmp/tmps36hrhha.jl:22\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps36hrhha.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps36hrhha.jl:19\ntest set: Test\
    \ Failed at /tmp/tmps36hrhha.jl:23\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps36hrhha.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps36hrhha.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # a and b are positve integers\n    numbers = []\n    for i in a:b\n \
    \       if i % 2 == 0\n            push!(numbers, i)\n        end\n    end\n \
    \   return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00x4ai5o.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00x4ai5o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00x4ai5o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp00x4ai5o.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00x4ai5o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00x4ai5o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp00x4ai5o.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00x4ai5o.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00x4ai5o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp00x4ai5o.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp00x4ai5o.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00x4ai5o.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00x4ai5o.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        if a % 2 == 0\n            return [a]\n        else\n\
    \            return []\n        end\n    end\n    if a < b\n        if a % 2 ==\
    \ 0\n            return [a, generate_integers(a+2, b)]\n        else\n       \
    \     return generate_integers(a+1, b)\n        end\n    else\n        if a %\
    \ 2 == 0\n            return [a, generate_integers(a-2, b)]\n        else\n  \
    \          return generate_integers(a-1, b)\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi53mtfyj.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(2, 10) == [2, 4, 6, 8]\\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Int64} to an object of type Int64\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:Number\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n    [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\\n      @ Base ./array.jl:903\\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\\n      @ Base ./array.jl:253\\\
    n    [3] unsafe_copyto!\\n      @ ./array.jl:307 [inlined]\\n    [4] _copyto_impl!\\\
    n      @ ./array.jl:331 [inlined]\\n    [5] copyto!\\n      @ ./array.jl:317 [inlined]\\\
    n    [6] copyto!\\n      @ ./array.jl:343 [inlined]\\n    [7] copyto_axcheck!\\\
    n      @ ./abstractarray.jl:1104 [inlined]\\n    [8] Vector{Int64}(x::Vector{Any})\\\
    n      @ Base ./array.jl:563\\n    [9] convert\\n      @ ./array.jl:554 [inlined]\\\
    n   [10] generate_integers(a::Int64, b::Int64) (repeats 4 times)\\n      @ Main\
    \ /tmp/tmpi53mtfyj.jl:20\\n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmpi53mtfyj.jl:37 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmpi53mtfyj.jl:36\\ntest\
    \ set: Error During Test at /tmp/tmpi53mtfyj.jl:38\\n  Test threw exception\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/cent"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return  ifelse(a > b, \n        cat(collect(a:2:b),collect(b:2:a), dims=1),\n\
    \        collect(a:2:b))\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvcysi1d2.jl:20\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcysi1d2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcysi1d2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvcysi1d2.jl:21\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcysi1d2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcysi1d2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvcysi1d2.jl:22\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcysi1d2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcysi1d2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvcysi1d2.jl:23\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvcysi1d2.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcysi1d2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    ints = [i for i in a:b if i % 2 == 0]\n    return ints\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpolo98ghn.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolo98ghn.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolo98ghn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpolo98ghn.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolo98ghn.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolo98ghn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpolo98ghn.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolo98ghn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolo98ghn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpolo98ghn.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpolo98ghn.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolo98ghn.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolo98ghn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b \n        a :|> collect\n    else\n        b :|> collect\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuse1sj3.jl:12\nin expression starting at\
    \ /tmp/tmpiuse1sj3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a == b\n        return [a]\n    end\n    \n    m = iseven(a)\n\
    \    n = iseven(b)\n    \n    if m == false && n == false && a < b\n        a\
    \ += 1\n    elseif m == false && n == false && a > b\n        a -= 1\n    end\n\
    \    \n    result = zeros(Int64, 0)\n    \n    if a < b\n        for i in a:2:b\n\
    \            push!(result, i)\n        end\n    else\n        for i in a:-2:b\n\
    \            push!(result, i)\n        end\n    end\n    \n    return result\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplaark99d.jl:45\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaark99d.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaark99d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmplaark99d.jl:46\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaark99d.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaark99d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmplaark99d.jl:47\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [132, 130, 128, 126, 124, 122, 120, 118, 116, 114  \u2026\
    \  20, 18, 16, 14, 12, 10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplaark99d.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplaark99d.jl:44\ntest set: Test\
    \ Failed at /tmp/tmplaark99d.jl:48\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplaark99d.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplaark99d.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        temp = a\n        a = b\n        b = temp\n    end\n\
    \    if a % 2 == 1\n        a += 1\n    end\n    return a:2:b\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjdcyslo6.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdcyslo6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdcyslo6.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdcyslo6.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdcyslo6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdcyslo6.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdcyslo6.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdcyslo6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdcyslo6.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjdcyslo6.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjdcyslo6.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdcyslo6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    @assert a >= 0 && b >= 0 \"Expected a to be greater than or equal to 0\
    \ and b to be greater than or equal to 0\"\n    (a <= b) ? return sort(filter(x\
    \ -> (x % 2 == 0), collect(a:b))) : return sort(filter(x -> (x % 2 == 0), collect(b:a)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbdi_1ou.jl:13\nin expression starting at\
    \ /tmp/tmpwbdi_1ou.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return filter(x -> x % 2 ==\
    \ 0, a:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppu6fbchf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppu6fbchf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppu6fbchf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppu6fbchf.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppu6fbchf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppu6fbchf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppu6fbchf.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppu6fbchf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppu6fbchf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppu6fbchf.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppu6fbchf.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppu6fbchf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    #Make sure a is less than b\n    if a > b\n        a, b = b, a\n\
    \    end\n    \n    if a % 2 == 0\n        v = Int[]\n        for i in a:2:b\n\
    \            push!(v, i)\n        end\n        return v\n    else\n        v =\
    \ Int[]\n        for i in a+1:2:b\n            push!(v, i)\n        end\n    \
    \    return v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_paky84s.jl:36\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_paky84s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_paky84s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_paky84s.jl:37\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_paky84s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_paky84s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_paky84s.jl:38\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_paky84s.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_paky84s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_paky84s.jl:39\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_paky84s.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_paky84s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # get the minimum and maximum out of the 2 numbers\n    min_num = min(a,\
    \ b)\n    max_num = max(a, b)\n    # get a list of all the integers in range\n\
    \    all_ints = collect(min_num:max_num)\n    # filter out odd numbers\n    even_ints\
    \ = all_ints[mod.(all_ints, 2) .== 0]\n    return even_ints\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgi1zuxw7.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgi1zuxw7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgi1zuxw7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgi1zuxw7.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgi1zuxw7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgi1zuxw7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgi1zuxw7.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgi1zuxw7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgi1zuxw7.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpgi1zuxw7.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgi1zuxw7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgi1zuxw7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7pgysz4.jl:1\nin expression starting at /tmp/tmpg7pgysz4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    @assert a > 0 && b > 0\n    if a < b\n        a:b\n    else\n        b:a\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy16o0c91.jl:23\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 3, 4, 5, 6, 7, 8, 9, 10] == [2, 4, 6,\
    \ 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy16o0c91.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy16o0c91.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy16o0c91.jl:24\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 3, 4, 5, 6, 7, 8, 9, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy16o0c91.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy16o0c91.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy16o0c91.jl:25\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11  \u2026  123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy16o0c91.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy16o0c91.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy16o0c91.jl:26\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 18, 19, 20, 21, 22, 23, 24, 25, 26  \u2026  80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy16o0c91.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-le"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy16o0c91.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    r = Int64[]\n    for i = min(a, b):2:max(a, b)\n        push!(r, i)\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8jnovmqt.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jnovmqt.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jnovmqt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8jnovmqt.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jnovmqt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jnovmqt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8jnovmqt.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jnovmqt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jnovmqt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8jnovmqt.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8jnovmqt.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jnovmqt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return []\n    end\n    vector = []\n    for i in a:b\n\
    \        if i % 2 == 0\n            push!(vector, i)\n        end\n    end\n \
    \   return vector\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8sp60iyh.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8sp60iyh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8sp60iyh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8sp60iyh.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8sp60iyh.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8sp60iyh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8sp60iyh.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8sp60iyh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8sp60iyh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8sp60iyh.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8sp60iyh.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8sp60iyh.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sp60iyh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b return [a] end\n    return [x for x = a:b if x % 2 == 0]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkf7jmjrl.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf7jmjrl.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf7jmjrl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkf7jmjrl.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf7jmjrl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf7jmjrl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkf7jmjrl.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkf7jmjrl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf7jmjrl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkf7jmjrl.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkf7jmjrl.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkf7jmjrl.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkf7jmjrl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if (a <= b) \n        return filter(x -> x % 2 == 0, a:b)\n    else\n\
    \        return filter(x -> x % 2 == 0, a:-1:b)\n    end\nend\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuus0euls.jl:23\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuus0euls.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuus0euls.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuus0euls.jl:24\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuus0euls.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuus0euls.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuus0euls.jl:25\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [132, 130, 128, 126, 124, 122, 120, 118, 116, 114  \u2026\
    \  20, 18, 16, 14, 12, 10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuus0euls.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuus0euls.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpuus0euls.jl:26\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuus0euls.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuus0euls.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a>b\n        a,b = b,a\n    end\n    a = a+(a%2==1?1:0)\n    return\
    \ [a+i for i=0:2:b-a]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda5hxvei.jl:14\nin expression starting at\
    \ /tmp/tmpda5hxvei.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return []\n    end\n    if a % 2 == 1 && b % 2 == 1\n\
    \        return []\n    end\n    if a % 2 == 1\n        a += 1\n    end\n    if\
    \ b % 2 == 1\n        b -= 1\n    end\n    return a:2:b\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_s6l3tzi.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s6l3tzi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s6l3tzi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_s6l3tzi.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s6l3tzi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s6l3tzi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_s6l3tzi.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_s6l3tzi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_s6l3tzi.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_s6l3tzi.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    nums =\
    \ collect(a:b)\n    return filter(x -> x % 2 == 0, nums)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0kqu3qm5.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqu3qm5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqu3qm5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kqu3qm5.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqu3qm5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqu3qm5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kqu3qm5.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0kqu3qm5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0kqu3qm5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0kqu3qm5.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0kqu3qm5.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kqu3qm5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(is_even, collect(sort([a, b])))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9gxywxqr.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmp9gxywxqr.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gxywxqr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gxywxqr.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9gxywxqr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp9gxywxqr.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gxywxqr.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gxywxqr.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9gxywxqr.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp9gxywxqr.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gxywxqr.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gxywxqr.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9gxywxqr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp9gxywxq"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gxywxqr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        return filter(x -> x % 2 == 0, [a:b])\n    else \n\
    \        return filter(x -> x % 2 == 0, [b:a])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ko3t26t.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ rem(::UnitRange{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::UnitRange{Int64})\n     @ Main\
    \ /tmp/tmp1ko3t26t.jl:12\n   [2] filter(f::var\"#1#3\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmp1ko3t26t.jl:12\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1ko3t26t.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1ko3t26t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp1ko3t26t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching rem(::UnitRange{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::UnitRange{Int64})\n     @ Main\
    \ /tmp/tmp1ko3t26t.jl:14\n   [2] filter(f::var\"#2#4\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmp1ko3t26t.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ko3t26t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1xwz1r0g.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xwz1r0g.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xwz1r0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1xwz1r0g.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xwz1r0g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xwz1r0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1xwz1r0g.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xwz1r0g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xwz1r0g.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1xwz1r0g.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1xwz1r0g.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xwz1r0g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    # check for errors\n    if (a == 0) || (b == 0)\n        error(\"\
    Both integers must be positive integers.\")\n    end\n    \n    # set the range,\
    \ vector, and even number container\n    m::Int64 = minimum(a, b)\n    M::Int64\
    \ = maximum(a, b)\n    ints::Vector{Int64} = collect(m:M)\n    eves::Vector{Int64}\
    \ = []\n    \n    # populate the evens container\n    for i in ints\n        if\
    \ (i % 2) == 0\n            push!(eves, i)\n        end\n    end\n    \n    #\
    \ return the even numbers between a and b\n    return eves\nend\n# Test cell:\
    \ `generate_integers_test`\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpha84mrvn.jl:39\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: objects of type\
    \ Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpha84mrvn.jl:18\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpha84mrvn.jl:39 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpha84mrvn.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpha84mrvn.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n   \
    \  @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpha84mrvn.jl:18\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpha84mrvn.jl:40 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpha84mrvn.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4yds947.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4yds947.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4yds947.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpz4yds947.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4yds947.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4yds947.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpz4yds947.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4yds947.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4yds947.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpz4yds947.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz4yds947.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4yds947.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4yds947.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = min(a, b), max(a, b)\n    range = [i for i in a:b if i % 2 == 0]\n\
    \    return range\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqzvdzq8.jl:20\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqzvdzq8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqzvdzq8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiqzvdzq8.jl:21\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqzvdzq8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqzvdzq8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiqzvdzq8.jl:22\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqzvdzq8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqzvdzq8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiqzvdzq8.jl:23\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiqzvdzq8.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqzvdzq8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9323o42i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9323o42i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9323o42i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9323o42i.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9323o42i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9323o42i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9323o42i.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9323o42i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9323o42i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9323o42i.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9323o42i.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9323o42i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Based on a solution of Tim Holy (see: https://discourse.julialang.org/t/solved-given-a-b-return-the-even-digits-between-a-and-b-in-ascending-order/33748/4)\n\
    \    # Generate all even numbers in the range a and b\n    eve_a = div(a, 2)\n\
    \    eve_b = div(b, 2)\n    if a % 2 == 1\n        eve_a += 1\n    end\n    if\
    \ b % 2 == 1\n        eve_b -= 1\n    end\n    # Return range of even numbers\n\
    \    return collect(2*eve_a:2:2*eve_b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoppnxkif.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoppnxkif.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoppnxkif.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoppnxkif.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoppnxkif.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoppnxkif.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoppnxkif.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoppnxkif.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoppnxkif.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoppnxkif.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  68, 70, 72, 74,\
    \ 76, 78, 80, 82, 84, 86] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoppnxkif.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoppnxkif.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoppnxkif.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    res = []\n    for i = min(a, b):max(a, b)\n        if iseven(i)\n    \
    \        push!(res, i)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp43osh94m.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43osh94m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43osh94m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp43osh94m.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43osh94m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43osh94m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp43osh94m.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp43osh94m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp43osh94m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp43osh94m.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp43osh94m.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp43osh94m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoljxp9c6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoljxp9c6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoljxp9c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpoljxp9c6.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoljxp9c6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoljxp9c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpoljxp9c6.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoljxp9c6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoljxp9c6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpoljxp9c6.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoljxp9c6.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoljxp9c6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(isodd, collect(a:b))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkyi96hp.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [3, 5, 7, 9] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkyi96hp.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkyi96hp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmkyi96hp.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkyi96hp.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkyi96hp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmkyi96hp.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkyi96hp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkyi96hp.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpmkyi96hp.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmkyi96hp.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkyi96hp.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkyi96hp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a%2 != 0\n        a +=\
    \ 1\n    end\n    if b%2 != 0\n        b -= 1\n    end\n    if a > b\n       \
    \ return []\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdwpwic__.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwpwic__.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwpwic__.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdwpwic__.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwpwic__.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwpwic__.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdwpwic__.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwpwic__.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwpwic__.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdwpwic__.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdwpwic__.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdwpwic__.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        (b:2:a)\n    elseif a < b\n        (a:2:b)\n    elseif\
    \ a % 2 == 0\n        (a,)\n    else\n        ()\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcvfoekdo.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvfoekdo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvfoekdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcvfoekdo.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvfoekdo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvfoekdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcvfoekdo.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvfoekdo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvfoekdo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcvfoekdo.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcvfoekdo.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvfoekdo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return filter(isdigit, a:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxsjah8nj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ isdigit(::Int64)\n  Closest candidates are:\n    isdigit(!Matched::AbstractChar)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:358\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isdigit), a::UnitRange{Int64})\n     @ Base ./array.jl:2499\n\
    \   [2] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpxsjah8nj.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxsjah8nj.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxsjah8nj.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxsjah8nj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching isdigit(::Int64)\n\
    \  Closest candidates are:\n    isdigit(!Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:358\n\
    \  Stacktrace:\n   [1] filter(f::typeof(isdigit), a::UnitRange{Int64})\n     @\
    \ Base ./array.jl:2499\n   [2] generate_integers(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpxsjah8nj.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxsjah8nj.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxsjah8nj.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxsjah8nj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  MethodError: no method matching isdigit(::Int64)\n\
    \  Closest candidates are:\n    isdigit(!Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:358\n\
    \  Stacktrace:\n   [1] filter(f::typeof(isdigit), a::UnitRange{Int64})\n     @\
    \ Base ./"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsjah8nj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    integers = []\n    if a < b\n        for i in a:b\n            if i %\
    \ 2 == 0\n                push!(integers, i)\n            end\n        end\n \
    \   else\n        for i in b:a\n            if i % 2 == 0\n                push!(integers,\
    \ i)\n            end\n        end\n    end\n    return integers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk_l322hr.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_l322hr.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_l322hr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk_l322hr.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_l322hr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_l322hr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk_l322hr.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk_l322hr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk_l322hr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpk_l322hr.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk_l322hr.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_l322hr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i = a:2:b]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zc6qtsq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zc6qtsq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zc6qtsq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_zc6qtsq.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zc6qtsq.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zc6qtsq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_zc6qtsq.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zc6qtsq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zc6qtsq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_zc6qtsq.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_zc6qtsq.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zc6qtsq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    start = (a%2==0) ? a : a+1\n    stop = (b%2==0) ? b : b-1\n    return\
    \ [x for x in start:2:stop]\nend\na = 10\nb = 14\ngenerate_integers(a, b)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnj_pyb6o.jl:23\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj_pyb6o.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj_pyb6o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpnj_pyb6o.jl:24\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj_pyb6o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj_pyb6o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpnj_pyb6o.jl:25\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj_pyb6o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj_pyb6o.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpnj_pyb6o.jl:26\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnj_pyb6o.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj_pyb6o.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnj_pyb6o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = sort([a, b])\n    @time [k for k = a:b if iseven(k)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "  0.000001 seconds (3 allocations: 208 bytes)\ntest set: Test Failed at\
    \ /tmp/tmp7wzkwaff.jl:19\n  Expression: candidate(2, 10) == [2, 4, 6, 8]\n   Evaluated:\
    \ [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7wzkwaff.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7wzkwaff.jl:18\n  0.000001 seconds\
    \ (3 allocations: 208 bytes)\ntest set: Test Failed at /tmp/tmp7wzkwaff.jl:20\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7wzkwaff.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7wzkwaff.jl:18\n  0.000003 seconds\
    \ (5 allocations: 1.984 KiB)\ntest set: Test Failed at /tmp/tmp7wzkwaff.jl:21\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7wzkwaff.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7wzkwaff.jl:18\n  0.000004 seconds\
    \ (4 allocations: 544 bytes)\ntest set: Test Failed at /tmp/tmp7wzkwaff.jl:22\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wzkwaff.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    #Get range between a and b\n    int_range = collect(a:b)\n    #Filter\
    \ even numbers only\n    evens = filter(x -> x % 2 == 0, int_range)\n    #Sort\
    \ evens in ascending order\n    sort(evens)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdlxi2ckd.jl:23\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlxi2ckd.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlxi2ckd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdlxi2ckd.jl:24\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlxi2ckd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlxi2ckd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdlxi2ckd.jl:25\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlxi2ckd.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlxi2ckd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdlxi2ckd.jl:26\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdlxi2ckd.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlxi2ckd.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlxi2ckd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    m = min(a, b)\n    n = max(a, b)\n    if m%2 == 1\n        m += 1\n  \
    \  end\n    if n%2 == 1\n        n -= 1\n    end\n    if m > n\n        return\
    \ []\n    end\n    collect(m:2:n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpior7l44o.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpior7l44o.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpior7l44o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpior7l44o.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpior7l44o.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpior7l44o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpior7l44o.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpior7l44o.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpior7l44o.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpior7l44o.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpior7l44o.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpior7l44o.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return (a%2 == 0) ? [a] : Int64[]\n    end\n    a,\
    \ b = min(a, b), max(a, b)\n    return [i for i in a:b if i%2 == 0]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63maujq9.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63maujq9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63maujq9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp63maujq9.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63maujq9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63maujq9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp63maujq9.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63maujq9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63maujq9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp63maujq9.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp63maujq9.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63maujq9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return map(x -> 2*x, 2:b>>1)\n    else\n        return\
    \ map(x -> 2*x, 2:a>>1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrcpc_gf.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrcpc_gf.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrcpc_gf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyrcpc_gf.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrcpc_gf.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrcpc_gf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyrcpc_gf.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrcpc_gf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrcpc_gf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyrcpc_gf.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [4, 6, 8, 10, 12, 14, 16] == Int64[]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrcpc_gf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrcpc_gf.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrcpc_gf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    @assert (a>0 && b>0), \"a and b must be positive integers\"\n    if a>b\n\
    \        a,b = b,a\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr6jmp8bf.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  TypeError: non-boolean (Tuple{Bool,\
    \ String}) used in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpr6jmp8bf.jl:11\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpr6jmp8bf.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6jmp8bf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr6jmp8bf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  TypeError: non-boolean (Tuple{Bool, String})\
    \ used in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpr6jmp8bf.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6jmp8bf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6jmp8bf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr6jmp8bf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  TypeError: non-boolean (Tuple{Bool, String})\
    \ used in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpr6jmp8bf.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr6jmp8bf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr6jmp8bf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr6jmp8bf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  TypeError: non-bool"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6jmp8bf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = sort([a, b])\n    a % 2 == 0 || a += 1\n    return a:2:b\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"((a % 2) == 0)\
    \ || a\" around /tmp/tmpyx1cp770.jl:12\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpyx1cp770.jl:1\nin expression starting at /tmp/tmpyx1cp770.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    odds = range(a, b, 2)\n    sort(odds)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf5hmtth1.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 10] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5hmtth1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5hmtth1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf5hmtth1.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5hmtth1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5hmtth1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf5hmtth1.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5hmtth1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5hmtth1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpf5hmtth1.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf5hmtth1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf5hmtth1.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf5hmtth1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in sort([a, b])[1]:sort([a, b])[2] if iseven(i)]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptn_rzu0r.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptn_rzu0r.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptn_rzu0r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptn_rzu0r.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptn_rzu0r.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptn_rzu0r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptn_rzu0r.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptn_rzu0r.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptn_rzu0r.jl:17\ntest set: Test\
    \ Failed at /tmp/tmptn_rzu0r.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptn_rzu0r.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptn_rzu0r.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b \n        if a % 2 == 0 \n            return [a:2:b]\n     \
    \   else \n            return [a+1:2:b]\n        end\n    else \n        if a\
    \ % 2 == 0 \n            return [a:2:b]\n        else \n            return [a+1:2:b]\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd2uttuzg.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type StepRange{Int64, Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::StepRange{Int64,\
    \ Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{StepRange{Int64, Int64}}, soffs::Int64, n::Int64)\n\
    \      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{StepRange{Int64,\
    \ Int64}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpd2uttuzg.jl:13\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpd2uttuzg.jl:30 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpd2uttuzg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpd2uttuzg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type StepRange{Int64, Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2uttuzg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    lo, hi = sort([a, b])\n    return lo:2:hi\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2mu1p1nf.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mu1p1nf.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mu1p1nf.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2mu1p1nf.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mu1p1nf.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mu1p1nf.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2mu1p1nf.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mu1p1nf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mu1p1nf.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2mu1p1nf.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2mu1p1nf.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2mu1p1nf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    r = range(a, stop=b, length=b-a+1)\n    r[mod.(r, 2) .== 0]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9f0yhsnm.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9f0yhsnm.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9f0yhsnm.jl:18\ntest set: Error\
    \ During Test at /tmp/tmp9f0yhsnm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  ArgumentError: range(10.0, stop=2.0, length=-7):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./twiceprecision.jl:706\n    [3] _linspace\n     \
    \ @ ./twiceprecision.jl:703 [inlined]\n    [4] range_start_stop_length\n     \
    \ @ ./range.jl:529 [inlined]\n    [5] _range\n      @ ./range.jl:128 [inlined]\n\
    \    [6] #range#58\n      @ ./range.jl:109 [inlined]\n    [7] generate_integers(a::Int64,\
    \ b::Int64)\n      @ Main /tmp/tmp9f0yhsnm.jl:11\n    [8] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp9f0yhsnm.jl:20 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp9f0yhsnm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9f0yhsnm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  ArgumentError: range(132.0, stop=2.0, length=-129):\
    \ negative length\n  Stacktrace:\n    [1] _linspace1(#unused#::Type{Float64},\
    \ start::Float64, stop::Float64, len::Int64)\n      @ Base ./twiceprecision.jl:724\n\
    \    [2] _linspace(#unused#::Type{Float64}, start_n::Int64, stop_n::Int64, len::Int64,\
    \ den::Int64)\n      @ Base ./"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9f0yhsnm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        i = a\n \
    \       ans = Int64[]\n        while i <= b\n            if i % 2 == 0\n     \
    \           push!(ans, i)\n            end\n            i += 1\n        end\n\
    \        ans\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78n77204.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78n77204.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78n77204.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp78n77204.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78n77204.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78n77204.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp78n77204.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78n77204.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78n77204.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp78n77204.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp78n77204.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78n77204.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    v = []\n    if a <= b\n        for i = a:b\n            if i % 2 == 0\n\
    \                push!(v, i)\n            end\n        end\n    else\n       \
    \ for i = b:a\n            if i % 2 == 0\n                push!(v, i)\n      \
    \      end\n        end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12urjz1m.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12urjz1m.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12urjz1m.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp12urjz1m.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12urjz1m.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12urjz1m.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp12urjz1m.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp12urjz1m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp12urjz1m.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp12urjz1m.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp12urjz1m.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12urjz1m.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        tmp = a\n        a = b\n        b = tmp\n    end\n\
    \    if (a % 2) == 1\n        a += 1\n    end\n    v = [a]\n    while (a += 2)\
    \ <= b\n        push!(v, a)\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcfoqykca.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfoqykca.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfoqykca.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcfoqykca.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfoqykca.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfoqykca.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcfoqykca.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcfoqykca.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcfoqykca.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcfoqykca.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcfoqykca.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfoqykca.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    vec = Vector{Int64}(b-a+1)\n    for i = 1:length(vec)\n        vec[i] = a+2*(i-1)\n\
    \    end\n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4javnmsr.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmp4javnmsr.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4javnmsr.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4javnmsr.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4javnmsr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmp4javnmsr.jl:20\n   [2] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmp4javnmsr.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4javnmsr.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4javnmsr.jl:30\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4javnmsr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    iseven(a) ? evens = [a] :\
    \ evens = []\n    for i in a+1:b\n        if iseven(i)\n            push!(evens,\
    \ i)\n        end\n    end\n    return evens\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfxqeghnm.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxqeghnm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxqeghnm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfxqeghnm.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxqeghnm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxqeghnm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfxqeghnm.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfxqeghnm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfxqeghnm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfxqeghnm.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfxqeghnm.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxqeghnm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # test if a and b are positive integers\n    if !(isposint(a) && isposint(b))\n\
    \        error(\"Inputs must be positive integers.\")\n    end\n    \n    # ensure\
    \ a <= b\n    if a > b\n        a, b = b, a\n    end\n    \n    # generate and\
    \ return even integers between a and b\n    return [i for i in a:b if i % 2 ==\
    \ 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfjwqicuh.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: isposint not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpfjwqicuh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjwqicuh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjwqicuh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfjwqicuh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: isposint not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpfjwqicuh.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjwqicuh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjwqicuh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfjwqicuh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: isposint not defined\n \
    \ Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpfjwqicuh.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjwqicuh.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjwqicuh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpfjwqicuh.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: isposint not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpfjw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjwqicuh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return mod.(collect(a:b), 2) .== 0 ? collect(a:b) :\
    \ []\n    else\n        return mod.(collect(b:a), 2) .== 0 ? collect(b:a) : []\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsolxramq.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  TypeError: non-boolean (BitVector)\
    \ used in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpsolxramq.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsolxramq.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsolxramq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpsolxramq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpsolxramq.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsolxramq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsolxramq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpsolxramq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpsolxramq.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsolxramq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsolxramq.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpsolxramq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  TypeError: non-boolean (BitVector)\
    \ used in boolea"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsolxramq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in a:b if iseven(i)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83uajkfe.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83uajkfe.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83uajkfe.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp83uajkfe.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83uajkfe.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83uajkfe.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp83uajkfe.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83uajkfe.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83uajkfe.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp83uajkfe.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp83uajkfe.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83uajkfe.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83uajkfe.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a < b ? collect(a:2:b) : collect(b:2:a)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg3ckg5hb.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3ckg5hb.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3ckg5hb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg3ckg5hb.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3ckg5hb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3ckg5hb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg3ckg5hb.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3ckg5hb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3ckg5hb.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg3ckg5hb.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg3ckg5hb.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3ckg5hb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Validate\n    if a<0 || b<0\n        throw(DomainError())\n    end\n\
    \    # Sort\n    if a > b\n        c = a\n        a = b\n        b = c\n    end\n\
    \    # Generate\n    a % 2 == 0 ? s = a : s = a + 1\n    (b-s)/2 == 0 ? l = 0\
    \ : l = (b-s)/2\n    out = zeros(Int64, l+1)\n    for i in 1:l+1\n        out[i]\
    \ = s + 2*(i-1)\n    end\n    return out\nend\na = generate_integers(2, 8)\nb\
    \ = generate_integers(8, 2)\nc = generate_integers(10, 14)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching zeros(::Type{Int64},\
    \ ::Float64)\\nClosest candidates are:\\n  zeros(::Type{T}, !Matched::Union{Integer,\
    \ AbstractUnitRange}...) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\\\
    n  zeros(::Type{T}, !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\\\
    n  zeros(::Type{T}, !Matched::Tuple{Vararg{Integer, N}}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:524\\\
    n  ...\\nStacktrace:\\n [1] generate_integers('"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(!ismissing, [Int64(x) for x in collect(range(Int64(ceil(a/2)),\
    \ Int64(floor(b/2)+1))) .* 2])\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdmio1gqp.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmio1gqp.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmio1gqp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdmio1gqp.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmio1gqp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmio1gqp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdmio1gqp.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmio1gqp.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmio1gqp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdmio1gqp.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  72, 74, 76, 78,\
    \ 80, 82, 84, 86, 88, 90] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdmio1gqp.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmio1gqp.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmio1gqp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return [x for x in a:b if x % 2 == 0]\n    else\n \
    \       return [x for x in b:a if x % 2 == 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfmhahz3.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfmhahz3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfmhahz3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppfmhahz3.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfmhahz3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfmhahz3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppfmhahz3.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppfmhahz3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppfmhahz3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmppfmhahz3.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppfmhahz3.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfmhahz3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a>b\n        a,b = b,a\n    end\n    return [2i for i in floor(Int64,a/2):floor(Int64,b/2)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6nv7e_x.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6nv7e_x.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6nv7e_x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpg6nv7e_x.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6nv7e_x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6nv7e_x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpg6nv7e_x.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6nv7e_x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6nv7e_x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpg6nv7e_x.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [16, 18, 20, 22, 24, 26, 28, 30, 32, 34  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg6nv7e_x.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6nv7e_x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = sort([a, b])\n    [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9qqk8ja.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9qqk8ja.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9qqk8ja.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpb9qqk8ja.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9qqk8ja.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9qqk8ja.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpb9qqk8ja.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9qqk8ja.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9qqk8ja.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpb9qqk8ja.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb9qqk8ja.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9qqk8ja.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return collect(filter(is_even, a:b))\n    else\n  \
    \      return collect(filter(is_even, b:a))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp14y8f09y.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmp14y8f09y.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp14y8f09y.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp14y8f09y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp14y8f09y.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp14y8f09y.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp14y8f09y.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp14y8f09y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp14y8f09y.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp14y8f09y.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp14y8f09y.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp14y8f09y.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp14y8f09y.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp14y8f09"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14y8f09y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71ky1obz.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71ky1obz.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71ky1obz.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp71ky1obz.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71ky1obz.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71ky1obz.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp71ky1obz.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71ky1obz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71ky1obz.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp71ky1obz.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp71ky1obz.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71ky1obz.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71ky1obz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        low = b\n        high = a\n    else\n        low = a\n\
    \        high = b\n    end\n    return [x for x in low:high if x % 2 == 0]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ibuvd05.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ibuvd05.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ibuvd05.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3ibuvd05.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ibuvd05.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ibuvd05.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3ibuvd05.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ibuvd05.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ibuvd05.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3ibuvd05.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3ibuvd05.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ibuvd05.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        upper = a\n        lower = b\n    else\n        upper\
    \ = b\n        lower = a\n    end\n    nums = Array(Int64, 0)\n    for i in lower:upper\n\
    \        if i % 2 == 0\n            push!(nums, i)\n        end\n    end\n   \
    \ return nums\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_1yir6o.jl:31\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ Array(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp9_1yir6o.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_1yir6o.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_1yir6o.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9_1yir6o.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching Array(::Type{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp9_1yir6o.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9_1yir6o.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9_1yir6o.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp9_1yir6o.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  MethodError: no method matching Array(::Type{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_1yir6o.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return [a]\n    elseif a > b\n        return generate_integers(b,\
    \ a)\n    elseif (b - a) == 1\n        return [a, b]\n    else\n        return\
    \ [a, b] .+ [2 * n for n in 0:floor(Int64, (b - a) / 2)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz8qzwiif.jl:26\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 2 and\
    \ 5\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] generate_integers(a::Int64,\
    \ b::Int64)\n      @ Main /tmp/tmpz8qzwiif.jl:18\n    [8] macro expansion\n  \
    \    @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpz8qzwiif.jl:26 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpz8qzwiif.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpz8qzwiif.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  DimensionMismatch(\"arrays could not be\
    \ broadcast to a common size; got a dimension with lengths 2 and 5\")\n  Stacktrace:\n\
    \    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n\
    \      @ ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [7] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpz8qzwiif.jl:18\n\
    \    [8] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpz8qzwiif.jl:14\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz8qzwiif.jl:27 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz8qzwiif.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return [x for x = a:b if x % 2 == 0]\n    else\n  \
    \      return [x for x = b:a if x % 2 == 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38zn57cm.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38zn57cm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38zn57cm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp38zn57cm.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38zn57cm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38zn57cm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp38zn57cm.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38zn57cm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38zn57cm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp38zn57cm.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp38zn57cm.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38zn57cm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    res = Int64[]\n    for i in a:b\n        if i % 2 == 0\n            push!(res,\
    \ i)\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwmvezc7y.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmvezc7y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmvezc7y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwmvezc7y.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmvezc7y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmvezc7y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwmvezc7y.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwmvezc7y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmvezc7y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwmvezc7y.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwmvezc7y.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwmvezc7y.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwmvezc7y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return collect(iterate_even_even(a))\n    elseif a\
    \ < b\n        return collect(filter(x -> x >= a && x <= b, iterate_even_even(a)))\n\
    \    elseif a > b\n        return collect(filter(x -> x >= b && x <= a, iterate_even_even(b)))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_apxv2h.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: iterate_even_even\
    \ not defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmpe_apxv2h.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_apxv2h.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_apxv2h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpe_apxv2h.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: iterate_even_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpe_apxv2h.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_apxv2h.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_apxv2h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpe_apxv2h.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: iterate_even_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpe_apxv2h.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe_apxv2h.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_apxv2h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpe_apxv2h.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: iterate_even_even not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int6"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_apxv2h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    #\n    # YOUR CODE HERE\n    #\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjz0rkang.jl:21\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: x not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpjz0rkang.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz0rkang.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz0rkang.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjz0rkang.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpjz0rkang.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz0rkang.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz0rkang.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjz0rkang.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpjz0rkang.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz0rkang.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz0rkang.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjz0rkang.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: x not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpjz0rkang.jl:14\n\
    \   [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjz0rkang.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return a % 2 == 0 ? [a] : []\n    end\n    if a > b\n\
    \        a, b = b, a\n    end\n    v = Vector{Int64}()\n    while a <= b\n   \
    \     push!(v, a)\n        a += 2\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpau16b8_9.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpau16b8_9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpau16b8_9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpau16b8_9.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpau16b8_9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpau16b8_9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpau16b8_9.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpau16b8_9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpau16b8_9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpau16b8_9.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpau16b8_9.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpau16b8_9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    val = Vector{Int64}(undef, 0)\n    if a > b\n        tempa = b\n     \
    \   tempb = a\n    else\n        tempa = a\n        tempb = b\n    end\n    for\
    \ i in tempa:tempb\n        if i % 2 == 0\n            push!(val, i)\n       \
    \ end\n    end\n    return val\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdexvbp2v.jl:31\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdexvbp2v.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdexvbp2v.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdexvbp2v.jl:32\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdexvbp2v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdexvbp2v.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdexvbp2v.jl:33\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdexvbp2v.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdexvbp2v.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdexvbp2v.jl:34\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdexvbp2v.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdexvbp2v.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Solution here.\n    if a > b\n        _a = b\n        _b = a\n    else\n\
    \        _a = a\n        _b = b\n    end\n    return [i for i in _a:_b if i %\
    \ 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpii06hi4r.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii06hi4r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii06hi4r.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpii06hi4r.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii06hi4r.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii06hi4r.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpii06hi4r.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpii06hi4r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpii06hi4r.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpii06hi4r.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpii06hi4r.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpii06hi4r.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Check for edge cases\n    @assert a > 0 \"a must be a positive integer\"\
    \n    @assert b > 0 \"b must be a positive integer\"\n    # Make a and b the min\
    \ and max values\n    min, max = minmax(a, b)\n    # Create a vector of the odd\
    \ numbers between min and max\n    vec = Int64[]\n    for x in min:max\n     \
    \   if x % 2 == 0\n            push!(vec, x)\n        end\n    end\n    return\
    \ vec\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw5eq_ark.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5eq_ark.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5eq_ark.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw5eq_ark.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5eq_ark.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5eq_ark.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw5eq_ark.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5eq_ark.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5eq_ark.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw5eq_ark.jl:33\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw5eq_ark.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw5eq_ark.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb3u39s5a.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpb3u39s5a.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3u39s5a.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3u39s5a.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpb3u39s5a.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpb3u39s5a.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3u39s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3u39s5a.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # return the right type\n    if a == b\n        return Vector([a])\n \
    \   elseif a > b\n        return sort(filter(x -> x % 2 == 0, collect(a:-1:b)))\n\
    \    else\n        return sort(filter(x -> x % 2 == 0, collect(a:b)))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmz8qr9y.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmz8qr9y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmz8qr9y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphmz8qr9y.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmz8qr9y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmz8qr9y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphmz8qr9y.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmz8qr9y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmz8qr9y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphmz8qr9y.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphmz8qr9y.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmz8qr9y.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    min_val = min(a, b)\n    max_val = max(a, b)\n    even_vec = []\n    for\
    \ i in min_val:max_val\n        if (i % 2 == 0)\n            push!(even_vec, i)\n\
    \        end\n    end\n    return even_vec\nend\n \ngenerate_integers(2, 8)\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3__px_z5.jl:28\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3__px_z5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3__px_z5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3__px_z5.jl:29\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3__px_z5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3__px_z5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3__px_z5.jl:30\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3__px_z5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3__px_z5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3__px_z5.jl:31\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3__px_z5.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3__px_z5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    evens = []\n    for x = a:b\n\
    \        if x % 2 == 0\n            push!(evens, x)\n        end\n    end\n  \
    \  return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qkw3x_f.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qkw3x_f.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qkw3x_f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9qkw3x_f.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qkw3x_f.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qkw3x_f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9qkw3x_f.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qkw3x_f.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qkw3x_f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9qkw3x_f.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9qkw3x_f.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qkw3x_f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(num -> num % 2 == 0, a:b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsj6j6kco.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj6j6kco.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj6j6kco.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpsj6j6kco.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj6j6kco.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj6j6kco.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpsj6j6kco.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsj6j6kco.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj6j6kco.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpsj6j6kco.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsj6j6kco.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsj6j6kco.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj6j6kco.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return Int64[]\n    end\n    a:b:2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxrevavlt.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrevavlt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrevavlt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxrevavlt.jl:31\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrevavlt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrevavlt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxrevavlt.jl:32\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxrevavlt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxrevavlt.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxrevavlt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        collect(a:2:b)\n    else\n        collect(b:2:a)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgmqwez1v.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmqwez1v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmqwez1v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgmqwez1v.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmqwez1v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmqwez1v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgmqwez1v.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgmqwez1v.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgmqwez1v.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgmqwez1v.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgmqwez1v.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmqwez1v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        c = b\n        b = a\n        a = c\n    end\n    if\
    \ a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n   \
    \ end\n    if a > b\n        return []\n    end\n    return [a:2:b]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpujvwbw2g.jl:32\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type StepRange{Int64, Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::StepRange{Int64,\
    \ Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{StepRange{Int64, Int64}}, soffs::Int64, n::Int64)\n\
    \      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{StepRange{Int64,\
    \ Int64}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpujvwbw2g.jl:25\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpujvwbw2g.jl:32 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpujvwbw2g.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpujvwbw2g.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type StepRange{Int64, Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujvwbw2g.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return [a]\n    elseif a < b\n        xs = [a]\n  \
    \      while a < b\n            a += 2\n            push!(xs, a)\n        end\n\
    \        return xs\n    else\n        xs = [a]\n        while a > b\n        \
    \    a -= 2\n            push!(xs, a)\n        end\n        return xs\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptqeycnqa.jl:34\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqeycnqa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqeycnqa.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptqeycnqa.jl:35\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqeycnqa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqeycnqa.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptqeycnqa.jl:36\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [132, 130, 128, 126, 124, 122, 120, 118, 116, 114  \u2026\
    \  20, 18, 16, 14, 12, 10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqeycnqa.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqeycnqa.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptqeycnqa.jl:37\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptqeycnqa.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqeycnqa.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a = (a % 2 != 0) ? a + 1 : a\n    b = (b % 2 != 0) ? b - 1 : b\n    if\
    \ a > b\n        a, b = b, a\n    end\n    return collect(a:2:b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48ycp0at.jl:23\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48ycp0at.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48ycp0at.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp48ycp0at.jl:24\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48ycp0at.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48ycp0at.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp48ycp0at.jl:25\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48ycp0at.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48ycp0at.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp48ycp0at.jl:26\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48ycp0at.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48ycp0at.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a_even = iseven(a)\n    b_even = iseven(b)\n    smallest = min(a, b)\n\
    \    largest = max(a, b)\n    if !a_even && !b_even\n        smallest = smallest\
    \ + 1\n    end\n    evens = []\n    for i in smallest:2:largest\n        push!(evens,\
    \ i)\n    end\n    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvx6_c28.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvx6_c28.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvx6_c28.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwvx6_c28.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvx6_c28.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvx6_c28.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwvx6_c28.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwvx6_c28.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwvx6_c28.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwvx6_c28.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwvx6_c28.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvx6_c28.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        c = a\n        a = b\n        b = c\n    end\n    return\
    \ [x for x in a:b if iseven(x)]\nend\n\"\"\"\n    Given a vector of integers vec,\
    \ return a new vector where each element\n    is the product of all elements in\
    \ vec except the element at that index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gqys6xt.jl:18\nin expression starting at\
    \ /tmp/tmp6gqys6xt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Step 1: find the smallest even number between a and b\n    # Step 2:\
    \ grow the vector by looping over the even numbers\n    # Step 3: return the vector\n\
    \    step = ifelse(a % 2 == 0, 2, 4)\n    even_numbers = Vector{Int64}()\n   \
    \ current_number = ifelse(a % 2 == 0, a, a + 2)\n    while current_number <= b\n\
    \        push!(even_numbers, current_number)\n        current_number += step\n\
    \    end\n    return even_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjeaitfwe.jl:28\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjeaitfwe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjeaitfwe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjeaitfwe.jl:29\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjeaitfwe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjeaitfwe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjeaitfwe.jl:30\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjeaitfwe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjeaitfwe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjeaitfwe.jl:31\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79,\
    \ 83, 87] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjeaitfwe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjeaitfwe.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjeaitfwe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # ensure a <= b\n    if a > b\n        temp = a\n        a = b\n     \
    \   b = temp\n    end\n    if b < 2 || a > 9\n        return Int64[]\n    end\n\
    \    evens = collect(a:2:b)\n    if b > 9\n        push!(evens, 8)\n    end\n\
    \    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm9vu8yv9.jl:31\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 8] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm9vu8yv9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9vu8yv9.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm9vu8yv9.jl:32\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10, 8] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm9vu8yv9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9vu8yv9.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpm9vu8yv9.jl:33\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  116, 118,\
    \ 120, 122, 124, 126, 128, 130, 132, 8] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm9vu8yv9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm9vu8yv9.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm9vu8yv9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a >= b\n        return [i for i in a:b if i % 2 == 0]\n    else\n \
    \       return [i for i in b:a if i % 2 == 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ivcerx0.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ivcerx0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ivcerx0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1ivcerx0.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ivcerx0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ivcerx0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1ivcerx0.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ivcerx0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ivcerx0.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ivcerx0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # check to make sure a is smaller than b\n    if a > b\n        a, b =\
    \ b, a\n    end\n    return filter(x -> x % 2 == 0, a:b)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6hb_v76.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf6hb_v76.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6hb_v76.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf6hb_v76.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf6hb_v76.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6hb_v76.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf6hb_v76.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf6hb_v76.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6hb_v76.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf6hb_v76.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf6hb_v76.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6hb_v76.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        return filter(x -> x % 2 == 0, [a:b])\n    elseif a\
    \ > b\n        return filter(x -> x % 2 == 0, [b:a])\n    elseif a == b\n    \
    \    if a % 2 == 0\n            return [a]\n        else\n            return []\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpji6btenb.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ rem(::UnitRange{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::UnitRange{Int64})\n     @ Main\
    \ /tmp/tmpji6btenb.jl:12\n   [2] filter(f::var\"#1#3\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmpji6btenb.jl:12\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpji6btenb.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpji6btenb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpji6btenb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching rem(::UnitRange{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::UnitRange{Int64})\n     @ Main\
    \ /tmp/tmpji6btenb.jl:14\n   [2] filter(f::var\"#2#4\", a::Vector{UnitRange{Int64}})\n\
    \     @ Base ./array.jl:2484\n   [3] generate_integers(a::Int64, b::Int64)\n \
    \    @ Main /tmp/tmpji6btenb.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji6btenb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return union(filter(x -> x % 2 == 0, a:b), filter(x -> x % 2 == 0, b:a))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdip8s3ta.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdip8s3ta.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdip8s3ta.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdip8s3ta.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdip8s3ta.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdip8s3ta.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdip8s3ta.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdip8s3ta.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdip8s3ta.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdip8s3ta.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdip8s3ta.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdip8s3ta.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        a: b\n    end\n    even_numbers = Vector{Int64}()\n\
    \    for i in a:b\n        if mod(i, 2) == 0\n            push!(even_numbers,\
    \ i)\n        end\n    end\n    return even_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fwi3xb4.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fwi3xb4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fwi3xb4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4fwi3xb4.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fwi3xb4.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fwi3xb4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4fwi3xb4.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fwi3xb4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fwi3xb4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4fwi3xb4.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4fwi3xb4.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fwi3xb4.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fwi3xb4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    x = linspace(a, b, stop=true)\n    y = filter(x -> x % 2 == 0, x)\n  \
    \  return y\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv6tfgcnx.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: linspace not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpv6tfgcnx.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6tfgcnx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6tfgcnx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpv6tfgcnx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: linspace not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpv6tfgcnx.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6tfgcnx.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6tfgcnx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpv6tfgcnx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: linspace not defined\n \
    \ Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpv6tfgcnx.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6tfgcnx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6tfgcnx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpv6tfgcnx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: linspace not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpv6t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6tfgcnx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a % 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -=\
    \ 1\n    end\n    if a > b\n        return []\n    end\n    return collect(a:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrgknusq.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrgknusq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrgknusq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyrgknusq.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrgknusq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrgknusq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyrgknusq.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrgknusq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrgknusq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyrgknusq.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyrgknusq.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrgknusq.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrgknusq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        min_a = b\n        max_a = a\n    else\n        min_a\
    \ = a\n        max_a = b\n    end\n    \n    ints = []\n    for i = min_a:max_a\n\
    \        if i % 2 == 0\n            push!(ints, i)\n        end\n    end\n   \
    \ return ints\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpegrgo1w3.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpegrgo1w3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpegrgo1w3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpegrgo1w3.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpegrgo1w3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpegrgo1w3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpegrgo1w3.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpegrgo1w3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpegrgo1w3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpegrgo1w3.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpegrgo1w3.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegrgo1w3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b \n        a:b\n    else\n        b:a\n    end[(a % 2 == 0) ?\
    \ a : a + 1 : 2 : (b % 2 == 0) ? b : b - 1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfrmuk7e5.jl:10 expected\
    \ \"end\", got \"[\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfrmuk7e5.jl:15\n\
    in expression starting at /tmp/tmpfrmuk7e5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return filter(x -> mod(x,\
    \ 2) == 0, collect(a:b))\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkmdov9c4.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmdov9c4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmdov9c4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkmdov9c4.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmdov9c4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmdov9c4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkmdov9c4.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmdov9c4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmdov9c4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkmdov9c4.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkmdov9c4.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkmdov9c4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzh2a77le.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpzh2a77le.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzh2a77le.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzh2a77le.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzh2a77le.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpzh2a77le.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzh2a77"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzh2a77le.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a<b \n        a:=a:b\n    end \n    Vector{Int64}(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vyk5ba2.jl:1\nin expression starting at /tmp/tmp_vyk5ba2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    range =\
    \ max(a, b) - min(a, b)\n    return collect(min(a, b):2:min(a, b) + range)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3nusen8i.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nusen8i.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nusen8i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3nusen8i.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nusen8i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nusen8i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3nusen8i.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nusen8i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nusen8i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3nusen8i.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3nusen8i.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nusen8i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    # Swap a and b if necessary to set a < b\n    if a > b\n       \
    \ temp = a\n        a = b\n        b = temp\n    end\n    \n    # The largest\
    \ possible integer for a,b where a < b is 1000\n    # Generate a list of all even\
    \ integers from 0 to 1000\n    # This is a small enough list that it can be hardcoded\n\
    \    evens = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,\
    \ 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,\
    \ 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108,\
    \ 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,\
    \ 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,\
    \ 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204,\
    \ 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236,\
    \ 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268,\
    \ 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300,\
    \ 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332,\
    \ 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364,\
    \ 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396,\
    \ 398, 400, 402, 404, 406, 408, 410, 412,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b_eyk5s.jl:25\nin expression starting at\
    \ /tmp/tmp4b_eyk5s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    (a <= b) ? collect(a:2:b) : collect(b:2:a)\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2j88vuh.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2j88vuh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2j88vuh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe2j88vuh.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2j88vuh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2j88vuh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe2j88vuh.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2j88vuh.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2j88vuh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe2j88vuh.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe2j88vuh.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2j88vuh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7lw_5hj.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7lw_5hj.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7lw_5hj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpx7lw_5hj.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7lw_5hj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7lw_5hj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpx7lw_5hj.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7lw_5hj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7lw_5hj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpx7lw_5hj.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx7lw_5hj.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7lw_5hj.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7lw_5hj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n  if b > a\n    return filter(x -> rem(x, 2) == 0, collect(a:b))\n  else\n\
    \    return filter(x -> rem(x, 2) == 0, collect(b:a))\n  end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4kehdkwh.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kehdkwh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kehdkwh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kehdkwh.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kehdkwh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kehdkwh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kehdkwh.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4kehdkwh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4kehdkwh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4kehdkwh.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4kehdkwh.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4kehdkwh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    (a:b:2)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppepy_uba.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppepy_uba.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppepy_uba.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppepy_uba.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppepy_uba.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppepy_uba.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppepy_uba.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppepy_uba.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppepy_uba.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppepy_uba.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Verify that a is less than b\n    # Verify that a and b are only positive\n\
    \    # Verify that neither a or b are 0\n    # Print error message if verification\
    \ fails\n    @assert a < b && a > 0 && b > 0\n    numbers = []\n    for i in a:b\n\
    \        if i % 2 == 0\n            push!(numbers, i)\n        end\n    end\n\
    \    return numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvi8zzqdm.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvi8zzqdm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvi8zzqdm.jl:28\ntest set: Error\
    \ During Test at /tmp/tmpvi8zzqdm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  AssertionError: a < b && (a > 0 && b > 0)\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpvi8zzqdm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvi8zzqdm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvi8zzqdm.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpvi8zzqdm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  AssertionError: a < b && (a > 0 && b >\
    \ 0)\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main\
    \ /tmp/tmpvi8zzqdm.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvi8zzqdm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvi8zzqdm.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpvi8zzqdm.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvi8zzqdm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [x for x in a:b if x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp566hmjm7.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp566hmjm7.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp566hmjm7.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp566hmjm7.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp566hmjm7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp566hmjm7.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp566hmjm7.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp566hmjm7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp566hmjm7.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp566hmjm7.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp566hmjm7.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp566hmjm7.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp566hmjm7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a >= b\n        return [x for x in a:b if iseven(x)]\n    else\n  \
    \      return [x for x in b:a if iseven(x)]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfm07hlpw.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm07hlpw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm07hlpw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfm07hlpw.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm07hlpw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm07hlpw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfm07hlpw.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm07hlpw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm07hlpw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm07hlpw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    integers = []\n    for i = a:b\n        if i % 2 == 0\n            push!(integers,\
    \ i)\n        end\n    end\n    return integers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqzu959a.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqzu959a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqzu959a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkqzu959a.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqzu959a.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqzu959a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkqzu959a.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqzu959a.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqzu959a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkqzu959a.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkqzu959a.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqzu959a.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqzu959a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        smaller = b\n        bigger = a\n    else\n        smaller\
    \ = a\n        bigger = b\n    end\n    evens = [even for even in smaller:bigger\
    \ if even % 2 == 0]\n    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9jynpiq.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9jynpiq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9jynpiq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph9jynpiq.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9jynpiq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9jynpiq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph9jynpiq.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9jynpiq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9jynpiq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph9jynpiq.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph9jynpiq.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9jynpiq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    # init range to empty\n    range = []\n    \n    # loop through\
    \ each integer i\n    for i in a:b\n        \n        # if remainder is 0, append\
    \ to range\n        if mod(i, 2) == 0\n            push!(range, i)\n        end\n\
    \    end\n    \n    # return range\n    return range\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2zaqeba.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2zaqeba.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2zaqeba.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpb2zaqeba.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2zaqeba.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2zaqeba.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpb2zaqeba.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2zaqeba.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2zaqeba.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpb2zaqeba.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb2zaqeba.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2zaqeba.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2zaqeba.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(is_even, collect(min(a, b):max(a, b)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvs_axntk.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpvs_axntk.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvs_axntk.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvs_axntk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvs_axntk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpvs_axntk.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvs_axntk.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvs_axntk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvs_axntk.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: is_even not defined\n  Stacktrace:\n\
    \   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpvs_axntk.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvs_axntk.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvs_axntk.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvs_axntk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: is_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpvs_axnt"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvs_axntk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in a:b if i % 2 == 0]\nend\n@testset \"handles ascending\
    \ integers\" begin\n    @test generate_integers(2, 8) == [2, 4, 6, 8]\n    @test\
    \ generate_integers(10, 14) == []\nend\n@testset \"handles descending integers\"\
    \ begin\n    @test generate_integers(8, 2) == [2, 4, 6, 8]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpkc4nqi89.jl:13\nin expression starting at /tmp/tmpkc4nqi89.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a < b ? range(a, b, 2) : range(b, a, 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxeg6dh5b.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 10] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeg6dh5b.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeg6dh5b.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxeg6dh5b.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeg6dh5b.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeg6dh5b.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxeg6dh5b.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeg6dh5b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeg6dh5b.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpxeg6dh5b.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxeg6dh5b.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxeg6dh5b.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxeg6dh5b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Get all even numbers in the range\n    evens = filter(x -> x % 2 ==\
    \ 0, a:b)\n    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjixzkug2.jl:20\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjixzkug2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjixzkug2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjixzkug2.jl:21\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjixzkug2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjixzkug2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjixzkug2.jl:22\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjixzkug2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjixzkug2.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjixzkug2.jl:23\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjixzkug2.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjixzkug2.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjixzkug2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        temp = a\n        a = b\n        b = temp\n    end\n\
    \    c = []\n    for i = a:b\n        if i % 2 == 0\n            push!(c, i)\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpow2ou2hq.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow2ou2hq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow2ou2hq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpow2ou2hq.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow2ou2hq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow2ou2hq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpow2ou2hq.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow2ou2hq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow2ou2hq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpow2ou2hq.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpow2ou2hq.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpow2ou2hq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        return [i for i in a:b if i % 2 == 0]\n    elseif a\
    \ > b\n        return [i for i in b:a if i % 2 == 0]\n    else\n        return\
    \ [a]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygfdn21y.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygfdn21y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygfdn21y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygfdn21y.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygfdn21y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygfdn21y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygfdn21y.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpygfdn21y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpygfdn21y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygfdn21y.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpygfdn21y.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygfdn21y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in range(a, b + 1) if i % 2 == 0]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps2_mhkvk.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2_mhkvk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2_mhkvk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmps2_mhkvk.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2_mhkvk.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2_mhkvk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmps2_mhkvk.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps2_mhkvk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2_mhkvk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmps2_mhkvk.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  72, 74, 76, 78,\
    \ 80, 82, 84, 86, 88, 90] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps2_mhkvk.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps2_mhkvk.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2_mhkvk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    min_val = min(a, b)\n    max_val = max(a, b)\n    max_val += mod(max_val,\
    \ 2) - 1\n    min_val += mod(min_val, 2)\n    res = []\n    for i in min_val:max_val\n\
    \        if i % 2 == 0\n            push!(res, i)\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp596wbzo3.jl:30\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026\
    \  112, 114, 116, 118, 120, 122, 124, 126, 128, 130] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp596wbzo3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp596wbzo3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp596wbzo3.jl:31\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp596wbzo3.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp596wbzo3.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp596wbzo3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b \n        collect(a:2:b)\n    else\n        collect(b:2:a)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5u_35kr.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5u_35kr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5u_35kr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo5u_35kr.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5u_35kr.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5u_35kr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo5u_35kr.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo5u_35kr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo5u_35kr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo5u_35kr.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo5u_35kr.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5u_35kr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    evens = Int64[]\n    if a > b\n        return generate_integers(b, a)\n\
    \    end\n    if a % 2 == 0\n        push!(evens, a)\n    end\n    while a < b\n\
    \        a += 2\n        push!(evens, a)\n    end\n    return evens\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbiwmnrsv.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiwmnrsv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiwmnrsv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbiwmnrsv.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiwmnrsv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiwmnrsv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbiwmnrsv.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbiwmnrsv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbiwmnrsv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbiwmnrsv.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [19, 21, 23, 25, 27, 29, 31, 33, 35, 37  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbiwmnrsv.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbiwmnrsv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        return find_even(a, b)\n    elseif a > b\n        return\
    \ find_even(b, a)\n    elseif a == b\n        if mod(a, 2) == 0\n            return\
    \ [a]\n        else\n            return []\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpief1gtys.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  UndefVarError: find_even not\
    \ defined\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpief1gtys.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpief1gtys.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpief1gtys.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpief1gtys.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  UndefVarError: find_even not defined\n \
    \ Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpief1gtys.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpief1gtys.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpief1gtys.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpief1gtys.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  UndefVarError: find_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpief1gtys.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpief1gtys.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpief1gtys.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpief1gtys.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  UndefVarError: find_even not defined\n\
    \  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpief1gtys.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [x for x in a:b if mod(x, 2) == 0]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdcjhqyem.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcjhqyem.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcjhqyem.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdcjhqyem.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcjhqyem.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcjhqyem.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdcjhqyem.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdcjhqyem.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcjhqyem.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpdcjhqyem.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdcjhqyem.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdcjhqyem.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdcjhqyem.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    c = a:2:b\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxmthjt0.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxmthjt0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxmthjt0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxxmthjt0.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxmthjt0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxmthjt0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxxmthjt0.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxxmthjt0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxxmthjt0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxxmthjt0.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxxmthjt0.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxmthjt0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # your code here\n    # First attempt\n    # println(a,b)\n    if a <\
    \ b\n        if a % 2 == 0\n            if b % 2 == 0\n                if b -\
    \ a > 2\n                    a_vec = [a, a+2, a+4, a+6]\n                    b_vec\
    \ = [b-2, b-4, b-6, b-8]\n                    return vcat(a_vec, b_vec)\n    \
    \            elseif b - a == 2\n                    return [a, b]\n          \
    \      else\n                    return [a]\n                end\n           \
    \ else\n                if b - a > 2\n                    a_vec = [a, a+2, a+4,\
    \ a+6]\n                    b_vec = [b-1, b-3, b-5, b-7]\n                   \
    \ return vcat(a_vec, b_vec)\n                elseif b - a == 2\n             \
    \       return [a, b-1]\n                else\n                    return [a]\n\
    \                end\n            end\n        else\n            if b % 2 == 0\n\
    \                if b - a > 2\n                    a_vec = [a+1, a+3, a+5, a+7]\n\
    \                    b_vec = [b-2, b-4, b-6, b-8]\n                    return\
    \ vcat(a_vec, b_vec)\n                elseif b - a == 2\n                    return\
    \ [a+1, b]\n                else\n                    return [a+1]\n         \
    \       end\n            else\n                if b - a > 2\n                \
    \    a_vec = [a+1, a+3, a+5, a+7]\n                    b_vec = [b-1, b-3, b-5,\
    \ b-7]\n                    return vcat(a_vec, b_vec)\n                elseif\
    \ b - a == 2\n                    return [a+1, b-1]\n                else\n  \
    \                  return [a+1]\n                end\n            end\n      \
    \  end\n    else\n        return generate_integers(b, a)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmd9xc2oh.jl:69\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 8, 6, 4, 2] == [2, 4, 6, 8]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmd9xc2oh.jl:69 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmd9xc2oh.jl:68\ntest set: Test\
    \ Failed at /tmp/tmpmd9xc2oh.jl:70\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmd9xc2oh.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmd9xc2oh.jl:68\ntest set: Test\
    \ Failed at /tmp/tmpmd9xc2oh.jl:71\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 130, 128, 126, 124] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmd9xc2oh.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmd9xc2oh.jl:68\ntest set: Test\
    \ Failed at /tmp/tmpmd9xc2oh.jl:72\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 88, 86, 84, 82] == Int64[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmd9xc2oh.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmd9xc2oh.jl:68\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmd9xc2oh.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0uqcpca.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0uqcpca.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0uqcpca.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy0uqcpca.jl:25\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0uqcpca.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0uqcpca.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy0uqcpca.jl:26\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0uqcpca.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0uqcpca.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy0uqcpca.jl:27\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy0uqcpca.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0uqcpca.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if b > 10\n        return\
    \ generate_integers(a, 10) .* generate_integers(10, b)\n    end\n    res = [2,\
    \ 4, 6, 8]\n    return res[res .>= a .& res .<= b]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    [i for i = a:2:b]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplw3eqac6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw3eqac6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw3eqac6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw3eqac6.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw3eqac6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw3eqac6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw3eqac6.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplw3eqac6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplw3eqac6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw3eqac6.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplw3eqac6.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplw3eqac6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ collect(2:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyl5_u33w.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl5_u33w.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl5_u33w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl5_u33w.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl5_u33w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl5_u33w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl5_u33w.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl5_u33w.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyl5_u33w.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyl5_u33w.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  70, 72, 74, 76, 78,\
    \ 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyl5_u33w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyl5_u33w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    even_integers = Int64[]\n    min_integer = min(a, b)\n    max_integer\
    \ = max(a, b)\n    for num in min_integer:max_integer\n        if num % 2 == 0\n\
    \            push!(even_integers, num)\n        end\n    end\n    return even_integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmmltgdga.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmltgdga.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmltgdga.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmmltgdga.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmltgdga.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmltgdga.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmmltgdga.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmmltgdga.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmmltgdga.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpmmltgdga.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmmltgdga.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmltgdga.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj19ae3cn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj19ae3cn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj19ae3cn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj19ae3cn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj19ae3cn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj19ae3cn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj19ae3cn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj19ae3cn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj19ae3cn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj19ae3cn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj19ae3cn.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj19ae3cn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return []\n    end\n    return vcat(generate_integers(a,\
    \ b-1), [b])\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy39ik9ox.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 3, 4, 5, 6, 7, 8, 9, 10] == [2, 4, 6,\
    \ 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy39ik9ox.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy39ik9ox.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy39ik9ox.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy39ik9ox.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy39ik9ox.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy39ik9ox.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy39ik9ox.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy39ik9ox.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy39ik9ox.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 18, 19, 20, 21, 22, 23, 24, 25, 26  \u2026  80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy39ik9ox.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy39ik9ox.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy39ik9ox.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return a % 2 == 0 ? [a] : []\n    end\n    if a > b\n\
    \        # flip a and b, and do the same thing\n        return generate_integers(b,\
    \ a)\n    end\n    if a % 2 == 0 # starting with an even number\n        return\
    \ [ i for i in a:2:b ]\n    else # starting with an odd number\n        return\
    \ [ i for i in a+1:2:b ]\n    end\nend\n@testset \"generate_integers\" begin\n\
    \    @test generate_integers(2, 8) == [2, 4, 6, 8]\n    @test generate_integers(8,\
    \ 2) == [2, 4, 6, 8]\n    @test generate_integers(10, 14) == []\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp1946zds4.jl:24\nin expression starting at /tmp/tmp1946zds4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if (a < b)\n        start = a\n        stop = b\n    else\n        start\
    \ = b\n        stop = a\n    end\n    range = start:stop\n    filter(x -> x %\
    \ 2 == 0, range)\nend\nprintln(generate_integers(2, 8))\nprintln(generate_integers(8,\
    \ 2))\nprintln(generate_integers(10, 14))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "[2, 4, 6, 8]\n[2, 4, 6, 8]\n[10, 12, 14]\ntest set: Test Failed at /tmp/tmp4_kmrl1x.jl:29\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_kmrl1x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_kmrl1x.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4_kmrl1x.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_kmrl1x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_kmrl1x.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4_kmrl1x.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_kmrl1x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_kmrl1x.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4_kmrl1x.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4_kmrl1x.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_kmrl1x.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    Vector{Int64}(2:2:b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8afu0vba.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8afu0vba.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8afu0vba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8afu0vba.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8afu0vba.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8afu0vba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8afu0vba.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8afu0vba.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8afu0vba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8afu0vba.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  70, 72, 74, 76, 78,\
    \ 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8afu0vba.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8afu0vba.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    if a % 2 == 1\n        a\
    \ += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    return [x for\
    \ x in a:2:b]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvu0c_iw.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvu0c_iw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvu0c_iw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdvu0c_iw.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvu0c_iw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvu0c_iw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdvu0c_iw.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdvu0c_iw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdvu0c_iw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdvu0c_iw.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdvu0c_iw.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvu0c_iw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = sort([a, b])\n    return [i for i in a:b if i % 2 == 0]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwjvclfck.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjvclfck.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjvclfck.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwjvclfck.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjvclfck.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjvclfck.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwjvclfck.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjvclfck.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjvclfck.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwjvclfck.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwjvclfck.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjvclfck.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Create a vector of even integers between a and b,\n    # *including*\
    \ a and b if they are even.\n    if (a < b)\n        all_ints = collect(a:b)\n\
    \    else\n        all_ints = collect(b:a)\n    end\n    even_ints = all_ints[mod.(all_ints,\
    \ 2) .== 0]\n    return even_ints\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptykq58ba.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptykq58ba.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptykq58ba.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptykq58ba.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptykq58ba.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptykq58ba.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptykq58ba.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptykq58ba.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptykq58ba.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptykq58ba.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptykq58ba.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptykq58ba.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        return [a]\n    elseif a > b\n        return []\n \
    \   else\n        return [generate_integers(a+1, b)]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyp9d2ne7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Vector{Int64}}, soffs::Int64, n::Int64)\n      @ Base\
    \ ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n \
    \   [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n   \
    \   @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Vector{Int64}})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] generate_integers(a::Int64, b::Int64) (repeats 8 times)\n      @ Main\
    \ /tmp/tmpyp9d2ne7.jl:16\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpyp9d2ne7.jl:24 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpyp9d2ne7.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpyp9d2ne7.jl:25\n  Expression: candidate(10, 2) == [2,\
    \ 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyp9d2ne7.jl:25 [inlined]\n [3]\
    \ macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp9d2ne7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(x -> x % 2 == 0, collect(a:b))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5i6j02u.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm5i6j02u.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5i6j02u.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpm5i6j02u.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm5i6j02u.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5i6j02u.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpm5i6j02u.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm5i6j02u.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5i6j02u.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpm5i6j02u.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm5i6j02u.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5i6j02u.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5i6j02u.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfbxzk4s3.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpfbxzk4s3.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbxzk4s3.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfbxzk4s3.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfbxzk4s3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpfbxzk4s3.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfbxzk4"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbxzk4s3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a < b ? [x for x in a:b if iseven(x)] : generate_integers(b, a)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8mtf2sj.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8mtf2sj.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8mtf2sj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv8mtf2sj.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8mtf2sj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8mtf2sj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv8mtf2sj.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv8mtf2sj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv8mtf2sj.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpv8mtf2sj.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv8mtf2sj.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8mtf2sj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    answer = Array{Int64}()\n    if a > b \n        for i in b:a\n       \
    \     if i % 2 == 0\n                push!(answer, i)\n            end\n     \
    \   end\n    elseif a < b\n        for i in a:b\n            if i % 2 == 0\n \
    \               push!(answer, i)\n            end\n        end\n    else\n   \
    \     if a % 2 == 0\n            push!(answer, a)\n        end\n    end\n    return\
    \ answer\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq9xcxr79.jl:36\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: no method matching\
    \ (Array{Int64})()\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpq9xcxr79.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq9xcxr79.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq9xcxr79.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq9xcxr79.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: no method matching (Array{Int64})()\n\
    \  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmpq9xcxr79.jl:11\n   [2] macro expansion\n     @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9xcxr79.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a >= b \n        return [i for i in a:-2:b]\n    else\n        return\
    \ [i for i in a:2:b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqyy7jmyr.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyy7jmyr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyy7jmyr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqyy7jmyr.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyy7jmyr.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyy7jmyr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqyy7jmyr.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [132, 130, 128, 126, 124, 122, 120, 118, 116, 114  \u2026\
    \  20, 18, 16, 14, 12, 10, 8, 6, 4, 2] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyy7jmyr.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyy7jmyr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqyy7jmyr.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqyy7jmyr.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqyy7jmyr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    c = sort([a, b])\n    return [x for x in c[1]:2:c[2]]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7b893lk8.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b893lk8.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b893lk8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7b893lk8.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b893lk8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b893lk8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7b893lk8.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7b893lk8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7b893lk8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7b893lk8.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7b893lk8.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7b893lk8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \"\"\"\n    Generate Integers\n    \"\"\"\n    if a < b \n     \
    \   return collect(filter(x -> (x % 2 == 0), collect(a:b)))\n    elseif a > b\n\
    \        return collect(filter(x -> (x % 2 == 0), collect(b:a)))\n    elseif a\
    \ == b\n        return collect(filter(x -> (x % 2 == 0), collect(a:b)))\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpje59nsok.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpje59nsok.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpje59nsok.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpje59nsok.jl:30\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpje59nsok.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpje59nsok.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpje59nsok.jl:31\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpje59nsok.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpje59nsok.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpje59nsok.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpje59nsok.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpje59nsok.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \"\"\"\n    Put your implementation here.\n    \"\"\"\n    return [x for\
    \ x in a:b if iseven(x)]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp39aaslsn.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp39aaslsn.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp39aaslsn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp39aaslsn.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp39aaslsn.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp39aaslsn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp39aaslsn.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp39aaslsn.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp39aaslsn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp39aaslsn.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp39aaslsn.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp39aaslsn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp39aaslsn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    r = if a < b a:b else b:a end\n    return [e for e in r if e % 2 == 0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvasfiy5g.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvasfiy5g.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvasfiy5g.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvasfiy5g.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvasfiy5g.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvasfiy5g.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvasfiy5g.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvasfiy5g.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvasfiy5g.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvasfiy5g.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvasfiy5g.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvasfiy5g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        output = []\n        for n in a:b\n            if n\
    \ % 2 == 0\n                push!(output, n)\n            end\n        end\n \
    \       return output\n    else\n        output = []\n        for n in b:a\n \
    \           if n % 2 == 0\n                push!(output, n)\n            end\n\
    \        end\n        return output\n    end\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2nf9xpq.jl:35\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2nf9xpq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2nf9xpq.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp2nf9xpq.jl:36\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2nf9xpq.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2nf9xpq.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp2nf9xpq.jl:37\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp2nf9xpq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp2nf9xpq.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpp2nf9xpq.jl:38\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp2nf9xpq.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2nf9xpq.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if (a > b) \n        a, b = b, a\n    end\n    if (a % 2 == 0)\n     \
    \   return [a:2:b]\n    else\n        return [a+1:2:b]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpndkyvaq4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type StepRange{Int64, Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::StepRange{Int64,\
    \ Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{StepRange{Int64, Int64}}, soffs::Int64, n::Int64)\n\
    \      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n\
    \    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n  \
    \    @ ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n\
    \    [7] copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{StepRange{Int64,\
    \ Int64}})\n      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554\
    \ [inlined]\n   [10] generate_integers(a::Int64, b::Int64)\n      @ Main /tmp/tmpndkyvaq4.jl:15\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpndkyvaq4.jl:25 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpndkyvaq4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpndkyvaq4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type StepRange{Int64, Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpndkyvaq4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return Int.(collect(Set(filter(x -> x % 2 == 0, a:b))))\nend\n@test generate_integers(2,\
    \ 8) == [2, 4, 6, 8]\n@test generate_integers(8, 2) == [2, 4, 6, 8]\n@test generate_integers(10,\
    \ 14) == []\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpakml3w_h.jl:13\nin expression starting at /tmp/tmpakml3w_h.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    #Create an array to hold the result\n    result = Int64[]\n    #determine\
    \ the start and end\n    if a > b\n        start = b\n        finish = a\n   \
    \ else\n        start = a\n        finish = b\n    end\n    #append all evens\
    \ between start and finish\n    for i = start:finish\n        if i % 2 == 0\n\
    \            push!(result, i)\n        end\n    end\n    #return the result\n\
    \    return result\nend\nprintln(generate_integers(2, 8))\nprintln(generate_integers(8,\
    \ 2))\nprintln(generate_integers(10, 14))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "[2, 4, 6, 8]\n[2, 4, 6, 8]\n[10, 12, 14]\ntest set: Test Failed at /tmp/tmpgfey70b3.jl:38\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfey70b3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfey70b3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgfey70b3.jl:39\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfey70b3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfey70b3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgfey70b3.jl:40\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfey70b3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfey70b3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpgfey70b3.jl:41\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgfey70b3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfey70b3.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    [x for\
    \ x in collect(a:b) if iseven(x)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmj9r569k.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9r569k.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9r569k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmj9r569k.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9r569k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9r569k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmj9r569k.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj9r569k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj9r569k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmj9r569k.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmj9r569k.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmj9r569k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    c = a:b\n    x = []\n    for i in c\n        if i % 2 == 0\n         \
    \   push!(x, i)\n        end\n    end\n    return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw3cgs8jz.jl:25\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3cgs8jz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3cgs8jz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpw3cgs8jz.jl:26\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3cgs8jz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3cgs8jz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpw3cgs8jz.jl:27\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3cgs8jz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3cgs8jz.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpw3cgs8jz.jl:28\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw3cgs8jz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3cgs8jz.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3cgs8jz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    max(a, b)::Int64\n    min(a, b)::Int64\n    result::Vector{Int64} = Int64[]\n\
    \    for i in min(a, b)::Int64:max(a, b)::Int64\n        if i % 2 == 0\n     \
    \       append!(result, i)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1isezgqa.jl:26\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1isezgqa.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1isezgqa.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1isezgqa.jl:27\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1isezgqa.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1isezgqa.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1isezgqa.jl:28\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1isezgqa.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1isezgqa.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1isezgqa.jl:29\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1isezgqa.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1isezgqa.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    a, b = min(a, b), max(a, b)\n    even_digits = [x for x in a:b if x %\
    \ 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbi6aupeg.jl:19\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6aupeg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6aupeg.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbi6aupeg.jl:20\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6aupeg.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6aupeg.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbi6aupeg.jl:21\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi6aupeg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi6aupeg.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbi6aupeg.jl:22\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbi6aupeg.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbi6aupeg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    output = Vector{Int64}()\n\
    \    a = max(a, 2)\n    while a <= b\n        push!(output, a)\n        a += 2\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvcs8wdjf.jl:27\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcs8wdjf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcs8wdjf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvcs8wdjf.jl:28\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcs8wdjf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcs8wdjf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvcs8wdjf.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvcs8wdjf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvcs8wdjf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvcs8wdjf.jl:30\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvcs8wdjf.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcs8wdjf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a>b\n        a,b = b,a\n    end\n    filter(iseven, collect(a:b))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjj_kgpxb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjj_kgpxb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjj_kgpxb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjj_kgpxb.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjj_kgpxb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjj_kgpxb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjj_kgpxb.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjj_kgpxb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjj_kgpxb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjj_kgpxb.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjj_kgpxb.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjj_kgpxb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnhj3x_41.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhj3x_41.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhj3x_41.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpnhj3x_41.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhj3x_41.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhj3x_41.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpnhj3x_41.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnhj3x_41.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhj3x_41.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpnhj3x_41.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnhj3x_41.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnhj3x_41.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhj3x_41.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n  if a > b\n    a, b = b, a\n  end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp48dm7_vw.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp48dm7_vw.jl:1\n\
    in expression starting at /tmp/tmp48dm7_vw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return filter(x -> iseven(x), collect(min(a, b):max(a, b)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppquv8p28.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppquv8p28.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppquv8p28.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppquv8p28.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppquv8p28.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppquv8p28.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppquv8p28.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppquv8p28.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppquv8p28.jl:17\ntest set: Test\
    \ Failed at /tmp/tmppquv8p28.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppquv8p28.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppquv8p28.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    minvalue = min(a, b)\n    maxvalue = max(a, b)\n    if minvalue % 2 ==\
    \ 1\n        minvalue += 1\n    end\n    vect = [minvalue]\n    while minvalue\
    \ + 2 <= maxvalue\n        push!(vect, minvalue + 2)\n        minvalue += 2\n\
    \    end\n    return vect\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxt08jpn.jl:28\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxt08jpn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxt08jpn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpaxt08jpn.jl:29\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxt08jpn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxt08jpn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpaxt08jpn.jl:30\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaxt08jpn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaxt08jpn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpaxt08jpn.jl:31\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaxt08jpn.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxt08jpn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        if a % 2 == 0\n            return [a]\n        else\n\
    \            return []\n        end\n    end\n    if a > b\n        a, b = b,\
    \ a\n    end\n    if a % 2 == 0\n        start = a\n    else\n        start =\
    \ a + 1\n    end\n    if b % 2 == 0\n        stop = b + 1\n    else\n        stop\
    \ = b\n    end\n    return collect(start:2:stop)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv7m2e7u8.jl:38\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7m2e7u8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7m2e7u8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpv7m2e7u8.jl:39\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7m2e7u8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7m2e7u8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpv7m2e7u8.jl:40\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv7m2e7u8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv7m2e7u8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpv7m2e7u8.jl:41\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv7m2e7u8.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv7m2e7u8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    output = Int64[]\n    if a == b\n        return a % 2 == 0 ? [a] : Int64[]\n\
    \    end\n    b_minor_a = b < a\n    loop = b_minor_a ? b : a\n    stop = b_minor_a\
    \ ? a : b\n    for i in loop:stop\n        push!(output, i) if i % 2 == 0\n  \
    \  end\n    b_minor_a ? reverse(output) : output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyei1ll7f.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyei1ll7f.jl:19\n\
    in expression starting at /tmp/tmpyei1ll7f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return filter(x -> iseven(x), collect(a:b))\n    else\n\
    \        return filter(x -> iseven(x), collect(b:a))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjo43hel.jl:22\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphjo43hel.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjo43hel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphjo43hel.jl:23\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphjo43hel.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjo43hel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphjo43hel.jl:24\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphjo43hel.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjo43hel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphjo43hel.jl:25\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphjo43hel.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjo43hel.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    return [j for j in collect(a:b) if iseven(j)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp72jpvzx.jl:18\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp72jpvzx.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp72jpvzx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpp72jpvzx.jl:19\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp72jpvzx.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp72jpvzx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpp72jpvzx.jl:20\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp72jpvzx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp72jpvzx.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpp72jpvzx.jl:21\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp72jpvzx.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp72jpvzx.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp72jpvzx.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # empty vector\n    if b < a\n        return []\n    end\n    # even numbers\n\
    \    if a % 2 == 0\n        a\n    else\n        a + 1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9je1r7wr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(a::Int64, b::Int64)\n     @\
    \ Main /tmp/tmp9je1r7wr.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9je1r7wr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9je1r7wr.jl:26\ntest set:\
    \ Test Failed at /tmp/tmp9je1r7wr.jl:28\n  Expression: candidate(10, 2) == [2,\
    \ 4, 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9je1r7wr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9je1r7wr.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9je1r7wr.jl:29\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: Int64[] == [2, 4, 6, 8]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9je1r7wr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9je"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9je1r7wr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        list = []\n        for i in a:b\n            if i %\
    \ 2 == 0\n                push!(list, i)\n            end\n        end\n     \
    \   return list\n    else\n        list = []\n        for i in b:a\n         \
    \   if i % 2 == 0\n                push!(list, i)\n            end\n        end\n\
    \        return list\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8d3qb29.jl:34\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8d3qb29.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8d3qb29.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl8d3qb29.jl:35\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8d3qb29.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8d3qb29.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl8d3qb29.jl:36\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8d3qb29.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8d3qb29.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl8d3qb29.jl:37\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpl8d3qb29.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8d3qb29.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        temp_arr = zeros(Int64, 0)\n        for i in a:b\n\
    \            if i % 2 == 0\n                temp_arr = [temp_arr; i]\n       \
    \     end\n        end\n        return temp_arr\n    else\n        temp_arr =\
    \ zeros(Int64, 0)\n        for i in b:a\n            if i % 2 == 0\n         \
    \       temp_arr = [temp_arr; i]\n            end\n        end\n        return\
    \ temp_arr\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7far214f.jl:34\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7far214f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7far214f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7far214f.jl:35\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7far214f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7far214f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7far214f.jl:36\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7far214f.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7far214f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7far214f.jl:37\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7far214f.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7far214f.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    xs = []\n    if a < b\n        for x = a:b\n            if x % 2 == 0\n\
    \                push!(xs, x)\n            end\n        end\n    else\n      \
    \  for x = b:a\n            if x % 2 == 0\n                push!(xs, x)\n    \
    \        end\n        end\n    end\n    return xs\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqzy37021.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzy37021.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzy37021.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzy37021.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzy37021.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzy37021.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzy37021.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzy37021.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzy37021.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzy37021.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqzy37021.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzy37021.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    res = []\n\
    \    for i in a:b\n        push!(res, i) if iseven(i)\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbgav_dgj.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbgav_dgj.jl:16\n\
    in expression starting at /tmp/tmpbgav_dgj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    integers = []\n    if a < b\n        for i in a:b\n            if i %\
    \ 2 == 0\n                push!(integers, i)\n            end\n        end\n \
    \   else\n        for i in b:a\n            if i % 2 == 0\n                push!(integers,\
    \ i)\n            end\n        end\n    end\n    return integers\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0zh4nzkn.jl:32\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zh4nzkn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zh4nzkn.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0zh4nzkn.jl:33\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zh4nzkn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zh4nzkn.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0zh4nzkn.jl:34\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0zh4nzkn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0zh4nzkn.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0zh4nzkn.jl:35\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0zh4nzkn.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zh4nzkn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    r = []\n    if a < b\n        for i in a:b\n            if i % 2 == 0\n\
    \                push!(r, i)\n            end\n        end\n    else\n       \
    \ for i in b:a\n            if i % 2 == 0\n                push!(r, i)\n     \
    \       end\n        end\n    end\n    return r\nend\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4rlaolcj.jl:34\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rlaolcj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rlaolcj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4rlaolcj.jl:35\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rlaolcj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rlaolcj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4rlaolcj.jl:36\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4rlaolcj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4rlaolcj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4rlaolcj.jl:37\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4rlaolcj.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4rlaolcj.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return filter(x -> x % 2 ==\
    \ 0, [a:b...])\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48g1hvmu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48g1hvmu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48g1hvmu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp48g1hvmu.jl:22\n  Expression: candidate(10, 2) == [2, 4, 6,\
    \ 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48g1hvmu.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48g1hvmu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp48g1hvmu.jl:23\n  Expression: candidate(132, 2) == [2, 4,\
    \ 6, 8]\n   Evaluated: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20  \u2026  114, 116,\
    \ 118, 120, 122, 124, 126, 128, 130, 132] == [2, 4, 6, 8]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp48g1hvmu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp48g1hvmu.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp48g1hvmu.jl:24\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [18, 20, 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76,\
    \ 78, 80, 82, 84, 86, 88] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp48g1hvmu.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48g1hvmu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    aa = min(a, b)\n    bb = max(a, b)\n    return [2 * i for i in aa:bb;\
    \ if iseven(2 * i)]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpheu7g6mb.jl:13\nin expression starting at /tmp/tmpheu7g6mb.jl:13\n"
  exit_code: 1
  status: SyntaxError
