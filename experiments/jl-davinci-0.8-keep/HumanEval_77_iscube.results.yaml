name: HumanEval_77_iscube
language: jl
results:
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a%(round(Int64,(a^(1/3)))) == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwbj_2_2_.jl:22\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpwbj_2_2_.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpwbj_2_2_.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n     iscube(a) = (a % 2 == 0) ? a % 3 == 0 : false\nend\n# Examples\nfor i\
    \ in [1, 2, -1, 64, 0, 180]\n    println(iscube(i))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if (a < 0) \n        a = -a\n    end\n    b = round(a ^ (1/3))\n    a\
    \ == b ^ 3\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a == 0 ? return true : return floor(a ^ (1//3)) == ceil(a ^ (1//3))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnp2s5jq.jl:15\nin expression starting at\
    \ /tmp/tmpbnp2s5jq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    sqrt_a = isqrt(a)\n    return sqrt_a == (sqrt_a)^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpix22mdl1.jl:23\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpix22mdl1.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpix22mdl1.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == Int64(round(cbrt(a)))^3\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptz_ajgua.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        a = -a\n    end\n    cube = round(Int64, (a)^(1/3))\n\
    \    return cube^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a >= 0 && isinteger(Int64(round(Float64(a)^(1/3))))\nend\n\"\"\"\
    \n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a perfect cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmplibcgpy1.jl:16\nin expression starting at /tmp/tmplibcgpy1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #your code here\nend\n\"\"\"\n    Write a function that takes an integer\
    \ a and returns True \n    if this ingeger is a square of some integer number.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    issquare(1)\
    \ ==> True\n    issquare(2) ==> False\n    issquare(-1) ==> True\n    issquare(64)\
    \ ==> True\n    issquare(0) ==> True\n    issquare(180) ==> False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmps9cl_fn4.jl:16\nin expression starting at /tmp/tmps9cl_fn4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0\n        isequal(a, cubic_root(a)) #is a the cubic root of a?\n\
    \    else\n        isequal(a, cubic_root(-a)) #is a the cubic root of -a?\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpthfi_ktp.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: cubic_root\
    \ not defined\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpthfi_ktp.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpthfi_ktp.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpthfi_ktp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpthfi_ktp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: cubic_root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpthfi_ktp.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpthfi_ktp.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpthfi_ktp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpthfi_ktp.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: cubic_root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpthfi_ktp.jl:17\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpthfi_ktp.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpthfi_ktp.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpthfi_ktp.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: cubic_root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpthfi_ktp.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a%1 == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat3kso58.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat3kso58.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat3kso58.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat3kso58.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat3kso58.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat3kso58.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat3kso58.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpat3kso58.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpat3kso58.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat3kso58.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a < 0\n        a = -a\n   \
    \ end\n    for i = 0:1000\n        if i^3 == a\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    if a == 0\n        return true\n    end\n    if a % 2 == 0\n   \
    \     return false\n    end\n    if a < 0\n        a = -a\n    end\n    return\
    \ false\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnzna0t2r.jl:32\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnzna0t2r.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnzna0t2r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnzna0t2r.jl:34\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnzna0t2r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnzna0t2r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnzna0t2r.jl:35\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnzna0t2r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnzna0t2r.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnzna0t2r.jl:37\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnzna0t2r.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnzna0t2r.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnzna0t2r.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \"\"\" \n    Tests whether the argument is a cube of an integer. \n  \
    \  \"\"\"\n    return sqrt(abs(a)) % 1 == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvyjqrwvc.jl:29\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvyjqrwvc.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvyjqrwvc.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvyjqrwvc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 ? true : a > 0 ? isequal(floor(cbrt(a)), cbrt(a)) : isequal(floor(cbrt(-a)),\
    \ cbrt(-a))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    x = round(Int64, a^(1/3))\n    return x^3 == a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyi10pksd.jl:24\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpyi10pksd.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyi10pksd.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyi10pksd.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi10pksd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    if a == 1\n        return true\n    end\n    for i in 1:ceil(Int64,sqrt(a))\n\
    \        if i^3 == a\n            return true\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return sqrt(a)%1 == 0 \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5cr5biq1.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp5cr5biq1.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp5cr5biq1.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp5cr5biq1.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp5cr5biq1.jl:26\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a==round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpohoyfo8t.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpohoyfo8t.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpohoyfo8t.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpohoyfo8t.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohoyfo8t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0\n        return floor(a^(1/3))^3 == a\n    else\n        return\
    \ floor(-a^(1/3))^3 == -a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvuf74amc.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpvuf74amc.jl:17\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpvuf74amc.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpvuf74amc.jl:24\\ntest set:\
    \ Test Failed at /tmp/tmpvuf74amc.jl:28\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a == 0 ? true : (root(a, 3) % 1 == 0 ? true : false)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl0_2_196.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: root not defined\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpl0_2_196.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl0_2_196.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl0_2_196.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl0_2_196.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpl0_2_196.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl0_2_196.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl0_2_196.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl0_2_196.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpl0_2_196.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpl0_2_196.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl0_2_196.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl0_2_196.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpl0_2_196.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0) ? (cbrt(a)%1==0) : (a==-1)\nend\n# Test cell: `exercise_cube`\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return round(Int64,(a^(1/3)))^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplbqhu3pk.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmplbqhu3pk.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplbqhu3pk.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplbqhu3pk.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplbqhu3pk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a in [x^3 for x in 1:abs(a)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytg_7vhs.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpytg_7vhs.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytg_7vhs.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpytg_7vhs.jl:27\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytg_7vhs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytg_7vhs.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytg_7vhs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if isequal(round(a^(1/3)), a^(1/3))\n        return true\n    else \n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdjepkjl2.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpdjepkjl2.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpdjepkjl2.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpdjepkjl2.jl:24\\ntest set:\
    \ Test Failed at /tmp/tmpdjepkjl2.jl:28\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdjepkjl2.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdjepkjl2.jl:24\\ntest set: Test\
    \ Failed at /tmp/tmpdjepkjl2.jl:30\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (abs(Int64(round(root(a,3))))^3 == a)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz5skezx0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: root not defined\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpz5skezx0.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz5skezx0.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz5skezx0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpz5skezx0.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpz5skezx0.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz5skezx0.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz5skezx0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpz5skezx0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpz5skezx0.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpz5skezx0.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpz5skezx0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpz5skezx0.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: root not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpz5skezx0.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a>=0 #isnegatif and/or ispositif\n        n=Int64(round(real(a)^(1/3)))\n\
    \        if a == n^3\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        n=Int64(round(real(a)^(1/3)))\n      \
    \  if a == -n^3\n            return true\n        else\n            return false\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzc_v8_wy.jl:37\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpzc_v8_wy.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzc_v8_wy.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzc_v8_wy.jl:34\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzc_v8_wy.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #here starts your code, remember the return statement :)\nend\n@testset\
    \ \"testing cubes, for negative numbers\" begin\n    @test iscube(-1) == true\n\
    \    @test iscube(-27) == true\n    @test iscube(-64) == true\n    @test iscube(-1000)\
    \ == false\nend\n@testset \"testing cubes, for positive numbers\" begin\n    @test\
    \ iscube(1) == true\n    @test iscube(8) == true\n    @test iscube(27) == true\n\
    \    @test iscube(64) == true\n    @test iscube(216) == true\n    @test iscube(1000)\
    \ == false\nend\n@testset \"testing cubes, for 0\" begin\n    @test iscube(0)\
    \ == true\nend\n \n \n\"\"\"\n    Write a function that takes an integer a and\
    \ returns True \n    if this integer is a square of some integer number.\n   \
    \ Note: you may assume the input is always valid.\n    Examples:\n    issquare(1)\
    \ ==> True\n    issquare(2) ==> False\n    issquare(-1) ==> True\n    issquare(64)\
    \ ==> True\n    issquare(0) ==> True\n    issquare(180) ==> False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpi35g4j2l.jl:16\nin expression starting at /tmp/tmpi35g4j2l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # your code here\n    return iscube(a)\nend\n\"\"\"\n    Write a function\
    \ that takes an integer a and returns True \n    if this ingeger is a perfect\
    \ square.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    issquare(1) ==> True\n    issquare(2) ==> False\n    issquare(-1) ==> True\n\
    \    issquare(64) ==> True\n    issquare(0) ==> True\n    issquare(180) ==> False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmprcipjqfi.jl:17\nin expression starting at /tmp/tmprcipjqfi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return sqrt(a) % 1 == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuka6y5n4.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpuka6y5n4.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpuka6y5n4.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpuka6y5n4.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpuka6y5n4.jl:26\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a^(1/3) % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxl4903tz.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpxl4903tz.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpxl4903tz.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpxl4903tz.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpxl4903tz.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxl4903tz.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxl4903tz.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmpxl4903tz.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxl4903tz.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxl4903tz.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    # Your code here\n    return a == 0 ? true : a >= 0 ? isinteger(cbrt(a))\
    \ : isinteger(cbrt(-a))\nend\n \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        return iscube(-a)\n    end\n    for i = 0:floor(sqrt(a))\n\
    \        if i^3 == a\n            return true\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return floor(Int64,(abs(a))^(1/3))^3 == abs(a)\nend\n \n \n \n \n\"\"\"\
    \n    Write a function that takes an integer a and returns True \n    if this\
    \ ingeger is a power of some integer number.\n    Note: you may assume the input\
    \ is always valid.\n    Examples:\n    ispower(1) ==> True\n    ispower(2) ==>\
    \ True\n    ispower(-1) ==> True\n    ispower(64) ==> True\n    ispower(0) ==>\
    \ True\n    ispower(180) ==> False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdgiioxgp.jl:20\nin expression starting at /tmp/tmpdgiioxgp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    sqrt_a = ceil(Int64, sqrt(abs(a)))\n    return sqrt_a * sqrt_a * sqrt_a\
    \ == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpe0r66dfg.jl:24\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe0r66dfg.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0r66dfg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0r66dfg.jl:25\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0r66dfg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0r66dfg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe0r66dfg.jl:27\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe0r66dfg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe0r66dfg.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0r66dfg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n  if (ceil(a^(1/3)) == floor(a^(1/3)))\n    return true\n  else\n    return\
    \ false\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4_5putmm.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp4_5putmm.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp4_5putmm.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp4_5putmm.jl:24\\ntest set:\
    \ Test Failed at /tmp/tmp4_5putmm.jl:28\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    if (a==1)||(a==0)||(a==-1)\n        return true\n    elseif a>0\n\
    \        for i in 1:a\n            if i^3==a\n                return true\n  \
    \          end\n        end\n        return false\n    else\n        for i in\
    \ -1:-1:a\n            if i^3==a\n                return true\n            end\n\
    \        end\n        return false\n    end\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # type your solution here\n    if a == 0 \n        return true\n    else\n\
    \        return a > 0 && a == floor(a^(1/3))^3\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe6f5wby0.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe6f5wby0.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6f5wby0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe6f5wby0.jl:29\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6f5wby0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6f5wby0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe6f5wby0.jl:31\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6f5wby0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6f5wby0.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6f5wby0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    b=floor(Int64,a^(1/3))\n    c=b^3\n    if c==a\n        return true\n\
    \    else \n        return false\n    end\nend\n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsgrfald7.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpsgrfald7.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpsgrfald7.jl:30 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpsgrfald7.jl:27\\ntest set:\
    \ Test Failed at /tmp/tmpsgrfald7.jl:31\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    (a >= 0 && isqrt(a)^3 == a) || (a < 0 && isqrt(-a)^3 == -a)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpevg9f0if.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpevg9f0if.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpevg9f0if.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpevg9f0if.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpevg9f0if.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpevg9f0if.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevg9f0if.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a>0\n        return true == isapprox(a,round(cbrt(a)))\n    else\n\
    \        return true == isapprox(a,round(-cbrt(-a)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv69q9wya.jl:28\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv69q9wya.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv69q9wya.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpv69q9wya.jl:30\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv69q9wya.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv69q9wya.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv69q9wya.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a == 0 && return true\n    a < 0 && (a = -a)\n    i = Int64(ceil(Int64,\
    \ a^(1/3)))\n    i * i * i == a\nend\n@assert iscube(1) == true\n@assert iscube(2)\
    \ == false\n@assert iscube(-1) == true\n@assert iscube(64) == true\n@assert iscube(0)\
    \ == true\n@assert iscube(180) == false\n@assert iscube(125) == true\n@assert\
    \ iscube(125) == true\n@assert iscube(126) == false\n@assert iscube(852) == false\n\
    @assert iscube(1331) == true\n@assert iscube(1572864) == true\n@assert iscube(3697104)\
    \ == false\n@assert iscube(31471808) == false\n@assert iscube(274049254) == true\n\
    @assert iscube(1000000000000000000) == true\n@assert iscube(1000000000000000001)\
    \ == false\n@assert iscube(31471808) == false\n@assert iscube(274049254) == true\n\
    @assert iscube(1000000000000000000) == true\n@assert iscube(1000000000000000001)\
    \ == false\n@assert iscube(6376277949488) == true\n@assert iscube(1757898431807938)\
    \ == true\n@assert iscube(68719476736) == true\n@assert iscube(68719476737) ==\
    \ false\n@assert iscube(5817772874368) == true\n@assert iscube(86736173798840)\
    \ == true\n@assert iscube(80000000000) == true\n@assert iscube(80000000001) ==\
    \ false\n@assert iscube(2684354560000000000) == true\n@assert iscube(2684354560000000001)\
    \ == false\n@assert iscube(659312002055352320) == true\n@assert iscube(659312002055352321)\
    \ == false\n@assert iscube(174110950581856988) == true\n@assert iscube(174110950581856989)\
    \ == false\n@assert iscube(3909820704224\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: iscube(1572864) == true\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7lnrtga.jl:30\nin expression starting at\
    \ /tmp/tmpx7lnrtga.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a >= 0 && sqrt(a) == Int(sqrt(a))) || \n        (a < 0 && sqrt(-a)\
    \ == Int(sqrt(-a)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1h6osevh.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  InexactError: Int64(1.4142135623730951)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp1h6osevh.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1h6osevh.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1h6osevh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1h6osevh.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(180) == false\\n  InexactError: Int64(13.416407864998739)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp1h6osevh.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1h6osevh.jl:26 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1h6osevh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1h6osevh.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(1000) == true\\n  InexactError: Int64(31.622776601683793)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp1h6osevh.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp1h6osevh.jl:27 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp1h6osevh.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp1h6osevh.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(1729) == false\\n  InexactError: Int64(41"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == (a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpksfvl6fl.jl:22\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpksfvl6fl.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpksfvl6fl.jl:20\\ntest set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    res = false \n    if a == 0 || a == 1 || a == -1\n        res = true\n\
    \    elseif a < 0\n        res = iscube(-a)\n    elseif round(Int64, a^(1/3))^3\
    \ == a\n        res = true\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a > 0 ? abs(cbrt(a)) == Int(cbrt(a)) : (a == 0 ? true : false)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptad61fse.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  InexactError: Int64(1.2599210498948732)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\\
    n     @ Main /tmp/tmptad61fse.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmptad61fse.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptad61fse.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmptad61fse.jl:23\\n  Expression: candidate(-1) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    cubeRoot(a)%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1qkuludo.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: cubeRoot not\
    \ defined\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp1qkuludo.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1qkuludo.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1qkuludo.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1qkuludo.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: cubeRoot not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp1qkuludo.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1qkuludo.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1qkuludo.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1qkuludo.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: cubeRoot not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp1qkuludo.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1qkuludo.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1qkuludo.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1qkuludo.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: cubeRoot not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp1qkuludo.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    c = round(cbrt(a))\n    c ^ 3 == a ? True : False\nend\n@assert iscube(1)\
    \ == true\n@assert iscube(2) == false\n@assert iscube(-1) == true\n@assert iscube(64)\
    \ == true\n@assert iscube(0) == true\n@assert iscube(180) == false\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: True not defined\nStacktrace:\n [1] iscube(a::Int64)\n\
    \   @ Main /tmp/tmpp3kcx__q.jl:15\n [2] top-level scope\n   @ /tmp/tmpp3kcx__q.jl:17\n\
    in expression starting at /tmp/tmpp3kcx__q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    x=sqrt(a)\n    if x^3==a\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyrvid4xh.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpyrvid4xh.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpyrvid4xh.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpyrvid4xh.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpyrvid4xh.jl:29\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyrvid4xh.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyrvid4xh.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpyrvid4xh.jl:31\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpyrvid4xh.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpyrvid4xh.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        a = -a\n    end\n    for i = 1:a\n        if i*i*i ==\
    \ a\n            return true\n        end\n    end\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclikepln.jl:35\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpclikepln.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclikepln.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclikepln.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        a = -a\n    end\n    i = floor(a^(1/3))\n    return\
    \ isequal(a, i^3)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4vp4u9k.jl:28\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj4vp4u9k.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4vp4u9k.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpj4vp4u9k.jl:30\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4vp4u9k.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4vp4u9k.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4vp4u9k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        a = -a\n    end\n    if a == 0\n        return true\n\
    \    end\n    return a == round(a^(1/3))^3\nend\nfor i in [-10:10]\n    println(iscube(i))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    b = abs(a)\n    while b > 1\n        if b % 3 != 0\n            return\
    \ false\n        end\n        b /= 3\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp773dfjv5.jl:31\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp773dfjv5.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp773dfjv5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp773dfjv5.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp773dfjv5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp773dfjv5.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp773dfjv5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    isinteger(round(a^(1/3)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9jq703qd.jl:22\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp9jq703qd.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp9jq703qd.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    elseif a<0\n        a = -a\n    end\n\
    \    for x in 1:a/2\n        if x^3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsoqpyzr.jl:31\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppsoqpyzr.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsoqpyzr.jl:30\ntest set: Test\
    \ Failed at /tmp/tmppsoqpyzr.jl:33\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsoqpyzr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsoqpyzr.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsoqpyzr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a==0 || (a>0 && abs(Int64(round(a^(1/3)))^3-a)<1e-10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyy5e198o.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyy5e198o.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyy5e198o.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyy5e198o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == round(Int64, a^(1/3))^3 \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9z6u79me.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp9z6u79me.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9z6u79me.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9z6u79me.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9z6u79me.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 \n        return true\n    end\n    if a > 0 \n  \
    \      return (floor(Int64, a^(1/3)))^3 == a\n    else \n        return (floor(Int64,\
    \ -a^(1/3)))^3 == a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc1b68ei3.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpc1b68ei3.jl:20\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpc1b68ei3.jl:30 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpc1b68ei3.jl:27\\ntest set:\
    \ Test Failed at /tmp/tmpc1b68ei3.jl:31\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_dt2xcy_.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt2xcy_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt2xcy_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_dt2xcy_.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt2xcy_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt2xcy_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_dt2xcy_.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dt2xcy_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dt2xcy_.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_dt2xcy_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #b is a variable to check if a is a cube of some number\n    #We have\
    \ chosen to use a cube of 2, as we know all integer inputs will be valid.\n  \
    \  b = 2^3\n    if a == b \n        return true\n    else \n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1h63d8fc.jl:28\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1h63d8fc.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h63d8fc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1h63d8fc.jl:30\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h63d8fc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h63d8fc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1h63d8fc.jl:31\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h63d8fc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h63d8fc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1h63d8fc.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h63d8fc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h63d8fc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1h63d8fc.jl:34\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1h63d8fc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0\n        return\
    \ true\n    end\n    left = 0\n    right = a\n    while left + 1 < right\n   \
    \     mid = (left + right) / 2\n        if mid^3 > a\n            right = mid\n\
    \        else\n            left = mid\n        end\n    end\n    return left^3\
    \ == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxx_zh8et.jl:37\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxx_zh8et.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxx_zh8et.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxx_zh8et.jl:39\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxx_zh8et.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxx_zh8et.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxx_zh8et.jl:42\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxx_zh8et.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxx_zh8et.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxx_zh8et.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a < 0 && iseven(a)) || (a > 0 && iscuberoot(a))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj_szex71.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: iscuberoot\
    \ not defined\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpj_szex71.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj_szex71.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj_szex71.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpj_szex71.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: iscuberoot not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpj_szex71.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj_szex71.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj_szex71.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpj_szex71.jl:23\\n  Expression: candidate(-1) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if isqrt(a) == true && a >= 0\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8db1xlgx.jl:26\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8db1xlgx.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8db1xlgx.jl:24\\ntest set: Error\
    \ During Test at /tmp/tmp8db1xlgx.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isqrt(abs(a))^3 == abs(a)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr9y88y_4.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr9y88y_4.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9y88y_4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpr9y88y_4.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9y88y_4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9y88y_4.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9y88y_4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a in [x^3 for x in -100:100]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 0:a-1\n        if i^3 == a\n            return true\n       \
    \ end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqh_mp32w.jl:26\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqh_mp32w.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh_mp32w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh_mp32w.jl:28\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh_mp32w.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh_mp32w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqh_mp32w.jl:32\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqh_mp32w.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqh_mp32w.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh_mp32w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    (a>=0 && isequal(a,Int64(floor(a^(1/3)))) ) || \n    (a<0 && isequal(a,Int64(ceil(a^(1/3))))\
    \ )\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnl4j62z4.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpnl4j62z4.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpnl4j62z4.jl:25 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpnl4j62z4.jl:22\\ntest set:\
    \ Test Failed at /tmp/tmpnl4j62z4.jl:26\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    iscube = false\n    for i = 1:a\n        if i^3 == a\n            iscube\
    \ = true\n        end\n    end\n    return iscube\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfie03a71.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfie03a71.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfie03a71.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfie03a71.jl:33\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfie03a71.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfie03a71.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfie03a71.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isapprox(cbrt(a), round(cbrt(a)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n  if a == 0 || a == 1 || a == -1\n    return true\n  end\n  if a < 0\n   \
    \ a = -a\n  end\n  for i in 2:floor(Int64, sqrt(a))\n    if i*i*i == a\n     \
    \ return true\n    end\n  end\n  return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return iscube(a)\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return int(round(a^(1/3)))^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzjpxc9i8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: int not defined\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpzjpxc9i8.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzjpxc9i8.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzjpxc9i8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzjpxc9i8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: int not defined\\n  Stacktrace:\\n\
    \   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpzjpxc9i8.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpzjpxc9i8.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzjpxc9i8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzjpxc9i8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  DomainError with -1.0:\\n  Exponentiation yielding\
    \ a complex result requires a complex argument.\\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpzjpxc9i8.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpzjpxc9i8.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpzjpxc9i8.jl:20\\ntest set:\
    \ Error During Test at /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return ((a^(1/3))%1 == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj3ep38ee.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpj3ep38ee.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpj3ep38ee.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpj3ep38ee.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpj3ep38ee.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a>0 return isprime(sqrt(a)*round(sqrt(a)))\n    else return isprime(abs(sqrt(a)*round(sqrt(a))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppxh4zhyj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxh4zhyj.jl:1\n\
    in expression starting at /tmp/tmppxh4zhyj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1\n        return true\n    end\n    if a < 0\n    \
    \    a = -a\n    end\n    for i in range(1, a+1)\n        if i^3 == a\n      \
    \      return true\n        end\n    end\n    return false\nend\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isinteger(abs(a)^(1/3))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2et82xjp.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2et82xjp.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2et82xjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2et82xjp.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2et82xjp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2et82xjp.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2et82xjp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    x = Int64(floor(a^(1/3)))\n    return a == x^3\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuogpo94d.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpuogpo94d.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpuogpo94d.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpuogpo94d.jl:21\\ntest set:\
    \ Test Failed at /tmp/tmpuogpo94d.jl:25\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return ((a>=0) & (a%(round(Int64,Int64(cbrt(a)))) == 0))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpycsr2778.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  InexactError: Int64(1.2599210498948732)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpycsr2778.jl:14\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpycsr2778.jl:22 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpycsr2778.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpycsr2778.jl:23\\n  Expression: candidate(-1) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # Function body...\nend\n\"\"\"\n    Write a function that takes a string\
    \ s and returns this string with its letters \n    in reverse order. It is guaranteed\
    \ that input string is a valid English word.\n    Examples:\n    reverse(\"abc\"\
    ) ==> \"cba\"\n    reverse(\"abcdef\") ==> \"fedcba\"\n    reverse(\"ABC\") ==>\
    \ \"CBA\"\n    reverse(\"AaBbCc\") ==> \"cCbBaA\"\n    reverse(\"Hello World\"\
    ) ==> \"dlroW olleH\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpam7dpzob.jl:16\nin expression starting at /tmp/tmpam7dpzob.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n     a >= 0 ? isequal(a,round(cbrt(a))) : isequal(a,round(cbrt(-a)))\nend\n\
    # Test.assert_equals(iscube(1), true, \"1 is a cube\")\n# Test.assert_equals(iscube(2),\
    \ false, \"2 is not a cube\")\n# Test.assert_equals(iscube(-1), true, \"-1 is\
    \ a cube\")\n# Test.assert_equals(iscube(64), true, \"64 is a cube\")\n# Test.assert_equals(iscube(0),\
    \ true, \"0 is a cube\")\n# Test.assert_equals(iscube(180), false, \"180 is not\
    \ a cube\")\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp78lpahwl.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp78lpahwl.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78lpahwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp78lpahwl.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78lpahwl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78lpahwl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp78lpahwl.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78lpahwl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78lpahwl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78lpahwl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    tmp = sqrt(a)\n    return tmp == convert(Int64, tmp)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6boj0bh4.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  InexactError: Int64(1.4142135623730951)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] convert\\\
    n     @ ./number.jl:7 [inlined]\\n   [3] iscube(a::Int64)\\n     @ Main /tmp/tmp6boj0bh4.jl:15\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmp6boj0bh4.jl:23 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp6boj0bh4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6boj0bh4.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  DomainError with -1.0:\\n  sqrt will only return a\
    \ complex result if called with a complex argument. Try sqrt(Complex(x)).\\n \
    \ Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\\n   \
    \  @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567 [inlined]\\n\
    \   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\n  \
    \   @ Main /tmp/tmp6boj0bh4.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp6boj0bh4.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6boj0bh4.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6boj0bh4.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(180) == false\\n  InexactError: Int64(13.416407864998739)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] convert\\n     @ ./number.jl:7\
    \ [inlined]\\n   [3] iscube(a::Int64)\\n     @ Main /tmp/tmp6boj0bh4.jl:15\\n\
    \   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmp6boj0bh4.jl:26 [inlined]\\\
    n   [6]"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #check the input\n    if a == 0 return true\n    if a<0 return true\n\
    \    if a<1 return false\n    #initialize the checker value\n    i = 1\n    #check\
    \ if the cube is equal to the given number\n    while i^3<a\n        i+=1\n  \
    \  end\n    #return the result\n    return i^3 == a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tk0uhf1.jl:1\nin expression starting at /tmp/tmp3tk0uhf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a >= 0 ? isequal(a, round(a^(1/3))) : false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqj2zhz8.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiqj2zhz8.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqj2zhz8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpiqj2zhz8.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqj2zhz8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqj2zhz8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpiqj2zhz8.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiqj2zhz8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiqj2zhz8.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqj2zhz8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return iscube(big(a))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmputsk0qnz.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  MethodError: no method matching\
    \ iscube(::BigInt)\\n  Closest candidates are:\\n    iscube(!Matched::Int64) at\
    \ /tmp/tmputsk0qnz.jl:13\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main\
    \ /tmp/tmputsk0qnz.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmputsk0qnz.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmputsk0qnz.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmputsk0qnz.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  MethodError: no method matching iscube(::BigInt)\\\
    n  Closest candidates are:\\n    iscube(!Matched::Int64) at /tmp/tmputsk0qnz.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmputsk0qnz.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmputsk0qnz.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmputsk0qnz.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmputsk0qnz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  MethodError: no method matching iscube(::BigInt)\\\
    n  Closest candidates are:\\n    iscube(!Matched::Int64) at /tmp/tmputsk0qnz.jl:13\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmputsk0qnz.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmputsk0qnz.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmputsk0qnz.jl:20\\ntest set:\
    \ Error "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    i = a\n    while (i>=0) \n        if i*i*i == a\n            return true\n\
    \        end\n        i -= 1\n    end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpur__3alk.jl:30\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpur__3alk.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpur__3alk.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpur__3alk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a<0\n        return iscube(-a)\n    end\n    x = ceil(Int64, a^(1/3))\n\
    \    return x^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a%3 == 0) && (abs(a)%9 == 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprekgi_fl.jl:21\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprekgi_fl.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprekgi_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprekgi_fl.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprekgi_fl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprekgi_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprekgi_fl.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprekgi_fl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprekgi_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprekgi_fl.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprekgi_fl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprekgi_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmprekgi_fl.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprekgi_fl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 1:a\n        if a == i^3\n            return true\n        end\n\
    \    end\n    return false\nend\n@testset \"iscube\" begin\n    @test iscube(1)\
    \ == true\n    @test iscube(2) == false\n    @test iscube(-1) == true\n    @test\
    \ iscube(64) == true\n    @test iscube(0) == true\n    @test iscube(180) == false\n\
    end;\n \n\"\"\"\n    Write a function that takes an integer and returns a string,\
    \ \n    where there are two numbers separated by a space that when multiplied\n\
    \    together, they equal to this integer.\n    Examples:\n    get_factors(18)\
    \ ==> \"2 9\"\n    get_factors(60) ==> \"1 60\"\n    get_factors(36) ==> \"1 36\"\
    \n    get_factors(7) ==> \"1 7\"\n    get_factors(12) ==> \"1 12\"\n    get_factors(35)\
    \ ==> \"5 7\"\n    get_factors(100) ==> \"1 100\"\n    get_factors(22) ==> \"\
    1 22\"\n    get_factors(17) ==> \"1 17\"\n    get_factors(49) ==> \"1 49\"\n \
    \   get_factors(8) ==> \"1 8\"\n    get_factors(19) ==> \"1 19\"\n    get_factors(77)\
    \ ==> \"1 77\"\n    get_factors(24) ==> \"1 24\"\n    get_factors(60) ==> \"1\
    \ 60\"\n    get_factors(90) ==> \"1 90\"\n    get_factors(54) ==> \"1 54\"\n \
    \   get_factors(32) ==> \"1 32\"\n    get_factors(10) ==> \"1 10\"\n    get_factors(15)\
    \ ==> \"1 15\"\n    get_factors(83) ==> \"1 83\"\n    get_factors(9) ==> \"1 9\"\
    \n    get_factors(11) ==> \"1 11\"\n    get_factors(96) ==\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpn70zh2tq.jl:21\nin expression starting at /tmp/tmpn70zh2tq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n     return a in [0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728,\
    \ 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261]\nend\n \nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvj78aux7.jl:24\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvj78aux7.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvj78aux7.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvj78aux7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    tmp = round(Int64,round(sqrt(a)))\n    return a==tmp^3 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpevlgw1su.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpevlgw1su.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpevlgw1su.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpevlgw1su.jl:21\\ntest set:\
    \ Test Failed at /tmp/tmpevlgw1su.jl:25\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n  if a == 0 return true end\n  if a < 0 return iscube(-a) end\n  i = ceil(Int64,\
    \ log(a)/log(3))\n  return i^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6zh8v_c9.jl:24\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6zh8v_c9.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6zh8v_c9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6zh8v_c9.jl:26\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6zh8v_c9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6zh8v_c9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6zh8v_c9.jl:29\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6zh8v_c9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6zh8v_c9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zh8v_c9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #a=input(\"Enter integer number: \")\n    if a == 0\n        return true\n\
    \    elseif a < 0\n        return iscube(-a)\n    else\n        c = a\n      \
    \  while (c^3 > a)\n            c -= 1\n        end\n        return c^3 == a\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # your code here\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp__3j6xxi.jl:22\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp__3j6xxi.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp__3j6xxi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp__3j6xxi.jl:24\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp__3j6xxi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp__3j6xxi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp__3j6xxi.jl:25\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp__3j6xxi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp__3j6xxi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp__3j6xxi.jl:27\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp__3j6xxi.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp__3j6xxi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp__3j6xxi.jl:28\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__3j6xxi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1 \n        return true\n    end\n    if\
    \ a < 0\n        a = -a\n    end\n    b = floor(a^(1/3))\n    return a == b^3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqt7ydm4f.jl:31\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqt7ydm4f.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt7ydm4f.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpqt7ydm4f.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt7ydm4f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt7ydm4f.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqt7ydm4f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    else\n        for i in 1:a\n     \
    \       if i*i*i == a\n                return true\n            end\n        end\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplfpe4cc3.jl:32\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplfpe4cc3.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplfpe4cc3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplfpe4cc3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    c = floor(a^(1/3))\n    if a == c^3\n        return true\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3ko3shcp.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp3ko3shcp.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp3ko3shcp.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp3ko3shcp.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmp3ko3shcp.jl:29\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a > 0\n        return a^(1/3) == round(a^(1/3))\n    elseif a == 0\n\
    \        return true\n    else\n        return (-a)^(1/3) == round((-a)^(1/3))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjqv54pox.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjqv54pox.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqv54pox.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjqv54pox.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqv54pox.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqv54pox.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqv54pox.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return iseven(sqrt(a))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1vcj9y6w.jl:21\\n  Expression: candidate(1)\
    \ == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1vcj9y6w.jl:21 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1vcj9y6w.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a == 0) || (a == 1) || (a == -1) || (abs(a) % 3 == 0)\nend\niscube(1)\
    \ ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0)\
    \ ==> True\niscube(180) ==> False\nusing Test\n\n@testset begin\n\ncandidate =\
    \ iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71dpo_kh.jl:16\nin expression starting at\
    \ /tmp/tmp71dpo_kh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    if a == 0 \n       \
    \ return true\n    end\n    i = 1\n    while i < a\n        if i * i * i == a\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg76p_861.jl:34\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg76p_861.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg76p_861.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg76p_861.jl:36\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg76p_861.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg76p_861.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg76p_861.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return floor(a^(1/3)) == a^(1/3)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn3xkppcu.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmpn3xkppcu.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpn3xkppcu.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpn3xkppcu.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpn3xkppcu.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        a = -a\n    end\n    x = floor(Int64,cbrt(a))\n    return\
    \ x*x*x == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    c = 0\n    for i in 0:a\n        if i^3 == a\n            c = 1\n    \
    \    end\n    end\n    if c == 1\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkz8mu85c.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkz8mu85c.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz8mu85c.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkz8mu85c.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # put your answer here.\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqrp2azby.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpqrp2azby.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqrp2azby.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqrp2azby.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a>0\n        return sqrt(a) == round(sqrt(a))\n    else\n        return\
    \ false\n    end\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3mudcol8.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3mudcol8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mudcol8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3mudcol8.jl:31\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mudcol8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mudcol8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3mudcol8.jl:32\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mudcol8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mudcol8.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mudcol8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a >= 0 && isinteger(a^(1/3))) || (a < 0 && isinteger(a^(1/3))\
    \ && iseven(a^(1/3)))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2_73ylde.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp2_73ylde.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp2_73ylde.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp2_73ylde.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp2_73ylde.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp2_73ylde.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp2_73ylde.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmp2_73ylde.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1\n        return true\n    end\n    if a < 0\n    \
    \    a = -a\n    end\n    i = 1\n    while i^3 < a\n        i += 1\n    end\n\
    \    if i^3 == a\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a == 0 && return true\n    return abs(a) == Int64(round(Int64(a)^(1/3)))^3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp5z0hupwd.jl:24\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp5z0hupwd.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp5z0hupwd.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp5z0hupwd.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5z0hupwd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (round(abs(a)^(1/3))^3 == abs(a))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return Int64(round(a^(1/3))) == a^(1/3)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6l6pnaco.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp6l6pnaco.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp6l6pnaco.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6l6pnaco.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp6l6pnaco.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1\n        return true\n    end\n    if a == -1\n  \
    \      return true\n    end\n    if a == 2 || a == 3\n        return false\n \
    \   end\n    if a > 0\n        for i in 1:floor(Int,sqrt(a))\n            if i^3\
    \ == a\n                return true\n            end\n        end\n    else\n\
    \        for i in 1:floor(Int,sqrt(abs(a)))\n            if i^3 == abs(a)\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # code here\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph9pl1a0b.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a>=0 && floor(Int64,(a)^(1/3)) == (a)^(1/3))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgn8aap5a.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgn8aap5a.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn8aap5a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgn8aap5a.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn8aap5a.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn8aap5a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgn8aap5a.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgn8aap5a.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgn8aap5a.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgn8aap5a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        k = 1\n    else \n        k = 0\n    end\n    for i\
    \ in k:a\n        if i^3 == a\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjr88bjhl.jl:33\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjr88bjhl.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjr88bjhl.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr88bjhl.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 1:sqrt(a)\n        if i^3 == a\n            return true\n   \
    \     end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpioh3zltb.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpioh3zltb.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpioh3zltb.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpioh3zltb.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpioh3zltb.jl:32\\n  Expression: candidate(0) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return is_square(round(Int64,cbrt(a)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0dee0f3k.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: is_square\
    \ not defined\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp0dee0f3k.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0dee0f3k.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0dee0f3k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0dee0f3k.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: is_square not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp0dee0f3k.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0dee0f3k.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0dee0f3k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0dee0f3k.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: is_square not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp0dee0f3k.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0dee0f3k.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0dee0f3k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0dee0f3k.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: is_square not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmp0dee0f3k.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/j"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a > 0\n        return a == Int64(round(a^(1/3)))^3\n    else\n    \
    \    return a == Int64(round(abs(a)^(1/3)))^3\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2q5a0_ig.jl:27\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2q5a0_ig.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2q5a0_ig.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2q5a0_ig.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    else\n        return a % abs(Int64(a^(1/3)))\
    \ == 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplicvyp8h.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == false\\n  InexactError: Int64(1.2599210498948732)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\\
    n     @ Main /tmp/tmplicvyp8h.jl:17\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplicvyp8h.jl:26 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmplicvyp8h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmplicvyp8h.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  DomainError with -1.0:\\n  Exponentiation yielding\
    \ a complex result requires a complex argument.\\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmplicvyp8h.jl:17\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmplicvyp8h.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmplicvyp8h.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmplicvyp8h.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  InexactError: Int64(3.9999999999999996)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmplicvyp8h.jl:17\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmplicvyp8h.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/sr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a > 0\n        return  false\n    elseif a == 0\n        return true\n\
    \    else\n        return floor(cbrt(a)) == ceil(cbrt(a))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsh0_29q.jl:27\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnsh0_29q.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsh0_29q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnsh0_29q.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsh0_29q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsh0_29q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpnsh0_29q.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsh0_29q.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsh0_29q.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsh0_29q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0\n        if a^(1/3) % 1 == 0\n            return true\n    \
    \    else\n            return false\n        end\n    else\n        a = abs(a)\n\
    \        if a^(1/3) % 1 == 0\n            return true\n        else\n        \
    \    return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuvcjzlrd.jl:37\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuvcjzlrd.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvcjzlrd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpuvcjzlrd.jl:39\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuvcjzlrd.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuvcjzlrd.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvcjzlrd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 \n        a = -a\n    end\n    if sqrt(a) % 1 == 0\n        #print(a,\"\
    \ is a cube\")\n        return true\n    else\n        #print(a,\" is not a cube\"\
    )\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4hnofq4w.jl:35\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4hnofq4w.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4hnofq4w.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hnofq4w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    x = sqrt(a)\n    return x % 1 == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcebnf8lo.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpcebnf8lo.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpcebnf8lo.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpcebnf8lo.jl:21\\ntest set:\
    \ Test Failed at /tmp/tmpcebnf8lo.jl:27\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a % sqrt(a) == 0) && isinteger(sqrt(a))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjle0by6w.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmpjle0by6w.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpjle0by6w.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpjle0by6w.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpjle0by6w.jl:26\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return ispower(a, 3)\nend\n\"\"\"\n    Write a function that takes an\
    \ integer a and returns True \n    if this ingeger is a square of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    issquare(1) ==> True\n    issquare(2) ==> False\n    issquare(-1) ==> True\n\
    \    issquare(64) ==> True\n    issquare(0) ==> True\n    issquare(180) ==> False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3ac2rhos.jl:16\nin expression starting at /tmp/tmp3ac2rhos.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #*Your code here\nend\n\"\"\"\nWrite a function that takes a matrix (array\
    \ of arrays) a and returns the sum of each column \nNote: you may assume the input\
    \ is always valid.\nExamples:\nmatrix_sum_column([[1, 2, 3], [1, 1, 1], [0, 0,\
    \ 0]]) ==> [2, 4, 6]\nmatrix_sum_column([[1], [2], [3]]) ==> [6]\nmatrix_sum_column([[1,\
    \ 2], [3, 4], [5, 6]]) ==> [9, 12]\nmatrix_sum_column([[1, 1], [1, 1], [1, 1]])\
    \ ==> [3, 3]\nmatrix_sum_column([[-10, 1], [4, 6], [8, 9]]) ==> [-6, 16]\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp93v8kjoh.jl:16\nin expression starting at /tmp/tmp93v8kjoh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    @assert a != 0\n    b = floor(cbrt(a))\n    if b*b*b == a \n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hgp30q7.jl:33\n  Test threw exception\n\
    \  Expression: candidate(0) == true\n  AssertionError: a != 0\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmp8hgp30q7.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8hgp30q7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8hgp30q7.jl:26\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hgp30q7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (floor(Int64, round(cbrt(a), digits=5)) == round(cbrt(a), digits=5))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isqrt(a)^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv7b9hgx_.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] isqrt(x::Int64)\\\
    n     @ Base ./intfuncs.jl:944\\n   [5] iscube(a::Int64)\\n     @ Main /tmp/tmpv7b9hgx_.jl:14\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpv7b9hgx_.jl:23 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpv7b9hgx_.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmpv7b9hgx_.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # Your code here\n    return (sqrt(a)%1==0)&&(sqrt(a)>0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9kwv8gnh.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp9kwv8gnh.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp9kwv8gnh.jl:24 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp9kwv8gnh.jl:21\\ntest set:\
    \ Test Failed at /tmp/tmp9kwv8gnh.jl:27\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return round(Int64, a^(1/3))^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp86jurndv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp86jurndv.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp86jurndv.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp86jurndv.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp86jurndv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    b = a \n    return (b > 0) && (b % 2 == 0) && (b % 3 == 0) && (b % 5 ==\
    \ 0) && (b % 6 == 0) && (b % 7 == 0) && (b % 10 == 0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt9_ivtt9.jl:22\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt9_ivtt9.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9_ivtt9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt9_ivtt9.jl:24\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9_ivtt9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9_ivtt9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt9_ivtt9.jl:25\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9_ivtt9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9_ivtt9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt9_ivtt9.jl:27\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9_ivtt9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9_ivtt9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpt9_ivtt9.jl:28\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9_ivtt9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 return true end\n    if a < 0 return false end\n    return trunc(Int64,\
    \ a^(1/3))^3 == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpok7f0o_v.jl:25\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpok7f0o_v.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpok7f0o_v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpok7f0o_v.jl:26\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpok7f0o_v.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpok7f0o_v.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpok7f0o_v.jl:28\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpok7f0o_v.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpok7f0o_v.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpok7f0o_v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n  return a == 0 || a == 1 || (a < 0 && iscube(-a)) || a == round(Int64, sqrt(a))^3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp946f3b35.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp946f3b35.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp946f3b35.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp946f3b35.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp946f3b35.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp946f3b35.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp946f3b35.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return isequal(round(a^(1/3)), a^(1/3))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp94uvpyfr.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp94uvpyfr.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp94uvpyfr.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp94uvpyfr.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp94uvpyfr.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a > 0\n        return isperfectcube(a)\n    elseif a == 0\n       \
    \ return true\n    else\n        return isperfectcube(-a)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgbdgjl67.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: isperfectcube\
    \ not defined\\n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgbdgjl67.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbdgjl67.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbdgjl67.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgbdgjl67.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: isperfectcube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgbdgjl67.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbdgjl67.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbdgjl67.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgbdgjl67.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: isperfectcube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgbdgjl67.jl:19\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgbdgjl67.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgbdgjl67.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgbdgjl67.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: isperfectcube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpgbdgjl67.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/jul"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 0:1000\n        if a == i^3\n            return true\n      \
    \  end\n    end\n    return false\nend\niscube(1) ==> true\niscube(2) ==> false\n\
    iscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==>\
    \ false\n \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahpyg2br.jl:21\nin expression starting at\
    \ /tmp/tmpahpyg2br.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    n = abs(a)\n    for i in 0:1000\n        if i*i*i == n\n            return\
    \ true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    iscube = sqrt(a) % 1 == 0 \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6vkxg1dr.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp6vkxg1dr.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp6vkxg1dr.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6vkxg1dr.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp6vkxg1dr.jl:26\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n  return a == (round(cbrt(a)))^3\nend\n@testset \"Testing for iscube...\"\
    \ begin\n    @test iscube(1) == true\n    @test iscube(2) == false\n    @test\
    \ iscube(-1) == true\n    @test iscube(64) == true\n    @test iscube(0) == true\n\
    \    @test iscube(180) == false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp8b9uzomo.jl:16\nin expression starting at /tmp/tmp8b9uzomo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 1 || a == 0 || a == -1\n        return true\n    elseif a < 0\n\
    \        return iscube(-a)\n    else\n        return Base.isinteger(a^(1/3))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc7mqblki.jl:30\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc7mqblki.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc7mqblki.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc7mqblki.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc7mqblki.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc7mqblki.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7mqblki.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # x::Int64 = sqrt(a)\n    # return x::Int64 - x::Float64 == 0\n    return\
    \ a::Int64 == a::Float64^3\nend\n@test iscube(1) == true\n@test iscube(2) == false\n\
    @test iscube(-1) == true\n@test iscube(64) == true\n@test iscube(0) == true\n\
    @test iscube(180) == false\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpip53fzh6.jl:18\nin expression starting at /tmp/tmpip53fzh6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a<0\n        return true\n    end\n    for i in 1:sqrt(a)\n       \
    \ if i^3 == a\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphsnhqsly.jl:35\n  Expression: candidate(0)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphsnhqsly.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphsnhqsly.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphsnhqsly.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ < 0\n        a = abs(a)\n    end\n    for i in 1:a\n        if i^3 == a\n  \
    \          return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a &gt;= 0 &amp;&amp; (a &amp; 0x7f == 0 ? a == 0 : iscube(a, 1))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpttz5wuje.jl:14\nin expression starting at /tmp/tmpttz5wuje.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n     return (signbit(a) ? a == -1 : a == 1) || a % 3 == 0 && iscube(a / 3)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8ju4c72_.jl:24\\n  Expression: candidate(64)\
    \ == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8ju4c72_.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8ju4c72_.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return typeof(a)==Int64\n    ?a==floor(a)\n    ?a>=0\n    ?issqrt(a)\n\
    \    ?issqrt(a/8)\n    :false\n    :false\n    :false\n    :false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"?\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb5bakv5.jl:15\nin expression starting at\
    \ /tmp/tmpvb5bakv5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0 \n        return a==round(a^(1/3))^3\n    else \n        return\
    \ a==round(a^(1/3))^3 && a^(1/3)%2 == -1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx5fo12ui.jl:27\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpx5fo12ui.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx5fo12ui.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx5fo12ui.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx5fo12ui.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a % 3 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplposef9i.jl:21\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplposef9i.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplposef9i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplposef9i.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplposef9i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplposef9i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplposef9i.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplposef9i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplposef9i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplposef9i.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplposef9i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplposef9i.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplposef9i.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplposef9i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 || a == 1 || any(x->x*x*x == a, -round(sqrt(abs(a))):round(sqrt(abs(a))))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return true\n    end\n    i = 0\n    while i*i*i <=\
    \ a\n        if i*i*i == a\n            return true\n        end\n        i +=\
    \ 1\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0 \n        return (sqrt(a) % 1) == 0\n    else \n        return\
    \ (sqrt(-a) % 1) == 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xuuiliz.jl:30\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0xuuiliz.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xuuiliz.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xuuiliz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    return a == 0 || (a < 0 && iscube(-a)) || a == sum([i^3 for i in\
    \ 1:ceil(Int, a^(1/3))])\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8glrcxz4.jl:25\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8glrcxz4.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8glrcxz4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8glrcxz4.jl:27\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8glrcxz4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8glrcxz4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8glrcxz4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    (a>=0) && (a^(1/3)%1==0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5qz8f6vf.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5qz8f6vf.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5qz8f6vf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5qz8f6vf.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5qz8f6vf.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5qz8f6vf.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5qz8f6vf.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5qz8f6vf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5qz8f6vf.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qz8f6vf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a^(1/3))%1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphd1bzpvw.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmphd1bzpvw.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmphd1bzpvw.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmphd1bzpvw.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmphd1bzpvw.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphd1bzpvw.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphd1bzpvw.jl:20\\ntest set: Test\
    \ Failed at /tmp/tmphd1bzpvw.jl:26\\n  Expression: candidate(1000) == true\\n\
    \   Evaluated: false == true\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmphd1bzpvw.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmphd1bzpvw.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # Integer square root of the input\n    s = sqrt(a)\n    # Check if it\
    \ is a perfect square\n    if s - floor(s) == 0\n        # If it is a perfect\
    \ square, check if it is a perfect cube\n        cub = (s^3 == a)\n    else\n\
    \        # If it is not a perfect square, it is not a perfect cube\n        cub\
    \ = false\n    end\n    return cub\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp72n9x786.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp72n9x786.jl:15\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp72n9x786.jl:33 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp72n9x786.jl:30\\ntest set:\
    \ Test Failed at /tmp/tmp72n9x786.jl:34\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    p::Int64 = floor(pow(abs(a), 1/3))\n    p*p*p == a\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpouu0nr8x.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: pow not defined\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpouu0nr8x.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpouu0nr8x.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpouu0nr8x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpouu0nr8x.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: pow not defined\\n  Stacktrace:\\n\
    \   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpouu0nr8x.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpouu0nr8x.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpouu0nr8x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpouu0nr8x.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: pow not defined\\n  Stacktrace:\\n\
    \   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpouu0nr8x.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpouu0nr8x.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpouu0nr8x.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpouu0nr8x.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: pow not defined\\n  Stacktrace:\\n\
    \   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpouu0nr8x.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/sr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return cube(Int64(floor(cbrt(a)))) == a ? true : false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyit2ynne.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(1) == true\\n  UndefVarError: cube not defined\\\
    n  Stacktrace:\\n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpyit2ynne.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyit2ynne.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyit2ynne.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyit2ynne.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(2) == false\\n  UndefVarError: cube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpyit2ynne.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyit2ynne.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyit2ynne.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyit2ynne.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(-1) == true\\n  UndefVarError: cube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpyit2ynne.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyit2ynne.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyit2ynne.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyit2ynne.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(64) == true\\n  UndefVarError: cube not defined\\n  Stacktrace:\\\
    n   [1] iscube(a::Int64)\\n     @ Main /tmp/tmpyit2ynne.jl:14\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == round(a^(1/3))^3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpstsq7m0j.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpstsq7m0j.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpstsq7m0j.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpstsq7m0j.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpstsq7m0j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return abs(a) == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmx1gxy0y.jl:22\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx1gxy0y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx1gxy0y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmx1gxy0y.jl:23\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx1gxy0y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx1gxy0y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmx1gxy0y.jl:25\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx1gxy0y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx1gxy0y.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmx1gxy0y.jl:28\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmx1gxy0y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmx1gxy0y.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmx1gxy0y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a^(1/3) % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp946zfawr.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  Exponentiation yielding a complex result requires a complex argument.\\n  Replace\
    \ x^y with (x+0im)^y, Complex(x)^y, or similar.\\n  Stacktrace:\\n   [1] throw_exp_domainerror(x::Float64)\\\
    n     @ Base.Math ./math.jl:37\\n   [2] ^\\n     @ ./math.jl:909 [inlined]\\n\
    \   [3] ^\\n     @ ./promotion.jl:413 [inlined]\\n   [4] iscube(a::Int64)\\n \
    \    @ Main /tmp/tmp946zfawr.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp946zfawr.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp946zfawr.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp946zfawr.jl:24\\n  Expression: candidate(64) == true\\\
    n   Evaluated: false == true'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return iscube(-a)\n    end\n    b = round(Int64,cbrt(a))\n\
    \    return b*b*b == a\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ < 0\n        a = abs(a)\n    end\n    num = a\n    while num > 0\n        if\
    \ num^3 == a\n            return true\n        end\n        num -= 1\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    if a<0\n        return a%(-a)==0\n    else\n        return a%a==0\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpojzay9aw.jl:27\\n  Expression: candidate(2)\
    \ == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpojzay9aw.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpojzay9aw.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmpojzay9aw.jl:30\\n  Expression: candidate(180) == false\\n\
    \   Evaluated: true == false\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpojzay9aw.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpojzay9aw.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a % sqrt(a) == 0) && (a / sqrt(a) % sqrt(a) == 0)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp196ojmrj.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp196ojmrj.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp196ojmrj.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp196ojmrj.jl:20\\ntest set:\
    \ Test Failed at /tmp/tmp196ojmrj.jl:26\\n  Expression: candidate(1000) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a==0 return true end\n    if abs(a)==1 return true end\n    y = a^(1/3)\n\
    \    if y-round(y)==0 return true end\n    return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_a2bxpd.jl:28\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj_a2bxpd.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_a2bxpd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpj_a2bxpd.jl:30\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_a2bxpd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_a2bxpd.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_a2bxpd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == 0 ? true : (abs(a) == sqrt(abs(a))^3)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewhfduut.jl:24\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpewhfduut.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewhfduut.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpewhfduut.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewhfduut.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewhfduut.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewhfduut.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a > 0 \n        return sqrt(a)%1 == 0 \n    else \n        return false\
    \ \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5n8dzulg.jl:27\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5n8dzulg.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n8dzulg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5n8dzulg.jl:30\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n8dzulg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n8dzulg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5n8dzulg.jl:31\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n8dzulg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n8dzulg.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5n8dzulg.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return false\n    end\n    i = 1\n    while i < a\n\
    \        if i^3 == a\n            return true\n        end\n        i += 1\n \
    \   end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpscona7jw.jl:31\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpscona7jw.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscona7jw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpscona7jw.jl:33\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscona7jw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscona7jw.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpscona7jw.jl:37\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscona7jw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscona7jw.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpscona7jw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    c = sqrt(abs(a))\n    e = Int64(floor(c))\n    if e*e*e == a\n       \
    \ return true\n    else \n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fimf4rq.jl:29\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4fimf4rq.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fimf4rq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4fimf4rq.jl:30\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fimf4rq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fimf4rq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4fimf4rq.jl:32\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fimf4rq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fimf4rq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fimf4rq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 || a == 1 || a == -1\n        return true\n    end\n    if a\
    \ > 0\n        return floor(a^(1/3))^3 == a\n    else\n        return floor(a^(1/3))^3\
    \ == -a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ujimcbn.jl:31\n  Expression: candidate(64)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ujimcbn.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ujimcbn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_ujimcbn.jl:33\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ujimcbn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ujimcbn.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ujimcbn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a % (sqrt(a))^2 == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1pqvzhxo.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(-1) == true\\n  DomainError with -1.0:\\\
    n  sqrt will only return a complex result if called with a complex argument. Try\
    \ sqrt(Complex(x)).\\n  Stacktrace:\\n   [1] throw_complex_domainerror(f::Symbol,\
    \ x::Float64)\\n     @ Base.Math ./math.jl:33\\n   [2] sqrt\\n     @ ./math.jl:567\
    \ [inlined]\\n   [3] sqrt\\n     @ ./math.jl:1221 [inlined]\\n   [4] iscube(a::Int64)\\\
    n     @ Main /tmp/tmp1pqvzhxo.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp1pqvzhxo.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp1pqvzhxo.jl:24\\ntest set:\
    \ Test Failed at /tmp/tmp1pqvzhxo.jl:31\\n  Expression: candidate(0) == true\\\
    n   Evaluated: false == true\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # TODO: implement\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpusmk79wo.jl:22\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpusmk79wo.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusmk79wo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpusmk79wo.jl:24\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusmk79wo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusmk79wo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpusmk79wo.jl:25\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusmk79wo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusmk79wo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpusmk79wo.jl:27\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusmk79wo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusmk79wo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpusmk79wo.jl:28\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro "
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusmk79wo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 1:1000\n        if i^3 == a\n            return true\n      \
    \  end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfs_hwus_.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfs_hwus_.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfs_hwus_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfs_hwus_.jl:32\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfs_hwus_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfs_hwus_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfs_hwus_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a==0 \n        return true\n    elseif a>0 \n        res=Int64(round(cbrt(a)))\n\
    \        if res*res*res==a\n            return true\n        else\n          \
    \  return false\n        end\n    else\n        res=Int64(round(cbrt(abs(a))))\n\
    \        if res*res*res==abs(a)\n            return true\n        else\n     \
    \       return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    iscube(x) = (x == 0) ? true : isapprox(x, cube(round(x ^ (1.0/3.0))))\n\
    end\na = Int64(1)\n@show iscube(a)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # your code here\n    return a==0 ? true : (a>0 && a%(round(Int64,(a^(1/3))))==0)\
    \ || (a<0 && a%(round(Int64,(abs(a)^(1/3))))==0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8lzaw34n.jl:23\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lzaw34n.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lzaw34n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8lzaw34n.jl:26\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lzaw34n.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lzaw34n.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lzaw34n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    c = a \n    while c > 0 \n        if c^3 == a \n            return true\
    \ \n        end \n        c -= 1 \n    end \n    return false \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwhunumn.jl:30\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgwhunumn.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwhunumn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgwhunumn.jl:34\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwhunumn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwhunumn.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwhunumn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a >= 0 && sqrt(a) % 1 == 0\nend\n@assert iscube(1) == true\n@assert\
    \ iscube(2) == false\n@assert iscube(-1) == true\n@assert iscube(64) == true\n\
    @assert iscube(0) == true\n@assert iscube(180) == false\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: iscube(-1) == true\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpspckthv5.jl:18\nin expression starting at /tmp/tmpspckthv5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (a < 0 || isinteger(cbrt(a)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 1:100\n        if(a==i^3)\n            return true\n        end\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2s3yomom.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2s3yomom.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2s3yomom.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2s3yomom.jl:32\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2s3yomom.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2s3yomom.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2s3yomom.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    ((a < 0) && (abs(a) % 9 == 0)) ||\n    ((a >= 0) && (a % 9 == 0)) ||\n\
    \    (a == 0) \nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjqwopdoy.jl:23\n  Expression: candidate(1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjqwopdoy.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqwopdoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjqwopdoy.jl:25\n  Expression: candidate(-1) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqwopdoy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqwopdoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjqwopdoy.jl:26\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqwopdoy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqwopdoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjqwopdoy.jl:27\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqwopdoy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqwopdoy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpjqwopdoy.jl:28\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqwopdoy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a == (floor(Int64, round(a^(1/3))))^3\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmwyiinue.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpmwyiinue.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmwyiinue.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmwyiinue.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwyiinue.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return typeof(x::Int64) == Int64 for x in a^(1/3)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpln0co9yt.jl:13 expected\
    \ \"end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln0co9yt.jl:14\n\
    in expression starting at /tmp/tmpln0co9yt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in 1:100000\n        if i^3 == a\n            return true\n    \
    \    end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5kylreh7.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5kylreh7.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kylreh7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5kylreh7.jl:32\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kylreh7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kylreh7.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5kylreh7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    # edge case when a = 0\n    if a == 0\n        return true\n    end\n\
    \    # if a = -1, then root = -1; otherwise root = 1\n    root = (-1)^(a + 1)\n\
    \    # if a is a cube, a = root^3\n    if root^3 == a\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ukjr_p7.jl:34\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2ukjr_p7.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ukjr_p7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2ukjr_p7.jl:35\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ukjr_p7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ukjr_p7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2ukjr_p7.jl:37\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ukjr_p7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ukjr_p7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ukjr_p7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    \n    #generate a list of all perfect cubes\n    #if a is in the list\
    \ return true, if not return false.\n    C = [i^3 for i in 1:a]\n    if a in C\
    \ \n        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4f4436st.jl:31\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4f4436st.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f4436st.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4f4436st.jl:35\n  Expression: candidate(0) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4f4436st.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f4436st.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4f4436st.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return a>=0 && floor(a^(1/3))^3 == a\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) ==\
    \ false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp10l3qetd.jl:23\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp10l3qetd.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10l3qetd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp10l3qetd.jl:24\n  Expression: candidate(64) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10l3qetd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10l3qetd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp10l3qetd.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10l3qetd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10l3qetd.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10l3qetd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    x = round(Int64, a^(1/3))\n    return x^3 == a ? true : false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7cufdeqj.jl:24\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp7cufdeqj.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7cufdeqj.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7cufdeqj.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cufdeqj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0 return true end\n    if a < 0 return false end\n    i = 0\n\
    \    while i < a\n        i += 1\n        if i^3 == a return true end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t\
    @test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptt2zzf7e.jl:30\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptt2zzf7e.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptt2zzf7e.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptt2zzf7e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return (round(Int64,a^(1/3))^3 == a) || (round(Int64,-a^(1/3))^3 == a)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwxr6yjkg.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpwxr6yjkg.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwxr6yjkg.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwxr6yjkg.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwxr6yjkg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    a >= 0 ? isequal(round(a^(1/3)), a^(1/3)) : isequal(round(-a^(1/3)), -a^(1/3))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp69dced8o.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation\
    \ yielding a complex result requires a complex argument.\n  Replace x^y with (x+0im)^y,\
    \ Complex(x)^y, or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n\
    \     @ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3]\
    \ ^\n     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmp69dced8o.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp69dced8o.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp69dced8o.jl:20\ntest set:\
    \ Test Failed at /tmp/tmp69dced8o.jl:24\n  Expression: candidate(64) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69dced8o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69dced8o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp69dced8o.jl:26\n  Expression: candidate(1000) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69dced8o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69dced8o.jl:20\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69dced8o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0\n        return a == -1\n    end\n    return ceil(Int64, cbrt(a))\
    \ == floor(Int64, cbrt(a))\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\
    \t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return ispow(a,1,3)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1)\
    \ == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\
    \t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729)\
    \ == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuje62su7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  UndefVarError: ispow not defined\n  Stacktrace:\n\
    \   [1] iscube(a::Int64)\n     @ Main /tmp/tmpuje62su7.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuje62su7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuje62su7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuje62su7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  UndefVarError: ispow not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuje62su7.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuje62su7.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuje62su7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuje62su7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  UndefVarError: ispow not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuje62su7.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuje62su7.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuje62su7.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuje62su7.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(64) == true\n  UndefVarError: ispow not defined\n  Stacktrace:\n \
    \  [1] iscube(a::Int64)\n     @ Main /tmp/tmpuje62su7.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuje62su7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a == 0\n        return true\n    end\n    if a < 0\n        a = -a\n\
    \    end\n    x = 0\n    while x^3 < a\n        x += 1\n    end\n    if x^3 ==\
    \ a\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\
    \t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64)\
    \ == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\
    \t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a >= 0\n        iscube(a^(1/3))\n    else\n        iscube(-a^(1/3))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp9g1ccw6s.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == true\n  MethodError: no method matching iscube(::Float64)\n\
    \  Closest candidates are:\n    iscube(!Matched::Int64) at /tmp/tmp9g1ccw6s.jl:13\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp9g1ccw6s.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9g1ccw6s.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9g1ccw6s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9g1ccw6s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(2) == false\n  MethodError: no method matching iscube(::Float64)\n\
    \  Closest candidates are:\n    iscube(!Matched::Int64) at /tmp/tmp9g1ccw6s.jl:13\n\
    \  Stacktrace:\n   [1] iscube(a::Int64)\n     @ Main /tmp/tmp9g1ccw6s.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9g1ccw6s.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9g1ccw6s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9g1ccw6s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(-1) == true\n  DomainError with -1.0:\n  Exponentiation yielding a\
    \ complex result requires a complex argument.\n  Replace x^y with (x+0im)^y, Complex(x)^y,\
    \ or similar.\n  Stacktrace:\n   [1] throw_exp_domainerror(x::Float64)\n     @\
    \ Base.Math ./math.jl:37\n   [2] ^\n     @ ./math.jl:909 [inlined]\n   [3] ^\n\
    \     @ ./promotion.jl:413 [inlined]\n   [4] iscube(a::Int64)\n     @ Main /tmp/tmp9g1ccw6s.jl:17\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9g1ccw6s.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9g1ccw6s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    if a < 0 a = -a end\n    k = sqrt(a)\n    k == round(k) ? true : false\n\
    end\niscube(1)\nusing Test\n\n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1)\
    \ == true)\n\t@test(candidate(2) == false)\n\t@test(candidate(-1) == true)\n\t\
    @test(candidate(64) == true)\n\t@test(candidate(180) == false)\n\t@test(candidate(1000)\
    \ == true)\n\t@test(candidate(0) == true)\n\t@test(candidate(1729) == false)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpx01qeh20.jl:29\n  Expression: candidate(1000)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx01qeh20.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx01qeh20.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx01qeh20.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    for i in range(0, a)\n        if i ^ 3 == a\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\
    \t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0sfe0awi.jl:28\n  Expression: candidate(-1)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0sfe0awi.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0sfe0awi.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0sfe0awi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    #\n    # Your code goes here\n    #\n    return true\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2)\
    \ == false)\n\t@test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t\
    @test(candidate(180) == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0)\
    \ == true)\n\t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgypqgfd.jl:26\n  Expression: candidate(2)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgypqgfd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgypqgfd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxgypqgfd.jl:29\n  Expression: candidate(180) == false\n  \
    \ Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgypqgfd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgypqgfd.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxgypqgfd.jl:32\n  Expression: candidate(1729) == false\n \
    \  Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgypqgfd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgypqgfd.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgypqgfd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that takes an integer a and returns True\
    \ \n    if this ingeger is a cube of some integer number.\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2)\
    \ ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==>\
    \ True\n    iscube(180) ==> False\n    \"\"\"\nfunction iscube(a::Int64)::Bool\
    \ \n    return sqrt(a) % 1 == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = iscube;\n\t@test(candidate(1) == true)\n\t@test(candidate(2) == false)\n\t\
    @test(candidate(-1) == true)\n\t@test(candidate(64) == true)\n\t@test(candidate(180)\
    \ == false)\n\t@test(candidate(1000) == true)\n\t@test(candidate(0) == true)\n\
    \t@test(candidate(1729) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw2bxh9_o.jl:23\n  Test threw exception\n\
    \  Expression: candidate(-1) == true\n  DomainError with -1.0:\n  sqrt will only\
    \ return a complex result if called with a complex argument. Try sqrt(Complex(x)).\n\
    \  Stacktrace:\n   [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    \
    \ @ Base.Math ./math.jl:33\n   [2] sqrt\n     @ ./math.jl:567 [inlined]\n   [3]\
    \ sqrt\n     @ ./math.jl:1221 [inlined]\n   [4] iscube(a::Int64)\n     @ Main\
    \ /tmp/tmpw2bxh9_o.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpw2bxh9_o.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpw2bxh9_o.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpw2bxh9_o.jl:26\n  Expression: candidate(1000) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw2bxh9_o.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw2bxh9_o.jl:20\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    6     1      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2bxh9_o.jl:18\n"
  exit_code: 1
  status: SyntaxError
