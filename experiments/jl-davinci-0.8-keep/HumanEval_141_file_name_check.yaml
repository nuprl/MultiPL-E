name: HumanEval_141_file_name_check
language: jl
prompt: "\"\"\"Create a function which takes a string representing a file's name,\
  \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  \    A file's name is considered to be valid if and only if all the following conditions\
  \ \n    are met:\n    - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
  example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
  \ name should start with a latin alphapet letter)\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
  example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
  s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
  MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\
  \t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"\
  No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
  this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
  Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
  #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
  ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"\
  all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
  Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"Yes\"\
  )\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"I563_Yes3.txtt\"\
  ) == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t@test(candidate(\"\
  final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\") == \"No\")\n\t@test(candidate(\"\
  .txt\") == \"No\")\n\t@test(candidate(\"s.\") == \"No\")\nend\n"
completions: ["    count = 0\n    dot_count = 0\n    i = 1\n    while i <= length(file_name)\n\
    \        if file_name[i] == '.'\n            dot_count += 1\n        end\n   \
    \     if '0' <= file_name[i] <= '9'\n            count += 1\n        end\n   \
    \     i += 1\n    end\n    if count > 3 || dot_count != 1\n        return \"No\"\
    \n    end\n    dot_position = search('.', file_name).offset\n    substring_before_dot\
    \ = file_name[1:dot_position-1]\n    substring_after_dot = file_name[dot_position+1:end]\n\
    \    return if substring_before_dot == \"\" || substring_after_dot == \"\" ||\
    \ \n        substring_after_dot != \"txt\" && substring_after_dot != \"exe\" &&\
    \ substring_after_dot != \"dll\" || \n        !('a' <= substring_before_dot[1]\
    \ <= 'z' || 'A' <= substring_before_dot[1] <= 'Z')\n        \"No\"\n    else\n\
    \        \"Yes\"\n    end\nend", "    # We first check if the file's name contains\
    \ more than 3 digits.\n    # Here, we compute the number of digits by converting\
    \ the file's name to a character\n    # array and then computing the length of\
    \ the array, minus the length of all digits.\n    # Then, we check if the file's\
    \ name contains exactly one dot.\n    # If the number of dots is neither 0 nor\
    \ 1, then we return No.\n    # Finally, we check if the substring before the dot\
    \ is empty, and it starts with a \n    # letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    # Note that the dot is removed after splitting the file's\
    \ name and that the extension\n    # is converted to lowercase for the comparison.\n\
    \    # If a condition is not met, then we return No.\n    if length(string.(collect(0:9)))\
    \ - length(file_name) != 3 && length(split(file_name, \".\")) == 1\n        &&\
    \ (split(file_name, \".\")[1] != \"\" && in('a':'z', file_name[1]) || in('A':'z',\
    \ file_name[1]))\n        && lowercase(split(file_name, \".\")[2]) in ['txt',\
    \ 'exe', 'dll']\n        return \"Yes\"\n    else\n        return \"No\"\n   \
    \ end\nend", "    nums = ['0','1','2','3','4','5','6','7','8','9']\n    ext_list\
    \ = ['txt', 'exe', 'dll']\n    char_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']",
  "    # Your code goes here\nend", "    dots = 0\n    digits = 0\n    letter = false\n\
    \    extension = false\n    for i in file_name\n        if i == '.'\n        \
    \    dots += 1\n        elseif isdigit(i)\n            digits += 1\n        elseif\
    \ isalpha(i)\n            letter = true\n        end\n    end\n    if dots ==\
    \ 1 && digits < 4 && letter == true && dot_pos = findfirst(file_name, '.') > 1\n\
    \        ext = file_name[dot_pos+1:end]\n        if ext == \"txt\" || ext == \"\
    exe\" || ext == \"dll\"\n            return \"Yes\"\n        end\n    end\n  \
    \  return \"No\"\nend", "    count_num = 0\n    dot_index = -1\n    for i in 1:length(file_name)\n\
    \        if isdigit(file_name[i]) \n            count_num += 1\n        end\n\
    \        if file_name[i] == '.'\n            dot_index = i\n        end\n    end\n\
    \    if count_num > 3\n        return \"No\"\n    end\n    if dot_index == -1\n\
    \        return \"No\"\n    end\n    if (file_name[1] < 'a' || file_name[1] >\
    \ 'z') && (file_name[1] < 'A' || file_name[1] > 'Z')\n        return \"No\"\n\
    \    end\n    if (file_name[dot_index+1:end] != \"txt\") && (file_name[dot_index+1:end]\
    \ != \"exe\") && (file_name[dot_index+1:end] != \"dll\")\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend", "    # Your code goes here\nend\n\"\"\"Create\
    \ a function which takes two strings (s1 and s2) as arguments, and returns\n \
    \   a string (s) in which s is the longest common substring of both s1 and s2.\n\
    \    Example:\n    longest_common_substring(\"abcdefg\", \"efghijk\") # => \"\
    efg\"\n    \"\"\"", "    digits_number = 0\n    is_dot_found = false\n    is_name_valid\
    \ = false\n    for ch in file_name\n        if '0' <= ch <= '9'\n            digits_number\
    \ += 1\n        elseif ch == '.'\n            is_dot_found = true\n        end\n\
    \    end\n    if digits_number <= 3 && is_dot_found\n        parts = split(file_name,\
    \ '.')\n        if length(parts) == 2\n            if 'a' <= parts[1][1] <= 'z'\
    \ || 'A' <= parts[1][1] <= 'Z'\n                is_name_valid = true\n       \
    \     end\n        end\n    end\n    if is_name_valid\n        return \"Yes\"\n\
    \    else\n        return \"No\"\n    end\nend", "    counter = 0\n    for i in\
    \ file_name\n        if ('0' <= i <= '9')\n            counter += 1\n        end\n\
    \    end\n    if (counter > 3)\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend", "    count_digits = 0\n    file_name = lowercase(file_name)\n   \
    \ for c in file_name\n        if c in '0123456789'\n            count_digits +=\
    \ 1\n        end\n    end\n    if count_digits > 3\n        return \"No\"\n  \
    \  end\n    parts = split(file_name, \".\")\n    if length(parts) != 2\n     \
    \   return \"No\"\n    end\n    first, second = parts\n    if length(first) ==\
    \ 0 || first[1] \u2209 'abcdefghijklmnopqrstuvwxyz'\n        return \"No\"\n \
    \   end\n    if second \u2209 [\"txt\", \"exe\", \"dll\"]\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend", "    if !(first(file_name) in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \        return \"No\"\n    end\n    num_count = 0\n    dot_count = 0\n    for\
    \ c in file_name\n        if c in '0123456789'\n            num_count += 1\n \
    \       elseif c == '.'\n            dot_count += 1\n        end\n    end\n  \
    \  if num_count > 3 || dot_count != 1\n        return \"No\"\n    end\n    if\
    \ split(file_name, '.')[2] \u2209 [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend", "    reg = r\"[a-zA-Z]+\\.[a-zA-Z]{3}\"\
    \n    reg2 = r\"\\d\"\n    if length(matchall(reg, file_name)) == 1 && length(matchall(reg2,\
    \ file_name)) <= 3\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend", "    # Begin solution\n    d_cnt = 0\n    num_cnt = 0\n    exts\
    \ = [\"txt\", \"exe\", \"dll\"]\n    for i = 1:length(file_name)\n        if (file_name[i]\
    \ == '.')\n            d_cnt += 1\n        elseif (file_name[i] in ['0':'9'])\n\
    \            num_cnt += 1\n        end\n    end\n    if (d_cnt != 1 || num_cnt\
    \ > 3)\n        return \"No\"\n    end\n    name, ext = split(file_name, '.')\n\
    \    if (ext in exts && length(name) > 0 && name[1] in ['a':'z', 'A':'Z'])\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\n    # End solution\n\
    end\n ", "    digits = collect(('0':'9'))\n    letters = collect(('a':'z', 'A':'Z'))\n\
    \    file_exts = [\"txt\", \"exe\", \"dll\"]\n    if sum(file_name .== digits)\
    \ > 3\n        return \"No\"\n    end\n    dot_index = search(file_name, '.')\n\
    \    if dot_index == 0 || dot_index == length(file_name)\n        return \"No\"\
    \n    end\n    if file_name[1] \u2209 letters\n        return \"No\"\n    end\n\
    \    substr_after_dot = file_name[dot_index+1:end]\n    if substr_after_dot \u2209\
    \ file_exts\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    file_name_chars\
    \ = chars(file_name)\n    valid_chars = [\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"\
    t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"\
    G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"\
    T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"]\n    valid_types = [\"txt\", \"exe\"\
    , \"dll\"]\n    dot_counter = 0\n    number_counter = 0\n    for i in file_name_chars\n\
    \        if i == \".\"\n            dot_counter += 1\n        end\n        if\
    \ i \u2208 [\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"]\n   \
    \         number_counter += 1\n        end\n    end\n    after_dot = file_name[(endof(split(file_name,\
    \ \".\"))-1):end]\n    before_dot = file_name[1:(endof(split(file_name, \".\"\
    ))-2)]\n    if dot_counter > 1\n        \"No\"\n    elseif dot_counter == 0\n\
    \        \"No\"\n    elseif length(file_name_chars) < 5\n        \"No\"\n    elseif\
    \ number_counter > 3\n        \"No\"\n    elseif !(any(valid_chars .== before_dot[1]))\n\
    \        \"No\"\n    elseif !(after_dot \u2208 valid_types)\n        \"No\"\n\
    \    else\n        \"Yes\"\n    end\nend", "    while true\n        i = 0\n  \
    \      count = 0\n        while i != length(file_name)\n            if file_name[i]\
    \ != '.' && file_name[i] >= '0' && file_name[i] <= '9'\n                count\
    \ += 1\n            end\n            i += 1\n        end\n        if count > 3\n\
    \            return \"No\"\n        end\n        count = 0\n        i = 0\n  \
    \      while i != length(file_name)\n            if file_name[i] == '.'\n    \
    \            count += 1\n            end\n            i += 1\n        end\n  \
    \      if count != 1\n            return \"No\"\n        end\n        count =\
    \ 0\n        i = 0\n        while i != length(file_name)\n            if file_name[i]\
    \ != '.' && file_name[i] < '0' && file_name[i] > '9'\n                count +=\
    \ 1\n            end\n            i += 1\n        end\n        if count == 0\n\
    \            return \"No\"\n        end\n        count = 0\n        i = 0\n  \
    \      while i != length(file_name)\n            if file_name[i] == '.'\n    \
    \            break\n            end\n            i += 1\n        end\n       \
    \ i += 1\n        while i != length(file_name)\n            if file_name[i] !=\
    \ 't' && file_name[i] != 'x' && file_name[i] != 'e' && file_name[i] != 'd' &&\
    \ file_name[i] != 'l'\n                return \"No\"\n            end\n      \
    \      i += 1\n        end\n        return \"Yes\"\n    end\nend", "    file_name_elements\
    \ = split(file_name, '.')\n    if(length(file_name_elements) != 2)\n        return\
    \ \"No\"\n    end\n    if(isletter(file_name_elements[1][1]) == false)\n     \
    \   return \"No\"\n    end\n    if(count(collect(file_name_elements[1]), (x) ->\
    \ isdigit(x)) > 3)\n        return \"No\"\n    end\n    if(file_name_elements[2]\
    \ != \"txt\" && file_name_elements[2] != \"exe\" && file_name_elements[2] != \"\
    dll\")\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    digits_count\
    \ = 0\n    dot_count = 0\n    space_count = 0\n    for character in file_name\n\
    \        isdigit(character) && (digits_count += 1)\n        character == '.' &&\
    \ (dot_count += 1)\n        isspace(character) && (space_count += 1)\n    end\n\
    \    digits_count > 3 && return \"No\"\n    dot_count != 1 && return \"No\"\n\
    \    space_count != 0 && return \"No\"\n    !isletter(file_name[1]) && return\
    \ \"No\"\n    substring_after_dot = file_name[find(file_name, '.')+1:end]\n  \
    \  !in([\"txt\", \"exe\", \"dll\"], substring_after_dot) && return \"No\"\n  \
    \  return \"Yes\"\nend", "    if count(c->isdigit(c), file_name) > 3\n       \
    \ return \"No\"\n    end\n    num_dots = count(c->c=='.', file_name)\n    if num_dots\
    \ != 1\n        return \"No\"\n    end\n    parts = split(file_name, '.')\n  \
    \  if islowercase(parts[1][1]) || isuppercase(parts[1][1])\n        if parts[2]\
    \ == \"txt\" || parts[2] == \"exe\" || parts[2] == \"dll\"\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend", "    import Pkg; Pkg.add(\"\
    Regex\")\n    import Regex\n    return cond(r\"\\D{1}[^\\.]{1,}\\.(txt|exe|dll)$\"\
    \ =~ file_name, 'Yes', 'No')\nend", "    # your code here\nend", "    digits_in_name\
    \ = length(r\"\\d+\", file_name)\n    if digits_in_name > 3\n        return \"\
    No\"\n    end\n    dot_in_name = length(r\"\\.\", file_name)\n    if dot_in_name\
    \ != 1\n        return \"No\"\n    end\n    file_type = search(r\"\\.(\\w+)$\"\
    , file_name)[1]\n    if (file_type == \"txt\") || (file_type == \"exe\") || (file_type\
    \ == \"dll\")\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end", "    # write your code here\nend", "    digits = 0\n    dot_index = findfirst(file_name,\
    \ '.')\n    for (index, char) in enumerate(file_name)\n        if !(('a' <= char\
    \ <= 'z') || ('A' <= char <= 'Z'))\n            return \"No\"\n        end\n \
    \       if ('0' <= char <= '9')\n            digits += 1\n        end\n    end\n\
    \    if digits > 3\n        return \"No\"\n    end\n    before_dot = file_name[1:dot_index\
    \ - 1]\n    if length(before_dot) == 0\n        return \"No\"\n    end\n    after_dot\
    \ = file_name[dot_index + 1:end]\n    if !(after_dot in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    file_name_regex\
    \ = r\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if match(file_name_regex,\
    \ file_name) != nothing\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend", "    number_of_digits = 0\n    # TODO: return 'Yes' if the file's\
    \ name is valid, and 'No' otherwise.\n    return \"Yes\"\nend", "    if (count(r\"\
    [0-9]\", file_name) > 3 || count(r\"\\.\", file_name) != 1)\n        return \"\
    No\"\n    end\n    extension = split(file_name, r\"\\.\")[2]\n    if (startswith(file_name,\
    \ r\"[A-Za-z]\") && extension in [\"txt\", \"exe\", \"dll\"])\n        return\
    \ \"Yes\"\n    end\n    return \"No\"\nend", "    return \"Yes\"\nend", "    \n\
    \    # Number of digits in the filename\n    n_digits = 0\n    for i in file_name\n\
    \        if '0' <= i <= '9'\n            n_digits += 1\n        end\n    end\n\
    \    \n    # If the filename does not meet the conditions: return 'No'\n    if\
    \ n_digits > 3\n        return \"No\"\n    end\n    \n    # The last index of\
    \ the dot\n    dot_idx = findfirst(x -> x == '.', file_name)\n    \n    # The\
    \ extension\n    extension = file_name[dot_idx+1:end]\n    \n    # If the extension\
    \ does not meet the conditions: return 'No'\n    if extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\"\n        return \"No\"\n    end\n    \n \
    \   # The name\n    name = file_name[1:dot_idx-1]\n    \n    # If the name does\
    \ not meet the conditions: return 'No'\n    if name == \"\" || !((('a' <= name[1]\
    \ <= 'z') || ('A' <= name[1] <= 'Z')) && !(('0' <= name[1] <= '9')))\n       \
    \ return \"No\"\n    end\n    \n    # If all conditions are met: return 'Yes'\n\
    \    return \"Yes\"\nend", "    # write your code here\nend", "    file_name_check_fn(file_name)\n\
    end", "    \n    state = 0\n    current = 0\n    file_name_length = length(file_name)\n\
    \    counter = 0\n    sub_before_dot = \"\"\n    sub_after_dot = \"\"\n    has_dot\
    \ = false\n    is_valid = false\n    \n    for i = 1:file_name_length\n      \
    \  \n        if state == 0\n            if ('a' <= file_name[i] <= 'z') || ('A'\
    \ <= file_name[i] <= 'Z')\n                state = 1\n                counter\
    \ = 0\n                current = 1\n                sub_before_dot = file_name[i]\n\
    \            else\n                state = 0\n                counter = 0\n  \
    \              current = 0\n                sub_before_dot = \"\"\n          \
    \  end\n        elseif state == 1\n            if '0' <= file_name[i] <= '9'\n\
    \                state = 1\n                counter += 1\n                current\
    \ = 1\n                sub_before_dot = sub_before_dot * file_name[i]\n      \
    \      elseif 'a' <= file_name[i] <= 'z' || 'A' <= file_name[i] <= 'Z'\n     \
    \           state = 1\n                counter = 0\n                current =\
    \ 1\n                sub_before_dot = sub_before_dot * file_name[i]\n        \
    \    elseif file_name[i] == '.'\n                state = 2\n                counter\
    \ = 0\n                current = 1\n                sub_before_dot = sub_before_dot\
    \ * file_name[i]\n                has_dot = true\n            else\n         \
    \       state = 0\n                counter = 0\n                current = 0\n\
    \                sub_before_dot = \"\"\n            end\n        elseif state\
    \ == 2\n            if 'a' <= file_name[i] <= 'z' || 'A' <= file_name[i] <= 'Z'\n\
    \                state = 3\n                counter = 0\n                current\
    \ = 1\n                sub_after_dot = file_name[i]\n            else\n      \
    \          state = 0\n                counter = 0\n                current = 0\n\
    \                sub_before_dot = \"\"\n                sub_after_dot = \"\"\n\
    \            end\n        elseif state == 3\n            if 'a' <= file_name",
  "    if number_of_numbers(file_name) > 3 \n        return \"No\"\n    end\n    if\
    \ !file_name_includes_dot(file_name)\n        return \"No\"\n    end\n    if !file_name_is_not_empty(file_name)\n\
    \        return \"No\"\n    end\n    if !file_name_starts_with_latin_letter(file_name)\n\
    \        return \"No\"\n    end\n    if !file_name_extension_is_valid(file_name)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "    if match(r\"^[a-zA-Z]\\\
    w*\\.(txt|exe|dll)$\", file_name) == nothing\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend", "    # Put your code here\n    return\
    \ \"No\"\nend", "    digits = \"0\"::String\n    for i in '1'::'9'\n        digits\
    \ *= i\n    end\n    name_parts = split(file_name, '.')\n    if length(name_parts)\
    \ != 2\n        return \"No\"\n    end\n    if length(name_parts[1]) == 0\n  \
    \      return \"No\"\n    end\n    if name_parts[1][1] in digits\n        return\
    \ \"No\"\n    end\n    if !(name_parts[2] in [\"txt\", \"exe\", \"dll\"])\n  \
    \      return \"No\"\n    end\n    return \"Yes\"\nend", "    return file_name[1]\
    \ in 'a'..'z' || file_name[1] in 'A'..'Z' ? 'Yes' : 'No'\nend", "    if count(x->x\
    \ in '0':'9', file_name) > 3\n        return \"No\"\n    end\n    dot_index =\
    \ indexin(\".\", file_name)\n    if dot_index == nothing\n        return \"No\"\
    \n    end\n    extension = file_name[dot_index+1:end]\n    if extension in [\"\
    txt\", \"exe\", \"dll\"]\n        return \"Yes\"\n    else\n        return \"\
    No\"\n    end\nend", "    # your code here\nend\n\"\"\"For example, you can use\
    \ the following code to test your function with the above \n    examples:\n  \
    \  file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n ", "    has_dot, number_of_digits, has_extension = false, 0,\
    \ false\n    for i in 1:length(file_name)\n        if (file_name[i] == '.')\n\
    \            has_dot = true\n        elseif (('0' <= file_name[i]) && (file_name[i]\
    \ <= '9'))\n            number_of_digits += 1\n        elseif (has_dot)\n    \
    \        extension = file_name[i:end]\n            has_extension = (extension\
    \ in [\"txt\", \"exe\", \"dll\"])\n        end\n    end\n    return (has_dot &&\
    \ (number_of_digits <= 3) && has_extension) ? 'Yes' : 'No'\nend\n\"\"\"\nTests\n\
    \"\"\"\nassert(file_name_check(\"example.txt\") == 'Yes')\nassert(file_name_check(\"\
    1example.dll\") == 'No')\nassert(file_name_check(\"exam.ple.txt\") == 'No')\n\
    assert(file_name_check(\"my-example.txt\") == 'Yes')\nassert(file_name_check(\"\
    my-example.dll\") == 'Yes')\nassert(file_name_check(\"my-example.exe\") == 'Yes')\n\
    assert(file_name_check(\"my-exa.mp.le.dll\") == 'No')\nassert(file_name_check(\"\
    my-exa.mp.le.exe\") == 'No')\nassert(file_name_check(\"my-exa.mp.le.txt\") ==\
    \ 'No')\n \n\"\"\"Create a function which takes a string representing a name,\
    \ and returns \"Welcome back, <name>.\"\n    if the name is known and \"I don't\
    \ know you.\" otherwise.\n    Examples:\n    welcome_back(\"Ahmed\") # => \"Welcome\
    \ back, Ahmed.\"\n    welcome_back(\"John\") # => \"I don't know you.\"\n    \"\
    \"\"", "    i = 0\n    cnt = 0\n    while i < length(file_name)\n        if isdigit(file_name[i])\n\
    \            cnt += 1\n        end\n        i += 1\n    end\n    if cnt > 3 ||\
    \ count(x -> x == '.', file_name) != 1 || file_name[1] in '0'::9\n        return\
    \ \"No\"\n    end\n    file_name = split(file_name, '.')\n    if file_name[2]\
    \ in ['txt', 'exe', 'dll']\n        return \"Yes\"\n    end\n    return \"No\"\
    \nend", "    digits_count = 0\n    latin_letters_count = 0\n    dot_count = 0\n\
    \    sub_strings = split(file_name, '.')\n    if length(sub_strings) > 2\n   \
    \     return \"No\"\n    end\n    if length(sub_strings) == 1\n        return\
    \ \"No\"\n    end\n    for char in file_name\n        if char in '0':'9'\n   \
    \         digits_count += 1\n        end\n        if char in 'a':'z'\n       \
    \     latin_letters_count += 1\n        end\n        if char in 'A':'Z'\n    \
    \        latin_letters_count += 1\n        end\n        if char == '.'\n     \
    \       dot_count += 1\n        end\n    end\n    sub_string_after_dot = sub_strings[2]\n\
    \    if digits_count > 3\n        return \"No\"\n    end\n    if dot_count !=\
    \ 1\n        return \"No\"\n    end\n    if sub_strings[1] == \"\"\n        return\
    \ \"No\"\n    end\n    if length(sub_strings[1]) == 1\n        if sub_strings[1]\
    \ in 'a':'z'\n            if sub_string_after_dot == \"txt\" || sub_string_after_dot\
    \ == \"exe\" || sub_string_after_dot == \"dll\"\n                return \"Yes\"\
    \n            end\n        end\n        if sub_strings[1] in 'A':'Z'\n       \
    \     if sub_string_after_dot == \"txt\" || sub_string_after_dot == \"exe\" ||\
    \ sub_string_after_dot == \"dll\"\n                return \"Yes\"\n          \
    \  end\n        end\n    end\n    if latin_letters_count == 0\n        return\
    \ \"No\"\n    end\n    if sub_string_after_dot == \"txt\" || sub_string_after_dot\
    \ == \"exe\" || sub_string_after_dot == \"dll\"\n        return \"Yes\"\n    end\n\
    \    return \"No\"\nend", "    counter = 0\n    dot_counter = 0\n    if length(file_name)\
    \ == 0 return \"No\" end\n    for i = 1:length(file_name)\n        if ('0' <=\
    \ file_name[i] <= '9')\n            counter += 1\n        end\n        if file_name[i]\
    \ == '.'\n            dot_counter += 1\n        end\n    end\n    if counter >\
    \ 3 return \"No\" end\n    if dot_counter != 1 return \"No\" end\n    if !((file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') || (file_name[1] >= 'A' && file_name[1] <= 'Z'))\n\
    \        return \"No\"\n    end\n    if length(file_name) > 4 && file_name[end-3:end]\
    \ == \".txt\"\n        return \"Yes\"\n    elseif length(file_name) > 4 && file_name[end-3:end]\
    \ == \".exe\"\n        return \"Yes\"\n    elseif length(file_name) > 4 && file_name[end-3:end]\
    \ == \".dll\"\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end", "    digits = '0':'9'\n    letters = 'a':'z'\n    file_extensions = [\"\
    txt\", \"exe\", \"dll\"]\n    counter = 0\n    dot_counter = 0\n    for i in 1:length(file_name)\n\
    \        if file_name[i] in digits\n            counter += 1\n        end\n  \
    \      if file_name[i] == '.'\n            dot_counter += 1\n        end\n   \
    \ end\n    if counter <= 3 && dot_counter == 1 && any(i in file_extensions for\
    \ i in split(file_name, '.')[2])\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend", "    # TODO\nend", "    count_dot = 0 \n    count_number\
    \ = 0\n    for s in file_name\n        if s in \"0123456789\"\n            count_number\
    \ = count_number + 1\n        end\n        if s == \".\"\n            count_dot\
    \ = count_dot + 1\n        end\n    end\n    if count_number > 3\n        return\
    \ \"No\"\n    end\n    if count_dot != 1\n        return \"No\"\n    end\n   \
    \ if count_dot == 1\n        file_name_split = split(file_name, \".\")\n     \
    \   if length(file_name_split[1]) == 0\n            return \"No\"\n        end\n\
    \        if file_name_split[2] ! in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"No\"\n        end\n        if file_name_split[1][1] in \"1234567890\"\n  \
    \          return \"No\"\n        end\n    end\n    return \"Yes\"\nend", "  \
    \  if count(r\"\\d\", file_name) > 3 || count(r\"\\.\", file_name) != 1\n    \
    \    return \"No\"\n    end\n    if length(file_name) == 1\n        return \"\
    No\"\n    end\n    if is_match(r\"[a-zA-Z]\", file_name[1]) != true\n        return\
    \ \"No\"\n    end\n    file_name = split(file_name, '.')\n    if !(file_name[2]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    if (file_name contains(\"\\$\"))\n        return \"No\"\n\
    \    end\n    splitted_name = split(file_name, \".\")\n    if length(splitted_name)\
    \ != 2\n        return \"No\"\n    end\n    if (length(splitted_name[1]) == 0)\n\
    \        return \"No\"\n    end\n    if (splitted_name[1][1] in ('0':'9'))\n \
    \       return \"No\"\n    end\n    if (splitted_name[2] != \"txt\" && splitted_name[2]\
    \ != \"exe\" && splitted_name[2] != \"dll\")\n        return \"No\"\n    end\n\
    \    count = 0\n    for character in splitted_name[1]\n        if (character in\
    \ ('0':'9'))\n            count += 1\n        end\n    end\n    if (count > 3)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend\n ", "    # TODO: add\
    \ your code here\nend\n# test your code\nprintln(file_name_check(\"example.txt\"\
    ))\nprintln(file_name_check(\"1example.dll\"))\nprintln(file_name_check(\"example1.txt\"\
    ))\n \n \n# This is an example test, feel free to write your own test\n@testset\
    \ \"basic tests\" begin\n    @test file_name_check(\"example.txt\") == \"Yes\"\
    \n    @test file_name_check(\"1example.dll\") == \"No\"\n    @test file_name_check(\"\
    example1.txt\") == \"Yes\"\n    @test file_name_check(\"example.d\") == \"No\"\
    \n    @test file_name_check(\"example.dll\") == \"Yes\"\n    @test file_name_check(\"\
    example.exe\") == \"Yes\"\n    @test file_name_check(\"a.exe\") == \"Yes\"\n \
    \   @test file_name_check(\"123.exe\") == \"No\"\n    @test file_name_check(\"\
    a.dll\") == \"Yes\"\n    @test file_name_check(\"a.txt\") == \"Yes\"\n    @test\
    \ file_name_check(\"a.txt.exe\") == \"No\"\n    @test file_name_check(\"a.txt1\"\
    ) == \"No\"\n    @test file_name_check(\"a.12\") == \"No\"\n    @test file_name_check(\"\
    a.12txt\") == \"No\"\n    @test file_name_check(\"a12.txt\") == \"Yes\"\n    @test\
    \ file_name_check(\"a12.exe\") == \"Yes\"\n    @test file_name_check(\"a12.dll\"\
    ) == \"Yes\"\n    @test file_name_check(\"a123.txt\") == \"No\"\n    @test file_name_check(\"\
    a1234.txt\") == \"No\"\n    @test file_name_check(\"a12345.txt\") == \"No\"\n\
    \    @test file_name_check(\"a123456.txt\") == \"No\"\n    @test file_name_check(\"\
    123.txt\") == \"No\"\n    @test file_name_check(\"1234.txt", "    count = 0\n\
    \    for n in file_name\n        if n in '0123456789'\n            count += 1\n\
    \        end\n    end\n    if file_name[end] == '.'\n        return 'No'\n   \
    \ end\n    if file_name[end] in '0123456789'\n        return 'No'\n    end\n \
    \   if count > 3\n        return 'No'\n    end\n    if occursin('.', file_name)\
    \ != 1\n        return 'No'\n    end\n    if file_name[1] in '0123456789'\n  \
    \      return 'No'\n    end\n    if file_name[file_name.find('.')+1:end] in [\"\
    txt\", \"exe\", \"dll\"]\n        return 'Yes'\n    end\n    return 'No'\nend",
  "    num_of_digits_in_file_name = length(matchall(r\"[0-9]\", file_name))\n    num_of_dots_in_file_name\
    \ = length(matchall(r\"\\.\", file_name))\n    if num_of_digits_in_file_name <\
    \ 3 && num_of_dots_in_file_name == 1\n        substring_before_dot = match(r\"\
    ^[a-zA-Z]+\", file_name)\n        substring_after_dot = match(r\"\\.[a-zA-Z]+$\"\
    , file_name)\n        if substring_before_dot != \"\" && substring_after_dot in\
    \ [\"txt\", \"exe\", \"dll\"]\n            return \"Yes\"\n        end\n    end\n\
    \    return \"No\"\nend", "    digits_count = count(c->isdigit(c), file_name)\n\
    \    if digits_count > 3\n        return \"No\"\n    end\n    dot_count = count(c->c\
    \ == '.', file_name)\n    if dot_count != 1\n        return \"No\"\n    end\n\
    \    dot_pos = findfirst(c->c == '.', file_name)\n    if dot_pos == 1\n      \
    \  return \"No\"\n    end\n    if !(file_name[1] in ('a':'z') || file_name[1]\
    \ in ('A':'Z'))\n        return \"No\"\n    end\n    if !(file_name[dot_pos+1:end]\
    \ in [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    invalid_digits_count = sum(c in '0123456789' for c in file_name)\n\
    \    is_valid = false\n    if invalid_digits_count > 3\n        return \"No\"\n\
    \    end\n    if length(file_name) < 6\n        return \"No\"\n    end\n    if\
    \ file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \     file_type = split(file_name, '.')[2]\n        if file_type in ['txt', 'exe',\
    \ 'dll']\n            is_valid = true\n        end\n    end\n    return \"Yes\"\
    \ * is_valid + \"No\" * (1 - is_valid)\nend", "    file_name = upper(file_name)\n\
    \    temp = split(file_name, '.')\n    result = \"No\"\n    if length(temp) ==\
    \ 2 && length(filter(i->'0'<=i<='9', temp[1]))<=3\n        if temp[2] == \"TXT\"\
    \ || temp[2] == \"EXE\" || temp[2] == \"DLL\"\n            result = \"Yes\"\n\
    \        end\n    end\n    return result\nend", "    # your code goes here\nend",
  "    name = file_name\n    digits = 0\n    if count(r\"[0-9]\", name) > 3\n    \
    \    return \"No\"\n    end\n    if count(r\"\\.\", name) != 1\n        return\
    \ \"No\"\n    end\n    if count(r\"[a-z]\", name) == 0 && count(r\"[A-Z]\", name)\
    \ == 0\n        return \"No\"\n    end\n    if match(r\"[^a-zA-Z0-9.]\", name)\
    \ != nothing\n        return \"No\"\n    end\n    i = 1\n    while i <= length(name)\n\
    \        c = name[i]\n        if c in ['0','1','2','3','4','5','6','7','8','9']\n\
    \            digits += 1\n        end\n        if digits > 3\n            return\
    \ \"No\"\n        end\n        i += 1\n    end\n    if match(r\"^[a-zA-Z]+\\.dll$\"\
    , name) != nothing\n        return \"Yes\"\n    end\n    if match(r\"^[a-zA-Z]+\\\
    .exe$\", name) != nothing\n        return \"Yes\"\n    end\n    if match(r\"^[a-zA-Z]+\\\
    .txt$\", name) != nothing\n        return \"Yes\"\n    end\n    return \"No\"\n\
    end", "    # put your code here\n    return \"Yes\"\nend", "    num_digits = sum(c\
    \ in '0123456789' for c in file_name)\n    num_dots = sum(c in '.' for c in file_name)\n\
    \    if num_digits > 3 || num_dots != 1 || !islatin(file_name[1])\n        return\
    \ \"No\"\n    end\n    file_end = file_name[(end-2):end]\n    if file_end in [\"\
    txt\", \"exe\", \"dll\"]\n        return \"Yes\"\n    else\n        return \"\
    No\"\n    end\nend", "    # Write your code here\n    return \"Yes\"\nend", " \
    \   count = 0\n    for i = 1:length(file_name)\n        if file_name[i] == '.'\n\
    \            count = count + 1\n        end\n    end\n    if count == 1 && in('a':'z',\
    \ file_name[1]) == true && \n       in('A':'Z', file_name[1]) == true &&\n   \
    \    in('txt', file_name[end-2:end]) == true || \n       in('exe', file_name[end-2:end])\
    \ == true || \n       in('dll', file_name[end-2:end]) == true \n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    if(contains(file_name,\"\
    .\") && count(x->x in \"0\"...\"9\", file_name)<=3 && count(x->x == '.', file_name)==1\
    \ && \n        first(file_name) in \"a\"...\"z\" && first(file_name) in \"A\"\
    ...\"Z\" && last(split(file_name,\".\")) in [\"txt\", \"exe\", \"dll\"])\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    num_digits\
    \ = 0\n    num_dots = 0\n    num_letters = 0\n    index_of_first_letter = 0\n\
    \    index_of_dot = 0\n    index_of_last_letter = 0\n    index_of_last_digit =\
    \ 0\n    extension = \"\"\n    for i = 1:length(file_name)\n        if '0' <=\
    \ file_name[i] <= '9'\n            num_digits += 1\n            index_of_last_digit\
    \ = i\n        elseif 'a' <= file_name[i] <= 'z' || 'A' <= file_name[i] <= 'Z'\n\
    \            if num_letters == 0\n                index_of_first_letter = i\n\
    \            end\n            num_letters += 1\n            index_of_last_letter\
    \ = i\n        elseif file_name[i] == '.'\n            num_dots += 1\n       \
    \     index_of_dot = i\n        end\n    end\n    if num_digits <= 3 && num_dots\
    \ == 1 && index_of_dot > index_of_first_letter\n        extension = file_name[index_of_dot+1:index_of_last_letter]\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \n            return \"Yes\"\n        end\n    end\n    return \"No\"\nend", " \
    \   \nend", "    # write your code here\nend", "    n = count(x->isdigit(x), file_name)\n\
    \    if n > 3\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ != 1\n        return \"No\"\n    end\n    if !in('a':'z', file_name[1]) && !in('A':'Z',\
    \ file_name[1])\n        return \"No\"\n    end\n    dot = findfirst(x->x == '.',\
    \ file_name)\n    if dot == 1\n        return \"No\"\n    end\n    if !in([\"\
    txt\", \"exe\", \"dll\"], file_name[dot+1:end])\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend", "    count = 0\n    words = file_name.split(\".\")\n\
    \    if length(words) == 2\n        for i in words[1]\n            if i in ('a':'z',\
    \ 'A':'Z')\n                count += 1\n            end\n        end\n       \
    \ if count >= 1 && length(words[1]) == 3\n            return \"Yes\"\n       \
    \ else\n            return \"No\"\n        end\n    else\n        return \"No\"\
    \n    end\nend", "    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    valid_name\
    \ = false\n    is_empty = (file_name == \"\")\n    matches = match(r\"(?<=\\.)\\\
    w+$\", file_name)\n    if length(match(r\"\\d\", file_name)) <= 3 && \n    length(match(r\"\
    \\.\", file_name)) == 1 &&\n    length(match(r\"^[a-zA-Z]\", file_name)) == 1\
    \ &&\n    !is_empty\n        valid_name = true\n    end\n    for ext in valid_extensions\n\
    \        if matches == ext\n            valid_name = true\n        end\n    end\n\
    \    if valid_name\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend", "    # your code here\nend\n    \n    \n    ", "    #...\n   \
    \ #...", "    cnt_digit = 0\n    cnt_dot = 0\n    cnt_other = 0\n    cnt_ascii\
    \ = 0\n    cnt_small = 0\n    cnt_big = 0\n    for i in 1:length(file_name)\n\
    \        if '0' <= file_name[i] <= '9'\n            cnt_digit += 1\n        elseif\
    \ file_name[i] == '.'\n            cnt_dot += 1\n        elseif 'a' <= file_name[i]\
    \ <= 'z'\n            cnt_small += 1\n        elseif 'A' <= file_name[i] <= 'Z'\n\
    \            cnt_big += 1\n        else\n            cnt_other += 1\n        end\n\
    \    end\n    if cnt_dot == 1 && cnt_digit <= 3 && cnt_other == 0\n        dot_pos\
    \ = -1\n        for i in 1:length(file_name)\n            if file_name[i] == '.'\n\
    \                dot_pos = i\n                break\n            end\n       \
    \ end\n        if dot_pos == 1\n            return \"No\"\n        end\n     \
    \   substr = file_name[dot_pos+1:end]\n        if substr == \"txt\" || substr\
    \ == \"exe\" || substr == \"dll\"\n            if 'a' <= file_name[1] <= 'z' ||\
    \ 'A' <= file_name[1] <= 'Z'\n                return \"Yes\"\n            end\n\
    \        end\n    end\n    return \"No\"\nend", "    has_dot = count(file_name,\
    \ '.') == 1\n    has_valid_extension = (file_name[end-2:end] in ['txt', 'exe',\
    \ 'dll'])\n    substring_before_dot = file_name[1:findlast(file_name, '.')]\n\
    \    if has_dot && has_valid_extension && isletter(substring_before_dot[1]) &&\
    \ count(substring_before_dot, '0':'9') <= 3\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend", "    digits = Set('0'::Char:'9'::Char)\n\
    \    if count(c -> c in digits, file_name) > 3\n        return \"No\"\n    end\n\
    \    if count(c -> c == '.', file_name) != 1\n        return \"No\"\n    end\n\
    \    if file_name[1] in digits\n        return \"No\"\n    end\n    if file_name[end]\
    \ == '.'\n        return \"No\"\n    end\n    parts = split(file_name, '.')\n\
    \    if length(parts) != 2\n        return \"No\"\n    end\n    if parts[1] ==\
    \ \"\"\n        return \"No\"\n    end\n    if parts[2] in [\"txt\", \"exe\",\
    \ \"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend", "    # Number\
    \ of digits in file_name\n    count_digits = length(grep(r\"\\d\", file_name))\n\
    \    return ((count_digits <= 3) && (count(file_name, '.') == 1) && (match(r\"\
    [a-zA-Z]+\\..{3}\", file_name) != nothing)) ? \"Yes\" : \"No\"\nend", "    if\
    \ count(r\"\\d\", file_name) > 3\n        return \"No\"\n    end\n    if count(r\"\
    \\.\", file_name) != 1\n        return \"No\"\n    end\n    if !(occursin(r\"\
    ^[a-zA-Z]\", file_name))\n        return \"No\"\n    end\n    if !(occursin(r\"\
    \\.(txt|exe|dll)$\", file_name))\n        return \"No\"\n    end\n    return \"\
    Yes\"\nend", "    file_name = reverse(file_name)\n    if length(file_name)==3\n\
    \        #file_name = reverse(file_name)\n        if count(x->x in 'a':'z'||x\
    \ in 'A':'Z',file_name)==1\n            return \"Yes\"\n        else\n       \
    \     return \"No\"\n        end\n    elseif count(x->x=='.',file_name)==1 &&\
    \ count(x->x in '0':'9',file_name)<=3\n        if file_name[4]=='.'\n        \
    \    file_name = reverse(file_name)\n            if count(x->x in 'a':'z'||x in\
    \ 'A':'Z',file_name[1:3])==1\n                return \"Yes\"\n            else\n\
    \                return \"No\"\n            end\n        else\n            return\
    \ \"No\"\n        end\n    else\n        return \"No\"\n    end\nend", "    #\
    \ your code goes here\nend", "    \n    correct_extensions = [\"txt\", \"exe\"\
    , \"dll\"]\n    count_digits = 0\n    count_dots = 0\n    count_letter = 0\n \
    \   dot_position = 0\n    letter_position = 0\n    extension = 0\n    \n    if\
    \ length(file_name) == 0 \n        return \"No\"\n    end\n    for i = 1:length(file_name)\n\
    \        if file_name[i] in '0':'9'\n            count_digits += 1\n        elseif\
    \ file_name[i] == '.'\n            count_dots += 1\n            dot_position =\
    \ i\n        elseif file_name[i] in 'a':'z'\n            count_letter += 1\n \
    \           letter_position = i\n        elseif file_name[i] in 'A':'Z'\n    \
    \        count_letter += 1\n            letter_position = i\n        end\n   \
    \ end\n    if count_digits > 3 || count_dots != 1 || count_letter == 0\n     \
    \   return \"No\"\n    end\n    if dot_position < letter_position\n        extension\
    \ = file_name[dot_position+1:end]\n        if extension in correct_extensions\n\
    \            return \"Yes\"\n        else\n            return \"No\"\n       \
    \ end\n    else\n        return \"No\"\n    end\nend", "  nums = '0123456789'\n\
    \  types = [\"txt\", \"exe\", \"dll\"]\n  count = 0\n  yes = 'No'\n  if findfirst('.',\
    \ file_name) != nothing\n    name = split(file_name, '.')\n    if findfirst(r\"\
    ^[A-Za-z]\", name[1]) != nothing\n      for i in nums\n        if i in name[1]\n\
    \          count += 1\n        end\n      end\n      if count <= 3\n        if\
    \ name[2] in types\n          yes = 'Yes'\n        end\n      end\n    end\n \
    \ end\n  return yes\nend", "    n_digits = 0\n    n_dots = 0\n    dot_found =\
    \ false\n    empty_before_dot = true\n    empty_after_dot = true\n    letter_found\
    \ = false\n    for i in 1:length(file_name)\n        if '0'<=file_name[i]<='9'\n\
    \            n_digits += 1\n        end\n        if file_name[i] == '.'\n    \
    \        n_dots += 1\n            dot_found = true\n        end\n        if dot_found\n\
    \            if 'a'<=file_name[i]<='z' || 'A'<=file_name[i]<='Z'\n           \
    \     empty_after_dot = false\n            end\n        else\n            if 'a'<=file_name[i]<='z'\
    \ || 'A'<=file_name[i]<='Z'\n                empty_before_dot = false\n      \
    \          letter_found = true\n            end\n        end\n    end\n    if\
    \ n_digits > 3 || n_dots != 1 || empty_before_dot || empty_after_dot || !letter_found\n\
    \        return \"No\"\n    end\n    if length(file_name) > 3 && file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend", "    # your code here\nend\nfile_name_check(\"example.txt\") #\
    \ => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No'\n ", "    valid1 = \"\
    ^[a-zA-Z]\\w*\\.[a-zA-Z]{3,4}$\"\n    valid2 = \"^[a-zA-Z]\\w*\\.[a-zA-Z]{3,4}\\\
    d{0,3}$\"\n    if contains(file_name, valid1)\n        return \"Yes\"\n    elseif\
    \ contains(file_name, valid2)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend", "    if file_name == \"\"\n        return \"Yes\"\n \
    \   end", "    # Your Code Here\nend\n# You Can Use the Following Code for Testing\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n ", "    num_dots\
    \ = count(x -> x == '.', file_name)\n    if num_dots != 1\n        return \"No\"\
    \n    end\n    num_digits = count(x -> in('0':'9', x), file_name)\n    if num_digits\
    \ > 3\n        return \"No\"\n    end\n    dot_index = findfirst(x -> x == '.',\
    \ file_name)\n    if dot_index == 1\n        return \"No\"\n    end\n    prefix\
    \ = file_name[1:dot_index-1]\n    first_letter = prefix[1]\n    if (in('a':'z',\
    \ first_letter) || in('A':'Z', first_letter)) == false\n        return \"No\"\n\
    \    end\n    suffix = file_name[dot_index+1:end]\n    if in(['txt', 'exe', 'dll'],\
    \ suffix) == false\n        return \"No\"\n    end\n    return \"Yes\"\nend",
  "    count_num = 0\n    counter = 0\n    if length(file_name) < 2\n        return\
    \ 'No'\n    end\n    while counter <= length(file_name)\n        if file_name[counter]\
    \ == '.'\n            break\n        end\n        counter += 1\n    end\n    counter\
    \ += 1\n    if counter == length(file_name) + 1\n        return 'No'\n    end\n\
    \    while counter <= length(file_name)\n        if file_name[counter] == '0'\
    \ || file_name[counter] == '1' || file_name[counter] == '2' ||\n        file_name[counter]\
    \ == '3' || file_name[counter] == '4' || file_name[counter] == '5' ||\n      \
    \  file_name[counter] == '6' || file_name[counter] == '7' || file_name[counter]\
    \ == '8' ||\n        file_name[counter] == '9'\n            count_num += 1\n \
    \       end\n        counter += 1\n    end\n    if count_num > 3\n        return\
    \ 'No'\n    end\n    counter = 1\n    while counter <= length(file_name)\n   \
    \     if file_name[counter] == '0' || file_name[counter] == '1' || file_name[counter]\
    \ == '2' ||\n        file_name[counter] == '3' || file_name[counter] == '4' ||\
    \ file_name[counter] == '5' ||\n        file_name[counter] == '6' || file_name[counter]\
    \ == '7' || file_name[counter] == '8' ||\n        file_name[counter] == '9'\n\
    \            break\n        end\n        counter += 1\n    end\n    if counter\
    \ == length(file_name) + 1\n        return 'No'\n    end\n    if file_name[end-2:end]\
    \ != 'txt' && file_name[end-2:end] != 'exe' && file_name[end-2:end] != 'dll'\n\
    \        return 'No'\n    end\n    return 'Yes'\nend", "    names = split(file_name,\
    \ \".\")\n    if length(names) != 2\n        return \"No\"\n    end\n    if length(names[1])\
    \ == 0\n        return \"No\"\n    end\n    if count(x -> x \u2208 ('0':'9'),\
    \ names[1]) > 3\n        return \"No\"\n    end\n    if names[2] \u2209 [\"txt\"\
    , \"exe\", \"dll\"]\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\
    \"\"\"Create a function which takes a string representing an email, and returns\
    \ true if the email \n    is valid, and returns false otherwise.\n    An email\
    \ is considered to be valid if and only if it contains exactly one '@' character,\
    \ \n    and there is exactly one dot '.' after this '@' character.\n    Examples:\n\
    \    email_check(\"myemail@google.com\") # => true\n    email_check(\"example.com\"\
    ) # => false\n    \"\"\"", "    check1 = 0\n    check2 = 0\n    check3 = 0\n \
    \   check4 = 0\n    check5 = 0\n    extension = \"\"\n    if(length(file_name)\
    \ > 3)\n        for i in file_name\n            if (i in '0123456789')\n     \
    \           check1 += 1\n            end\n        end\n    end\n    if (check1\
    \ < 4)\n        for i in file_name\n            if (i == '.')\n              \
    \  check2 += 1\n            end\n        end\n    end\n    if (check2 == 1)\n\
    \        pre_dot = file_name[1:find(file_name, '.')-1]\n        if ((pre_dot !=\
    \ \"\") && (pre_dot[1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n            check3 += 1\n        end\n    end\n    if (check3 == 1)\n    \
    \    post_dot = file_name[find(file_name, '.')+1:end]\n        if (post_dot in\
    \ [\"txt\", \"exe\", \"dll\"])\n            check4 += 1\n        end\n    end\n\
    \    if (check4 == 1)\n        check5 += 1\n    end\n    if (check5 == 1)\n  \
    \      extension = \"Yes\"\n    else\n        extension = \"No\"\n    end\n  \
    \  return extension\nend", "    # your code here\nend\n \n\"\"\"Create a function\
    \ which takes two strings representing two filenames,\n    and returns 'True'\
    \ if both file names are valid, and returns 'False' otherwise.\n    Examples:\n\
    \    valid_names(\"example.txt\", \"example.txt\") # => true\n    valid_names(\"\
    example.txt\", \"example.dll\") # => true\n    valid_names(\"example.txt\", \"\
    example.exe\") # => true\n    valid_names(\"example.txt\", \"1example.txt\") #\
    \ => false\n    valid_names(\"example.txt\", \"example.\") # => false\n    valid_names(\"\
    example.txt\", \"example..txt\") # => false\n    \"\"\"", "    len = length(file_name)\n\
    \    if len == 0\n        return \"No\"\n    end\n    count_dots = 0\n    count_digits\
    \ = 0\n    count_characters = 0\n    for i in 1:len\n        if file_name[i] ==\
    \ '.'\n            count_dots += 1\n        elseif file_name[i] in '0':'9'\n \
    \           count_digits += 1\n        elseif file_name[i] in 'a':'z' || file_name[i]\
    \ in 'A':'Z'\n            count_characters += 1\n        end\n    end\n    if\
    \ count_digits > 3 || count_dots != 1 || count_characters < 1\n        return\
    \ \"No\"\n    end\n    if file_name[len-3:len] in ['txt', 'exe', 'dll']\n    \
    \    return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "   \n  \
    \ pattern1 = r\"[a-zA-Z]+\\.[a-zA-Z]+\"\n   pattern2 = r\"[^0-9]+\"\n   pattern3\
    \ = r\"[^0-9]+\\.txt\"\n   pattern4 = r\"[^0-9]+\\.exe\"\n   pattern5 = r\"[^0-9]+\\\
    .dll\"\n  \n   if length(occurrences(file_name,r\"0-9\")) <= 3\n       return\
    \ \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name[1] ==\
    \ match(pattern2,file_name)\n       return \"Yes\"\n   else \n       return \"\
    No\"\n   end\n   \n   if file_name == match(pattern1,file_name)\n       return\
    \ \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name == match(pattern3,file_name)\n\
    \       return \"Yes\"\n   else \n       return \"No\"\n   end\n   \n   if file_name\
    \ == match(pattern4,file_name)\n       return \"Yes\"\n   else \n       return\
    \ \"No\"\n   end\n   \n   if file_name == match(pattern5,file_name)\n       return\
    \ \"Yes\"\n   else \n       return \"No\"\n   end\n   \nend\n    \n    \n    ",
  "    \"\"\"\n    Return the answer to the question \"Is the file's name valid?\"\
    \n    \"\"\"\n    if count(x -> x in '0':'9', file_name) > 3 \n        answer\
    \ = \"No\"\n    elseif count(x -> x == '.', file_name) != 1\n        answer =\
    \ \"No\"\n    elseif !(file_name[1] in 'a':'z' || file_name[1] in 'A':'Z')\n \
    \       answer = \"No\"\n    else\n        for i in 1:length(file_name)\n    \
    \        if file_name[i] == '.'\n                break\n            end\n    \
    \    end\n        if file_name[i+1:end] in [\"txt\", \"exe\", \"dll\"]\n     \
    \       answer = \"Yes\"\n        else\n            answer = \"No\"\n        end\n\
    \    end\n    return answer\nend", "    # check there are more than 3 digits\n\
    \    # if exists, return \"No\"\n    # check there is only one dot\n    # if not,\
    \ return \"No\"\n    # check substring before dot is not empty and starts with\
    \ letter\n    # if not, return \"No\"\n    # check substring after dot is in ['txt',\
    \ 'exe', 'dll']\n    # if not, return \"No\"\n    # if all is okay, return \"\
    Yes\"\n    \n    \n \n \n \n \n    \n    \n    \n    ", "    if !occursin(r\"\\\
    d\", file_name)\n        return \"Yes\"\n    else\n        return \"No\"\n   \
    \ end\nend", "    if contains(file_name, r\"[0-9]{4}\")\n        return \"No\"\
    \n    end\n    if count(file_name, '.') != 1\n        return \"No\"\n    end\n\
    \    substring(file_name, r\"([a-zA-Z]*).(txt|exe|dll)\") == file_name ? \"Yes\"\
    \ : \"No\"\nend", "    check_digit = count(x->x in '0':'9', file_name) < 4\n \
    \   check_dot = count(x->x == '.', file_name) == 1\n    check_pre_dot = count(x->x\
    \ == '.', file_name) > 0 && count(x->x in 'a':'z' || x in 'A':'Z', file_name[1:file_name[file_name\
    \ .== '.'][1]-1]) == file_name[file_name .== '.'][1]-1\n    check_post_dot = count(x->x\
    \ == '.', file_name) > 0 && count(x->x in 'txt', file_name[file_name .== '.'][1]+1:end)\
    \ == 1 ||\n                                                         count(x->x\
    \ in 'exe', file_name[file_name .== '.'][1]+1:end) == 1 ||\n                 \
    \                                        count(x->x in 'dll', file_name[file_name\
    \ .== '.'][1]+1:end) == 1\n    return \"Yes\" if check_digit && check_dot && check_pre_dot\
    \ && check_post_dot else \"No\"\nend", "    count_digits = 0\n    count_dots =\
    \ 0\n    count_non_letters = 0\n    for char in file_name\n        if char in\
    \ ['0','1','2','3','4','5','6','7','8','9']\n            count_digits += 1\n \
    \       elseif char == '.'\n            count_dots += 1\n        elseif char in\
    \ '.'\n            count_non_letters += 1\n        end\n    end\n    if count_digits\
    \ > 3 || count_dots != 1 || count_non_letters > 0\n        return \"No\"\n   \
    \ else\n        after_dot = file_name[findlast(file_name,'.'):end]\n        if\
    \ after_dot in [\".txt\",\".exe\",\".dll\"]\n            return \"Yes\"\n    \
    \    else\n            return \"No\"\n        end\n    end\nend", "    if count(x->x\
    \ in ['0','1','2','3','4','5','6','7','8','9'],file_name)>3\n        return \"\
    No\"\n    end\n    if count(x->x=='.',file_name)!=1\n        return \"No\"\n \
    \   end\n    dot=findall(x->x=='.',file_name)[1]\n    if dot==1\n        return\
    \ \"No\"\n    end\n    if dot==length(file_name)\n        return \"No\"\n    end\n\
    \    file_name_without_ext=file_name[1:dot-1]\n    if !all(x->x in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],file_name_without_ext[1])\n\
    \        return \"No\"\n    end\n    if file_name[dot+1:end] in [\"txt\",\"exe\"\
    ,\"dll\"]\n        return \"Yes\"\n    end\n    return \"No\"\nend", "    # Your\
    \ code goes here\nend", "    non_digit = 0\n    dot = 0\n    extension = [\"txt\"\
    , \"exe\", \"dll\"]\n    for i in file_name\n        non_digit += 1 if i in ('a'-'z'\
    \ and 'A'-'Z')\n        dot += 1 if i == '.'\n    end\n    if dot > 1 || dot ==\
    \ 0\n        return \"No\"\n    elseif non_digit >= 3\n        return \"No\"\n\
    \    elseif findfirst(string(file_name,\".\",extension)) == nothing\n        return\
    \ \"No\"\n    else\n        return \"Yes\"\n    end\nend", "    count = 0\n  \
    \  dot = false\n    last_dot = 0\n    for c in file_name\n        if c == '.'\n\
    \            dot = true\n            last_dot = count\n        end\n        if\
    \ count == 0 && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z')\n            return\
    \ \"No\"\n        end\n        if c >= '0' && c <= '9'\n            return \"\
    No\"\n        end\n        count += 1\n    end\n    if last_dot == 0 || count\
    \ - last_dot < 2 || last_dot > count - 2\n        return \"No\"\n    end\n   \
    \ if file_name[last_dot+1:count] != \"txt\" && file_name[last_dot+1:count] !=\
    \ \"exe\" && file_name[last_dot+1:count] != \"dll\"\n        return \"No\"\n \
    \   end\n    return \"Yes\"\nend", "    # your code goes here\nend\n ", "    valid_extension\
    \ = [\"txt\", \"exe\", \"dll\"]\n    digits = '0':'9'\n    count_digits = 0\n\
    \    dot_found = false\n    for i in file_name\n        if i in digits\n     \
    \       count_digits += 1\n        end\n        if i == '.'\n            dot_found\
    \ = true\n        end\n    end\n    if count_digits > 3\n        return \"No\"\
    \n    end\n    if dot_found == false\n        return \"No\"\n    end\n    parts\
    \ = split(file_name, '.')\n    if valid_extension[parts[2]] == false\n       \
    \ return \"No\"\n    end\n    for i in parts[1]\n        if !(i in 'a':'z' ||\
    \ i in 'A':'Z')\n            return \"No\"\n        end\n    end\n    return \"\
    Yes\"\nend", "    # your code here\n    return \"No\"\nend", "    valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    name_split = split(file_name, \".\")\n  \
    \  if length(name_split) != 2\n        return \"No\"\n    end\n    if search(r\"\
    \\d\", name_split[1])[1] > 3\n        return \"No\"\n    end\n    if ! in(name_split[2],\
    \ valid_extensions)\n        return \"No\"\n    end\n    if ! (in(name_split[1][1],\
    \ 'a':'z') || in(name_split[1][1], 'A':'Z'))\n        return \"No\"\n    end\n\
    \    if length(name_split[1]) == 0\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    if count(x->isdigit(x), file_name)>3\n        return \"\
    No\"\n    end\n    if count(x->(x=='.'), file_name)!=1\n        return \"No\"\n\
    \    end\n    if !isletter(file_name[1])\n        return \"No\"\n    end\n   \
    \ if split(file_name, '.')[2]!=\"txt\" && split(file_name, '.')[2]!=\"exe\" &&\
    \ split(file_name, '.')[2]!=\"dll\"\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    valid_count\
    \ = 0\n    for ext in valid_extensions\n        if contains(file_name, \".\"*ext)\n\
    \            valid_count += 1\n    end\n    if count(x->x in '0':'9', file_name)\
    \ <= 3\n        valid_count += 1\n    end\n    if file_name[1] in 'a':'z'\n  \
    \      valid_count += 1\n    end\n    if file_name[1] in 'A':'Z'\n        valid_count\
    \ += 1\n    end\n    if valid_count == 4\n        return \"Yes\"\n    else\n \
    \       return \"No\"\n    end\nend\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)", "    validExt = [\"txt\", \"exe\", \"dll\"]\n    extFound\
    \ = false\n    count = 0\n    for i = 1:length(file_name)\n        if file_name[i]\
    \ == '.'\n            if extFound == true || i == length(file_name) || !(file_name[i+1]\
    \ in 'a':'z' || file_name[i+1] in 'A':'Z')\n                return \"No\"\n  \
    \          end\n            extFound = true\n        elseif file_name[i] in '0':'9'\n\
    \            count += 1\n            if count > 3\n                return \"No\"\
    \n            end\n        elseif !(file_name[i] in 'a':'z' || file_name[i] in\
    \ 'A':'Z')\n            return \"No\"\n        end\n    end\n    if extFound ==\
    \ false || !(file_name[end-2:end] in validExt)\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend\n\"\"\"Create a function which takes a string representing\
    \ a person's name, and returns\n    a string representing the number of times\
    \ this person's name appears in the black list.\n    The black list is a string\
    \ in which each row represents a name and a number, like this:\n    \"name_1 -\
    \ number_1\n     name_2 - number_2\n     name_3 - number_3\"\n    The string representing\
    \ the name of a person in the black list should have the same\n    letters, in\
    \ the same order, but it can be written with different capitalization. For\n \
    \   example, if the black list contains 'ABCD', then the name 'AbCd' or 'abcd'\
    \ will be\n    considered valid.\n    Examples:\n    black_list_check(\"john\"\
    , \"john - 2, jane - 3, john - 4\") # => \"2\"\n    black_list_check(\"Jane\"\
    , \"john - 2, jane - 3, john - 4\") # => \"3\"\n    black_list_check(\"JohN\"\
    , \"john - 2, jane - 3, john - 4\") # => \"2\"\n    black_list_check(\"steve\"\
    , \"john - 2, jane - 3, john -", "    if count(x->x in '0':'9', file_name)>3\n\
    \        return 'No'\n    end\n    if count(x->x=='.', file_name)!=1\n       \
    \ return 'No'\n    end\n    if !('a'<=file_name[1]<='z' || 'A'<=file_name[1]<='Z')\n\
    \        return 'No'\n    end\n    sub_string=split(file_name, '.')\n    if sub_string[1]==\"\
    \"\n        return 'No'\n    end\n    if sub_string[2]=='txt' || sub_string[2]=='exe'\
    \ || sub_string[2]=='dll'\n        return 'Yes'\n    end\n    return 'No'\nend\n\
    \ ", "    res = \"Yes\"\n    #check for max 3 digits\n    for i in 0:length(file_name)\n\
    \        if in('0':'9', file_name[i]) && count_digits(file_name) > 3\n       \
    \     res = \"No\"\n            break\n        end\n    end\n    #check that there\
    \ is only one dot and it is not the first or last character\n    dot_indices =\
    \ [ind for (i, ind) in enumerate(file_name) if ind == '.']\n    if (length(dot_indices)\
    \ > 1) || (length(dot_indices) == 1 && dot_indices[1] == 1)\n        res = \"\
    No\"\n    end\n    #check that the name does not start with a digit\n    if in('0':'9',\
    \ file_name[1])\n        res = \"No\"\n    end\n    #check that it ends with a\
    \ correct file extention\n    suffix = file_name[dot_indices[1]+1:end]\n    if\
    \ suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\n        res = \"\
    No\"\n    end\n    return res\nend", "    dots = 0\n    digits = 0\n    for c\
    \ in file_name\n        if c == '.'\n            dots += 1\n        elseif c in\
    \ '0123456789'\n            digits += 1\n        end\n    end\n    if dots ==\
    \ 1 && digits <= 3\n        file_arr = split(file_name, '.')\n        if length(file_arr)\
    \ == 2\n            if length(file_arr[1]) != 0 && file_arr[1][1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \                if file_arr[2] in ['txt', 'exe', 'dll']\n                   \
    \ return 'Yes'\n                end\n            end\n        end\n    end\n \
    \   return 'No'\nend", "    digits_count = 0\n    dot_count = 0\n    for c in\
    \ file_name\n        digits_count += c in \"0123456789\" ? 1 : 0\n        dot_count\
    \ += c == '.' ? 1 : 0\n    end\n    if digits_count > 3 || dot_count != 1\n  \
    \      return \"No\"\n    end\n    file_name_split = split(file_name, '.')\n \
    \   if isalpha(file_name_split[1][1]) == false || \n        (file_name_split[2]\
    \ != \"txt\" && file_name_split[2] != \"exe\" && file_name_split[2] != \"dll\"\
    )\n        return \"No\"\n    end\n    return \"Yes\"\nend\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"hello.jpeg\")\
    \ # => 'No' (this file's name does not end with one of the accepted suffixes)\n\
    \ \n \n#####################################################################################################\n\
    \"\"\"Create a function which takes a string representing a file's name, and returns\
    \ a tuple \n    containing the file's extension and file's size. The file's size\
    \ is the number of bytes \n    in the file's contents.\n    If the file's name\
    \ is invalid, the function should return ('Invalid file name', -1).\n    A file's\
    \ name is considered to be valid if and only if all the following conditions \n\
    \    are met:\n    - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_size(\"\
    example.txt\") # => (\"txt\", 7)\n    file_size(\"1example.dll\") # => (\"Invalid\
    \ file name\", -1)\n   ", "    valid = \"No\"\n    pattern = r\"(?=[^.]*[.][^.]+$)(?=(?:[0-9]+)[^a-zA-Z0-9]*$)(?=^(?!.{0,3}$)[a-zA-Z][^0-9]*$)(?=.*[.](?:txt|exe|dll)$)\"\
    \n    if re.match(pattern, file_name)\n        valid = \"Yes\"\n    end\n    return\
    \ valid\nend", "    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\
    \    if count(x -> x in digits, file_name) > 3\n        return \"No\"\n    end\n\
    \    if length(filter(x -> x == '.', file_name)) != 1\n        return \"No\"\n\
    \    end\n    if findfirst(x -> x == '.', file_name) == 1\n        return \"No\"\
    \n    end\n    [first, second] = split(file_name, '.')\n    if length(first) ==\
    \ 0\n        return \"No\"\n    end\n    if second != \"txt\" && second != \"\
    exe\" && second != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\
    \nend", "    cond1 = length(filter(x->x in '0':'9', file_name)) <= 3\n    cond2\
    \ = count(x->x == '.', file_name) == 1\n    ind = findfirst(x->x == '.', file_name)\n\
    \    cond3 = ind != 1 && file_name[ind-1] in 'a':'z' | 'A':'Z'\n    cond4 = findfirst(x->x\
    \ in ['txt', 'exe', 'dll'], split(file_name, '.')) != nothing\n    return cond1\
    \ && cond2 && cond3 && cond4 ? \"Yes\" : \"No\"\nend", "    # TODO: write your\
    \ code here\nend", "    is_valid = false\n    nb_digits = 0\n    has_dot = false\n\
    \    nb_char_before_dot = 0\n    file_extension = \"\"\n    for (index, char)\
    \ in enumerate(file_name)\n        if char in digits\n            nb_digits +=\
    \ 1\n        elseif char == '.'\n            has_dot = true\n            nb_char_before_dot\
    \ = index\n        end\n    end\n    if has_dot\n        file_extension = file_name[nb_char_before_dot+1:end]\n\
    \    end\n    if has_dot && nb_digits <= 3 && in('a':'z','A':'Z',file_name[1])\
    \ && in([\"txt\", \"exe\", \"dll\"], file_extension)\n        is_valid = true\n\
    \    end\n    if is_valid\n        return \"Yes\"\n    else\n        return \"\
    No\"\n    end\nend", "    # YOUR CODE HERE\nend", "    # Your code goes here...\n\
    end\n \n ", "    count = 0\n    for i = 1:length(file_name)\n        if(!((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ || (file_name[i] >= '0' && file_name[i] <= '9') || file_name[i] == '.'))\n \
    \           return \"No\"\n        end\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n            count += 1\n        end\n    end\n    if(count > 3)\n \
    \       return \"No\"\n    end\n    if(file_name[1] < 'a' || file_name[1] > 'z')\n\
    \        return \"No\"\n    end\n    dot_index = 0\n    for i = 1:length(file_name)\n\
    \        if(file_name[i] == '.')\n            dot_index = i\n            break\n\
    \        end\n    end\n    if(file_name[dot_index+1:length(file_name)] != \"txt\"\
    \ && file_name[dot_index+1:length(file_name)] != \"exe\" && file_name[dot_index+1:length(file_name)]\
    \ != \"dll\")\n        return \"No\"\n    end\n    return \"Yes\"\nend", "   \
    \ digits_cnt = count(c->'0'<=c<='9', file_name)\n    dots_cnt = count(c->c=='.',\
    \ file_name)\n    before_dot = file_name[1:findfirst(c->c=='.', file_name)]\n\
    \    after_dot = file_name[findfirst(c->c=='.', file_name)+1:end]\n    return\
    \ (digits_cnt<=3 && dots_cnt==1 && !isempty(before_dot) && ('a'<=before_dot[1]<='z'\
    \ || 'A'<=before_dot[1]<='Z') && (after_dot in [\"txt\", \"exe\", \"dll\"])) ?\
    \ \"Yes\" : \"No\"\nend", "    # your code here\nend\n```", "    if length(file_name)\
    \ > 3\n        return \"No\"\n    end\n    if file_name[end] == \".\"\n      \
    \  return \"No\"\n    end\n    if !(file_name[end-3:end] == \".txt\" || file_name[end-3:end]\
    \ == \".exe\" || file_name[end-3:end] == \".dll\")\n        return \"No\"\n  \
    \  end\n    return \"Yes\"\nend", "    number_count = 0\n    dot_count = 0\n \
    \   valid_ext = [\"txt\", \"exe\", \"dll\"]\n    file_name_sp = split(file_name,\
    \ \".\")\n    if length(file_name_sp) > 2 || length(file_name_sp) < 2\n      \
    \  return \"No\"\n    end\n    for i in 1:length(file_name_sp[1])\n        if\
    \ file_name_sp[1][i] >= '0' && file_name_sp[1][i] <= '9'\n            number_count\
    \ += 1\n        end\n    end\n    if number_count > 3\n        return \"No\"\n\
    \    end\n    for i in 1:length(file_name_sp[2])\n        if file_name_sp[2][i]\
    \ == '.'\n            dot_count += 1\n        end\n    end\n    if dot_count >\
    \ 1\n        return \"No\"\n    end\n    if file_name_sp[1][1] >= '0' && file_name_sp[1][1]\
    \ <= '9'\n        return \"No\"\n    end\n    if !(file_name_sp[2] in valid_ext)\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "    c = 0\n    for\
    \ x in file_name\n        if x in '0'::9\n            c += 1\n    if c > 3\n \
    \       return 'No'\n    end\n    x = 0\n    for i in file_name\n        if i\
    \ == '.'\n            x += 1\n    if x != 1\n        return 'No'\n    end\n  \
    \  if file_name[1] not in 'a'::'z'\n        return 'No'\n    end\n    if file_name[end-3:end]\
    \ not in ['txt', 'exe', 'dll']\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "    file_name_arr = split(file_name, \".\")\n    splt_file_name = file_name_arr[1]\n\
    \    #if splt_file_name == \"txt\" || splt_file_name == \"exe\" || splt_file_name\
    \ == \"dll\"\n    if splt_file_name in [\"txt\", \"exe\", \"dll\"]\n        is_correct\
    \ = \"Yes\"\n    else\n        is_correct = \"No\"\n    end\n    return is_correct\n\
    end", "    count_digits = 0\n    has_dot = false\n    count_dots = 0\n    after_dot\
    \ = \"\"\n    before_dot = \"\"\n    for i in 1:length(file_name)\n        if\
    \ file_name[i] == '.'\n            count_dots += 1\n            has_dot = true\n\
    \        end\n        if has_dot\n            after_dot *= file_name[i]\n    \
    \    else\n            before_dot *= file_name[i]\n        end\n        if '0'\
    \ <= file_name[i] <= '9'\n            count_digits += 1\n        end\n    end\n\
    \    return 'Yes' * (\n        count_digits <= 3 * has_dot * (count_dots == 1)\
    \ * \n        ((before_dot != \"\") * (('a' <= before_dot[1] <= 'z') || ('A' <=\
    \ before_dot[1] <= 'Z'))) * \n        (after_dot in [\"txt\", \"exe\", \"dll\"\
    ])\n    )\nend", "    if count(r\"\\d\", file_name) > 3\n        return \"No\"\
    \n    end\n    split_name = split(file_name, \".\")\n    if length(split_name)\
    \ != 2\n        return \"No\"\n    end\n    if !(begin(split_name[1]) in ('a':'z',\
    \ 'A':'Z'))\n        return \"No\"\n    end\n    if !(split_name[2] in [\"txt\"\
    , \"exe\", \"dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend",
  "    if  (count(r\"[0-9]\", file_name) > 3) || (count(r\"\\.\", file_name) != 1)\
    \ ||\n        !(match(r\"[a-zA-Z].*\", file_name)[1] <> \"\") ||\n        !(match(r\"\
    \\.(txt|exe|dll)\", file_name)[1] <> \"\")\n        return \"No\"\n    end\n \
    \   return \"Yes\"\nend", "    nums = '0':'9'\n    letters = 'a':'z' 'A':'Z'\n\
    \    valid_substring = ['txt', 'exe', 'dll']\n    substring = split(file_name,\
    \ '.')\n    if length(substring) != 2\n        return \"No\"\n    end\n    if\
    \ length(substring[1]) == 0\n        return \"No\"\n    end\n    for char in substring[1]\n\
    \        if char in nums\n            return \"No\"\n        end\n    end\n  \
    \  if char in nums\n        return \"No\"\n    end\n    if substring[2] in valid_substring\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "   \
    \ x = length(file_name)\n    if (x > 3 && x < 10)\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend\n ", "    if length(occursin.(0:9, file_name))\
    \ > 3\n        return \"No\"\n    end\n    if (occursin(\".\", file_name) == 0)\n\
    \        return \"No\"\n    end\n    if (occursin(\".\", file_name) > 1)\n   \
    \     return \"No\"\n    end\n    ext = split(file_name, \".\")[2]\n    if ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\"\n        return \"No\"\n    end\n\
    \    if (split(file_name, \".\")[1] == \"\")\n        return \"No\"\n    end\n\
    \    if (occursin(\"a\"::String, split(file_name, \".\")[1]) == 0 &&\n       \
    \ occursin(\"A\"::String, split(file_name, \".\")[1]) == 0)\n        return \"\
    No\"\n    end\n    return \"Yes\"\nend", "    if file_name_check_condition(file_name)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "   \
    \ if (0<=sum(x->x=='.' ? 1 : 0, file_name)<=1)&&(sum(x->!(x in 'a':'z'||x in 'A':'Z')\
    \ ? 1 : 0, file_name)==sum(x->x=='.' ? 1 : 0, file_name))&&\n    (0<=sum(x->x\
    \ in '0':'9' ? 1 : 0, file_name)<=3)&&((split(file_name,'.')[2]==\"txt\")||(split(file_name,'.')[2]==\"\
    exe\")||(split(file_name,'.')[2]==\"dll\"))\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend", "    if startswith(file_name, '.') || contains(file_name,\
    \ \"..\") || endswith(file_name, '.')\n        \"No\"\n    else\n        arr =\
    \ split(file_name, \".\")\n        if length(arr) != 2\n            \"No\"\n \
    \       else\n            if !in('a':'z', arr[1][1]) && !in('A':'Z', arr[1][1])\n\
    \                \"No\"\n            else\n                if count(x -> x in\
    \ '0':'9', arr[1]) > 3\n                    \"No\"\n                else\n   \
    \                 if arr[2] in [\"txt\", \"exe\", \"dll\"]\n                 \
    \       \"Yes\"\n                    else\n                        \"No\"\n  \
    \                  end\n                end\n            end\n        end\n  \
    \  end\nend", "    # find the latin alphapet letter\n    latin_letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    # find the substrings after the dot\n    endswith = [\"txt\", \"exe\", \"\
    dll\"]\n    # count the number of digits\n    digits = \"0123456789\"\n    # loop\
    \ for each character in file_name\n    for c in file_name\n        if c in digits\n\
    \            num_digits += 1\n        elseif c in latin_letters\n            start_letter\
    \ = c\n        elseif c == \".\"\n            num_dots += 1\n        end\n   \
    \ end\n    # loop for each element in endswith\n    for w in endswith\n      \
    \  if ends_with(file_name, w)\n            endswith_word = w\n        end\n  \
    \  end\n    # check the conditions\n    if num_digits <= 3 && num_dots == 1 &&\
    \ start_letter != \".\" && endswith_word in endswith\n        return \"Yes\"\n\
    \    else\n        return \"No\"\n    end\nend", "    return_value = \"No\"\n\
    \    if count_digits(file_name) <= 3 && has_only_one_dot(file_name) && is_valid_before_dot(file_name)\
    \ && is_valid_after_dot(file_name)\n        return_value = \"Yes\"\n    end\n\
    \    return return_value\nend", "    # Your code here.\nend\n \n        ", " \
    \   count = 0\n    counter = 0\n    letter = false\n    dot = false\n    valid\
    \ = false\n    l_index = 0\n    r_index = 0\n    d_index = 0\n    l_sub = \"\"\
    \n    r_sub = \"\"\n    while count < length(file_name) \n        if !letter &&\
    \ isalpha(file_name[count+1])\n            letter = true\n            l_index\
    \ = count\n        end\n        if !dot && file_name[count+1] == '.'\n       \
    \     dot = true\n            d_index = count\n        end\n        if file_name[count+1]\
    \ == '.' && !dot \n            dot = true\n            d_index = count\n     \
    \   end\n        if !isdigit(file_name[count+1]) && letter && !dot\n         \
    \   counter += 1\n        end\n        count += 1\n    end\n    if counter <=\
    \ 3\n        l_sub = file_name[l_index+1:d_index]\n        r_sub = file_name[d_index+1:length(file_name)]\n\
    \        if l_sub != \"\" && (r_sub == \"txt\" || r_sub == \"exe\" || r_sub ==\
    \ \"dll\")\n            valid = true\n        end\n    end\n    if valid\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    #place\
    \ your code here\nend\n\"\"\"Create a function which takes a string representing\
    \ a full name, and returns a string containing\n    the initials.\n    The initials\
    \ are the first letter of each word in the name.\n    Example:\n    initials(\"\
    Ernest Hemingway\") # => \"EH\"\n    \"\"\"", "    digits_count = findall(r\"\\\
    d\", file_name)\n    file_parts = split(file_name, \".\")\n    if length(digits_count)\
    \ > 3 || length(file_parts) != 2 || \n        file_parts[1] \u2209 [\"txt\", \"\
    exe\", \"dll\"] || !match(r\"^[a-zA-Z]\", file_parts[1]) \n        return \"No\"\
    \n    else\n        return \"Yes\"\n    end\nend\nfile_name_check(\"example.txt\"\
    )\nfile_name_check(\"1example.dll\")", "    # Returns \"Yes\" or \"No\" depending\
    \ on if the given file name is valid.\n    #\n    # Inputs:\n    #       file_name::String;\
    \ the file name to be checked.\n    # Outputs:\n    #       check::String; \"\
    Yes\" if the file name is valid, and \"No\" otherwise.\n    #\n    # Parameters:\n\
    \    #       check::String; the result to be returned.\n    #       c::Char; the\
    \ current character being checked.\n    #       i::Int; the current position of\
    \ the character being checked.\n    #       count::Int; the number of occurrences\
    \ of numbers in the file name.\n    #       has_dot::Bool; denotes if the file\
    \ name has a dot or not.\n    #       is_valid::Bool; denotes if the file name\
    \ is valid or not.\n    check = \"No\"\n    count = 0\n    has_dot = false\n \
    \   is_valid = true\n    for (i, c) in enumerate(file_name)\n        if '0' <=\
    \ c <= '9'\n            count += 1\n        elseif c == '.'\n            has_dot\
    \ = true\n        elseif i == 0 && !(('a' <= c <= 'z') || ('A' <= c <= 'Z'))\n\
    \            is_valid = false\n        end\n    end\n    if count <= 3 && has_dot\
    \ && is_valid\n        if file_name[end-2:end] == \".txt\" || file_name[end-2:end]\
    \ == \".exe\" || file_name[end-3:end] == \".dll\"\n            check = \"Yes\"\
    \n        end\n    end\n    return check\nend", "    nums = [\"0\",\"1\",\"2\"\
    ,\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    nums_count = 0\n    dot_count\
    \ = 0\n    for i in 1:length(file_name)\n        if file_name[i] in nums\n   \
    \         nums_count += 1\n        end\n        if file_name[i] == \".\"\n   \
    \         dot_count += 1\n        end\n    end\n    if nums_count <= 3 && dot_count\
    \ == 1\n        if file_name[1] in string(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"\
    ,\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\"\
    ,\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"\
    ,\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\"\
    ,\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\n            return \"Yes\"\n    \
    \    else\n            return \"No\"\n        end\n    else\n        return \"\
    No\"\n    end\nend", "    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n   \
    \ split_name = split(file_name, '.')\n    if length(split_name) != 2\n       \
    \ return \"No\"\n    end\n    basename, extension = split_name\n    if !isletter(basename[1])\
    \ || !(extension in valid_extensions) || count(x -> x >= '0' && x <= '9', basename)\
    \ > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    # extract\
    \ the substring before the dot\n    ext = rx\"\\.(?<ext>\\w+)\"\n    sub_1 = match(ext,\
    \ file_name)\n    if sub_1 === nothing # The file's name contains exactly one\
    \ dot '.'\n        return \"No\"\n    end\n    sub_1 = get(sub_1).ext\n    if\
    \ sub_1 in [\"txt\", \"exe\", \"dll\"] # The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n        # extract the substring after the\
    \ dot\n        sub_2 = rx\"(?<sub_2>\\w+)\"\n        sub_2 = match(sub_2, file_name)\n\
    \        sub_2 = get(sub_2).sub_2\n        if length(sub_2) <= 3 # There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n            if\
    \ sub_2 === \"0\" # the substring before the dot should not be empty\n       \
    \         return \"No\"\n            end\n            if rx\"\\d\" === sub_2 #\
    \ the substring before the dot starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n                return \"No\"\n            end\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend", "    temp = replace(file_name,\
    \ r\"[^\\d]+\", \"\")\n    if length(temp) > 3\n        return \"No\"\n    end\n\
    \    temp = replace(file_name, r\"[^\\.]+\", \"\")\n    if length(temp) != 1\n\
    \        return \"No\"\n    end\n    if !(startswith(file_name, r\"[a-zA-Z]+\"\
    ) && endswith(file_name, r\"txt|exe|dll\"))\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend", "    if match(r\"^[a-zA-Z]\\w{0,2}\\.(txt|exe|dll)$\"\
    , file_name) != nothing\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)",
  "    digit_count = 0\n    dot_found = false\n    file_extension = \"\"\n    for\
    \ c in file_name\n        if c in '0':1:10\n            digit_count += 1\n   \
    \     elseif c == '.'\n            dot_found = true\n        elseif digit_count\
    \ > 3\n            return \"No\"\n        elseif dot_found\n            file_extension\
    \ = c\n        elseif c in 'a':'z' || c in 'A':'Z'\n            continue\n   \
    \     else\n            return \"No\"\n        end\n    end\n    return \"Yes\"\
    \nend\n \n \n \n\"\"\"Create a function which returns the logarithm of a given\
    \ number (base 10)\n    Examples:\n    my_log(10) # => 1.0\n    my_log(100) #\
    \ => 2.0\n    my_log(1000) # => 3.0\n    \"\"\"", "    if count(x->isdigit(x),\
    \ file_name) > 3\n        return \"No\"\n    end\n    name_split = split(file_name,\
    \ '.')\n    if length(name_split) != 2 || length(name_split[1]) == 0 || isalpha(name_split[1][1])\n\
    \        return \"No\"\n    end\n    if name_split[2] != \"txt\" && name_split[2]\
    \ != \"exe\" && name_split[2] != \"dll\"\n        return \"No\"\n    end\n   \
    \ return \"Yes\"\nend", "    i = 0\n    dot_counter = 0\n    digits_counter =\
    \ 0\n    is_invalid = true\n    for i in 1:length(file_name)\n        if file_name[i]\
    \ == '.'\n            dot_counter += 1\n        end\n        if isdigit(file_name[i])\n\
    \            digits_counter += 1\n        end\n    end\n    if digits_counter\
    \ <= 3 && dot_counter == 1 && (isletter(file_name[1]) || isletter(file_name[2]))\
    \ &&\n        (file_name[length(file_name)-2:length(file_name)] == \"txt\" ||\
    \ file_name[length(file_name)-2:length(file_name)] == \"exe\" || file_name[length(file_name)-2:length(file_name)]\
    \ == \"dll\")\n        is_invalid = false\n    end\n    if is_invalid == false\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend", "   \
    \ if ismatch(r\"^[A-Za-z]\\w{0,3}\\.(txt|exe|dll)$\", file_name)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    digits = [\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    sub_exts = [\"txt\"\
    , \"exe\", \"dll\"]\n    count = 0\n    dot_idx = 0\n    temp = 0\n    for i in\
    \ 1:length(file_name)\n        if file_name[i] in digits\n            count +=\
    \ 1\n        end\n        if file_name[i] == '.'\n            dot_idx = i\n  \
    \      end\n    end\n    if count > 3\n        return \"No\"\n    end\n    if\
    \ count == 0\n        return \"No\"\n    end\n    if (dot_idx == 1) || (dot_idx\
    \ == length(file_name))\n        return \"No\"\n    end\n    if count == length(file_name)\n\
    \        return \"No\"\n    end\n    sub = \"\"\n    for i in 1:dot_idx-1\n  \
    \      sub = sub * file_name[i]\n    end\n    #println(sub)\n    if (sub[1] >=\
    \ 'a' && sub[1] <= 'z') || (sub[1] >= 'A' && sub[1] <= 'Z')\n        for i in\
    \ 1:length(sub_exts)\n            if (sub_exts[i] == file_name[dot_idx+1:end])\n\
    \                return \"Yes\"\n            end\n        end\n    end\n    return\
    \ \"No\"\nend", "    if count(isdigit, file_name) > 3\n        return \"No\"\n\
    \    end\n    if count(isalpha, file_name) == 0\n        return \"No\"\n    end\n\
    \    if count(x -> x == '.', file_name) != 1\n        return \"No\"\n    end\n\
    \    if length(filter(isdigit, file_name)) == length(file_name)\n        return\
    \ \"No\"\n    end\n    if file_name[end-2:end] != \"txt\" && file_name[end-2:end]\
    \ != \"exe\" && file_name[end-2:end] != \"dll\"\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend", "    check = split(file_name, \".\")\n    if length(check)\
    \ > 2\n        return \"No\"\n    end\n    if (check[1][1] in '0':'9')\n     \
    \   return \"No\"\n    end\n    if !(check[2] in [\"txt\", \"exe\", \"dll\"])\n\
    \        return \"No\"\n    end\n    return \"Yes\"\nend", "    if !contains(file_name,\
    \ '.') || length(file_name) < 5\n        return \"No\"\n    end\n    file_name\
    \ = split(file_name, '.')\n    if !('a'<=file_name[1][1]<='z' || 'A'<=file_name[1][1]<='Z')\n\
    \        return \"No\"\n    end\n    if !(file_name[2] in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    if length(regexp(r'[0-9]', file_name[1]))\
    \ > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    for i in\
    \ 1:length(file_name)\n        if file_name[i] > '0' && file_name[i] < '9'\n \
    \           if file_name[i+1] > '0' && file_name[i+1] < '9'\n                if\
    \ file_name[i+2] > '0' && file_name[i+2] < '9'\n                    return \"\
    No\"\n                end\n            end\n        end\n    end\n    dot_index\
    \ = 0\n    for i in 1:length(file_name)\n        if file_name[i] == '.'\n    \
    \        dot_index = i\n        end\n    end\n    first_part = file_name[1:dot_index-1]\n\
    \    if (length(first_part) == 0)\n        return \"No\"\n    end\n    second_part\
    \ = file_name[dot_index+1:end]\n    if (second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\")\n        return \"No\"\n    end\n    if\
    \ (file_name[1] > 'a' && file_name[1] < 'z') || (file_name[1] > 'A' && file_name[1]\
    \ < 'Z')\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend",
  "    # Calculate the amount of digits in the file name\n    count_digits = sum(\
    \ [isletter(c) ? 0 : 1 for c in file_name] ) \n    # Check if the amount of digits\
    \ is greater than 3.\n    if count_digits > 3\n        return \"No\"\n    end",
  "    num_digits = 0\n    for ch in file_name\n        if '0' <= ch <= '9'\n    \
    \        num_digits += 1\n        end\n    end\n    if num_digits > 3\n      \
    \  return \"No\"\n    end\n    dot_pos = findfirst(x -> x == '.', file_name)\n\
    \    if dot_pos == nothing\n        return \"No\"\n    end\n    before_dot = file_name[1:dot_pos-1]\n\
    \    if !contains(['a'-'z', 'A'-'Z'], before_dot[1]) || before_dot == \"\"\n \
    \       return \"No\"\n    end\n    after_dot = file_name[dot_pos+1:end]\n   \
    \ if !contains([\"txt\", \"exe\", \"dll\"], after_dot)\n        return \"No\"\n\
    \    end\n    return \"Yes\"\nend", "    count = 0\n    #1. Check if there are\
    \ not more than 3 digits in the file's name\n    for i = 1:length(file_name)\n\
    \        if '0' <= file_name[i] <= '9'\n            count += 1\n        end\n\
    \    end\n    if count > 3\n        return \"No\"\n    end\n    #2. Check if the\
    \ file's name contains exactly one dot\n    count = 0\n    for i = 1:length(file_name)\n\
    \        if file_name[i] == '.'\n            count += 1\n        end\n    end\n\
    \    if count != 1\n        return \"No\"\n    end\n    #3. Check if the substring\
    \ before the dot is not empty and start with a letter\n    dot_index = findfirst(file_name,\
    \ '.')\n    if dot_index == 1 || dot_index == length(file_name)\n        return\
    \ \"No\"\n    end\n    substring_before_dot = file_name[1:dot_index-1]\n    if\
    \ (substring_before_dot[1] >= 'a' && substring_before_dot[1] <= 'z') || \n   \
    \     (substring_before_dot[1] >= 'A' && substring_before_dot[1] <= 'Z')\n   \
    \     #4. Check if the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        substring_after_dot = file_name[dot_index+1:end]\n  \
    \      if substring_after_dot == \"txt\" || substring_after_dot == \"exe\" ||\
    \ substring_after_dot == \"dll\"\n            return \"Yes\"\n        end\n  \
    \  end\n    return \"No\"\nend", "    n = 0\n    z = 0\n    k = 0\n    for i in\
    \ file_name\n        if i in '0':9\n            n = n + 1\n        end\n     \
    \   if i == '.'\n            z = z + 1\n        end\n    end\n    if (n > 3) ||\
    \ (z != 1)\n        k = 1\n    end\n    if k == 1\n        return \"No\"\n   \
    \ else\n        return \"Yes\"\n    end\nend", "    string = \"\"\n    count =\
    \ 0\n    if (split(file_name, '.')[1] == \"txt\" || split(file_name, '.')[1] ==\
    \ \"exe\" || split(file_name, '.')[1] == \"dll\") \n        string = \"Yes\"\n\
    \    else \n        string = \"No\"\n    end \n    if (split(file_name, '.')[1]\
    \ == \"\") \n        string = \"No\"\n    end \n    if (split(file_name, '.')[1]\
    \ == \"exe\" || split(file_name, '.')[1] == \"dll\")\n        if (split(file_name,\
    \ '.')[2] != \"\") \n            string = \"No\"\n        end \n    end \n   \
    \ if !(isalpha(split(file_name, '.')[1][1])) \n        string = \"No\"\n    end\
    \ \n    for letter in file_name \n        if isdigit(letter) \n            count\
    \ = count + 1\n        end \n    end \n    if (count > 3) \n        string = \"\
    No\"\n    end \n    return string\nend ", "    if !startswith(file_name, [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) || !occursin(file_name, \"\
    .\") || length(split(file_name, \".\")) != 2 ||  length(filter(r -> r in '0':'9',\
    \ file_name))>3\n        return \"No\"\n    elseif contains(split(file_name, \"\
    .\")[2], [\"txt\", \"exe\", \"dll\"])\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend", "    # Write your code here!\nend\n@testset\
    \ \"Example Tests\" begin\n    @test file_name_check(\"example.txt\") == \"Yes\"\
    \n    @test file_name_check(\"1example.dll\") == \"No\"\n    @test file_name_check(\"\
    1example1.txt\") == \"No\"\n    @test file_name_check(\"example.dll\") == \"Yes\"\
    \n    @test file_name_check(\"1.dll\") == \"No\"\n    @test file_name_check(\"\
    example1.exe\") == \"Yes\"\n    @test file_name_check(\"1example2.exe\") == \"\
    No\"\n    @test file_name_check(\"example.txt.exe\") == \"No\"\n    @test file_name_check(\"\
    example1.txt1\") == \"No\"\n    @test file_name_check(\"example.exe.txt\") ==\
    \ \"No\"\n    @test file_name_check(\"example.txt.txt\") == \"No\"\n    @test\
    \ file_name_check(\"example1.txt.exe\") == \"No\"\n    @test file_name_check(\"\
    example.txt1.exe\") == \"No\"\n    @test file_name_check(\"example1.txt.txt\"\
    ) == \"No\"\n    @test file_name_check(\"example1.txt.exe\") == \"No\"\n    @test\
    \ file_name_check(\"example.exe1.txt\") == \"No\"\n    @test file_name_check(\"\
    example.txt1.exe\") == \"No\"\n    @test file_name_check(\"example1.txt1.exe\"\
    ) == \"No\"\n    @test file_name_check(\"example1.exe1.txt\") == \"No\"\n    @test\
    \ file_name_check(\"example1.exe1.exe\") == \"No\"\n    @test file_name_check(\"\
    example1.exe1.dll\") == \"No\"\n    @test file_name_check(\"example.dll1.txt\"\
    ) == \"No\"\n    @test file_name_check(\"example.dll1.exe\") == \"No\"\n    @test\
    \ file_name_check(\"example.dll1.dll\") == \"No\"\n    @test", "    \"\"\"Function\
    \ that checks if a file name is valid or not. \n    \"\"\"\n    is_valid = \"\"\
    \n    file_dot = file_name.find(\".\")\n    if file_dot != -1\n        file_name_split\
    \ = split(file_name, \".\")\n        if (file_name_split[1] == \"txt\") || (file_name_split[1]\
    \ == \"exe\") || (file_name_split[1] == \"dll\")\n            file_number = length(filter(x\
    \ -> x in '0':'9', file_name_split[1]))\n            if file_number <= 3\n   \
    \             is_valid = \"Yes\"\n            else\n                is_valid =\
    \ \"No\"\n            end\n        else\n            is_valid = \"No\"\n     \
    \   end\n    else\n        is_valid = \"No\"\n    end\n    return is_valid\nend",
  "    digits_in_name=0\n    for i in 1:length(file_name)\n        if file_name[i]\
    \ in 0:9\n            digits_in_name+=1\n        end\n    end\n    if digits_in_name>3\n\
    \        return \"No\"\n    end\n    if !(\".\" in file_name)\n        return\
    \ \"No\"\n    end\n    name_before_dot = split(file_name, '.')[1]\n    if !(name_before_dot[1]\
    \ in 'a':'z' || name_before_dot[1] in 'A':'Z')\n        return \"No\"\n    end\n\
    \    if name_before_dot==\"\"\n        return \"No\"\n    end\n    name_after_dot\
    \ = split(file_name, '.')[2]\n    if !(name_after_dot in [\"txt\", \"exe\", \"\
    dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    digits\
    \ = \"0123456789\"\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    result = \"Yes\"\n    if contains(file_name, '.') == false\n        result\
    \ = \"No\"\n    else\n        first, second = split(file_name, '.')\n        if\
    \ starts_with(second, letters) == false || contains(second, digits) == true\n\
    \            result = \"No\"\n        elseif sum(map(s -> s in digits, first))\
    \ > 3\n            result = \"No\"\n        elseif second != \"txt\" && second\
    \ != \"exe\" && second != \"dll\"\n            result = \"No\"\n        end\n\
    \    end\n    return result\nend\n ", "    # YOUR CODE HERE\n    pass\nend", " \
    \   if isempty(regexp(file_name, r\"^[a-zA-Z][^.]*\\.(?:txt|exe|dll)$\"))\n  \
    \      return \"No\"\n    else\n        return \"Yes\"\n    end\nend", "    num_digits\
    \ = length([c for c in file_name if c in \"0123456789\"])\n    if num_digits >\
    \ 3\n        return \"No\"\n    end\n    num_dots = length([c for c in file_name\
    \ if c == '.'])\n    if num_dots != 1\n        return \"No\"\n    end\n    substrings\
    \ = split(file_name, '.')\n    if substrings[1] != \"txt\" && substrings[1] !=\
    \ \"exe\" && substrings[1] != \"dll\"\n        return \"No\"\n    end\n    first_char\
    \ = substrings[1][1]\n    if !(first_char in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    if count(r\"\
    \\d\", file_name) > 3\n        return \"No\"\n    end\n    file_name_no_extension,\
    \ extension = split(file_name, '.')\n    if extension in [\"txt\", \"exe\", \"\
    dll\"] && ismatch(r\"[a-zA-Z]\", file_name_no_extension)\n        return \"Yes\"\
    \n    end\n    return \"No\"\nend", "    # type assertion\n    if !(contains(r\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.txt$\", file_name) || \n          contains(r\"^[a-zA-Z][a-zA-Z0-9]*\\\
    .exe$\", file_name) || \n          contains(r\"^[a-zA-Z][a-zA-Z0-9]*\\.dll$\"\
    , file_name))\n        return \"No\"\n    end\n    return \"Yes\"\nend", "   \
    \ num_digits = sum(i in '0':'9' for i in file_name)\n    if num_digits > 3\n \
    \       return \"No\"\n    end\n    dot_idx = findfirst(x -> x == '.', file_name)\n\
    \    if dot_idx == nothing\n        return \"No\"\n    end\n    if dot_idx ==\
    \ 1\n        return \"No\"\n    end\n    filename_before_dot = file_name[1:dot_idx-1]\n\
    \    if all(i in 'a':'z' for i in filename_before_dot) || all(i in 'A':'Z' for\
    \ i in filename_before_dot)\n        filename_after_dot = file_name[dot_idx+1:end]\n\
    \        if filename_after_dot in [\"txt\", \"exe\", \"dll\"]\n            return\
    \ \"Yes\"\n        end\n    end\n    return \"No\"\nend\n        ", "    valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    letters = ['a' : 'z' ; 'A' : 'Z']\n    digits\
    \ = '0' : '9'\n    all_alphabet = letters ++ digits\n    ext = split(file_name,\
    \ \".\")[2]\n    if ismatch(r\"\\d{4,}\", file_name) || !in(ext, valid_extensions)\
    \ || !isalpha(file_name[1])\n        return \"No\"\n    else\n        return \"\
    Yes\"\n    end\nend", "    isvalid = false\n    if count(r\"\\d\", file_name)\
    \ > 3\n        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n\
    \        return \"No\"\n    end\n    if count(r\"\\.\", file_name) != 1\n    \
    \    return \"No\"\n    end\n    if ismatch(r\"^[A-Za-z]+\", file_name)\n    \
    \    if ismatch(r\"\\.[\\w]+$\", file_name)\n            isvalid = true\n    \
    \    end\n    end\n    if isvalid\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend", "    digits_count = 0\n    dot_count = 0\n    has_valid_extension\
    \ = false\n    has_valid_pre_extension = false\n    for c in file_name\n     \
    \   if c in '0'::9\n            digits_count += 1\n        elseif c == '.'\n \
    \           dot_count += 1\n        elseif digits_count == 0\n            if c\
    \ in 'a'::'z' || c in 'A'::'Z'\n                has_valid_pre_extension = true\n\
    \            end\n        end\n    end\n    if digits_count <= 3 && dot_count\
    \ == 1 && has_valid_pre_extension\n        has_valid_extension = file_name[end-2:end]\
    \ in [\"txt\", \"exe\", \"dll\"]\n    end\n    if has_valid_extension\n      \
    \  return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nprintln(file_name_check(\"\
    example.txt\"))\nprintln(file_name_check(\"1example.dll\"))", "    return if_else(endswith.([\"\
    txt\", \"exe\", \"dll\"], file_name[match(r\"\\.(\\w+)$\", file_name).captures[1]]),\n\
    \        if_else(match(r\"^[A-Za-z][A-Za-z0-9]*\\.\\w+$\", file_name) != nothing,\n\
    \            if_else(count(r\"\\d\", file_name) <= 3,\n                \"Yes\"\
    , \"No\"\n            ), \"No\"\n        ), \"No\"\n    )\nend", "    # Your code\
    \ goes here\n    # ...\n    return \nend\n ", "    # your code here\nend", " \
    \   str_splited = split(file_name, \".\")\n    if length(str_splited) != 2\n \
    \       return \"No\"\n    end\n    if length(filter(i->i in 0:9, str_splited[1]))\
    \ > 3\n        return \"No\"\n    end\n    if length(str_splited[1]) == 0\n  \
    \      return \"No\"\n    end\n    if !(str_splited[1][1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n        return \"No\"\n    end\n    if !(str_splited[2] in [\"txt\", \"exe\"\
    , \"dll\"])\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    if\
    \ count(r\"[0-9]\", file_name) > 3\n        return \"No\"\n    end\n    file_name_split\
    \ = split(file_name, '.')\n    if length(file_name_split) != 2\n        return\
    \ \"No\"\n    end\n    if !match(r\"[a-zA-Z]\", file_name_split[1])\n        return\
    \ \"No\"\n    end\n    if file_name_split[2] \u2209 [\"txt\", \"exe\", \"dll\"\
    ]\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    @assert length(file_name)\
    \ > 0\n    if length(file_name) < 4\n        return \"No\"\n    end\n    if length(file_name)\
    \ > 15\n        return \"No\"\n    end\n    if length(findall(r\"[\\d]\", file_name))\
    \ > 3\n        return \"No\"\n    end\n    if length(findall(r\"\\.\", file_name))\
    \ != 1\n        return \"No\"\n    end\n    if length(findall(r\"^[a-zA-Z]\",\
    \ split(file_name, \".\")[1])) != 1\n        return \"No\"\n    end\n    if split(file_name,\
    \ \".\")[2] != \"txt\" && split(file_name, \".\")[2] != \"exe\" && split(file_name,\
    \ \".\")[2] != \"dll\"\n        return \"No\"\n    end\n    return \"Yes\"\nend",
  "    if count(x->x in '0':'9', file_name)>3 || count(x->x=='.', file_name)!=1 ||\n\
    \    occursin(file_name[1], '0':'9') || file_name[end-3:end] in [\"txt\", \"exe\"\
    , \"dll\"]\n        return \"No\"\n    else\n        return \"Yes\"\n    end\n\
    end", "    cnt = 0\n    if '.' in file_name\n        if length(split(file_name,\
    \ '.')) == 2\n            if file_name[1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \                if file_name[end-2:end] in ['txt', 'exe', 'dll']\n          \
    \          for i in file_name\n                        if '0' <= i <= '9'\n  \
    \                          cnt += 1\n                    end\n               \
    \     if cnt <= 3\n                        return 'Yes'\n                    else\n\
    \                        return 'No'\n                    end\n              \
    \  else\n                    return 'No'\n                end\n            else\n\
    \                return 'No'\n            end\n        else\n            return\
    \ 'No'\n        end\n    else\n        return 'No'\n    end\nend", "    n = length(file_name)\n\
    \    count = 0\n    for i in file_name\n        if isdigit(i)\n            count\
    \ += 1\n        end\n    end\n    count <= 3 || error(\"Invalid name\")\n    split(file_name,\
    \ '.') == 2 || error(\"Invalid name\")\n    isletter(file_name[1]) || error(\"\
    Invalid name\")\n    s = findfirst(isequal('.'), file_name)\n    ext = file_name[s+1:end]\n\
    \    ext in [\"txt\", \"exe\", \"dll\"] || error(\"Invalid name\")\n    return\
    \ \"Yes\"\nend", "    result = \"Yes\"\n    s = file_name\n    counter = 0\n \
    \   for i in 1:length(s)\n        if !isalpha(s[i])\n            if s[i] in '0123456789'\n\
    \                counter += 1\n            end\n        end\n    end\n    if counter\
    \ > 3\n        result = \"No\"\n    end\n    return result\nend", "    digit_count\
    \ = 0\n    dot_count = 0\n    latin_letter_count = 0\n    latin_letter_index =\
    \ 0\n    dot_index = 0\n    extension = \"\"\n    for i in 1:length(file_name)\n\
    \        if '0' <= file_name[i] <= '9'\n            digit_count += 1\n       \
    \ end\n        if file_name[i] == '.'\n            dot_count += 1\n          \
    \  dot_index = i\n        end\n        if ('a' <= file_name[i] <= 'z') || ('A'\
    \ <= file_name[i] <= 'Z')\n            latin_letter_count += 1\n            latin_letter_index\
    \ = i\n        end\n    end\n    if (dot_count == 1) && (latin_letter_count >=\
    \ 1) && (digit_count <= 3)\n        if (dot_index - latin_letter_index) >= 1\n\
    \            extension = file_name[dot_index+1:end]\n            if (\"txt\" ==\
    \ extension) || (\"exe\" == extension) || (\"dll\" == extension)\n           \
    \     return \"Yes\"\n            end\n        end\n    end\n    return \"No\"\
    \nend", "    do_with(file_name) do file_name\n        (number_of_digits(file_name)\
    \ <= 3) && \n        (count_substring(file_name, \".\") == 1) && \n        (substring(file_name,\
    \ first_index_of(file_name, \".\")) != \"\") && \n        (substring(file_name,\
    \ last_index_of(file_name, \".\") + 1) in \n            (\"txt\", \"exe\", \"\
    dll\")) ?\n            \"Yes\" : \"No\"\n    end\nend", "    if count(x->x in\
    \ '0':'9', file_name) > 3\n        return \"No\"\n    end\n    if file_name[end]\
    \ == '.'\n        return \"No\"\n    end\n    if count(x->x == '.', file_name)\
    \ > 1\n        return \"No\"\n    end\n    dot_position = find(x->x == '.', file_name)\n\
    \    extension = file_name[dot_position+1:end]\n    file_name = file_name[1:dot_position-1]\n\
    \    if !(file_name[1] in 'a':'z' || file_name[1] in 'A':'Z')\n        return\
    \ \"No\"\n    end\n    if extension in [\"txt\", \"exe\", \"dll\"]\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    numdigits = 0\n\
    \    numdots = 0\n    for i in 1:length(file_name)\n        if isdigit(file_name[i])\n\
    \            numdigits += 1\n        end\n        if file_name[i] == '.'\n   \
    \         numdots += 1\n        end\n    end\n    if numdigits > 3 || numdots\
    \ != 1\n        return \"No\"\n    end\n    prefix = split(file_name, '.')[1]\n\
    \    if !isalpha(prefix[1]) || length(prefix) == 0\n        return \"No\"\n  \
    \  end\n    suffix = split(file_name, '.')[2]\n    if suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\"\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    # write your code here\nend", "    regex = r\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"\n    match = match(regex, file_name)\n    isnothing(match) ?\
    \ \"No\" : \"Yes\"\nend", "    # first check if the substring after the dot is\
    \ valid:\n    dot_index = search(r\"\\.\", file_name)\n    if dot_index < length(file_name)\n\
    \        if(file_name[dot_index+1:end] in [\"txt\", \"exe\", \"dll\"])\n     \
    \       # if so, check if the substring before the dot is valid:\n           \
    \ if !isempty(regexp(\"^[a-zA-Z]\", file_name[1:dot_index]))\n               \
    \ if !isempty(regexp(\"[0-9]{4,}\", file_name))\n                    return \"\
    No\"\n                else\n                    return \"Yes\"\n            else\n\
    \                return \"No\"\n        else\n            return \"No\"\n    else\n\
    \        return \"No\"\n    end\nend", "    \n    return 'No'\nend", "    x =\
    \ file_name.split(\".\")\n    d = 0\n    c = 0\n    l = lowercase(x[1])\n    if\
    \ l == \"exe\" || l == \"txt\" || l == \"dll\"\n        if x[1] == l && x[2] ==\
    \ \"\"\n            if isalphabetic(x[1][1])\n                for i in 1:size(x[1],1)\n\
    \                    if isdigit(x[1][i])\n                        d = d + 1\n\
    \                    end\n                end\n                if d > 3\n    \
    \                return \"No\"\n                else \n                    return\
    \ \"Yes\"\n                end\n            else\n                return \"No\"\
    \n            end\n        else\n            return \"No\"\n        end\n    else\n\
    \        return \"No\"\n    end\nend", "    number_of_digits = sum(isdigit(x)\
    \ for x in file_name)\n    letter_check = (file_name[1:end] == \"example.txt\"\
    ) | (file_name[1:end] == \"example.exe\") | (file_name[1:end] == \"example.dll\"\
    )\n    if number_of_digits <= 3 & file_name[1] in letters & file_name[end] ==\
    \ \".\" & letter_check == true\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend", "    (contains(file_name, r\"[^.]{1,4}\\.txt\"), ismatch(r\"\
    [a-zA-Z]{1,4}\\.txt\", file_name), count(file_name, r\"[0-9]\") == 3, count(file_name,\
    \ \".\") == 1)\nend", "    if count_digits(file_name) > 3 || count_extensions(file_name)\
    \ != 1 || \n        length(extract_extensions(file_name)) == 0 || \n        !valid_extension(extract_extensions(file_name))\
    \ || \n        !valid_prefix(extract_prefix(file_name))\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend", "    # your code here\nend", "    file_name_parts\
    \ = split(file_name, \".\")\n    allowed_extensions = [\"txt\", \"exe\", \"dll\"\
    ]\n    before_dot = file_name_parts[1]\n    after_dot = file_name_parts[2]\n \
    \   digits_count = sum(i in \"0123456789\" for i in before_dot)\n    if digits_count\
    \ > 3\n        return \"No\"\n    end\n    if !(length(file_name_parts) == 2)\
    \ || !(before_dot[1] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ) || !(after_dot in allowed_extensions)\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", "    count = 0\n    flag = true\n    extension = \"\"\n    for\
    \ c in file_name\n        if c >= '0' && c <= '9'\n            count += 1\n  \
    \      end\n        if c == '.'\n            flag = false\n        end\n     \
    \   if flag\n            extension = extension * c\n        end\n    end\n   \
    \ if count <= 3\n        if file_name[1] >= 'A' && file_name[1] <= 'Z' || file_name[1]\
    \ >= 'a' && file_name[1] <= 'z'\n            if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\"\n                return \"Yes\"\n       \
    \     end\n        end\n    end\n    return \"No\"\nend", "    if(sum(isalpha.(file_name))\
    \ > 0)\n        if(sum(isalpha.(file_name)) == (length(file_name) - 3))\n    \
    \        if(sum(isdigit.(file_name)) <= 3)\n                if(count(x -> x ==\
    \ '.', file_name) == 1)\n                    if(contains(['txt', 'exe', 'dll'],\
    \ split(file_name, '.')[2]))\n                        return 'Yes'\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    return 'No'\nend\nfile_name_check(\"example.txt\")"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
