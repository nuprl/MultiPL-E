name: HumanEval_160_do_algebra
language: jl
prompt: "\"\"\"\n    Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    the second list is a list of integers. Use the two\
  \ given lists to build the algebric \n    expression and return the evaluation of\
  \ this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n \
  \   Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n\
  \    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array\
  \ = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n \
  \       The length of operator list is equal to the length of operand list minus\
  \ one.\n        Operand is a list of of non-negative integers.\n        Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\n\
  \    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
  **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
  ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
completions: ["    \"\"\"\n    Input:\n        operator: a list of strings (a + b)\n\
    \        operand: a list of integers (1 + 2)\n    Output:\n        the result\
    \ of the algebraic expression in integer format\n    \"\"\"\n    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    \n    i = 1\n    result =\
    \ operand[1]\n    while i < length(operator)\n        if operator[i] == \"+\"\n\
    \            result = result + operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            result = result - operand[i+1]\n        elseif operator[i] ==\
    \ \"*\"\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n       \
    \ i = i + 1\n    end\n    return result\nend", "    result = operand[1]\n    for\
    \ i in 2:length(operand)\n        if operator[i-1] == \"-\"\n            result\
    \ -= operand[i]\n        elseif operator[i-1] == \"+\"\n            result +=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            result //= operand[i]\n \
    \       elseif operator[i-1] == \"**\"\n            result ^= operand[i]\n   \
    \     end\n    end\n    return result\nend", "    result = operand[1]\n    for\
    \ (op, num) in zip(operator, operand[2:end])\n        if op == \"+\"\n       \
    \     result += num\n        elseif op == \"-\"\n            result -= num\n \
    \       elseif op == \"*\"\n            result *= num\n        elseif op == \"\
    //\"\n            result \xF7= num\n        elseif op == \"**\"\n            result\
    \ ^= num\n        end\n    end\n    return result\nend", "    result = operand[1]\n\
    \    for i in 2:length(operand)\n        o = operator[i-1]\n        n = operand[i]\n\
    \        if o == \"+\"\n            result += n\n        elseif o == \"-\"\n \
    \           result -= n\n        elseif o == \"*\"\n            result *= n\n\
    \        elseif o == \"//\"\n            result = div(result, n)\n        elseif\
    \ o == \"**\"\n            result ^= n\n        end\n    end\n    return result\n\
    end", "    result = operand[1]\n    for i = 1:length(operator)\n        eval(\"\
    result = $(operator[i])(result, operand[i+1])\")\n    end\n    return result\n\
    end", "    expression = operand[1]\n    for i in 2:length(operand)\n        expression\
    \ = eval(Meta.parse(string(expression, operator[i-1], operand[i])))\n    end\n\
    \    return expression\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\noperator = [\"+\", \"*\", \"-\"]\noperand = [2, 3, 4, 5]\n@assert\
    \ do_algebra(operator, operand) == 9", "    # insert your solution here\n    expression\
    \ = string(operand[1])\n    for i in 2:length(operand)\n        expression = string(expression,\
    \ \" \", operator[i-1], \" \", operand[i])\n    end\n    return eval(parse(expression))\n\
    end", "    sum = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            sum += operand[i+1]\n        elseif operator[i] == \"\
    -\"\n            sum -= operand[i+1]\n        elseif operator[i] == \"*\"\n  \
    \          sum *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     sum = floor(Int64, sum / operand[i+1])\n        elseif operator[i] == \"\
    **\"\n            sum = floor(Int64, sum ^ operand[i+1])\n        end\n    end\n\
    \    return sum\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend", "    operand[1] = parse(Int64, operator[1])\n\
    \    for i = 2:length(operator)\n        operand[i] = operand[i-1] * operand[i]\n\
    \    end\n    \n    return sum(operand)\nend", "    expression = \"\"\n    for\
    \ i in 1:length(operator)\n        if(operator[i] == \"//\")\n            expression\
    \ = string(expression, \"div(\",operand[i], \",\", operand[i+1], \")\")\n    \
    \    else\n            expression = string(expression, \"\",operand[i], operator[i],\
    \ operand[i+1])\n        end\n    end\n    #@show expression\n    return eval(parse(expression))\n\
    end", "    a = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            a += operand[i]\n        elseif operator[i-1] == \"-\"\
    \n            a -= operand[i]\n        elseif operator[i-1] == \"*\"\n       \
    \     a *= operand[i]\n        elseif operator[i-1] == \"//\"\n            a =\
    \ convert(Int64, a / operand[i])\n        elseif operator[i-1] == \"**\"\n   \
    \         a = convert(Int64, a ^ operand[i])\n        end\n    end\n    return\
    \ a\nend\n \nprintln(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\nprintln(do_algebra([\"\
    +\", \"-\"], [2, 3, 4]))\nprintln(do_algebra([\"+\", \"-\"], [2, 3, 4, 5]))\n\
    println(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4]))", "    # your code here\n\
    end", "    # Your code here\n    result = operand[1]\n    operand = operand[2:end]\n\
    \    for i in 1:length(operator)\n        op = operator[i]\n        if op == \"\
    +\"\n            result += operand[i]\n        elseif op == \"-\"\n          \
    \  result -= operand[i]\n        elseif op == \"*\"\n            result *= operand[i]\n\
    \        elseif op == \"//\"\n            result = result \xF7 operand[i]\n  \
    \      elseif op == \"**\"\n            result ^= operand[i]\n        end\n  \
    \  end\n    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n   \
    \     if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # your code here\n    i=1\n    k=0\n    for j=1:length(operator)\n\
    \        if operator[j]==\"//\"\n            operand[i]=floor(Int,operand[i]/operand[i+1])\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"**\"\n            operand[i]=operand[i]^operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"*\"\n            operand[i]=operand[i]*operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"-\"\n            operand[i]=operand[i]-operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        elseif operator[j]==\"+\"\n            operand[i]=operand[i]+operand[i+1]\n\
    \            operand=deleteat!(operand,i+1)\n            operator=deleteat!(operator,j)\n\
    \            k=1\n        end\n    end\n    if k==1\n        do_algebra(operator,operand)\n\
    \    else\n        operand[1]\n    end\nend", "    result = operand[1]\n    for\
    \ (i, op) in enumerate(operator)\n        result = eval(string(result, op, operand[i+1]))\n\
    \    end\n    return result\nend", "    # your code goes here\n    oper_stack\
    \ = []\n    oper_stack = push!(oper_stack, operand[1])\n    for i in 2:length(operand)\n\
    \        op = operator[i-1]\n        if op == \"*\"\n            push!(oper_stack,\
    \ pop!(oper_stack) * operand[i])\n        elseif op == \"+\"\n            push!(oper_stack,\
    \ pop!(oper_stack) + operand[i])\n        elseif op == \"-\"\n            push!(oper_stack,\
    \ pop!(oper_stack) - operand[i])\n        elseif op == \"//\"\n            push!(oper_stack,\
    \ pop!(oper_stack) \xF7 operand[i])\n        elseif op == \"**\"\n           \
    \ push!(oper_stack, pop!(oper_stack) ^ operand[i])\n        end\n    end\n   \
    \ return pop!(oper_stack)\nend", "    if length(operator) != length(operand) -\
    \ 1\n        throw(ErrorException(\"Invalid operator and operand length.\"))\n\
    \    end\n    if length(operator) < 1 || length(operand) < 2\n        throw(ErrorException(\"\
    Operator and operand are empty.\"))\n    end\n    result = operand[1]\n    for\
    \ i = 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = result \xF7 operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      else\n            throw(ErrorException(\"Invalid operator\"))\n       \
    \ end\n    end\n    return result\nend", "    # write your codes here...\nend\n\
    \ ", "    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "    result = operand[1]\n    operand = operand[2:end]\n\
    \    for (op, opr) in zip(operator, operand)\n        if op == \"+\"\n       \
    \     result += opr\n        elseif op == \"-\"\n            result -= opr\n \
    \       elseif op == \"*\"\n            result *= opr\n        elseif op == \"\
    //\"\n            result //= opr\n        elseif op == \"**\"\n            result\
    \ ^= opr\n        end\n    end\n    return result\nend", '    result = operand[1]',
  "    \n    # YOUR CODE HERE\n    \nend", "    \nend", "    # your code goes here\n\
    end\n \n \n \n    \n    \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "    result\
    \ = operand[1]\n    for (i, op) in enumerate(operator)\n        result = calc(result,\
    \ op, operand[i+1])\n    end\n    return result\nend", "    \nend", "    \"\"\"\
    \n    Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n    expression and return the evaluation of this\
    \ expression.", "    # your code goes here\n    n = length(operator)\n    res\
    \ = operand[1]\n    for i in 1:n\n        if operator[i] == \"+\"\n          \
    \  res += operand[i+1]\n        elseif operator[i] == \"-\"\n            res -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            res *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            res = floor(Int64, res / operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            res = res ^ operand[i+1]\n\
    \        end\n    end\n    return res\nend", "    res = operand[1]\n    for i\
    \ in 1:length(operator)\n        if operator[i] == \"+\"\n            res += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            res -= operand[i+1]\n      \
    \  elseif operator[i] == \"*\"\n            res *= operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            res = div(res, operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            res ^= operand[i+1]\n        end\n    end\n\
    \    return res\nend", "    \n    res = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            res += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            res -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            res *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            res //= operand[i+1]\n        elseif operator[i] == \"**\"\n\
    \            res ^= operand[i+1]\n        end\n    end\n    return res\nend",
  "    result = operand[1]\n    for (i, op) in enumerate(operator)\n        if op\
    \ == \"+\"\n            result += operand[i+1]\n        elseif op == \"-\"\n \
    \           result -= operand[i+1]\n        elseif op == \"*\"\n            result\
    \ *= operand[i+1]\n        elseif op == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif op == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    # your code here\n    expr\
    \ = string(operand[1])\n    for (i, op) in enumerate(operator)\n        expr =\
    \ string(expr, \" \", op, \" \", operand[i+1])\n    end\n    return parse(Int64,\
    \ expr)\nend\n \n\"\"\"\n    Given an string of operators, and an algebric expression,\
    \ evaluate the expression \n    and return the answer.", "    \n    for i = 1:length(operator)\n\
    \        if i == 1\n            result = operand[i]\n        end\n        if operator[i]\
    \ == \"+\"\n            result = result + operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    \n    return result\n    \nend", "    # your code here\nend\n\"\"\"\n   \
    \ Given a list (lst) and a value (value), return the index of the last occurrence\
    \ of that value \n    in the list.", "    i = 1\n    result = operand[1]\n   \
    \ while i <= length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = floor(Int64, result/operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result = result^operand[i+1]\n\
    \        end\n        i += 1\n    end\n    return result\nend", "    result =\
    \ operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        end\n    end\n    return result\nend", " \
    \   \"\"\"\n    Do algebraic operation on operand and operator.\n    \"\"\"\n\
    \    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result) \n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = convert(Int64, result)\
    \ \n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    \"\"\"\n    :param operator: a list of symbols representing algebraic\
    \ operations.\n    :param operand: a list of integer operands.\n    :return: an\
    \ integer, result of the algebraic expression.", "    # The first operand\n  \
    \  result = operand[1]", "    # your code goes here\n    op = operator[1]\n  \
    \  for i in 2:length(operator)\n        if operator[i] == \"//\"\n           \
    \ operand[i] = operand[i] // operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            operand[i] = operand[i] ^ operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n        elseif\
    \ operator[i] == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n \
    \       elseif operator[i] == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n\
    \        end\n    end\n    return operand[1]\nend", "    result = operand[1]\n\
    \    for i in 2:length(operand)\n        result = eval(string(result, operator[i-1],\
    \ operand[i]))\n    end\n    return result\nend", "    result = operand[1]\n \
    \   for i in 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = convert(Int64, result\
    \ / operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^=\
    \ operand[i+1]\n        end\n    end\n    return result\nend", "    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 2:length(operand)\n        if operator[i-1] == \"+\"\n            result\
    \ += operand[i]\n        elseif operator[i-1] == \"-\"\n            result -=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            result = floor(Int64, result/operand[i])\n\
    \        elseif operator[i-1] == \"**\"\n            result = floor(Int64, result^operand[i])\n\
    \        end\n    end\n    return result\nend", "    equation = \"\"\n    for\
    \ (i, op) in enumerate(operator)\n        equation = equation * string(operand[i])\
    \ * op\n    end\n    equation = equation * string(operand[end])\n    return eval(equation)\n\
    end", "    #your code goes here\nend\n ", "    result = operand[1]\n    for (i,\
    \ op) in enumerate(operator)\n        if op == \"+\"\n            result += operand[i+1]\n\
    \        elseif op == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ op == \"*\"\n            result *= operand[i+1]\n        elseif op == \"//\"\
    \n            result = convert(Int64, result/operand[i+1])\n        elseif op\
    \ == \"**\"\n            result = convert(Int64, result^operand[i+1])\n      \
    \  end\n    end\n    return result\nend", "    evaluation = operand[1]\n    for\
    \ i in 1:length(operator)\n        if operator[i] == \"+\"\n            evaluation\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            evaluation\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            evaluation\
    \ *= operand[i+1]\n        elseif operator[i] == \"//\"\n            evaluation\
    \ //= operand[i+1]\n        elseif operator[i] == \"**\"\n            evaluation\
    \ ^= operand[i+1]\n        end\n    end\n    return evaluation\nend", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\nend", "    # YOUR CODE HERE\n  \
    \  result = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n\
    \        if op == \"+\"\n            result += operand[i+1]\n        elseif op\
    \ == \"-\"\n            result -= operand[i+1]\n        elseif op == \"*\"\n \
    \           result *= operand[i+1]\n        elseif op == \"//\"\n            result\
    \ = floor(Int64, result/operand[i+1])\n        elseif op == \"**\"\n         \
    \   result = floor(Int64, result^operand[i+1])\n        end\n    end\n    return\
    \ result\nend", "    # Your code here\nend\n \n \n ", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = convert(Int64,floor(result/operand[i+1]))\n\
    \        elseif operator[i] == \"**\"\n            result = result^operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    result = operand[1]\n   \
    \ for i in 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "   result = operand[1]\n   for\
    \ i in 1:length(operator)\n       if operator[i] == \"+\"\n           result +=\
    \ operand[i+1]\n       elseif operator[i] == \"-\"\n           result -= operand[i+1]\n\
    \       elseif operator[i] == \"*\"\n           result *= operand[i+1]\n     \
    \  elseif operator[i] == \"//\"\n           result = trunc(Int64, result/operand[i+1])\n\
    \       elseif operator[i] == \"**\"\n           result = trunc(Int64, result^operand[i+1])\n\
    \       end\n   end\n   return result\nend", "    res = operand[1]\n    for i\
    \ = 1:length(operator)\n        if operator[i] == \"+\"\n            res += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            res -= operand[i+1]\n      \
    \  elseif operator[i] == \"*\"\n            res *= operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            res = div(res, operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            res ^= operand[i+1]\n        end\n    end\n\
    \    return res\nend", "    # Your code here\n    # It is guaranteed that the\
    \ operator vector has at least one operator\n    # It is guaranteed that the operand\
    \ vector has at least two operands\n    # It is guaranteed that the operator vector\
    \ and operand vector are the same length\n    # It is guaranteed that operand\
    \ is a list of non-negative integers\n    \n    # Create an expression\n    expr\
    \ = string(operand[1])\n    for i = 1:length(operator)\n        expr = string(expr,\
    \ operator[i], operand[i+1])\n    end\n    \n    # Create the expression and return\
    \ the result\n    return eval(parse(expr))\nend", "    result = operand[1]\n \
    \   for i in 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = result\
    \ \xF7 operand[i+1]\n        elseif operator[i] == \"**\"\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend", "    # your\
    \ code here\n    return 0\nend", "    result = operand[1]\n    for (i,oper) in\
    \ enumerate(operator)\n        index = i + 1\n        if oper == \"+\"\n     \
    \       result += operand[index]\n        elseif oper == \"-\"\n            result\
    \ -= operand[index]\n        elseif oper == \"*\"\n            result *= operand[index]\n\
    \        elseif oper == \"//\"\n            result //= operand[index]\n      \
    \  elseif oper == \"**\"\n            result ^= operand[index]\n        end\n\
    \    end\n    return result\nend", "    \"\"\"\n    Do algebra, takes in an array\
    \ of operator of length n, and an array of operand of length n + 1.\n    \"\"\"\
    \n    if (length(operator) != length(operand) - 1) || (length(operator) < 1) ||\
    \ (length(operand) < 2)\n        error(\"One of the input is invalid\")\n    end\n\
    \    if operator[1] == \"+\"\n        acc = operand[1] + operand[2]\n    elseif\
    \ operator[1] == \"-\"\n        acc = operand[1] - operand[2]\n    elseif operator[1]\
    \ == \"*\"\n        acc = operand[1] * operand[2]\n    elseif operator[1] == \"\
    //\"\n        acc = operand[1] // operand[2]\n    elseif operator[1] == \"**\"\
    \n        acc = operand[1] ^ operand[2]\n    else\n        error(\"Invalid operator\"\
    )\n    end\n    for i = 2:length(operator)\n        if operator[i] == \"+\"\n\
    \            acc = acc + operand[i + 1]\n        elseif operator[i] == \"-\"\n\
    \            acc = acc - operand[i + 1]\n        elseif operator[i] == \"*\"\n\
    \            acc = acc * operand[i + 1]\n        elseif operator[i] == \"//\"\n\
    \            acc = acc // operand[i + 1]\n        elseif operator[i] == \"**\"\
    \n            acc = acc ^ operand[i + 1]\n        else\n            error(\"Invalid\
    \ operator\")\n        end\n    end\n    return acc\nend", "    # your code goes\
    \ here\n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "    res = operand[1]\n    for i in 1:length(operator)\n        op = operator[i]\n\
    \        operand2 = operand[i+1]\n        if op == \"+\"\n            res += operand2\n\
    \        elseif op == \"-\"\n            res -= operand2\n        elseif op ==\
    \ \"*\"\n            res *= operand2\n        elseif op == \"//\"\n          \
    \  res = div(res, operand2)\n        elseif op == \"**\"\n            res = res\
    \ ^ operand2\n        end\n    end\n    return res\nend", "    res = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ res += operand[i+1]\n        elseif operator[i] == \"-\"\n            res -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            res *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            res = div(res, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            res ^= operand[i+1]\n     \
    \   end\n    end\n    return res\nend", "    result = operand[1]\n    for i in\
    \ 2:length(operand)\n        if operator[i-1] == \"-\"\n            result -=\
    \ operand[i]\n        elseif operator[i-1] == \"+\"\n            result += operand[i]\n\
    \        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n   \
    \     elseif operator[i-1] == \"//\"\n            result //= operand[i]\n    \
    \    elseif operator[i-1] == \"**\"\n            result ^= operand[i]\n      \
    \  end\n    end\n    return result\nend", "    result = operand[1]\n    for i\
    \ in 2:length(operand)\n        if operator[i-1] == \"+\"\n            result\
    \ += operand[i]\n        elseif operator[i-1] == \"-\"\n            result -=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            result = floor(Int64, result/operand[i])\n\
    \        elseif operator[i-1] == \"**\"\n            result = floor(Int64, result^operand[i])\n\
    \        end\n    end\n    return result\nend", "    op = operand[1]\n    for\
    \ i in 1:length(operator)\n        if operator[i] == '+'\n            op += operand[i+1]\n\
    \        elseif operator[i] == '-'\n            op -= operand[i+1]\n        elseif\
    \ operator[i] == '*'\n            op *= operand[i+1]\n        elseif operator[i]\
    \ == '//'\n            op //= operand[i+1]\n        elseif operator[i] == '**'\n\
    \            op ^= operand[i+1]\n        end\n    end\n    return op\nend", " \
    \   # your code here\n    ret = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        num = operand[i+1]\n        if op == \"+\"\n\
    \            ret += num\n        elseif op == \"-\"\n            ret -= num\n\
    \        elseif op == \"*\"\n            ret *= num\n        elseif op == \"//\"\
    \n            ret //= num\n        elseif op == \"**\"\n            ret ^= num\n\
    \        end\n    end\n    return ret\nend", "    # Insert your solution here!\n\
    \    expression = 0\n    for i in 1:length(operator)\n        if operator[i] ==\
    \ \"+\"\n            expression += operand[i]\n        elseif operator[i] == \"\
    -\"\n            expression -= operand[i]\n        elseif operator[i] == \"*\"\
    \n            expression *= operand[i]\n        elseif operator[i] == \"//\"\n\
    \            expression //= operand[i]\n        elseif operator[i] == \"**\"\n\
    \            expression ^= operand[i]\n        end\n    end\n    return expression\n\
    end", "    #Step 1: Define the operation function in nested function\n    function\
    \ operation(op::String, a::Int64, b::Int64)::Int64\n        if op == \"+\"\n \
    \           return a + b\n        elseif op == \"-\"\n            return a - b\n\
    \        elseif op == \"*\"\n            return a * b\n        elseif op == \"\
    //\"\n            return floor(a / b)\n        elseif op == \"**\"\n         \
    \   return a ^ b\n        end\n    end\n    \n    #Step 2: Loop through the operator\
    \ list, apply the operation function\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = operation(operator[i], result, operand[i+1])\n    end\n    \n\
    \    return result\nend\n@test function test_do_algebra()\n    op = [\"+\", \"\
    *\", \"-\"]\n    operand = [2, 3, 4, 5]\n    result = do_algebra(op, operand)\n\
    \    @test result == 9\nend", "    # Note for this function, the operator element\
    \ could only be `+`, `-`, `*`, `//`, `**`.\n    result = operand[1]\n    for i\
    \ in 1:length(operator)\n        if operator[i] == \"+\"\n            result +=\
    \ operand[i+1]\n        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n   \
    \     elseif operator[i] == \"//\"\n            result //= operand[i+1]\n    \
    \    else\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    new_operand = zeros(Int64, length(operand)-1)\n    for i\
    \ in 1:length(new_operand)\n        if operator[i] == \"+\"\n            new_operand[i]\
    \ = operand[i] + operand[i+1]\n        elseif operator[i] == \"-\"\n         \
    \   new_operand[i] = operand[i] - operand[i+1]\n        elseif operator[i] ==\
    \ \"*\"\n            new_operand[i] = operand[i] * operand[i+1]\n        elseif\
    \ operator[i] == \"//\"\n            new_operand[i] = operand[i] // operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            new_operand[i] = operand[i]\
    \ ^ operand[i+1]\n        end\n    end\n    return new_operand[end]\nend", " \
    \   stack::Array{Int64} = []\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"-\"\n            push!(stack, operand[i]-operand[i+1])\n        elseif\
    \ operator[i] == \"+\"\n            push!(stack, operand[i]+operand[i+1])\n  \
    \      elseif operator[i] == \"*\"\n            push!(stack, operand[i]*operand[i+1])\n\
    \        elseif operator[i] == \"//\"\n            push!(stack, operand[i]\xF7\
    operand[i+1])\n        elseif operator[i] == \"**\"\n            push!(stack,\
    \ operand[i]^operand[i+1])\n        end\n    end\n    return sum(stack)\nend",
  "    \nend", "    final = operand[1]\n    for i = 1:length(operator)\n        if\
    \ operator[i] == \"+\"\n            final += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            final -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            final *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            final //= operand[i+1]\n        elseif operator[i] == \"**\"\n  \
    \          final ^= operand[i+1]\n        end\n    end\n    return final\nend",
  "    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i])\n        end\n\
    \    end\n    return result\nend", "    \nend", "    # YOUR CODE HERE\n    algebric_expresion\
    \ = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1] == \"\
    +\"\n            algebric_expresion += operand[i]\n        elseif operator[i-1]\
    \ == \"-\"\n            algebric_expresion -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            algebric_expresion *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            algebric_expresion = div(algebric_expresion, operand[i])\n\
    \        elseif operator[i-1] == \"**\"\n            algebric_expresion = algebric_expresion\
    \ ^ operand[i]\n        end\n    end\n    return algebric_expresion\nend", " \
    \   # your code goes here\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            if length(operator) ==\
    \ 0\n                return operand[1]\n            end\n        elseif operator[i]\
    \ == \"//\"\n            operand[i] = operand[i] \xF7 operand[i+1]\n         \
    \   deleteat!(operand, i+1)\n            deleteat!(operator, i)\n            if\
    \ length(operator) == 0\n                return operand[1]\n            end\n\
    \        elseif operator[i] == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \         if length(operator) == 0\n                return operand[1]\n      \
    \      end\n        end\n    end\nend\n\"\"\"\n    The function should return\
    \ the max sum of the sub array.\n    A subarray is a contiguous subsequence of\
    \ an array.\n    \n    Example:\n    array = [2, 3, -1, 7, -2, -9, 10]\n    result\
    \ = 10\n\"\"\"", "\nend\n \n ", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        result = do_operation(operator[i], result, operand[i+1])\n    end\n \
    \   return result\nend", "    \"\"\"\n    Do algebra\n    \"\"\"\n    for i in\
    \ 1:length(operator)\n        if operator[i] == \"+\"\n            operand[i]\
    \ = operand[i] + operand[i+1]\n            deleteat!(operand, i+1)\n         \
    \   deleteat!(operator, i)\n            return do_algebra(operator, operand)\n\
    \        elseif operator[i] == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \         return do_algebra(operator, operand)\n        elseif operator[i] ==\
    \ \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            return do_algebra(operator,\
    \ operand)\n        elseif operator[i] == \"//\"\n            operand[i] = operand[i]\
    \ \xF7 operand[i+1]\n            deleteat!(operand, i+1)\n            deleteat!(operator,\
    \ i)\n            return do_algebra(operator, operand)\n        elseif operator[i]\
    \ == \"**\"\n            operand[i] = operand[i] ^ operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n            return do_algebra(operator,\
    \ operand)\n        end\n    end\n    return operand[1]\nend", "    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = result\
    \ \xF7 operand[i+1]\n        elseif operator[i] == \"**\"\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    for i = 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # YOUR CODE HERE\n    error(\"Not implemented yet\")\nend",
  "    # Let's try the reduce function \n    return reduce(+, operator .* operand)\n\
    end", "    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    \"\"\"\n    Solves a basic algebra problem given a vector\
    \ of operators and a vector of operands.\n    \"\"\"\n    operation = copy(operand[1])",
  "    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = result \xF7 operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    \"\"\"\n    @param operator: a list of strings \n    @param operand:\
    \ a list of integers", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"*\"\n            result *= operand[i+1]\n       \
    \ elseif operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\n \n \n \n \n \n \n \n \n \n \n\"\"\"\n    Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n    the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    \    expression and return the evaluation of this expression.", "    # your code\
    \ here\n    return 0\nend\n@testset \"Example Tests\" begin\n    @test do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n    @test do_algebra([\"*\", \"-\"], [4,\
    \ 5, 6, 7]) == -4\n    @test do_algebra([\"-\"], [5, 6, 7, 8]) == -2\n    @test\
    \ do_algebra([\"+\", \"+\", \"+\", \"+\"], [1, 2, 3, 4, 5]) == 15\n    @test do_algebra([\"\
    *\", \"*\", \"*\", \"*\"], [1, 2, 3, 4, 5]) == 120\n    @test do_algebra([\"-\"\
    , \"-\"], [5, 6, 7, 8]) == -4\n    @test do_algebra([\"-\"], [5, 6, 7, 8]) ==\
    \ -2\n    @test do_algebra([\"+\", \"-\"], [5, 6, 7, 8]) == -4\n    @test do_algebra([\"\
    +\", \"*\"], [5, 6, 7, 8]) == 41\n    @test do_algebra([\"+\", \"*\", \"-\"],\
    \ [5, 6, 7, 8]) == -4\n    @test do_algebra([\"+\", \"*\", \"-\", \"/\"], [10,\
    \ 2, 3, 2]) == 3\n    @test do_algebra([\"+\", \"*\", \"-\", \"/\", \"**\"], [10,\
    \ 2, 3, 2, 2]) == 11\n    @test do_algebra([\"+\", \"*\", \"-\", \"/\", \"**\"\
    , \"-\"], [10, 2, 3, 2, 2, 3]) == 8\n    @test do_algebra([\"+\", \"*\", \"-\"\
    , \"/\", \"**\", \"-\", \"//\"], [10, 2, 3, 2, 2, 3, 2]) == 4\n    @test do_algebra([\"\
    +\", \"*\", \"-\", \"/\", \"**\", \"-\", \"//\", \"**\"], [10, 2, 3, 2, 2, 3,\
    \ 2, 2]) == 16\n    @test do_algebra([\"+\", \"*", "    result = operand[1]\n\
    \    for i in 2:length(operand)\n        result = calc(result, operand[i], operator[i-1])\n\
    \    end\n    return result\nend", "    operation = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            operation += operand[i+1]\n    \
    \    elseif operator[i] == \"-\"\n            operation -= operand[i+1]\n    \
    \    elseif operator[i] == \"*\"\n            operation *= operand[i+1]\n    \
    \    elseif operator[i] == \"//\"\n            operation //= operand[i+1]\n  \
    \      elseif operator[i] == \"**\"\n            operation ^= operand[i+1]\n \
    \       end\n    end\n    return operation\nend", "    \"\"\"\n    Given two lists\
    \ operator, and operand. The first list has basic algebra operations, and \n \
    \   the second list is a list of integers. Use the two given lists to build the\
    \ algebric \n    expression and return the evaluation of this expression.", " \
    \   result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # Build the expression according to the operator and operand\
    \ array.\n    # Evaluate the expression and return the result.\n    \n    # YOUR\
    \ CODE HERE\n    expression = operand[1]\n    for i = 1:length(operator)\n   \
    \     if operator[i] == \"+\"\n            expression += operand[i+1]\n      \
    \  elseif operator[i] == \"-\"\n            expression -= operand[i+1]\n     \
    \   elseif operator[i] == \"*\"\n            expression *= operand[i+1]\n    \
    \    elseif operator[i] == \"//\"\n            expression //= operand[i+1]\n \
    \       elseif operator[i] == \"**\"\n            expression ^= operand[i+1]\n\
    \        end\n    end\n    \n    return expression\nend", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    # YOUR CODE HERE\n    n =\
    \ length(operator)\n    for i in 1:n\n        operand[i] = parse(Int64, operator[i])\n\
    \    end\n    return operand\nend", "    result = operand[1]\n    for i = 1:length(operator)\n\
    \        operator == \"+\" && (result += operand[i+1])\n        operator == \"\
    -\" && (result -= operand[i+1])\n        operator == \"*\" && (result *= operand[i+1])\n\
    \        operator == \"//\" && (result = result \xF7 operand[i+1])\n        operator\
    \ == \"**\" && (result ^= operand[i+1])\n    end\n    return result\nend", " \
    \   \n    result = operand[1]", "    # The length of operator list is equal to\
    \ the length of operand list minus one.\n    # Operator list has at least one\
    \ operator, and operand list has at least two operands.\n    if length(operator)\
    \ == length(operand) - 1 \n        # Initialize the result\n        result = operand[1]\n\
    \        for i in 1:length(operator)\n            result = eval(result, operator[i],\
    \ operand[i+1])\n        end\n        return result\n    else\n        return\
    \ 0\n    end\nend", "    result = operand[1]\n    for (op, opd) in zip(operator,\
    \ operand[2:end])\n        if op == \"+\"\n            result += opd\n       \
    \ elseif op == \"-\"\n            result -= opd\n        elseif op == \"*\"\n\
    \            result *= opd\n        elseif op == \"//\"\n            result //=\
    \ opd\n        elseif op == \"**\"\n            result ^= opd\n        end\n \
    \   end\n    return result\nend", "    # YOUR CODE HERE\nend", "    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = convert(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ ^= operand[i+1]\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    operand_length = length(operand)\n    operator_length = length(operator)\n\
    \    for i in 2:operand_length\n        operand_left = result\n        operand_right\
    \ = operand[i]\n        operator_value = operator[i-1]\n        if operator_value\
    \ == \"+\"\n            result = operand_left + operand_right\n        elseif\
    \ operator_value == \"-\"\n            result = operand_left - operand_right\n\
    \        elseif operator_value == \"*\"\n            result = operand_left * operand_right\n\
    \        elseif operator_value == \"//\"\n            result = operand_left //\
    \ operand_right\n        elseif operator_value == \"**\"\n            result =\
    \ operand_left ^ operand_right\n        end\n    end\n    return result\nend",
  "    first, second = operand[1], operand[2]\n    for (i, op) in enumerate(operator)\n\
    \        res = do_operation(first, second, op)\n        first = res\n        second\
    \ = operand[i+3]\n    end\n    return res\nend", "    # Your code here\n    expression\
    \ = string(operand[1])\n    for i in 1:length(operator)\n        expression =\
    \ string(expression, \" \", operator[i], \" \", operand[i+1])\n    end\n    print(expression)\n\
    \    return eval(parse(expression))\nend", '    @assert length(operator) == length(operand)
    - 1', "    result = operand[1]\n    n = length(operator)\n    for i in 1:n\n \
    \       op = operator[i]\n        o = operand[i+1]\n        if op == \"+\"\n \
    \           result += o\n        elseif op == \"-\"\n            result -= o\n\
    \        elseif op == \"*\"\n            result *= o\n        elseif op == \"\
    //\"\n            result = div(result, o)\n        elseif op == \"**\"\n     \
    \       result ^= o\n        end\n    end\n    return result\nend\n ", "    #\
    \ Your code here.\nend\nprintln(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n\
    \ \n# Expected output: 9", "    # your code here\n    return 0 # change 0 to your\
    \ solution\nend", "  \n    # YOUR CODE HERE\n    operand = Vector{Int64}()\n \
    \   for oprand in operand\n        if (oprand != 0)\n            push!(operand,\
    \ oprand)\n        end\n    end\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if (operator[i] == '*')\n            result = result * operand[i+1]\n\
    \        elseif (operator[i] == '+')\n            result = result + operand[i+1]\n\
    \        elseif (operator[i] == '-')\n            result = result - operand[i+1]\n\
    \        elseif (operator[i] == '//')\n            result = result \xF7 operand[i+1]\n\
    \        elseif (operator[i] == '**')\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\n    \n    #end of your code\nend", " \
    \   # YOUR CODE HERE\n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = trunc(Int64, result) // trunc(Int64, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result = trunc(Int64, result)\
    \ ^ trunc(Int64, operand[i+1])\n        end\n    end\n    return result\nend",
  "    # function goes here.\n    \n    @assert length(operator) == length(operand)\
    \ - 1\n    @assert length(operator) >= 1\n    @assert length(operand) >= 2\n \
    \   \n    result = operand[1]\n    for i in 1:length(operator)\n        result\
    \ = eval(:(result $operator[i] operand[i+1]))\n    end\n    return result\n  \
    \  \nend", "    # Your code goes here\nend", "    result = operand[1]\n    for\
    \ i in 2:length(operand)\n        if operator[i-1] == \"+\"\n            result\
    \ += operand[i]\n        elseif operator[i-1] == \"-\"\n            result -=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            result = floor(Int64, result\
    \ / operand[i])\n        elseif operator[i-1] == \"**\"\n            result =\
    \ result ^ operand[i]\n        end\n    end\n    return result\nend", "\nend",
  '    result = operand[1]', "    #TODO: Implement your function here\n    #return\
    \ result\n    if length(operator) != length(operand) - 1\n        error(\"ERROR:\
    \ the length of operator list is equal to the length of operand list minus one.\"\
    )\n    end\n    if length(operator) < 1\n        error(\"ERROR: Operator list\
    \ has at least one operator\")\n    end\n    if length(operand) < 2\n        error(\"\
    ERROR: operand list has at least two operands\")\n    end\n    result = operand[1]\n\
    \    for i = 1:length(operator)\n        result = eval(string(result, operator[i],\
    \ operand[i+1]))\n    end\n    return result\nend", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        op = operator[i]\n        if op == \"\
    +\"\n            result += operand[i+1]\n        elseif op == \"-\"\n        \
    \    result -= operand[i+1]\n        elseif op == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif op == \"//\"\n            result = convert(Int64,result)\n\
    \            result = result \xF7 operand[i+1]\n        elseif op == \"**\"\n\
    \            result = result ^ operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n  \
    \      if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n  \
    \      if operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif\
    \ operator[i] == \"+\"\n            result += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            result -= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    assert length(operator) == length(operand) - 1\n    result\
    \ = operand[1]\n    for i in 1:length(operator)\n        operand1 = operand[i]\n\
    \        operand2 = operand[i+1]\n        operator1 = operator[i]\n        #@show\
    \ operator1, operand1, operand2\n        if operator1 == \"+\"\n            result\
    \ = operand1 + operand2\n        elseif operator1 == \"-\"\n            result\
    \ = operand1 - operand2\n        elseif operator1 == \"*\"\n            result\
    \ = operand1 * operand2\n        elseif operator1 == \"//\"\n            result\
    \ = operand1 // operand2\n        elseif operator1 == \"**\"\n            result\
    \ = operand1 ^ operand2\n        end\n    end\n    return result\nend", "    \n\
    end", "    # Your code here\n    ans = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            ans += operand[i]\n        elseif\
    \ operator[i-1] == \"-\"\n            ans -= operand[i]\n        elseif operator[i-1]\
    \ == \"*\"\n            ans *= operand[i]\n        elseif operator[i-1] == \"\
    //\"\n            ans //= operand[i]\n        elseif operator[i-1] == \"**\"\n\
    \            ans = ans^operand[i]\n        end\n    end\n    return ans\nend",
  "    op = operator[1]\n    op1 = operand[1]\n    op2 = operand[2]\n    if op ==\
    \ \"+\"\n        sum = op1 + op2\n    elseif op == \"-\"\n        sum = op1 -\
    \ op2\n    elseif op == \"*\"\n        sum = op1 * op2\n    elseif op == \"//\"\
    \n        sum = op1 \xF7 op2\n    elseif op == \"**\"\n        sum = op1 ^ op2\n\
    \    end\n    for i in 3:length(operand)\n        if operator[i-1] == \"+\"\n\
    \            sum = sum + operand[i]\n        elseif operator[i-1] == \"-\"\n \
    \           sum = sum - operand[i]\n        elseif operator[i-1] == \"*\"\n  \
    \          sum = sum * operand[i]\n        elseif operator[i-1] == \"//\"\n  \
    \          sum = sum \xF7 operand[i]\n        elseif operator[i-1] == \"**\"\n\
    \            sum = sum ^ operand[i]\n        end\n    end\n    return sum\nend",
  "    total = operand[1]\n    for i = 1:length(operator)\n        @eval total $operator[i]\
    \ operand[i+1]\n    end\n    return total\nend", "    if length(operator) != length(operand)\
    \ - 1 \n        return 0\n    end\n    # Initializing variables\n    current_value\
    \ = operand[1]\n   \n    # Iterating through the lists\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            current_value += operand[i+1]\n\
    \        elseif operator[i] == \"-\"\n            current_value -= operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            current_value *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            current_value = convert(Int64,\
    \ current_value / operand[i+1])\n        elseif operator[i] == \"**\"\n      \
    \      current_value ^= operand[i+1]\n        end\n    end\n    return current_value\n\
    end", "    \"\"\"\n    Input:\n        operator: a list of algebric operators.\n\
    \        operand: a list of non-negative integers.", "    i = 1\n    while i <=\
    \ length(operator)\n        if operator[i] == \"//\"\n            operand[i] =\
    \ operand[i] // operand[i+1]\n            deleteat!(operand, i+1)\n          \
    \  deleteat!(operator, i)\n        elseif operator[i] == \"**\"\n            operand[i]\
    \ = operand[i] ^ operand[i+1]\n            deleteat!(operand, i+1)\n         \
    \   deleteat!(operator, i)\n        else\n            i += 1\n        end\n  \
    \  end\n    i = 1\n    while i <= length(operator)\n        if operator[i] ==\
    \ \"*\"\n            operand[i] = operand[i] * operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n        elseif operator[i] == \"/\"\
    \n            operand[i] = operand[i] / operand[i+1]\n            deleteat!(operand,\
    \ i+1)\n            deleteat!(operator, i)\n        else\n            i += 1\n\
    \        end\n    end\n    i = 1\n    while i <= length(operator)\n        if\
    \ operator[i] == \"+\"\n            operand[i] = operand[i] + operand[i+1]\n \
    \           deleteat!(operand, i+1)\n            deleteat!(operator, i)\n    \
    \    elseif operator[i] == \"-\"\n            operand[i] = operand[i] - operand[i+1]\n\
    \            deleteat!(operand, i+1)\n            deleteat!(operator, i)\n   \
    \     else\n            i += 1\n        end\n    end\n    return operand[1]\n\
    end\n# (i)", "    # your code here\nend", "    result = operand[1]\n    for i\
    \ in 1:length(operator)\n        if operator[i] == \"+\"\n            result +=\
    \ operand[i+1]\n        elseif operator[i] == \"-\"\n            result -= operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n   \
    \     elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    #Check for incorrect operator\
    \ or operand list lengths\n    if length(operator) != length(operand) - 1\n  \
    \      error(\"Error: the lengths of the operator and operand lists are not correct.\"\
    )\n    end\n    #Check for incorrect number of operators\n    if length(operator)\
    \ < 1\n        error(\"Error: There is no operator to perform calculations on\
    \ the operands\")\n    end\n    #Check for incorrect number of operands\n    if\
    \ length(operand) < 2\n        error(\"Error: There must be at least two numbers\
    \ to perform a calculation\")\n    end\n    #Check for illegal operator types\n\
    \    illegal_operator_type = [\"+\", \"-\", \"*\", \"//\", \"**\"]\n    for i\
    \ in operator\n        if !(i in illegal_operator_type)\n            error(\"\
    Error: One or more operators are not of the right type.\")\n        end\n    end\n\
    \    #Check for illegal operand types\n    for i in operand\n        if !(typeof(i)\
    \ == Int64)\n            error(\"Error: One or more operands are not of the right\
    \ type.\")\n        end\n    end\n    #If all the above checks are passed, then\
    \ proceed with the calculation.\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    operation = \"\"\n    for i in 1:length(operator)\n     \
    \   operation = operation * operator[i] * string(operand[i+1])\n    end\n    return\
    \ eval(string(operand[1]) * operation)\nend", "    result = operand[1]\n    length\
    \ = length(operator)\n    for i in 1:length\n        if operator[i] == \"+\"\n\
    \            result += operand[i+1]\n        elseif operator[i] == \"-\"\n   \
    \         result -= operand[i+1]\n        elseif operator[i] == \"*\"\n      \
    \      result *= operand[i+1]\n        elseif operator[i] == \"//\"\n        \
    \    result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = floor(Int64, result^operand[i+1])\n        end\n\
    \    end\n    return result\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    #**********************************************************************\n\
    \    # YOUR CODE HERE\n    #**********************************************************************\n\
    \    value=operand[1]\n    num=length(operator)\n    for i in 1:num\n        operator[i]==\"\
    +\" ? value+=operand[i+1] :\n        operator[i]==\"-\" ? value-=operand[i+1]\
    \ :\n        operator[i]==\"*\" ? value*=operand[i+1] :\n        operator[i]==\"\
    //\" ? value=floor(Int64,value/operand[i+1]) :\n        operator[i]==\"**\" ?\
    \ value=floor(Int64,value^operand[i+1]) :\n        print(\"Invalid operator\"\
    )\n    end\n    return value\nend", "    # Your code here\nend", "    result =\
    \ operand[1]\n    j = 1\n    i = 1\n    while i < length(operator)\n        j\
    \ += 1\n        if operator[i] == \"+\"\n            result += operand[j]\n  \
    \      elseif operator[i] == \"-\"\n            result -= operand[j]\n       \
    \ elseif operator[i] == \"*\"\n            result *= operand[j]\n        elseif\
    \ operator[i] == \"//\"\n            result = floor(Int64,result/operand[j])\n\
    \        elseif operator[i] == \"**\"\n            result = floor(Int64,result^operand[j])\n\
    \        end\n        i += 1\n    end\n    return result\nend\n ", "    # YOUR\
    \ CODE HERE\nend", "    \nend\n ", "    \nend", "    n = length(operator)\n  \
    \  result = operand[1]\n    for i = 1:n\n        if operator[i] == \"+\"\n   \
    \         result += operand[i+1]\n        elseif operator[i] == \"-\"\n      \
    \      result -= operand[i+1]\n        elseif operator[i] == \"*\"\n         \
    \   result *= operand[i+1]\n        elseif operator[i] == \"//\"\n           \
    \ result = floor(Int64, result/operand[i+1])\n        elseif operator[i] == \"\
    **\"\n            result = result^operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    \n    alg_operand = 0\n    for (i,operands) in enumerate(operand)\n\
    \        if operands == operand[1]\n            alg_operand = operands\n     \
    \   elseif operands != operand[1]\n            if operator[i-1] == \"+\"\n   \
    \             alg_operand = alg_operand + operands\n            elseif operator[i-1]\
    \ == \"-\"\n                alg_operand = alg_operand - operands\n           \
    \ elseif operator[i-1] == \"*\"\n                alg_operand = alg_operand * operands\n\
    \            elseif operator[i-1] == \"//\"\n                alg_operand = alg_operand\
    \ \xF7 operands\n            elseif operator[i-1] == \"**\"\n                alg_operand\
    \ = alg_operand ^ operands\n            end\n        end\n    end\n    \n    return\
    \ alg_operand\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end", "    # Your code here\nend", "    length_operand = length(operand)\n   \
    \ result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # your code goes here\n    return 0\nend", "    \"\"\"\n\
    \    DO NOT EDIT THIS FUNCTION\n    \"\"\"\n    operand = collect(operand)\n \
    \   for i in 1:length(operator)\n        a = operand[i]\n        b = operand[i+1]\n\
    \        if operator[i] == \"+\"\n            operand[i+1] = a + b\n        elseif\
    \ operator[i] == \"-\"\n            operand[i+1] = a - b\n        elseif operator[i]\
    \ == \"*\"\n            operand[i+1] = a * b\n        elseif operator[i] == \"\
    //\"\n            operand[i+1] = a // b\n        elseif operator[i] == \"**\"\n\
    \            operand[i+1] = a ^ b\n        end\n    end\n    return operand[end]\n\
    end", "    #your code here\n    return -1\nend", "    \n    result = operand[1]\n\
    \    operand_index = 2\n    for symbol in operator\n        if symbol == \"+\"\
    \n            result += operand[operand_index]\n        elseif symbol == \"-\"\
    \n            result -= operand[operand_index]\n        elseif symbol == \"*\"\
    \n            result *= operand[operand_index]\n        elseif symbol == \"//\"\
    \n            result = div(result, operand[operand_index])\n        elseif symbol\
    \ == \"**\"\n            result ^= operand[operand_index]\n        end\n     \
    \   operand_index += 1\n    end\n    return result\nend", "    result = operand[1]\n\
    \    for i = 1:length(operator)\n        if operator[i] == \"+\"\n           \
    \ result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    # your code here\n    return\
    \ 0\nend", "    eval(string(reduce(*, operand), \" \", join(operator, \" \")))\n\
    end", "    ##############################################################################\n\
    \    #### Write your code in the next line of code                           \
    \  ####\n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = div(result, operand[i])\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    ####   \
    \                                                                  ####\n    ##############################################################################\n\
    \    return result\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = div(result, operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    println(operator)\n    for (i, op)\
    \ in enumerate(operator)\n        println(op)\n        if op == \"+\"\n      \
    \      result += operand[i+1]\n        elseif op == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif op == \"*\"\n            result *= operand[i+1]\n\
    \        elseif op == \"//\"\n            result //= operand[i+1]\n        elseif\
    \ op == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    result = operand[1]\n    for i = 1:length(operator)\n   \
    \     if operator[i] == \"+\"\n            result += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            result *= operand[i+1]\n        elseif operator[i] ==\
    \ \"//\"\n            result //= operand[i+1]\n        elseif operator[i] == \"\
    **\"\n            result = result ^ operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    start_index = 1\n    end_index = 2\n    array_index = 1\n\
    \    while end_index != length(operand) + 1\n        current_operator = operator[array_index]\n\
    \        current_operand_one = operand[start_index]\n        current_operand_two\
    \ = operand[end_index]\n        if current_operator == \"+\"\n            operand[end_index]\
    \ = current_operand_one + current_operand_two\n        elseif current_operator\
    \ == \"-\"\n            operand[end_index] = current_operand_one - current_operand_two\n\
    \        elseif current_operator == \"*\"\n            operand[end_index] = current_operand_one\
    \ * current_operand_two\n        elseif current_operator == \"//\"\n         \
    \   operand[end_index] = convert(Int64, current_operand_one // current_operand_two)\n\
    \        elseif current_operator == \"**\"\n            operand[end_index] = current_operand_one\
    \ ^ current_operand_two\n        end\n        start_index += 1\n        end_index\
    \ += 1\n        array_index += 1\n    end\n    return operand[end_index - 1]\n\
    end\n        \noperator = [\"+\", \"-\", \"*\", \"//\", \"**\"]\noperand = [2,\
    \ 3, 4, 5]\ndo_algebra(operator, operand)", "    result = operand[1]\n    for\
    \ i in 2:length(operand)\n        if operator[i-1] == \"+\"\n            result\
    \ += operand[i]\n        elseif operator[i-1] == \"-\"\n            result -=\
    \ operand[i]\n        elseif operator[i-1] == \"*\"\n            result *= operand[i]\n\
    \        elseif operator[i-1] == \"//\"\n            result //= operand[i]\n \
    \       elseif operator[i-1] == \"**\"\n            result ^= operand[i]\n   \
    \     end\n    end\n    return result\nend", "    \n    if isempty(operator)\n\
    \        return operand[1]\n    end\n    if isempty(operand)\n        return 0\n\
    \    end\n    \n    expr = parse(r\"$(operand[1]) $(operator[1]) $(operand[2])\"\
    )\n    return do_algebra(operator[2:end], [eval(expr) , operand[3:end]...] )",
  "    \"\"\"\n    Write your function body.\n    \"\"\"\n    \nend", "    result\
    \ = operand[1]\n    for i in 2:length(operand)\n        operator_index = i - 1\n\
    \        operator_element = operator[operator_index]\n        operand_element\
    \ = operand[i]\n        result = eval(parse(operator_element * \"(\" * string(result)\
    \ * \",\" * string(operand_element) * \")\"))\n    end\n    return result\nend",
  "    \"\"\"\n    This function is used to compute the algebraic expression.\n  \
    \  \"\"\"\n    result = operand[1]\n    for i = 1:length(operator)\n        if\
    \ operator[i] == \"+\"\n            result += operand[i+1]\n        elseif operator[i]\
    \ == \"-\"\n            result -= operand[i+1]\n        elseif operator[i] ==\
    \ \"*\"\n            result *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            result //= operand[i+1]\n        elseif operator[i] == \"**\"\
    \n            result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end", "\nend", "    acc = operand[1]\n    for (op, opnd) in zip(operator, operand[2:end])\n\
    \        if op == \"+\"\n            acc += opnd\n        elseif op == \"-\"\n\
    \            acc -= opnd\n        elseif op == \"*\"\n            acc *= opnd\n\
    \        elseif op == \"//\"\n            acc = trunc(Int64, acc) \xF7 trunc(Int64,\
    \ opnd)\n        elseif op == \"**\"\n            acc ^= opnd\n        end\n \
    \   end\n    return acc\nend", "    result = operand[1]\n    for i = 1:length(operator)\n\
    \        result =  eval( parse( string( result, operator[i], operand[i+1] ) )\
    \ )\n    end\n    return result\nend", "  \nend", "    \"\"\"\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5])\n    9\n    >>> do_algebra([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5, 6])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5, 6, 7])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5,\
    \ 6, 7, 8])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6,\
    \ 7, 8, 9])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    9\n    >>> do_algebra([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    9\n    >>> do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    9\n   \
    \ >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15])\n    9\n    >>> do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    9\n    >>> do_algebra([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5, 6, 7", "    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend", "    # YOUR CODE HERE\n    i=1\n    result=operand[1]\n    for\
    \ i in 2:length(operand)\n        if operator[i-1]==\"+\"\n            result=result+operand[i]\n\
    \        elseif operator[i-1]==\"-\"\n            result=result-operand[i]\n \
    \       elseif operator[i-1]==\"*\"\n            result=result*operand[i]\n  \
    \      elseif operator[i-1]==\"//\"\n            result=result//operand[i]\n \
    \       elseif operator[i-1]==\"**\"\n            result=result^operand[i]\n \
    \       end\n    end\n    return result\nend", "    result = operand[1]\n    for\
    \ i = 1:length(operator)\n        if operator[i] == \"+\"\n            result\
    \ += operand[i+1]\n        elseif operator[i] == \"-\"\n            result -=\
    \ operand[i+1]\n        elseif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elseif operator[i] == \"//\"\n            result = div(result, operand[i+1])\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend", "    if length(operator) != length(operand)\
    \ - 1\n        error(\"The length of operator list is equal to the length of operand\
    \ list minus one.\")\n    end\n    if length(operator) < 1\n        error(\"Operator\
    \ list has at least one operator\")\n    end\n    if length(operand) < 2\n   \
    \     error(\"Operand list has at least two operands\")\n    end\n    result =\
    \ operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"+\"\
    \n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n  \
    \          result -= operand[i+1]\n        elseif operator[i] == \"*\"\n     \
    \       result *= operand[i+1]\n        elseif operator[i] == \"//\"\n       \
    \     result //= operand[i+1]\n        elseif operator[i] == \"**\"\n        \
    \    result ^= operand[i+1]\n        else\n            error(\"The element in\
    \ operator list can only be: `+`, `-`, `*`, `//`, `**`\")\n        end\n    end\n\
    \    return result\nend", '    result = operand[1]', "    # Your code here\nend\n\
    do_algebra(['+', '*', '-'], [2, 3, 4, 5])\n \n################################################################################\n\
    \"\"\"\n    A list is called rotate if the last element in the list is the same\
    \ as the first \n    element in the list. A list is called rotate-left if the\
    \ first element in the list \n    is the same as the last element in the list.\
    \ Given a list, determine if the list \n    is rotate-left.", "    if length(operator)\
    \ + 1 != length(operand)\n        throw(ArgumentError(\"The length of operator\
    \ list is equal to the length of operand list minus one.\"))\n    end\n    if\
    \ length(operator) == 0\n        throw(ArgumentError(\"Operator list has at least\
    \ one operator.\"))\n    end\n    if length(operand) == 1\n        throw(ArgumentError(\"\
    Operand list has at least two operands.\"))\n    end\n    expression = string(operand[1])\n\
    \    for i in 2:length(operand)\n        expression = string(expression, operator[i-1],\
    \ operand[i])\n    end\n    return eval(parse(expression))\nend", "    # Your\
    \ code here\nend\n```", "    \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        op = operator[i-1]\n        n = operand[i]\n        if op == \"+\"\n\
    \            result += n\n        elseif op == \"-\"\n            result -= n\n\
    \        elseif op == \"*\"\n            result *= n\n        elseif op == \"\
    //\"\n            result = convert(Int64, result//n)\n        elseif op == \"\
    **\"\n            result = convert(Int64, result^n)\n        end\n    end\n  \
    \  return result\nend", "    res = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            res += operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            res -= operand[i+1]\n        elseif operator[i]\
    \ == \"*\"\n            res *= operand[i+1]\n        elseif operator[i] == \"\
    //\"\n            res = div(res, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            res ^= operand[i+1]\n        end\n    end\n    return res\n\
    end", "    \"\"\"\n    Inputs:\n        operator(str): a list of algebraic operators\
    \ (eg. [\"+\", \"-\", \"*\", \"/\"])\n        operand(int): a list of non-negative\
    \ integers.\n    \"\"\"\n    #########################################################################################\n\
    \    # REPLACE THIS WITH YOUR CODE (tutorial)\n    #########################################################################################\n\
    \    result = operand[1]\n    for i in 2:length(operand)\n        op = operator[i-1]\n\
    \        operand_i = operand[i]\n        if op == \"+\"\n            result +=\
    \ operand_i\n        elseif op == \"-\"\n            result -= operand_i\n   \
    \     elseif op == \"*\"\n            result *= operand_i\n        elseif op ==\
    \ \"//\"\n            result //= operand_i\n        elseif op == \"**\"\n    \
    \        result ^= operand_i\n        end\n    end\n    return result\nend", " \
    \   result = operand[1]\n    for op_idx = 1:length(operator)\n        if operator[op_idx]\
    \ == \"+\"\n            result += operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"-\"\n            result -= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"*\"\n            result *= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"//\"\n            result //= operand[op_idx + 1]\n        elseif operator[op_idx]\
    \ == \"**\"\n            result ^= operand[op_idx + 1]\n        end\n    end\n\
    \    return result\nend", "    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            operand[i+1] = operand[i] + operand[i+1]\n        elseif\
    \ operator[i] == \"-\"\n            operand[i+1] = operand[i] - operand[i+1]\n\
    \        elseif operator[i] == \"*\"\n            operand[i+1] = operand[i] *\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            operand[i+1]\
    \ = operand[i] // operand[i+1]\n        elseif operator[i] == \"**\"\n       \
    \     operand[i+1] = operand[i] ^ operand[i+1]\n        end\n    end\n    return\
    \ operand[length(operand)]\nend", "    result = operand[1]\n    for i in 2:length(operand)\n\
    \        result = do_operation(result, operand[i], operator[i-1])\n    end\n \
    \   return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend", "    op = operator[1]\n    result\
    \ = operand[1]\n    for i in 2:length(operand)\n        result = operate(result,\
    \ operand[i], op)\n        op = operator[i]\n    end\n    return result\nend",
  "    \n    # Create an empty vector of operands\n    operand_stack = Int64[]\n \
    \   \n    # For each element of operator vector and each element of operand vector,\
    \ \n    # push the first operand into the operand stack, then pop the top two\
    \ elements \n    # of the operand stack and apply the operator to them, and push\
    \ the result back \n    # to the operand stack.\n    for (i,j) in zip(operator,\
    \ operand)\n        push!(operand_stack, j)\n        operand_stack[end-1] = operand_stack[end-1]\
    \ + operand_stack[end]\n        pop!(operand_stack)\n    end", "    \"\"\"\n \
    \   Assuming that the operator list and operand list are valid, calculate the\
    \ result.\n    \"\"\"\n    # error checking\n    if length(operator) != length(operand)\
    \ - 1\n        error(\"The length of operator list is NOT equal to the length\
    \ of operand list minus one.\")\n    end\n    if length(operator) < 1\n      \
    \  error(\"Operator list should have at least one operator.\")\n    end\n    if\
    \ length(operand) < 2\n        error(\"Operand list should have at least two operands.\"\
    )\n    end\n    if any(x -> x < 0, operand)\n        error(\"Non-negative integers\
    \ only.\")\n    end\n    \n    # Calculating\n    result = operand[1]\n    for\
    \ i in 2:length(operand)\n        result = do_eval(result, operator[i-1], operand[i])\n\
    \    end\n    return result\nend", "    result = operand[1]\n    for i in 1:length(operator)\n\
    \        op = operator[i]\n        num = operand[i+1]\n        if op == \"+\"\n\
    \            result += num\n        elseif op == \"-\"\n            result -=\
    \ num\n        elseif op == \"*\"\n            result *= num\n        elseif op\
    \ == \"//\"\n            result //= num\n        elseif op == \"**\"\n       \
    \     result ^= num\n        end\n    end\n    return result\nend", "    result\
    \ = operand[1]\n    for i in 1:length(operator)\n        if operator[i] == \"\
    +\"\n            result += operand[i+1]\n        elseif operator[i] == \"-\"\n\
    \            result -= operand[i+1]\n        elseif operator[i] == \"*\"\n   \
    \         result *= operand[i+1]\n        elseif operator[i] == \"//\"\n     \
    \       result //= operand[i+1]\n        elseif operator[i] == \"**\"\n      \
    \      result ^= operand[i+1]\n        end\n    end\n    return result\nend\n\
    println(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))", "    result = operand[1]\n\
    \    for i in 1:length(operator)\n        result = do_operation(operator[i], result,\
    \ operand[i+1])\n    end\n    return result\nend", "    \n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    \n    return result\nend", "    result = operand[1]\n\
    \    if length(operator) != length(operand) - 1\n        println(\"Error: operator\
    \ list is not equal to the length of operand list minus one.\")\n        return\n\
    \    end\n    for i = 1:length(operator)\n        if operator[i] == \"+\"\n  \
    \          result += operand[i+1]\n        elseif operator[i] == \"-\"\n     \
    \       result -= operand[i+1]\n        elseif operator[i] == \"*\"\n        \
    \    result *= operand[i+1]\n        elseif operator[i] == \"//\"\n          \
    \  result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        else\n            println(\"\
    Error: unknown operator\")\n            return\n        end\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
