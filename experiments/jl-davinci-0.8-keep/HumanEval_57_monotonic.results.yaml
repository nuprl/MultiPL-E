name: HumanEval_57_monotonic
language: jl
results:
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] <= l[i+1] for i in 1:length(l)-1)\
    \ || all(l[i] >= l[i+1] for i in 1:length(l)-1)\nend\n    \nmonotonic([1, 2, 4,\
    \ 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0, -10])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    prev = l[1]\n    is_increasing = false\n\
    \    is_decreasing = false\n    for i in 2:length(l)\n        if l[i] > prev\n\
    \            is_increasing = true\n        elseif l[i] < prev\n            is_decreasing\
    \ = true\n        end\n        if is_increasing && is_decreasing\n           \
    \ return false\n        end\n        prev = l[i]\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    dif = diff(l)\n    return all(dif .<=\
    \ 0) || all(dif .>= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] > l[i+1] for i in 1:length(l)-1)\
    \ || all(l[i] < l[i+1] for i in 1:length(l)-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7lzqb0_f.jl:21\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lzqb0_f.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lzqb0_f.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7lzqb0_f.jl:24\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lzqb0_f.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lzqb0_f.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7lzqb0_f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2 \n        return true\n\
    \    end\n    if l[1] < l[2]\n        for i in 2:length(l)-1\n            if l[i]\
    \ > l[i+1]\n                return false\n            end\n        end\n    elseif\
    \ l[1] > l[2]\n        for i in 2:length(l)-1\n            if l[i] < l[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if any(l .== l[1])\n        return true\n\
    \    end\n    (l[1] <= l[end]) || (l[1] >= l[end]) ? return true : return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpma0ft7pq.jl:14\nin expression starting at\
    \ /tmp/tmpma0ft7pq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    for i in range(1,length(l))\n      \
    \  if l[i-1] > l[i]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkkgnlq9c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpkkgnlq9c.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkkgnlq9c.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkkgnlq9c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkkgnlq9c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpkkgnlq9c.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkkgnlq9c.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkkgnlq9c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkkgnlq9c.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpkkgnlq9c.jl:11\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkkgnlq9c.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkkgnlq9c.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkgnlq9c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] - l[1] > 0 \n        for i in 2:length(l)-1\n          \
    \  if l[i+1] - l[i] < 0\n                return false\n            end\n     \
    \   end\n    else\n        for i in 2:length(l)-1\n            if l[i+1] - l[i]\
    \ > 0\n                return false\n            end\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if l[2] >= l[1]\n        for i = 2:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i = 2:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (l[1] <= l[end]) && (all(l[i+1]\
    \ >= l[i] for i in 1:length(l)-1)) || (l[1] >= l[end]) && (all(l[i+1] <= l[i]\
    \ for i in 1:length(l)-1))\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if l[1] > l[end]\n        return all(diff(l) .<= 0)\n    else\n\
    \        return all(diff(l) .>= 0)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    (l[2:end]-l[1:end-1]) .>= 0 || (l[2:end]-l[1:end-1])\
    \ .<= 0\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt7yul196.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  TypeError: non-boolean (BitVector)\
    \ used in boolean context\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpt7yul196.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7yul196.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt7yul196.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt7yul196.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n    \
    \ @ Main /tmp/tmpt7yul196.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7yul196.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt7yul196.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt7yul196.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n    \
    \ @ Main /tmp/tmpt7yul196.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt7yul196.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt7yul196.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt7yul196.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] mon"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt7yul196.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] > l[1]\n        for i in 3:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    elseif\
    \ l[2] < l[1]\n        for i in 3:length(l)\n            if l[i] > l[i-1]\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    n == 0 && return\
    \ true\n    d = l[2] - l[1]\n    for i in 2:n-1\n        if (l[i+1] - l[i]) *\
    \ d < 0\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    state = l[1]\n    for x in l[2:end]\n\
    \        if x - state < 0\n            return false\n        end\n        state\
    \ = x\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp983k4zwm.jl:27\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp983k4zwm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp983k4zwm.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp983k4zwm.jl:28\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp983k4zwm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp983k4zwm.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp983k4zwm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return sign(diff(l)) == sign(mean(diff(l)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2phxdqjn.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 4, 10]) == true\\n  MethodError:\
    \ no method matching sign(::Vector{Int64})\\n  Closest candidates are:\\n    sign(!Matched::Unsigned)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:163\\n    sign(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:254\\n    sign(!Matched::Dates.Period)\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:103\\\
    n    ...\\n  Stacktrace:\\n   [1] monotonic(l::Vector{Int64})\\n     @ Main /tmp/tmp2phxdqjn.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2phxdqjn.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2phxdqjn.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmp2phxdqjn.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\\n  MethodError: no method matching sign(::Vector{Int64})\\\
    n  Closest candidates are:\\n    sign(!Matched::Unsigned) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:163\\\
    n    sign(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:254\\\
    n    sign(!Matched::Dates.Period) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:103\\\
    n    ...\\n  Stacktrace:\\n   [1] monotonic(l::Vector{Int64})\\n     @ Main /tmp/tmp2phxdqjn.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2phxdqjn.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2phxdqjn.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmp2phxdqjn.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\\n "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  if length(l) == 1\n    return true\n \
    \ end\n  if l[1] > l[2]\n    for i in 2:length(l)\n      if l[i] >= l[i-1]\n \
    \       return false\n      end\n    end\n  else\n    for i in 2:length(l)\n \
    \     if l[i] <= l[i-1]\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbfvd58kr.jl:37\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfvd58kr.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfvd58kr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfvd58kr.jl:40\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfvd58kr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfvd58kr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfvd58kr.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if sign(l[2] - l[1]) == sign(l[end] - l[end-1])\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcl1n40cg.jl:26\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1n40cg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1n40cg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcl1n40cg.jl:29\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1n40cg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1n40cg.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl1n40cg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    x = l[1]\n    y = l[2]\n    n = length(l)\n\
    \    e = 0\n    s = 0\n    if y>x\n        for i in l[2:n]\n            if i <\
    \ x\n                e += 1\n            end\n            x = i\n        end\n\
    \    elseif y<x\n        for i in l[2:n]\n            if i > x\n             \
    \   s += 1\n            end\n            x = i\n        end\n    end\n    if e\
    \ == 0\n        return true\n    elseif s == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ro6e_ky.jl:45\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ro6e_ky.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ro6e_ky.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp9ro6e_ky.jl:48\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ro6e_ky.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ro6e_ky.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ro6e_ky.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if l[1] > l[2]\n        for i in 1:length(l)-1\n            if l[i]\
    \ < l[i+1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 1:length(l)-1\n            if l[i] > l[i+1]\n              \
    \  return false\n            end\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    if n == 1\n     \
    \   return true\n    end\n    if l[1] > l[2]\n        for i = 2:n-1\n        \
    \    if l[i] >= l[i+1]\n                return false\n            end\n      \
    \  end\n    else\n        for i = 2:n-1\n            if l[i] <= l[i+1]\n     \
    \           return false\n            end\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz57he09s.jl:34\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz57he09s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz57he09s.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpz57he09s.jl:35\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz57he09s.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz57he09s.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpz57he09s.jl:37\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz57he09s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz57he09s.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpz57he09s.jl:38\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz57he09s.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz57he09s.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpz57he09s.jl:40\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz57he09s.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if length(l) == 2\n        return true\n    end\n    if all(l[1:end-1]\
    \ .< l[2:end])\n        return true\n    end\n    if all(l[1:end-1] .> l[2:end])\n\
    \        return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb5ay19j0.jl:33\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5ay19j0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5ay19j0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb5ay19j0.jl:36\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5ay19j0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5ay19j0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5ay19j0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[1] < l[2]\n        for i in 2:length(l)-1\n\
    \            if l[i] >= l[i+1]\n                return false\n            end\n\
    \        end\n    else\n        for i in 2:length(l)-1\n            if l[i] <=\
    \ l[i+1]\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00rv23m8.jl:34\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00rv23m8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00rv23m8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp00rv23m8.jl:37\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00rv23m8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00rv23m8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00rv23m8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    isincreasing = true\n    decreasing\
    \ = true\n    for i in 1:length(l)-1\n        if l[i] < l[i+1]\n            decreasing\
    \ = false\n        elseif l[i] > l[i+1]\n            isincreasing = false\n  \
    \      end\n    end\n    return isincreasing || decreasing\nend\n@test monotonic([1,\
    \ 2, 4, 20]) == true\n@test monotonic([1, 20, 4, 10]) == false\n@test monotonic([4,\
    \ 1, 0, -10]) == true\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpqvd42x6i.jl:21\nin expression starting at /tmp/tmpqvd42x6i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n   if length(l) == 1\n      return true\n\
    \   end\n   if (l[1] > l[2])\n      return isdecreasing(l)\n   else\n      return\
    \ isincreasing(l)\n   end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb51f5acf.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: isincreasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmpb51f5acf.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb51f5acf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb51f5acf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb51f5acf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: isincreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpb51f5acf.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb51f5acf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb51f5acf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb51f5acf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: isincreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpb51f5acf.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb51f5acf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb51f5acf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb51f5acf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: isdecreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpb51f5acf.jl:14\n\
    \   [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb51f5acf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    if length(l) <= 1\n        return\
    \ true\n    end\n    \n    for i in 2:length(l)\n        if l[i] < l[i-1]\n  \
    \          return false\n        end\n    end\n    \n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4,\
    \ 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxbb71bzv.jl:31\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbb71bzv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbb71bzv.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxbb71bzv.jl:32\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbb71bzv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbb71bzv.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbb71bzv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    x = l[1]\n    for i = 2:length(l)\n\
    \        if x > l[i]\n            x = l[i]\n        else\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6a1l94g6.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a1l94g6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a1l94g6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a1l94g6.jl:26\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a1l94g6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a1l94g6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a1l94g6.jl:29\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6a1l94g6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a1l94g6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a1l94g6.jl:31\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6a1l94g6.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6a1l94g6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6a1l94g6.jl:32\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6a1l94g6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    if l[2] > l[1]\n        for i in 3:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 3:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    difference = l[2] - l[1]\n    for i in 2:length(l)\n        if (l[i]\
    \ - l[i-1])*difference <= 0\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp20vbnafs.jl:30\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20vbnafs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20vbnafs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp20vbnafs.jl:33\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp20vbnafs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp20vbnafs.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20vbnafs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (all(l[i] < l[i+1] for i = 1:length(l)-1)\
    \ || all(l[i] > l[i+1] for i = 1:length(l)-1))\nend\n\"\"\"\nGiven a sorted list\
    \ of keys and a list of values with corresponding length, return a dictionary.\n\
    \    >>> keyed_values([4, 5, 6], [\"a\", \"b\", \"c\"])\n    Dict{Int64,String}\
    \ with 3 entries:\n      6 => \"c\"\n      5 => \"b\"\n      4 => \"a\"\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3t17x2yl.jl:12\nin expression starting at /tmp/tmp3t17x2yl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    n = size(l)[1]\n    increment\
    \ = 1\n    decrement = 0\n    direction = increment\n    \n    for i in 1:n-1\n\
    \        if l[i] > l[i+1]\n            direction = decrement\n        elseif l[i]\
    \ < l[i+1]\n            direction = increment\n        end\n    end\n    \n  \
    \  if direction == decrement || direction == increment\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4tshkr7.jl:37\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4tshkr7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4tshkr7.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpm4tshkr7.jl:40\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4tshkr7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4tshkr7.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4tshkr7.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    diff_l = map(diff, l)\n    return all(x\
    \ -> x == 0, diff_l) || all(x -> x > 0, diff_l) || all(x -> x < 0, diff_l)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0xj_ru0r.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: no method matching\
    \ diff(::Int64)\n  Closest candidates are:\n    diff(!Matched::AbstractRange{T};\
    \ dims) where T at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:971\n\
    \    diff(!Matched::SparseArrays.AbstractSparseMatrixCSC; dims) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/linalg.jl:1110\n\
    \    diff(!Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:929\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n  \
    \   @ ./array.jl:653 [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n\
    \   [5] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmp0xj_ru0r.jl:10\n   [6]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp0xj_ru0r.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp0xj_ru0r.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0xj_ru0r.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: no method matching diff(::Int64)\n\
    \  Closest candidates are:\n    diff(!Matched::AbstractRange{T}; dims) where T\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:971\n  \
    \  diff(!Matched::SparseArrays.AbstractSparseMatrixCSC; dims) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/linalg.jl:1110\n\
    \    diff(!Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:929\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n  \
    \   @ ./array.jl:653 [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n\
    \   [5] monotonic(l::Vecto"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xj_ru0r.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return length(unique(diff(l)))<=1 #\
    \ if only 0,1, or -1\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnduj4llf.jl:17\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnduj4llf.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnduj4llf.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnduj4llf.jl:18\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnduj4llf.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnduj4llf.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnduj4llf.jl:20\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnduj4llf.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnduj4llf.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnduj4llf.jl:21\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnduj4llf.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnduj4llf.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnduj4llf.jl:23\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnduj4llf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    for i in 2:length(l)\n        if l[i]\
    \ - l[i-1] < 0\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iio0cxx.jl:25\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8iio0cxx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iio0cxx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8iio0cxx.jl:26\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8iio0cxx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8iio0cxx.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iio0cxx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n   if length(l)<=1\n        return true\n\
    \    end\n    if l[1]<l[2]\n        for i in 1:length(l)-1\n            if l[i]>l[i+1]\n\
    \                return false\n            end\n        end\n    else\n      \
    \  for i in 1:length(l)-1\n            if l[i]<l[i+1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    k = length(l)\n    if l[k]>l[k-1]\n\
    \        for i = 1:k-1\n            if l[i]>l[i+1]\n                return false\n\
    \            end\n        end\n    elseif l[k]<l[k-1]\n        for i = 1:k-1\n\
    \            if l[i]<l[i+1]\n                return false\n            end\n \
    \       end\n    end\n    return true\nend\n        \n    \nmonotonic([1, 2, 4,\
    \ 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0, -10])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    m1 = all(i -> i>0, diff(l))\n    m2\
    \ = all(i -> i<0, diff(l))\n    m1 || m2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps172e3_z.jl:23\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps172e3_z.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps172e3_z.jl:18\ntest set: Test\
    \ Failed at /tmp/tmps172e3_z.jl:26\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps172e3_z.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps172e3_z.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps172e3_z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    sorted = isequal(sort(l), l)\n    rsorted\
    \ = isequal(sort(l, rev=true), l)\n    return sorted || rsorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[1] < l[end]\n        for i in 2:length(l)\n\
    \            if l[i] < l[i-1]\n                return false\n            end\n\
    \        end\n    elseif l[1] > l[end]\n        for i in 2:length(l)\n       \
    \     if l[i] > l[i-1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    return all(l[i]<=l[i+1]\
    \ for i in 1:n-1) || all(l[i]>=l[i+1] for i in 1:n-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if length(l) == 2\n        return l[1] <= l[2] || l[1] >= l[2]\n\
    \    end\n    if l[1] <= l[2]\n        for i in 2:length(l)-1\n            if\
    \ l[i] > l[i+1]\n                return false\n            end\n        end\n\
    \    else\n        for i in 2:length(l)-1\n            if l[i] < l[i+1]\n    \
    \            return false\n            end\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    #  The function should return true or\
    \ false depending on whether the elements of the input array are monotonically\
    \ increasing or decreasing.\n    increment = true\n    decrement = true\n    for\
    \ i in 1:length(l)-1\n        increment = increment && l[i] <= l[i+1]\n      \
    \  decrement = decrement && l[i] >= l[i+1]\n    end\n    return increment || decrement\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    x = 0\n    y = 0\n    for i in 1:length(l)-1\n\
    \        if l[i] > l[i+1]\n            x = x + 1\n        elseif l[i] < l[i+1]\n\
    \            y = y + 1\n        end\n    end\n    if x > 0 && y > 0\n        return\
    \ false\n    else\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  m = zero(Int64)\n  for i = 1:length(l)-1\n\
    \    if i == 1 \n      m = l[i+1] - l[i]\n    else\n      m1 = l[i+1] - l[i]\n\
    \      if m != m1 \n        return false\n      end\n    end\n  end\n  return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptsvx135d.jl:28\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsvx135d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsvx135d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptsvx135d.jl:29\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsvx135d.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsvx135d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptsvx135d.jl:31\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsvx135d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsvx135d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptsvx135d.jl:32\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsvx135d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsvx135d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptsvx135d.jl:34\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsvx135d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    res = true\n    if length(l) == 1 \n\
    \        return res\n    end\n    if l[1] < l[2] \n        for i in 2:length(l)-1\
    \ \n            if l[i] > l[i+1] \n                res = false\n             \
    \   break\n            end\n        end\n    elseif l[1] > l[2] \n        for\
    \ i in 2:length(l)-1 \n            if l[i] < l[i+1] \n                res = false\n\
    \                break\n            end\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    for i in 1:n-1\n\
    \        if l[i] == l[i+1]\n            continue\n        elseif l[i] > l[i+1]\n\
    \            if i < n-1\n                continue\n            else\n        \
    \        return true\n            end\n        elseif l[i] < l[i+1]\n        \
    \    if i < n-1\n                continue\n            else\n                return\
    \ true\n            end\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpotgpw5vh.jl:38\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotgpw5vh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotgpw5vh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpotgpw5vh.jl:41\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpotgpw5vh.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpotgpw5vh.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpotgpw5vh.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([9, 9, 9, 9]) == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpotgpw5vh.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpotgpw5vh.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpotgpw5vh.jl:35\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    5     2      1    "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpotgpw5vh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i]<=l[i+1] for i=1:length(l)-1)\
    \ || all(l[i]>=l[i+1] for i=1:length(l)-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  direction::Bool = true\n  for i = 1:length(l)-1\n\
    \    if (l[i+1] - l[i]) < 0 \n      direction = false\n    end\n  end\n  direction\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphp0imtxu.jl:26\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp0imtxu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp0imtxu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphp0imtxu.jl:27\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphp0imtxu.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphp0imtxu.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphp0imtxu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1 \n        return true\n\
    \    end\n    if l[2] > l[1] \n        for i in 2:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    elseif\
    \ l[2] < l[1]\n        for i in 2:length(l)\n            if l[i] > l[i-1]\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ true\nend\n    \n    \n        \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    increasing = l[1]<l[2]\n    for i in\
    \ 2:length(l)-1\n        if l[i] == l[i+1] continue\n        if (l[i]<l[i+1])\
    \ != increasing\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7khl4vj.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7khl4vj.jl:1\n\
    in expression starting at /tmp/tmpp7khl4vj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (\n        all(diff(l).>=0) ||\
    \ all(diff(l).<=0)\n    )\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \"\"\"Return True is list elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \"\"\"\n    length = 0\n    increasing = 0\n    decreasing\
    \ = 0\n    l_length = length(l)\n    for i in 1:l_length\n        if l[i] > l[i+1]\n\
    \            decreasing += 1\n        else\n            increasing += 1\n    \
    \    end\n    end\n    if decreasing == l_length\n        return true\n    elseif\
    \ increasing == l_length\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2azcbtrq.jl:42\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: objects of type\
    \ Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2azcbtrq.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2azcbtrq.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2azcbtrq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp2azcbtrq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: objects of type Int64 are not\
    \ callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmp2azcbtrq.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2azcbtrq.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2azcbtrq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp2azcbtrq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmp2azcbtrq.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2azcbtrq.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2azcbtrq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2azcbtrq.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (l[1] == maximum(l) || l[1] ==\
    \ minimum(l)) && all(l[i] <= l[i+1] for i in 1:length(l)-1) && all(l[i] >= l[i+1]\
    \ for i in 1:length(l)-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6k18g_h.jl:17\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6k18g_h.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6k18g_h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx6k18g_h.jl:18\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6k18g_h.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6k18g_h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx6k18g_h.jl:20\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6k18g_h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6k18g_h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx6k18g_h.jl:21\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6k18g_h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6k18g_h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx6k18g_h.jl:23\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6k18g_h.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # YOUR CODE HERE\n   \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgblia6h6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpgblia6h6.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgblia6h6.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgblia6h6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpgblia6h6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpgblia6h6.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgblia6h6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgblia6h6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if all(l[i]<=l[i+1] for i=1:length(l)-1)\
    \ || all(l[i]>=l[i+1] for i=1:length(l)-1)\n        return true\n    else\n  \
    \      return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 0 return true end\n\
    \    l2 = l[2:end]\n    if l[1] > l[2] return sort(l2, rev=true) == l2 end\n \
    \   return sort(l2) == l2\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    if l[1] > l[2]\n        for i in 2:length(l)\n            if l[i]\
    \ > l[i-1]\n                return false\n            end\n        end\n    elseif\
    \ l[1] < l[2]\n        for i in 2:length(l)\n            if l[i] < l[i-1]\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) > 1\n        if l[2] >\
    \ l[1]\n            for i in 2:length(l)\n                if l[i] < l[i-1]\n \
    \                   return false\n                end\n            end\n     \
    \   else\n            for i in 2:length(l)\n                if l[i] > l[i-1]\n\
    \                    return false\n                end\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    for i in 1:length(l)-1\n        if(l[i]\
    \ < l[i+1])\n            return false\n        end\n    end\n    return true\n\
    end\nmonotonic([1, 2, 4, 20])\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv3gdx1j7.jl:23\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3gdx1j7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3gdx1j7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv3gdx1j7.jl:24\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv3gdx1j7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3gdx1j7.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpv3gdx1j7.jl:29\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv3gdx1j7.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv3gdx1j7.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv3gdx1j7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(diff(l) .>= 0) || all(diff(l)\
    \ .<= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] <= l[i+1] for i = 1:length(l)-1)\
    \ || all(l[i] >= l[i+1] for i = 1:length(l)-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    is_increasing = true\n    is_decreasing\
    \ = true\n    for i = 1:length(l)-1\n        if l[i] > l[i+1]\n            is_increasing\
    \ = false\n        end\n        if l[i] < l[i+1]\n            is_decreasing =\
    \ false\n        end\n    end\n    return is_increasing || is_decreasing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if l[1] <= l[2]\n        for i in 2:length(l)-1\n            if\
    \ l[i] >= l[i+1]\n                return false\n            end\n        end\n\
    \    else\n        for i in 2:length(l)-1\n            if l[i] <= l[i+1]\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ true\nend\n# Tests\nprintln(monotonic([1, 2, 4, 20]))\nprintln(monotonic([1,\
    \ 20, 4, 10]))\nprintln(monotonic([4, 1, 0, -10]))\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "true\nfalse\ntrue\ntest set: Test Failed at /tmp/tmpz3sggsyc.jl:41\n  Expression:\
    \ candidate([4, 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3sggsyc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3sggsyc.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpz3sggsyc.jl:44\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3sggsyc.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3sggsyc.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3sggsyc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 0\n        return true\n\
    \    end\n    diffs = [l[1]]\n    for i = 2:length(l)\n        push!(diffs, l[i]\
    \ - l[i-1])\n    end\n    return(all(x -> x >= 0, diffs) || all(x -> x <= 0, diffs))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ahqd82a.jl:27\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ahqd82a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ahqd82a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_ahqd82a.jl:28\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ahqd82a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ahqd82a.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ahqd82a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    sign = 1\n    for i in 1:length(l)-1\n\
    \        if (sign*(l[i]-l[i+1]))<0\n            return false\n        end\n  \
    \      if abs(l[i]-l[i+1])>0\n            sign = sign*(l[i]-l[i+1])\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8lren19x.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lren19x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lren19x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8lren19x.jl:27\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8lren19x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lren19x.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp8lren19x.jl:32\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8lren19x.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8lren19x.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lren19x.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    #compare the differences in each pair\
    \ of elements\n    differences = [l[i+1] - l[i] for i = 1:length(l)-1]\n    #check\
    \ to see if they are increasing\n    increasing = all(differences[i] >= 0 for\
    \ i = 1:length(differences))\n    #check to see if they are decreasing\n    decreasing\
    \ = all(differences[i] <= 0 for i = 1:length(differences))\n    #return true if\
    \ increasing, false if decreasing\n    return increasing || decreasing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    increasing = sign(l[2] - l[1])\n    for i in 2:length(l) - 1\n \
    \       if sign(l[i + 1] - l[i]) != increasing\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvdpj1pzn.jl:30\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdpj1pzn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdpj1pzn.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdpj1pzn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    monotonically_increasing(l) || monotonically_decreasing(l)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp87swl5_1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: monotonically_increasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmp87swl5_1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp87swl5_1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87swl5_1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp87swl5_1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: monotonically_increasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmp87swl5_1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp87swl5_1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87swl5_1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp87swl5_1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: monotonically_increasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmp87swl5_1.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp87swl5_1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87swl5_1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp87swl5_1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: monotonically_increasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87swl5_1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    is_increasing = true\n    is_decreasing\
    \ = true\n    for i in 1:length(l)-1\n        if l[i] > l[i+1]\n            is_increasing\
    \ = false\n        end\n        if l[i] < l[i+1]\n            is_decreasing =\
    \ false\n        end\n    end\n    return is_increasing || is_decreasing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    first::Int64 = l[1]\n    prev::Int64\
    \ = first\n    for n in l[2:end]\n        if (n - prev) * (first - prev) < 0\n\
    \            return false\n        end\n        prev = n\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7xq75yo.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7xq75yo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7xq75yo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7xq75yo.jl:26\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7xq75yo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7xq75yo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7xq75yo.jl:28\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7xq75yo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7xq75yo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7xq75yo.jl:29\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy7xq75yo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy7xq75yo.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy7xq75yo.jl:31\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7xq75yo.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return isequal(sort(l), l) || isequal(sort(l,\
    \ rev=true), l)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    isincreasing(l) || isdecreasing(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpahinprh9.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: isincreasing\
    \ not defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main\
    \ /tmp/tmpahinprh9.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpahinprh9.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpahinprh9.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpahinprh9.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: isincreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpahinprh9.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpahinprh9.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpahinprh9.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpahinprh9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: isincreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpahinprh9.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpahinprh9.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpahinprh9.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpahinprh9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: isincreasing not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpahinprh9.jl:10\n\
    \   [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahinprh9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    prev = l[1]\n    start = 1\n    for i in 2:length(l)\n        if\
    \ l[i] > prev\n            start = 1\n        elseif l[i] < prev\n           \
    \ start = -1\n        end\n        if start * (l[i] - prev) < 0\n            return\
    \ false\n        end\n        prev = l[i]\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4,\
    \ 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65wl2gz8.jl:35\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65wl2gz8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65wl2gz8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp65wl2gz8.jl:38\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65wl2gz8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65wl2gz8.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65wl2gz8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    #### YOUR CODE HERE ####\n    gt = l[1]\n\
    \    for i = 2:length(l)\n        if l[i] > gt\n            gt = l[i]\n      \
    \  elseif l[i] < gt\n            gt = l[i]\n        else\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9fajv_ry.jl:30\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fajv_ry.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fajv_ry.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9fajv_ry.jl:32\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fajv_ry.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fajv_ry.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9fajv_ry.jl:33\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fajv_ry.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fajv_ry.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp9fajv_ry.jl:35\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9fajv_ry.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9fajv_ry.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     4      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fajv_ry.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # First element is the true value\n\
    \    d = l[1] <= l[2]\n    for i in 2:length(l)-1\n        if (d==true) && (l[i]\
    \ > l[i+1]) \n            return false\n        elseif (d==false) && (l[i] < l[i+1])\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    N = length(l)\n    for i in 1:N-1\n\
    \        if l[i] >= l[i+1]\n            return false\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3esmrg5.jl:26\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3esmrg5.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3esmrg5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpe3esmrg5.jl:27\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3esmrg5.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3esmrg5.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpe3esmrg5.jl:30\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3esmrg5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3esmrg5.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3esmrg5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1 \n        return true\n\
    \    end\n    if l[1] < l[2]\n        for i in 1:length(l)-1\n            if l[i]\
    \ > l[i+1]\n                return false\n            end\n        end\n    elseif\
    \ l[1] > l[2]\n        for i in 1:length(l)-1\n            if l[i] < l[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    decrease = true\n    increase = true\n\
    \    for i in 1:length(l)-1\n        if l[i]<l[i+1]\n            decrease = false\n\
    \        elseif l[i]>l[i+1]\n            increase = false\n        end\n    end\n\
    \    return decrease || increase\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    monotonic = true\n    for i in 2:length(l)\n\
    \        if l[i] - l[i-1] == 0\n            continue\n        elseif (l[i] - l[i-1])/abs(l[i]\
    \ - l[i-1]) < 0\n            monotonic = false\n            break\n        end\n\
    \    end\n    return monotonic\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp68uejeyg.jl:29\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp68uejeyg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp68uejeyg.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp68uejeyg.jl:30\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp68uejeyg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp68uejeyg.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68uejeyg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    #l<:Vector{Int64}   #I don't get this\
    \ expression\n    sorted(l) == l || sorted(l, rev=true) == l\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpys45nne4.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: sorted not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpys45nne4.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys45nne4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys45nne4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpys45nne4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpys45nne4.jl:11\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys45nne4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys45nne4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpys45nne4.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpys45nne4.jl:11\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys45nne4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys45nne4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpys45nne4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpys45nne4.jl:11\n   [2]\
    \ macro expansion\n     @ /shared/ce"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpys45nne4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2 \n        return true\n\
    \    end\n    return (all(x -> x >= l[1], l) || all(x -> x <= l[1], l))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3x2x_bld.jl:22\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x2x_bld.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x2x_bld.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3x2x_bld.jl:25\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3x2x_bld.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3x2x_bld.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3x2x_bld.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[2] - l[1] > 0\n        for i in\
    \ 1:size(l)[1]-1\n            if l[i+1] - l[i] < 0\n                return false\n\
    \            end\n        end\n    else\n        for i in 1:size(l)[1]-1\n   \
    \         if l[i+1] - l[i] > 0\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # Need to check if l is increasing\n\
    \    #    if l[2] - l[1] > 0:\n    #        check_increasing = true\n    #   \
    \ else:\n    #        check_increasing = false\n    #    end\n    #    for i in\
    \ range(2, length(l)):\n    #        if check_increasing:\n    #            if\
    \ l[i] - l[i-1] < 0:\n    #                return false\n    #        else:\n\
    \    #            if l[i] - l[i-1] > 0:\n    #                return false\n \
    \   #        end\n    #    end\n    #    return true\n    \n    # Or can be implemented\
    \ using a single loop\n    # Using the property of the first item in the list\
    \ to determine if it is increasing or decreasing\n    check_increasing = l[2]\
    \ - l[1] > 0\n    for i in range(2, length(l)):\n        if check_increasing:\n\
    \            if l[i] - l[i-1] < 0:\n                return false\n        else:\n\
    \            if l[i] - l[i-1] > 0:\n                return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn6x66it.jl:31\nin expression starting at\
    \ /tmp/tmppn6x66it.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return length(unique(l)) == length(l)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoch81mfs.jl:19\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoch81mfs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoch81mfs.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpoch81mfs.jl:21\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoch81mfs.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoch81mfs.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpoch81mfs.jl:24\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoch81mfs.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoch81mfs.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoch81mfs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    for i in 2:length(l)\n        if l[i] < l[i-1]\n            for\
    \ j in i:length(l)\n                if l[j] > l[j-1]\n                    return\
    \ false\n                end\n            end\n            return true\n     \
    \   elseif l[i] > l[i-1]\n            for j in i:length(l)\n                if\
    \ l[j] < l[j-1]\n                    return false\n                end\n     \
    \       end\n            return true\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy4yxcp17.jl:43\n  Test threw exception\n\
    \  Expression: candidate([9, 9, 9, 9]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpy4yxcp17.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy4yxcp17.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy4yxcp17.jl:35\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy4yxcp17.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    length(l) == 0 && return false\n   \
    \ return all(x->x <= l[1], l) || all(x->x >= l[1], l)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0bocj9l.jl:20\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0bocj9l.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0bocj9l.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpy0bocj9l.jl:23\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0bocj9l.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0bocj9l.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0bocj9l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if(l[1] > l[end])\n        return all(l[i]\
    \ >= l[i+1] for i=1:length(l)-1)\n    else\n        return all(l[i] <= l[i+1]\
    \ for i=1:length(l)-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    i = 1\n    if l[i+1] > l[i]\n      \
    \  for i in 1:length(l)-1\n            if l[i+1] < l[i]\n                return\
    \ false\n            end\n        end\n    elseif l[i+1] < l[i]\n        for i\
    \ in 1:length(l)-1\n            if l[i+1] > l[i]\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if l[1] <= l[2]\n        prev_state = \"increasing\"\n    else\n\
    \        prev_state = \"decreasing\"\n    end\n    for i in 3:length(l)\n    \
    \    if l[i-1] <= l[i]\n            state = \"increasing\"\n        else\n   \
    \         state = \"decreasing\"\n        end\n        if state != prev_state\n\
    \            return false\n        end\n        prev_state = state\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppvfdim4z.jl:40\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppvfdim4z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppvfdim4z.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvfdim4z.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return sum(diff(l) .> 0) == length(l)\
    \ - 1 || sum(diff(l) .< 0) == length(l) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpax5afxtd.jl:21\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax5afxtd.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax5afxtd.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpax5afxtd.jl:24\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpax5afxtd.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpax5afxtd.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpax5afxtd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)<2\n        return true\n\
    \    end\n    diffs = [ l[i+1]-l[i] for i in 1:length(l)-1 ]\n    if all(diffs\
    \ .> 0) || all(diffs .< 0)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp742mjr9r.jl:29\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp742mjr9r.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp742mjr9r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp742mjr9r.jl:32\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp742mjr9r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp742mjr9r.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp742mjr9r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1 \n        return true\n\
    \    end\n    if l[2] - l[1] > 0 \n        for i in 2:length(l)\n            if\
    \ l[i] - l[i-1] < 0 \n                return false\n            end\n        end\n\
    \    elseif l[2] - l[1] < 0 \n        for i in 2:length(l)\n            if l[i]\
    \ - l[i-1] > 0 \n                return false\n            end\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] <= l[i+1] for i in 1:length(l)-1)\
    \ || all(l[i] >= l[i+1] for i in 1:length(l)-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) > 1 \n        if (sign(l[2]-l[1])\
    \ == sign(l[end]-l[end-1])) \n            return true \n        else \n      \
    \      return false \n        end \n    else \n        return true \n    end \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpltaottmw.jl:27\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltaottmw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltaottmw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpltaottmw.jl:30\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltaottmw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltaottmw.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltaottmw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    end\n    if l[1] < l[2]\n        for i in 2:length(l)-1\n      \
    \      if l[i] > l[i+1]\n                return false\n            end\n     \
    \   end\n    else\n        for i in 2:length(l)-1\n            if l[i] < l[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpedbnhgz_.jl:14\nin expression starting at /tmp/tmpedbnhgz_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  return length(unique(sign.(diff(l))))\
    \ <= 1\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22q44qlx.jl:21\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22q44qlx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22q44qlx.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22q44qlx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    current_diff = l[2] - l[1]\n    for\
    \ i in 2:length(l)-1\n        if l[i+1] - l[i] != current_diff\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptxuk1cu1.jl:23\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxuk1cu1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxuk1cu1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptxuk1cu1.jl:24\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxuk1cu1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxuk1cu1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptxuk1cu1.jl:26\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxuk1cu1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxuk1cu1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptxuk1cu1.jl:27\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxuk1cu1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxuk1cu1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptxuk1cu1.jl:29\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxuk1cu1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    has_ascending_order = true\n    has_descending_order\
    \ = true\n    for (index, element) in enumerate(l)\n        has_ascending_order\
    \ = has_ascending_order && (index == 1 || l[index-1] <= element)\n        has_descending_order\
    \ = has_descending_order && (index == 1 || l[index-1] >= element)\n    end\n \
    \   return has_ascending_order || has_descending_order\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    for i in 2:length(l)\n        if l[i] > l[i-1]\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1pgnhodk.jl:25\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1pgnhodk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pgnhodk.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1pgnhodk.jl:26\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1pgnhodk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pgnhodk.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1pgnhodk.jl:31\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1pgnhodk.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1pgnhodk.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1pgnhodk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(diff(l) .>= 0) || all(diff(l)\
    \ .<= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    first = l[1]\n    increase = l[2] >\
    \ first\n    for i in l[2:end]\n        if i > first && increase == false\n  \
    \          return false\n        elseif i < first && increase == true\n      \
    \      return false\n        end\n        first = i\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    new_list = [l[i] - l[i-1] for i in 2:length(l)]\n\
    \    if all(x->x>=0, new_list) || all(x->x<=0, new_list)\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if (l[1] < l[2])\n        for i = 1:length(l)-1\n\
    \            if l[i] > l[i+1]\n                return false\n            end\n\
    \        end\n    else\n        for i = 1:length(l)-1\n            if l[i] < l[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)<2\n        return true\n\
    \    end\n    if l[2] > l[1]\n        for i in 2:length(l)-1\n            if l[i+1]\
    \ <= l[i]\n                return false\n            end\n        end\n    elseif\
    \ l[2] < l[1]\n        for i in 2:length(l)-1\n            if l[i+1] >= l[i]\n\
    \                return false\n            end\n        end\n    else\n      \
    \  return monotonic(l[2:end])\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fs6fj02.jl:39\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3fs6fj02.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3fs6fj02.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fs6fj02.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n \n    if isequal(sort(l), l) || isequal(sort(l,\
    \ rev=true), l)\n        return true\n    else\n        return false\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[1] &lt; l[2]\n        for i in\
    \ 1:length(l)-1\n            if l[i] &gt; l[i+1]\n                return false\n\
    \            end\n        end\n    elseif l[1] &gt; l[2]\n        for i in 1:length(l)-1\n\
    \            if l[i] &lt; l[i+1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\n</code>\nWhen i try to run this function\
    \ in the Julia REPL it works fine\n<code>julia&gt; monotonic([1, 20, 4, 10])\n\
    false\n</code>\nBut when i execute the function in IJulia or in Juno with the\
    \ \"Execute Current Input\" button or the \"Run the Current File\" i get the following\
    \ output:\n<code>julia&gt; using IJulia\njulia&gt; cd(\"C:\\\\Users\\\\Knut\\\\\
    Desktop\\\\Julia\\\\Vorlesung\\\\1.7\")\njulia&gt; include(\"monotonic.jl\")\n\
    julia&gt; monotonic([1, 20, 4, 10])\nERROR: ArgumentError: Package IJulia not\
    \ found in current path:\n- Run `import Pkg; Pkg.add(\"IJulia\")` to install the\
    \ IJulia package.\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t\
    @test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\
    \t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10])\
    \ == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\t\
    @test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajz84yk1.jl:25\nin expression starting at\
    \ /tmp/tmpajz84yk1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    temp = [i-j for (i,j) in zip(l[2:end],\
    \ l[1:end-1])]\n    return all(x -> x >= 0, temp) || all(x -> x <= 0, temp)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if(length(l) == 1)\n        return true\n\
    \    end\n    if l[2] > l[1]\n        for i in 3:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 3:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    N = length(l)\n    for i in 1:N-1\n\
    \        if l[i] < l[i+1] \n            direction = \"inc\"\n            break\n\
    \        elseif l[i] > l[i+1]\n            direction = \"dec\"\n            break\n\
    \        else\n            direction = \"inv\"\n        end\n    end\n    \n \
    \   for i in 1:N-1\n        if direction == \"inc\"\n            if l[i] > l[i+1]\n\
    \                return false\n            end\n        elseif direction == \"\
    dec\"\n            if l[i] < l[i+1]\n                return false\n          \
    \  end\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfx3v8pdf.jl:43\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: direction not\
    \ defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpfx3v8pdf.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfx3v8pdf.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfx3v8pdf.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfx3v8pdf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: direction not defined\n \
    \ Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpfx3v8pdf.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfx3v8pdf.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfx3v8pdf.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfx3v8pdf.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: direction not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpfx3v8pdf.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfx3v8pdf.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfx3v8pdf.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpfx3v8pdf.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: direction not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpfx3v8pdf.jl:24\n\
    \   [2] macro expansion\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfx3v8pdf.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    check = true\n    if l[1] < l[end]\n\
    \        for i in 1:length(l)-1\n            if l[i] > l[i+1]\n              \
    \  check = false\n            end\n        end\n    else\n        for i in 1:length(l)-1\n\
    \            if l[i] < l[i+1]\n                check = false\n            end\n\
    \        end\n    end\n    return check\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2 \n        return true\n\
    \    end\n    a, b = l[1], l[2]\n    if a < b\n        incr = true\n    elseif\
    \ a > b\n        incr = false\n    else\n        return monotonic(l[2:end])\n\
    \    end\n    for i in l[2:end]\n        if incr && i < a\n            return\
    \ false\n        elseif ~incr && i > a\n            return false\n        end\n\
    \        a = i\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    k = l[1]\n    for i in l[2:end]\n  \
    \      if i == k\n            continue\n        elseif i > k \n            k =\
    \ i\n        elseif i < k\n            return false\n        end\n    end\n  \
    \  return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t\
    @test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\
    \t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10])\
    \ == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\t\
    @test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppbarvrt0.jl:30\n  Expression: candidate([4,\
    \ 1, 0, -10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbarvrt0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbarvrt0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppbarvrt0.jl:31\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbarvrt0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbarvrt0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbarvrt0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    m = zeros(Int64,\
    \ n-1)\n    for i in 1:n-1\n        m[i] = l[i+1] - l[i]\n    end\n    if all(m.<0)\
    \ || all(m.>0)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtbiteee.jl:30\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtbiteee.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtbiteee.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqtbiteee.jl:33\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtbiteee.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtbiteee.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtbiteee.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    d = convert(Array{Int64},diff(l))\n\
    \    if( length(unique(sign.(d))) == 1 )\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptxtqpvy3.jl:26\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptxtqpvy3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptxtqpvy3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxtqpvy3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    if l[2] > l[1] \n        # monotonically increasing\n        return\
    \ all(l[i+1] >= l[i] for i in 1:length(l)-1)\n    else\n        # monotonically\
    \ decreasing\n        return all(l[i+1] <= l[i] for i in 1:length(l)-1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    increasing = true\n    decreasing =\
    \ true\n    n = length(l)\n    for i in 2:n\n        if l[i] < l[i-1]\n      \
    \      increasing = false\n        end\n        if l[i] > l[i-1]\n           \
    \ decreasing = false\n        end\n    end\n    if increasing || decreasing\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(diff(l) .>= 0) || all(diff(l)\
    \ .<= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  x = l[1]\n  for i in l[2:end]\n    if\
    \ i == x\n      next\n    elseif i < x\n      if any(i > j for j in l[l.index(i):end])\n\
    \        return false\n      end\n    else\n      if any(i < j for j in l[l.index(i):end])\n\
    \        return false\n      end\n    end\n    x = i\n  end\n  return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaibrlcbf.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  type Array has no field index\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpaibrlcbf.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaibrlcbf.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaibrlcbf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpaibrlcbf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpaibrlcbf.jl:0\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaibrlcbf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaibrlcbf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpaibrlcbf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpaibrlcbf.jl:0\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaibrlcbf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaibrlcbf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpaibrlcbf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpaibrlcbf.jl:0\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaibrlcbf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    set_1 = true\n    set_2 = true\n   \
    \ for i in 1:length(l)-1\n        if l[i] > l[i+1]\n            set_1 = false\n\
    \        end\n        if l[i] < l[i+1]\n            set_2 = false\n        end\n\
    \    end\n    if set_1 || set_2\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  if length(l) == 0\n      return false\n\
    \  end\n  previous_value = l[1]\n  ordering = 0\n  for i in l[2:end]\n    if previous_value\
    \ > i\n      if ordering == 0\n        ordering = -1\n      elseif ordering ==\
    \ 1\n        return false\n      end\n    elseif previous_value < i\n      if\
    \ ordering == 0\n        ordering = 1\n      elseif ordering == -1\n        return\
    \ false\n      end\n    end\n    previous_value = i\n  end\n  return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (sort(l) == l) || (sort(l, rev=true)\
    \ == l)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[2] > l[1]\n        for i in 2:length(l)\n\
    \            if l[i] < l[i-1]\n                return false\n            end\n\
    \        end\n    elseif l[2] < l[1]\n        for i in 2:length(l)\n         \
    \   if l[i] > l[i-1]\n                return false\n            end\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(diff(l) .>= 0) || all(diff(l)\
    \ .<= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if (length(l) == 1) || (length(l) ==\
    \ 0)\n        return true\n    end\n    if (l[2] > l[1])\n        if length(l)\
    \ < 3\n            return true\n        end\n        if (l[3] > l[2])\n      \
    \      return monotonic(l[2:end])\n        else\n            return false\n  \
    \      end\n    else\n        if length(l) < 3\n            return true\n    \
    \    end\n        if (l[3] < l[2])\n            return monotonic(l[2:end])\n \
    \       else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpln_jpdec.jl:42\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln_jpdec.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln_jpdec.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpln_jpdec.jl:45\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln_jpdec.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln_jpdec.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpln_jpdec.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    sgn = zero(Int64)\n    for i in 2:length(l)\n\
    \        cur = sign(l[i] - l[i-1])\n        if cur != zero(Int64)\n          \
    \  if sgn == zero(Int64)\n                sgn = cur\n            elseif sgn !=\
    \ cur\n                return false\n            end\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    @assert length(l) > 0\n    is_monotonic\
    \ = true\n    if l[1] > l[end]\n        increasing = false\n    else\n       \
    \ increasing = true\n    end\n    if increasing\n        for i in 2:length(l)\n\
    \            if l[i] < l[i-1]\n                is_monotonic = false\n        \
    \        break\n            end\n        end\n    else\n        for i in 2:length(l)\n\
    \            if l[i] > l[i-1]\n                is_monotonic = false\n        \
    \        break\n            end\n        end\n    end\n    return is_monotonic\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] &lt;= l[i+1] for i =\
    \ 1:length(l)-1) || all(l[i] &gt;= l[i+1] for i = 1:length(l)-1)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr1j6zj8l.jl:10\nin expression starting at /tmp/tmpr1j6zj8l.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(x -> x >= prev(x), l) ||\
    \ all(x -> x <= prev(x), l)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplr7vl6fa.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: prev not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmplr7vl6fa.jl:10\n\
    \   [2] _all\n     @ ./reduce.jl:1157 [inlined]\n   [3] #all#757\n     @ ./reducedim.jl:902\
    \ [inlined]\n   [4] all\n     @ ./reducedim.jl:902 [inlined]\n   [5] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmplr7vl6fa.jl:10\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmplr7vl6fa.jl:17 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmplr7vl6fa.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplr7vl6fa.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: prev not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmplr7vl6fa.jl:10\n   [2]\
    \ _all\n     @ ./reduce.jl:1157 [inlined]\n   [3] #all#757\n     @ ./reducedim.jl:902\
    \ [inlined]\n   [4] all\n     @ ./reducedim.jl:902 [inlined]\n   [5] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmplr7vl6fa.jl:10\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmplr7vl6fa.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmplr7vl6fa.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplr7vl6fa.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: prev not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmplr7vl6fa.jl:10\n   [2]\
    \ _all\n     @ ./reduce.jl:1157 [inlined]\n   [3] #all#757\n     @ ./reducedim.jl:902\
    \ [inlined]\n   [4] all\n     @ ./reducedim.jl:902 [inlined]\n   [5] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmplr7vl6fa.jl:10\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplr7vl6fa.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    diffs = [l[i] - l[i-1] for i in 2:length(l)]\n\
    \    return all(diffs .>= 0) || all(diffs .<= 0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if (length(l) < 2) \n        return\
    \ true\n    end \n    m_incr = false\n    m_decr = false\n    for i in 1:length(l)-1\n\
    \        if(l[i]<l[i+1])\n            m_incr = true\n        elseif(l[i]>l[i+1])\n\
    \            m_decr = true\n        end\n    end\n    return (m_incr == m_decr)\
    \ == false\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdn1zdqrf.jl:36\n  Expression: candidate([9,\
    \ 9, 9, 9]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdn1zdqrf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdn1zdqrf.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn1zdqrf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    b = true\n    if l[1] < l[2]\n\
    \        for i in 2:length(l)-1\n            if l[i] > l[i+1]\n              \
    \  b = false\n            end\n        end\n    elseif l[1] > l[2]\n        for\
    \ i in 2:length(l)-1\n            if l[i] < l[i+1]\n                b = false\n\
    \            end\n        end\n    end\n    return b\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return length(l) == 1 || all(l[2:end]\
    \ .- l[1:end-1] .== sign(l[2]-l[1]))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmq1_giqw.jl:17\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq1_giqw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq1_giqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmq1_giqw.jl:18\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq1_giqw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq1_giqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmq1_giqw.jl:20\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq1_giqw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq1_giqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmq1_giqw.jl:21\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmq1_giqw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmq1_giqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmq1_giqw.jl:23\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmq1_giqw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    if l[2] >= l[1]\n        for i in 2:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 2:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    n == 0 && return\
    \ true\n    @inbounds for i = 2:n\n        if l[i] - l[i-1] == 0 \n          \
    \  continue\n        elseif l[i] - l[i-1] > 0\n            @inbounds for j = i+1:n\n\
    \                if l[j] - l[j-1] < 0\n                    return false\n    \
    \            end\n            end\n            return true\n        else\n   \
    \         @inbounds for j = i+1:n\n                if l[j] - l[j-1] > 0\n    \
    \                return false\n                end\n            end\n        \
    \    return true\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    i = 1\n    monotonic_increasing = false\n\
    \    monotonic_decreasing = false\n    while i < length(l)\n        if l[i] >\
    \ l[i+1]\n            monotonic_increasing = true\n        elseif l[i] < l[i+1]\n\
    \            monotonic_decreasing = true\n        end\n        i = i + 1\n   \
    \ end\n    return (monotonic_increasing == true && monotonic_decreasing == false)\
    \ || (monotonic_increasing == false && monotonic_decreasing == true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4,\
    \ 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4cdz8ydp.jl:35\n  Expression: candidate([9,\
    \ 9, 9, 9]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4cdz8ydp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4cdz8ydp.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cdz8ydp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2\n        return true\n\
    \    end\n    if l[2] > l[1]\n        for i in 2:length(l)\n            if l[i]\
    \ < l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 2:length(l)\n            if l[i] > l[i-1]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    a = l[1]\n    positive = (l[2] > a)\n\
    \    len = length(l)\n    for i = 2:len\n        if positive == (l[i] < a)\n \
    \           return false\n        end\n        a = l[i]\n    end\n    return true\n\
    end\n@code_llvm monotonic([1, 2, 4, 20])\n@code_native monotonic([1, 2, 4, 20])\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @code_llvm not defined\nin expression\
    \ starting at /tmp/tmp4kpv5nyq.jl:21\nin expression starting at /tmp/tmp4kpv5nyq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return l == sort(l) || l == sort(l,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    direction = sign(l[2] - l[1])\n    monotonic\
    \ = true\n    for i = 3:length(l)\n        if sign(l[i] - l[i-1]) != direction\n\
    \            monotonic = false\n            break\n        end\n    end\n    return\
    \ monotonic\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivvnfbnf.jl:29\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivvnfbnf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivvnfbnf.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivvnfbnf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    for i in 2:length(l)\n       \
    \ if l[i] > l[i-1] #increasing\n            for j in 2:length(l)\n           \
    \     if l[j] < l[j-1]\n                    return false\n                end\n\
    \            end\n            return true\n        elseif l[i] < l[i-1] #decreasing\n\
    \            for j in 2:length(l)\n                if l[j] > l[j-1]\n        \
    \            return false\n                end\n            end\n            return\
    \ true\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)>2\n        if length(l)%2==0\n\
    \            return false\n        else\n            if length(l)%2==1\n     \
    \           temp_l=Int64[]\n                for i=1:length(l)\n              \
    \      if i%2==1\n                        push!(temp_l,l[i])\n               \
    \     end\n                end\n                return monotonic(temp_l)\n   \
    \         end\n        end\n    elseif length(l)==2\n        if l[1]>l[2]\n  \
    \          return all(l[i]>=l[i+1] for i in 1:length(l)-1)\n        elseif l[1]<l[2]\n\
    \            return all(l[i]<=l[i+1] for i in 1:length(l)-1)\n        elseif l[1]==l[2]\n\
    \            return false\n        end\n    elseif length(l)==1\n        return\
    \ true\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgklu5ck.jl:41\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgklu5ck.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgklu5ck.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxgklu5ck.jl:42\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgklu5ck.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgklu5ck.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxgklu5ck.jl:44\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgklu5ck.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgklu5ck.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxgklu5ck.jl:45\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgklu5ck.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgklu5ck.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxgklu5ck.jl:47\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgklu5ck.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)==1\n        return true\n\
    \    end\n    diff=l[2]-l[1]\n    for i in 2:length(l)-1\n        if diff*(l[i+1]-l[i])<0\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  if length(l) == 1\n    return true\n \
    \ end\n  \n  # check for monotonically increasing\n  increasing = true\n  for\
    \ i = 2:length(l)\n    if l[i] < l[i-1]\n      increasing = false\n      break\n\
    \    end\n  end\n  \n  # check for monotonically decreasing\n  decreasing = true\n\
    \  for i = 2:length(l)\n    if l[i] > l[i-1]\n      decreasing = false\n     \
    \ break\n    end\n  end\n  \n  return increasing || decreasing\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[2]>l[1]\n        for i=2:length(l)\n\
    \            if l[i]<l[i-1]\n                return false\n            end\n \
    \       end\n    else\n        for i=2:length(l)\n            if l[i]>l[i-1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    @assert length(l) >= 2\n    diff = l[2]\
    \ - l[1]\n    for i = 2:length(l)-1\n        if (diff > 0 && l[i+1] - l[i] < 0)\
    \ || (diff < 0 && l[i+1] - l[i] > 0)\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # your code here\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps5jvf2c3.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmps5jvf2c3.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps5jvf2c3.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps5jvf2c3.jl:17\ntest set:\
    \ Error During Test at /tmp/tmps5jvf2c3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmps5jvf2c3.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps5jvf2c3.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5jvf2c3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if isempty(l) return true end\n    return\
    \ (all(diff(l) .>= 0) || all(diff(l) .<= 0))\nend\nmonotonic([4, 1, 0, -10])\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # How can I use Julia's type system\
    \ to check that the input is a vector of integers?\n    prev = l[1]\n    for i\
    \ = 2:length(l)\n        if (l[i] < prev) & (l[i] > prev)\n            return\
    \ false\n        end\n        prev = l[i]\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4,\
    \ 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyz9iqh_v.jl:27\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyz9iqh_v.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyz9iqh_v.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpyz9iqh_v.jl:30\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyz9iqh_v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyz9iqh_v.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyz9iqh_v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return l == sort(l) || l == sort(l,\
    \ rev=true)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    i = 1\n    m = length(l)\n    while\
    \ i < m-1 && (l[i] <= l[i+1] || l[i] >= l[i+1])\n        i += 1\n    end\n   \
    \ if i == m-1 \n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg4moniyr.jl:28\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4moniyr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4moniyr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpg4moniyr.jl:31\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg4moniyr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg4moniyr.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4moniyr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  inc = true\n  dec = true\n  for i = 1:length(l)-1\n\
    \    if l[i] <= l[i+1]\n      dec = false\n    elseif l[i] >= l[i+1]\n      inc\
    \ = false\n    end\n  end\n  return inc || dec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwh5fz7td.jl:30\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwh5fz7td.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwh5fz7td.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwh5fz7td.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i+1] >= l[i] for i in 1:length(l)-1)\
    \ || \n    all(l[i+1] <= l[i] for i in 1:length(l)-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    k = 0\n    m = 0\n    while k < length(l)-1\n\
    \        if l[k] <= l[k+1]\n            m = m + 1\n        end\n        k = k\
    \ + 1\n    end\n    if m == length(l)-1\n        return true\n    end\n    m =\
    \ 0\n    k = 0\n    while k < length(l)-1\n        if l[k] >= l[k+1]\n       \
    \     m = m + 1\n        end\n        k = k + 1\n    end\n    if m == length(l)-1\n\
    \        return true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdqzs5zoo.jl:39\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpdqzs5zoo.jl:13\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdqzs5zoo.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdqzs5zoo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpdqzs5zoo.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpdqzs5zoo.jl:13\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdqzs5zoo.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdqzs5zoo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpdqzs5zoo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpdqzs5zoo.jl:13\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdqzs5zoo.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdqzs5zoo.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdqzs5zoo.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    function sign(x::Real)::Int\n      \
    \  if x > 0\n            return 1\n        elseif x < 0\n            return -1\n\
    \        else\n            return 0\n        end\n    end\n    if length(l) <\
    \ 2\n        return true\n    end\n    for i in 2:length(l)\n        if sign(l[i]\
    \ - l[i-1]) != sign(l[2] - l[1])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_5_t10f.jl:38\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_5_t10f.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_5_t10f.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_5_t10f.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    m1 = l[1]\n    m2 = l[end]\n    if m1\
    \ < m2\n        for i in 2:length(l)\n            if l[i] < l[i-1]\n         \
    \       return false\n            end\n        end\n    else\n        for i in\
    \ 2:length(l)\n            if l[i] > l[i-1]\n                return false\n  \
    \          end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    return all(l[i] >=\
    \ l[i+1] for i in 1:n-1) || all(l[i] <= l[i+1] for i in 1:n-1)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    startvalue = l[1]\n    for i in 2:length(l)\n        if (l[i] <\
    \ startvalue) != (l[2] < startvalue)\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsy9y6vmk.jl:28\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy9y6vmk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy9y6vmk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsy9y6vmk.jl:31\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy9y6vmk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy9y6vmk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsy9y6vmk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    last_element = l[1]\n    increment =\
    \ true\n    for element in l[2:end]\n        if element == last_element\n    \
    \        next\n        elseif element > last_element\n            if !increment\n\
    \                return false\n            end\n        elseif element < last_element\n\
    \            if increment\n                increment = false\n            end\n\
    \        end\n        last_element = element\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7r4e3t_r.jl:37\n  Test threw exception\n\
    \  Expression: candidate([4, 1, 1, 0]) == true\n  UndefVarError: next not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmp7r4e3t_r.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7r4e3t_r.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7r4e3t_r.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7r4e3t_r.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([9, 9, 9, 9]) == true\n  UndefVarError: next not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmp7r4e3t_r.jl:14\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7r4e3t_r.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7r4e3t_r.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    6      2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7r4e3t_r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    sign = sign(l[1] - l[2])\n    prev =\
    \ l[1]\n    for i = 2:length(l)\n        current = l[i]\n        if sign(current\
    \ - prev) != sign\n            return false\n        end\n        prev = current\n\
    \    end\n    return true\nend\nmonotonic([1, 2, 4, 20])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: sign not defined\nStacktrace:\n [1] monotonic(l::Vector{Int64})\n\
    \   @ Main /tmp/tmpnz68_slw.jl:10\n [2] top-level scope\n   @ /tmp/tmpnz68_slw.jl:21\n\
    in expression starting at /tmp/tmpnz68_slw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    d = l[2] - l[1]\n    if d == 0\n\
    \        return true\n    end\n    for i in 2:length(l)\n        if d * (l[i]\
    \ - l[i-1]) < 0\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    increasing = true\n    decreasing =\
    \ true\n    for (i,e) in enumerate(l)\n        if i > 1\n            if l[i-1]\
    \ > e\n                increasing = false\n            end\n            if l[i-1]\
    \ < e\n                decreasing = false\n            end\n        end\n    end\n\
    \    increasing || decreasing\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \"\"\"Return True is list elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    True\n    \"\"\"\n    for i in 1:length(l)-1\n        if l[i]>l[i+1]\n\
    \            return all(l[i+1:end] .< l[i])\n        elseif l[i]<l[i+1]\n    \
    \        return all(l[i+1:end] .> l[i])\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0v39r5t5.jl:34\n  Expression: candidate([1,\
    \ 20, 4, 10]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v39r5t5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v39r5t5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0v39r5t5.jl:37\n  Expression: candidate([1, 2, 3, 2, 5, 60])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0v39r5t5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0v39r5t5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0v39r5t5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    if n > 2\n      \
    \  return false\n    end\n    diff = l[2] - l[1]\n    if n == 2\n        return\
    \ diff != 0\n    end\n    for i in 3:n\n        if l[i] - l[i-1] != diff\n   \
    \         return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps21dcmar.jl:30\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps21dcmar.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps21dcmar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps21dcmar.jl:31\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps21dcmar.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps21dcmar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps21dcmar.jl:33\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps21dcmar.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps21dcmar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps21dcmar.jl:34\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps21dcmar.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps21dcmar.jl:29\ntest set: Test\
    \ Failed at /tmp/tmps21dcmar.jl:36\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps21dcmar.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    a = sort(l)\n    b = sort(l, rev=true)\n\
    \    if a == l\n        return true\n    elseif b == l\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    increasing = l[1] < l[2]\n    for i\
    \ = 2:length(l)-1\n        if increasing && l[i] > l[i+1]\n            return\
    \ false\n        elseif !increasing && l[i] < l[i+1]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1\n        return true\n\
    \    end\n    if l[1] > l[2]\n        for i in 2:length(l)\n            if l[i]\
    \ >= l[i-1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 2:length(l)\n            if l[i] <= l[i-1]\n               \
    \ return false\n            end\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbfwsz1t9.jl:37\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfwsz1t9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfwsz1t9.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpbfwsz1t9.jl:40\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfwsz1t9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfwsz1t9.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfwsz1t9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    monotonic(l::Vector{Int64}, cmp::Function)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjaa2iihy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: no method matching\
    \ monotonic(::Vector{Int64}, ::typeof(cmp))\n  Closest candidates are:\n    monotonic(::Vector{Int64})\
    \ at /tmp/tmpjaa2iihy.jl:9\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpjaa2iihy.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaa2iihy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaa2iihy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjaa2iihy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: no method matching monotonic(::Vector{Int64},\
    \ ::typeof(cmp))\n  Closest candidates are:\n    monotonic(::Vector{Int64}) at\
    \ /tmp/tmpjaa2iihy.jl:9\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n \
    \    @ Main /tmp/tmpjaa2iihy.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaa2iihy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaa2iihy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjaa2iihy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  MethodError: no method matching monotonic(::Vector{Int64},\
    \ ::typeof(cmp))\n  Closest candidates are:\n    monotonic(::Vector{Int64}) at\
    \ /tmp/tmpjaa2iihy.jl:9\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n \
    \    @ Main /tmp/tmpjaa2iihy.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaa2iihy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjaa2iihy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(diff(l) .>= 0) || all(diff(l)\
    \ .<= 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if length(l) > 1\n        if l[1] < l[2]\n            return all(x\
    \ -> x[1] <= x[2], pairwise(l))\n        elseif l[1] > l[2]\n            return\
    \ all(x -> x[1] >= x[2], pairwise(l))\n        else\n            return true\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyt_tdghu.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: pairwise not\
    \ defined\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpyt_tdghu.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt_tdghu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt_tdghu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyt_tdghu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: pairwise not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpyt_tdghu.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt_tdghu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt_tdghu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyt_tdghu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: pairwise not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpyt_tdghu.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt_tdghu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt_tdghu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyt_tdghu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: pairwise not defined\n \
    \ Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpyt_tdghu.jl:17\n\
    \   [2] macro expansion\n     @ /s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyt_tdghu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    is_incr = true\n    is_decr = true\n\
    \    for i in 1:length(l)-1\n        if l[i] > l[i+1]\n            is_incr = false\n\
    \        end\n        if l[i] < l[i+1]\n            is_decr = false\n        end\n\
    \    end\n    is_incr || is_decr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    # implementation here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt1jr8vlw.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpt1jr8vlw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1jr8vlw.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt1jr8vlw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpt1jr8vlw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpt1jr8vlw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt1jr8vlw.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1jr8vlw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    current = first(l)\n    direction =\
    \ 0\n    for i = 2:length(l)\n        if l[i] == current\n            continue\n\
    \        elseif direction == 0\n            direction = l[i] - current\n     \
    \   elseif (direction > 0 && l[i] - current < 0) || (direction < 0 && l[i] - current\
    \ > 0)\n            return false\n        end\n        current = l[i]\n    end\n\
    \    return true\nend\nmonotonic([1, 2, 4, 20])\nusing Test\n\n@testset begin\n\
    \ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    diff = l[2:end] - l[1:end-1]\n    if\
    \ all(diff .> 0) return true\n    elseif all(diff .< 0) return true\n    else\
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcucrxv_1.jl:25\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcucrxv_1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcucrxv_1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcucrxv_1.jl:28\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcucrxv_1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcucrxv_1.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcucrxv_1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    direction = sign(l[2] - l[1])\n    for\
    \ i = 2:length(l)-1\n        if sign(l[i] - l[i-1]) != direction\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsk87zcoy.jl:27\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk87zcoy.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk87zcoy.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsk87zcoy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n  if length(l) < 2\n    return true\n  end\n\
    \  incr = l[2] > l[1]\n  for i in 2:length(l)-1\n    if incr && l[i+1] < l[i]\n\
    \      return false\n    elseif !incr && l[i+1] > l[i]\n      return false\n \
    \   end\n  end\n  return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if all(i <= j for i, j in zip(l[1:end-1],\
    \ l[2:end])) \n        return true\n    elseif all(i >= j for i, j in zip(l[1:end-1],\
    \ l[2:end]))\n        return true\n    else\n        return false\n    end\nend;\n\
    \ \nmonotonic([1, 2, 4, 20])\nmonotonic([1, 20, 4, 10])\nmonotonic([4, 1, 0, -10])\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rvu5pux.jl:10\nin expression starting at\
    \ /tmp/tmp5rvu5pux.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    (all(i->l[i]>=l[i+1],1:length(l)-1)\
    \ || all(i->l[i]<=l[i+1],1:length(l)-1))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (l[1] - l[2])*(l[2] - l[3]) >=\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bjbtt9z.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 2, 5, 60]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bjbtt9z.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bjbtt9z.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bjbtt9z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)==1\n        return true\n\
    \    end\n    if l[2]>l[1]\n        for i in 2:length(l)\n            if l[i]<l[i-1]\n\
    \                return false\n            end\n        end\n    else\n      \
    \  for i in 2:length(l)\n            if l[i]>l[i-1]\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    for i in 1:length(l)-1\n        if l[i]\
    \ < l[i+1]\n            if i != length(l)-1\n                next\n          \
    \  else\n                return true\n            end\n        elseif l[i] > l[i+1]\n\
    \            if i != length(l)-1\n                next\n            else\n   \
    \             return true\n            end\n        else\n            return false\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk3bcz282.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: next not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpk3bcz282.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk3bcz282.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk3bcz282.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpk3bcz282.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: next not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpk3bcz282.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk3bcz282.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk3bcz282.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpk3bcz282.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: next not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpk3bcz282.jl:13\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk3bcz282.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk3bcz282.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpk3bcz282.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: next not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpk3bcz282.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3bcz282.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2 \n        return true\n\
    \    end\n    if l[1] < l[2]\n        for i in 2:length(l)-1\n            if l[i]\
    \ > l[i+1]\n                return false\n            end\n        end\n    else\n\
    \        for i in 2:length(l)-1\n            if l[i] < l[i+1]\n              \
    \  return false\n            end\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) <= 1 \n        return true\n\
    \    end\n    if l[1] <= l[2] \n        for i in 1:length(l)-1\n            if\
    \ l[i] > l[i+1]\n                return false\n            end\n        end\n\
    \    else \n        for i in 1:length(l)-1\n            if l[i] < l[i+1]\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    d = sign(l[2] - l[1])\n    for i in\
    \ 2:length(l)-1\n        if sign(l[i+1] - l[i]) != d\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9tq51o8a.jl:27\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9tq51o8a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9tq51o8a.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9tq51o8a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    a=0\n    b=0\n    for x in l\n     \
    \   if x>a\n            a=x\n            b=1\n        elseif x<a\n           \
    \ a=x\n            b=-1\n        end\n    end\n    if b==0\n        return true\n\
    \    elseif b==1\n        for x in l\n            if x<=a\n                a=x\n\
    \            else\n                return false\n            end\n        end\n\
    \        return true\n    elseif b==-1\n        for x in l\n            if x>=a\n\
    \                a=x\n            else\n                return false\n       \
    \     end\n        end\n        return true\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg7rrghzo.jl:48\n  Expression: candidate([1,\
    \ 2, 4, 10]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7rrghzo.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7rrghzo.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg7rrghzo.jl:49\n  Expression: candidate([1, 2, 4, 20]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7rrghzo.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7rrghzo.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg7rrghzo.jl:51\n  Expression: candidate([4, 1, 0, -10]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7rrghzo.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7rrghzo.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg7rrghzo.jl:52\n  Expression: candidate([4, 1, 1, 0]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg7rrghzo.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg7rrghzo.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpg7rrghzo.jl:54\n  Expression: candidate([1, 2, 3, 4, 5, 60])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7rrghzo.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) == 1\n        return true\n\
    \    end\n    if length(l) == 2\n        return true\n    end\n    if l[2] ==\
    \ l[1]\n        return monotonic(l[2:end])\n    end\n    if l[2] > l[1]\n    \
    \    for i in 2:length(l)\n            if l[i] < l[i-1]\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    if l[2]\
    \ < l[1]\n        for i in 2:length(l)\n            if l[i] > l[i-1]\n       \
    \         return false\n            end\n        end\n        return true\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    function check_increasing(l::Vector{Int64})::Bool\n\
    \        for i in 1:length(l)-1\n            if (l[i] < l[i+1])\n            \
    \    continue\n            else\n                return false\n            end\n\
    \        end\n        return true\n    end\n    \n    function check_decreasing(l::Vector{Int64})::Bool\n\
    \        for i in 1:length(l)-1\n            if (l[i] > l[i+1])\n            \
    \    continue\n            else\n                return false\n            end\n\
    \        end\n        return true\n    end\n    \n    if check_increasing(l) ==\
    \ true || check_decreasing(l) == true\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc47kaou8.jl:48\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc47kaou8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc47kaou8.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpc47kaou8.jl:51\n  Expression: candidate([9, 9, 9, 9]) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc47kaou8.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc47kaou8.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc47kaou8.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if sorted(l) == l\n        return true\n\
    \    elseif sorted(l, rev=true) == l\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpds4sy478.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  UndefVarError: sorted not defined\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpds4sy478.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpds4sy478.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpds4sy478.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpds4sy478.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpds4sy478.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpds4sy478.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpds4sy478.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpds4sy478.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpds4sy478.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpds4sy478.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpds4sy478.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpds4sy478.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  UndefVarError: sorted not defined\n  Stacktrace:\n\
    \   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpds4sy478.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/ce"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpds4sy478.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l) < 2\n        return true\n\
    \    end\n    increasing = l[2] > l[1]\n    for i = 2:length(l)-1\n        if\
    \ increasing\n            if l[i+1] < l[i]\n                return false\n   \
    \         end\n        else\n            if l[i+1] > l[i]\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    \n    if length(l) == 1\n        return\
    \ true\n    end\n    \n    if all(diff(l) .>= 0) || all(diff(l) .<= 0)\n     \
    \   return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) ==\
    \ true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20,\
    \ 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if all(x->x>=y, l[1:end-1], l[2:end])\
    \ || all(x->x<=y, l[1:end-1], l[2:end])\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphjcilkyi.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: no method matching\
    \ all(::var\"#1#3\", ::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n\
    \    all(::Function, ::AbstractArray; dims) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:902\n\
    \    all(::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:1152\n\
    \    all(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:1070\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmphjcilkyi.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjcilkyi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjcilkyi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphjcilkyi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: no method matching all(::var\"\
    #1#3\", ::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    all(::Function,\
    \ ::AbstractArray; dims) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:902\n\
    \    all(::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:1152\n\
    \    all(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:1070\n\
    \  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmphjcilkyi.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphjcilkyi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphjcilkyi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphjcilkyi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  MethodError: no method matching all(::var\"\
    #1#3\", ::Vec"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjcilkyi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if all(l[i] &lt;= l[i+1] for i in 1:length(l)-1)\n\
    \        return true\n    elseif all(l[i] &gt;= l[i+1] for i in 1:length(l)-1)\n\
    \        return true\n    else\n        return false\n    end\nend\n</code>\n\
    It seems that the first <code>if</code> statement returns true before even checking\
    \ the second one, and so it never reaches the <code>elseif</code> statement and\
    \ always returns true if the list is monotonically increasing. \nAny help would\
    \ be appreciated.\nThis is what I have tried so far. \n<code>function monotonic(l::Vector{Int64})::Bool\
    \ \n    if all(l[i] &lt;= l[i+1] for i in 1:length(l)-1)\n        return true\n\
    \    elseif all(l[i] &gt;= l[i+1] for i in 1:length(l)-1)\n        return true\n\
    \    else\n        return false\n    end\nend\n</code>\nIt seems that the first\
    \ <code>if</code> statement returns true before even checking the second one,\
    \ and so it never reaches the <code>elseif</code> statement and always returns\
    \ true if the list is monotonically increasing. \nAny help would be appreciated.\n\
    using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk4grn57e.jl:10\nin expression starting at /tmp/tmpk4grn57e.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if length(l)<2 \n        return true\n\
    \    end\n    status=0\n    for i in 2:length(l)\n        if l[i]>l[i-1]\n   \
    \         status==1\n        elseif l[i]<l[i-1]\n            status==-1\n    \
    \    elseif l[i]==l[i-1]\n            continue\n        end\n        if status!=0\
    \ \n            for j in i+1:length(l)\n                if (l[j]>l[j-1]&&status==-1)||(l[j]<l[j-1]&&status==1)\n\
    \                    return false\n                end\n            end\n    \
    \    end\n    end\n    return true\nend\n@testset \"testing monotonic\" begin\n\
    \    @test monotonic([1, 2, 4, 20])\n    @test !monotonic([1, 20, 4, 10])\n  \
    \  @test monotonic([4, 1, 0, -10])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1,\
    \ 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4,\
    \ 1, 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp87zo_fks.jl:32\nin expression starting at /tmp/tmp87zo_fks.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return all(l[i] < l[i+1] for i in 1:length(l)-1)\n\
    \    || all(l[i] > l[i+1] for i in 1:length(l)-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwub_zh2.jl:11\nin expression starting at\
    \ /tmp/tmpfwub_zh2.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    if l[1] >= l[2]\n        return l[2:end]\
    \ .<= l[1:end-1]\n    else\n        return l[2:end] .>= l[1:end-1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq4pbj4nm.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  MethodError: Cannot `convert`\
    \ an object of type BitVector to an object of type Bool\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpq4pbj4nm.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq4pbj4nm.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq4pbj4nm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpq4pbj4nm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  MethodError: Cannot `convert` an object\
    \ of type BitVector to an object of type Bool\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n     @ Main /tmp/tmpq4pbj4nm.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq4pbj4nm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4pbj4nm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    monotonic(l::Vector{Float64})::Bool\
    \ \n    monotonic(l::Vector{Int64})::Bool = length(l) == 1\n    monotonic(l::Vector{Float64})::Bool\
    \ = length(l) == 1\n    if length(l) > 1\n        if l[2] > l[1]\n           \
    \ return monotonic(l[2:end])\n        elseif l[2] < l[1]\n            return monotonic(l[2:end])\n\
    \        elseif l[2] == l[1]\n            return false\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0egnxn2x.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10]) == true\n  TypeError: in typeassert, expected\
    \ Vector{Float64}, got a value of type Vector{Int64}\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0egnxn2x.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0egnxn2x.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0egnxn2x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0egnxn2x.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 4, 20]) == true\n  TypeError: in typeassert, expected Vector{Float64},\
    \ got a value of type Vector{Int64}\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0egnxn2x.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0egnxn2x.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0egnxn2x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0egnxn2x.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10]) == false\n  TypeError: in typeassert, expected Vector{Float64},\
    \ got a value of type Vector{Int64}\n  Stacktrace:\n   [1] monotonic(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0egnxn2x.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0egnxn2x.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0egnxn2x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0egnxn2x.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([4, 1, 0, -10]) == true\n  Ty"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0egnxn2x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    n = length(l)\n    cond1 = true\n  \
    \  cond2 = true\n    for i in 1:n-1\n        if l[i] > l[i+1]\n            cond1\
    \ = false\n        end\n        if l[i] < l[i+1]\n            cond2 = false\n\
    \        end\n    end\n    return cond1 || cond2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    diff = l[2:end] - l[1:end-1]\n    return\
    \ (sum(diff .< 0) == 0) || (sum(diff .> 0) == 0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return (all(x >= y for (x, y) in zip(l[1:end],\
    \ l[2:end])) || all(x <= y for (x, y) in zip(l[1:end], l[2:end])))\nend\n \n \n\
    \"\"\"Return True if first and last elements of list are equal\n    >>> all_equal([1,\
    \ 2, 3, 4, 5, 1])\n    True\n    >>> all_equal([1, 2, 3, 4, 5, 6])\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
    \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
    \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpvkw64n1q.jl:14\nin expression starting at /tmp/tmpvkw64n1q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    return isequal(sort(l), l) || isequal(sort(l,\
    \ rev=true), l)\nend\nusing Test\n\n@testset begin\n\ncandidate = monotonic;\n\
    \t@test(candidate([1, 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) ==\
    \ true)\n\t@test(candidate([1, 20, 4, 10]) == false)\n\t@test(candidate([4, 1,\
    \ 0, -10]) == true)\n\t@test(candidate([4, 1, 1, 0]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 60]) == true)\n\
    \t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\nfunction\
    \ monotonic(l::Vector{Int64})::Bool \n    direction = sign(l[2] - l[1])\n    for\
    \ i in 2:length(l)-1\n        if sign(l[i+1] - l[i]) != direction\n          \
    \  return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = monotonic;\n\t@test(candidate([1, 2, 4, 10]) == true)\n\
    \t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1, 20, 4, 10]) ==\
    \ false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4, 1,\
    \ 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppk7q_n_h.jl:27\n  Expression: candidate([4,\
    \ 1, 1, 0]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppk7q_n_h.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppk7q_n_h.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppk7q_n_h.jl:20\n"
  exit_code: 1
  status: SyntaxError
