name: HumanEval_152_compare
language: jl
results:
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ max.(abs.(game - guess), 0)\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [ abs(game[i] - guess[i]) for i in 1:length(game) ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    guess\
    \ - game\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6flzbg8b.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, -3, -3] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6flzbg8b.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6flzbg8b.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6flzbg8b.jl:25\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [-2, -4, -6] == [2, 4, 6]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6flzbg8b.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6flzbg8b.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6flzbg8b.jl:26\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [-2, 0, 0, -1] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6flzbg8b.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6flzbg8b.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6flzbg8b.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   n = length(game)\n    result = zeros(Int64, n)\n    \n    for i in 1:n\n \
    \       result[i] = abs(game[i] - guess[i])\n    end\n    \n    return result\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        error(\"Lengths of both the vectors must be equal\"\
    )\n    end\n    if any(abs.(guess) .> abs.(game))\n        error(\"Guess must\
    \ be between -N...N\")\n    end\n    abs.(guess .- game)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx5xastav.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  Guess must be between -N...N\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpx5xastav.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx5xastav.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx5xastav.jl:28\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    3      1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx5xastav.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   res = zeros(length(game))\n    \n    for i = 1:length(game)\n        if guess[i]\
    \ == game[i]\n            res[i] = 0\n        else\n            res[i] = abs(guess[i]\
    \ - game[i])\n        end\n    end\n    \n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = Array{Int64}(length(game))\n    for i in eachindex(game)\n        if game[i]\
    \ == guess[i]\n            diff[i] = 0\n        else\n            diff[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return diff\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_17d7i3g.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n  Closest\
    \ candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ) where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmp_17d7i3g.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_17d7i3g.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_17d7i3g.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp_17d7i3g.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_17d7i3g.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    @assert\
    \ length(game) == length(guess) \"Arrays must be equal in length\"\n    return\
    \ abs.(guess-game)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(guess - game)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    dif\
    \ = map(a -> abs(a[1] - a[2]), zip(game, guess))\n    #dif = abs.(game - guess)\n\
    \    return dif\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t\
    @test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\
    \t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\
    \t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = [abs(g-s) for (g,s) in zip(game,guess)]\n    return diff\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    for i in 1:length(diff)\n        if game[i] == guess[i]\n\
    \            diff[i] = 0\n        end\n    end\n    return diff\nend\n#some tests\n\
    println(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprintln(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\
    println(compare([12,13,0,11,45,33],[0,23,12,12,8,0]))\nprintln(compare([0,13,12,11,45,12],[11,23,0,0,8,0]))\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "[0, 0, 0, 0, 3, 3]\n[4, 4, 1, 0, 0, 6]\n[12, 10, 12, 1, 37, 33]\n[11, 10,\
    \ 12, 11, 37, 12]\nTest Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(x -> abs(x), game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    score\
    \ = zeros(Int64, length(game))\n    for i = 1:length(game)\n        if game[i]\
    \ > guess[i]\n            score[i] = game[i] - guess[i]\n        elseif game[i]\
    \ < guess[i]\n            score[i] = guess[i] - game[i]\n        else\n      \
    \      score[i] = 0\n        end\n    end\n    return score\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    out\
    \ = zeros(Int64, length(game))\n    for i in 1:length(game)\n        if guess[i]\
    \ - game[i] < 0\n            out[i] = abs(guess[i] - game[i])\n        elseif\
    \ guess[i] - game[i] > 0\n            out[i] = guess[i] - game[i]\n        else\n\
    \            out[i] = 0\n        end\n    end\n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \"\"\
    \"\n    Args:\n        game (Vector{Int64}): game result vector\n        guess\
    \ (Vector{Int64}): player guess vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekce9t9n.jl:1\nin expression starting at /tmp/tmpekce9t9n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    difference\
    \ = zeros(Int64, length(game))\n    for i in 1:length(game)\n        difference[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return difference\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    x =\
    \ game .- guess\n    for i in 1:length(x)\n        if x[i] < 0\n            x[i]\
    \ = -x[i]\n        end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    score\
    \ = abs.(game .- guess)\n    return score\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    max_ind\
    \ = min(length(game), length(guess))\n    res = zeros(max_ind)\n    for ind in\
    \ 1:max_ind\n        if guess[ind] != game[ind]\n            res[ind] = abs(guess[ind]\
    \ - game[ind])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   out = []\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuu2k5tb2.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuu2k5tb2.jl:1\n\
    in expression starting at /tmp/tmpuu2k5tb2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    score\
    \ = game .- guess\n    score[score .== 0] = 0\n    abs.(score)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79prkjmz.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  ArgumentError: indexed assignment with a single value to possibly\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64)\n     @ Base ./indices.jl:261\n\
    \   [2] _unsafe_setindex!(#unused#::IndexLinear, A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64,\
    \ BitVector})\n     @ Base ./multidimensional.jl:903\n   [3] _setindex!\n    \
    \ @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315\
    \ [inlined]\n   [5] compare(game::Vector{Int64}, guess::Vector{Int64})\n     @\
    \ Main /tmp/tmp79prkjmz.jl:17\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp79prkjmz.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp79prkjmz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp79prkjmz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.LogicalIndex{Int64, BitVector})\n     @\
    \ Base ./multidimensional.jl:903\n   [3] _setindex!\n     @ ./multidimensional.jl:894\
    \ [inlined]\n   [4] setindex!\n     @ ./abstractarray.jl:1315 [inlined]\n   [5]\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})\n     @ Main /tmp/tmp79prkjmz.jl:17\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp79prkjmz.jl:26 [inlined]\n\
    \   [8] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79prkjmz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    res = zeros(Int64, n)\n    for i in 1:n\n        res[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        diffs[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return diffs\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    #Code\
    \ Here!\n    return [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = zero(Int64, game)\n    for (idx, (g, c)) in enumerate(zip(game, guess))\n\
    \        diffs[idx] = abs(g - c)\n    end\n    return diffs\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0cq3ugrm.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching zero(::Type{Int64}, ::Vector{Int64})\n\
    \  Closest candidates are:\n    zero(::Type{T}) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmp0cq3ugrm.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cq3ugrm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cq3ugrm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0cq3ugrm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching zero(::Type{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    zero(::Type{T}) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmp0cq3ugrm.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0cq3ugrm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0cq3ugrm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0cq3ugrm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  MethodError: no method matching\
    \ zero(::Type{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    zero(::Type{T})\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmp0cq3u"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cq3ugrm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    return diff\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    N =\
    \ length(game)\n    result = Vector{Int64}(undef, N)\n    for i in 1:N\n     \
    \   result[i] = abs(game[i] - guess[i])\n    end\n    return result\nend\n@testset\
    \ \"Compare Tests\" begin\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ==\
    \ [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    end;\n \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp0j4wh7sz.jl:23\nin expression starting at /tmp/tmp0j4wh7sz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(abs, game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    s =\
    \ length(game)\n    res = Vector{Int64}(s)\n    for i in 1:s\n        res[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw37flumg.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest\
    \ candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpw37flumg.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw37flumg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw37flumg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw37flumg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpw37flumg.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw37flumg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw37flumg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # return\
    \ the absolute difference for each entry in the vectors\n    return abs.(game-guess)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    dif\
    \ = game .- guess\n    for i in 1:length(dif)\n        if dif[i] != 0\n      \
    \      dif[i] = abs(dif[i])\n        end\n    end\n    return dif\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = game - guess\n    for i in 1:length(diff)\n        if diff[i] < 0\n      \
    \      diff[i] = -diff[i]\n        end\n    end\n    return diff\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    x =\
    \ zeros(Int64,length(game))\n    for i in eachindex(game)\n        x[i] = abs(game[i]\
    \ - guess[i])\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    return diff\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    [abs(g-v)\
    \ for (g,v) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = Vector{Int64}(undef,length(game))\n    for i in 1:length(game)\n        if\
    \ game[i] == guess[i]\n            res[i] = 0\n        else\n            res[i]\
    \ = abs(game[i] - guess[i])\n        end\n    end\n    return res\nend\n\"\"\"\
    \n    Determine if a number is prime.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5uvdx42.jl:26\nin expression starting at\
    \ /tmp/tmpd5uvdx42.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n     \
    \   if game[i] - guess[i] > 0\n            result[i] = game[i] - guess[i]\n  \
    \      elseif game[i] - guess[i] < 0\n            result[i] = -(game[i] - guess[i])\n\
    \        else\n            result[i] = 0\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    map(abs,\
    \ game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   score::Vector{Int64} = zeros(Int64, length(game))\n    \n    for i in eachindex(game)\n\
    \        score[i] = abs(game[i] - guess[i])\n    end\n    \n    return score\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \  map(x -> abs(x[1] - x[2]), zip(game, guess))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # ...\n\
    \    return Vector{Int64}() # replace with your code\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90_tagpt.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: Int64[]\
    \ == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90_tagpt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90_tagpt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90_tagpt.jl:25\n  Expression: candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n   Evaluated: Int64[] == [0, 0, 0,\
    \ 0, 0, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90_tagpt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90_tagpt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90_tagpt.jl:26\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: Int64[] == [2, 4, 6]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90_tagpt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90_tagpt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp90_tagpt.jl:27\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: Int64[] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp90_tagpt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp90_tagpt.jl:23\nTest Summary:\
    \ | Fail  Total\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90_tagpt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = zero(Int64, length(game))\n    for i in 1:length(game)\n        diffs[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return diffs\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq1g3q61b.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching zero(::Type{Int64}, ::Int64)\n \
    \ Closest candidates are:\n    zero(::Type{T}) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmpq1g3q61b.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq1g3q61b.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq1g3q61b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq1g3q61b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching zero(::Type{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    zero(::Type{T}) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmpq1g3q61b.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq1g3q61b.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq1g3q61b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq1g3q61b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  MethodError: no method matching\
    \ zero(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    zero(::Type{T})\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:297\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmpq1g3q61b.jl:16\n   [2] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq1g3q61b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # TODO:\
    \ add code here\n    # Hint: you can use the abs() function\n    out = Int64[]\n\
    \    for i in eachindex(game)\n        if abs(game[i] - guess[i]) == 0\n     \
    \       push!(out, 0)\n        else\n            push!(out, abs(game[i] - guess[i]))\n\
    \        end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(x-y) for (x,y) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    for i in eachindex(diff)\n        if game[i] == guess[i]\n\
    \            diff[i] = 0\n        end\n    end\n    return diff\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    difference\
    \ = Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        difference[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return difference\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(guess .- game)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    results\
    \ = Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        results[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return results\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = [0 for i in 1:length(game)]\n    for i in 1:length(game)\n        if game[i]\
    \ == guess[i]\n            res[i] = 0\n        else\n            res[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n  res =\
    \ zeros(size(game));\n  for i in eachindex(game)\n    if game[i] != guess[i]\n\
    \      res[i] = abs(game[i] - guess[i])\n    end\n  end\n  return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [ abs(x-y) for (x,y) in zip(game,guess) ]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(abs, game .- guess)\nend\n\"\"\"Write a function that takes in two sentences\
    \ and determines if they are anagrams of each other. \n    An anagram is a string\
    \ that is composed of the exact same letters of another string.\n    example:\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx7vdnj1.jl:18\nin expression starting at\
    \ /tmp/tmpyx7vdnj1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n     \
    \   if game[i] != guess[i]\n            result[i] = abs(game[i] - guess[i])\n\
    \        else\n            result[i] = 0\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(a-b) for (a,b) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # check\
    \ arrays length\n    assert(length(game) == length(guess))\n    # create empty\
    \ array\n    sum_array = zeros(length(game))\n    # compare arrays and add absolute\
    \ difference into another array\n    for i in 1:length(game)\n        sum_array[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return sum_array\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvgykpzcx.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  UndefVarError: assert not defined\n  Stacktrace:\n   [1] compare(game::Vector{Int64},\
    \ guess::Vector{Int64})\n     @ Main /tmp/tmpvgykpzcx.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgykpzcx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgykpzcx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpvgykpzcx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpvgykpzcx.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgykpzcx.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgykpzcx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpvgykpzcx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  UndefVarError: assert not\
    \ defined\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpvgykpzcx.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvgykpzcx.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvgykpzcx.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpvgykpzcx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 5], [-1, 2, 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgykpzcx.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess) .* (game .!= guess) .+ 0 .* (game .== guess)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    q =\
    \ zeros(Int64, length(game))\n    for i in 1:length(game)\n        if guess[i]\
    \ == game[i]\n            q[i] = 0\n        else\n            q[i] = abs(guess[i]\
    \ - game[i])\n        end\n    end\n    return q\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = [abs(game[i] - guess[i]) for i in 1:length(game)]\n    return diffs\nend\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\n    \n    \n    \nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = guess .- game\n    # Since we're using floor_div, we need to handle negative\
    \ values\n    pos_diffs = map(abs, diffs)\n    return pos_diffs\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = game - guess\n    for i in 1:length(diff)\n        if diff[i] == 0\n     \
    \       diff[i] = 0\n        else\n            diff[i] = abs(diff[i])\n      \
    \  end\n    end\n    return diff\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(a-b) for (a,b) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess) \n        error(\"array length mismatch\")\n    end \n    res\
    \ = zeros(Int64, length(game))\n    for i in 1:length(game)\n        res[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    final\
    \ = Int64[]\n    for i in 1:length(game)\n        push!(final, abs(game[i] - guess[i]))\n\
    \    end\n    return final\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # your\
    \ code\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n  m = max(length(game),\
    \ length(guess))\n  diff = zeros(m)\n  for i = 1:m\n    diff[i] = abs(game[i]\
    \ - guess[i])\n  end\n  return diff\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n  diff =\
    \ game .- guess\n  for i = 1:length(diff)\n    if diff[i] == 0\n      diff[i]\
    \ = 0\n    else\n      diff[i] = abs(diff[i])\n    end\n  end\n  return diff\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        println(\"The arrays have to be of the same length.\"\
    )\n        return\n    end\n    return abs.(game .- guess)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    d =\
    \ Vector{Int64}(length(game))\n    for i in 1:length(game)\n        d[i] = abs(game[i]\
    \ - guess[i])\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgdzuacxw.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest\
    \ candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpgdzuacxw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdzuacxw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgdzuacxw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgdzuacxw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpgdzuacxw.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgdzuacxw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdzuacxw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(x -> abs(x[1] - x[2]), zip(game, guess))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    dif=zeros(Int64,length(game))\n\
    \    for i in 1:length(game)\n        dif[i]=abs(game[i]-guess[i])\n    end\n\
    \    return dif\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t\
    @test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\
    \t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\
    \t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    ind = Vector{Int64}(undef, n)\n    for i in 1:n\n        if\
    \ game[i] == guess[i]\n            ind[i] = 0\n        else\n            ind[i]\
    \ = abs(game[i] - guess[i])\n        end\n    end\n    return ind\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   if length(game) != length(guess)\n        println(\"The arrays must be of\
    \ equal length\")\n        return \n    end\n    \n    compare = []\n    for i\
    \ = 1:length(game)\n        if game[i] == guess[i]\n            push!(compare,\
    \ 0)\n        else\n            push!(compare, abs(game[i] - guess[i]))\n    \
    \    end\n    end\n    return compare\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = game .- guess\n    for i in 1:length(diff)\n        if diff[i] == 0\n    \
    \        diff[i] = 0\n        else\n            diff[i] = abs(diff[i])\n     \
    \   end\n    end\n    return diff\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   for i in 1:length(game)\n        if game[i] == guess[i]\n            guess[i]\
    \ = 0\n        else\n            guess[i] = abs(game[i] - guess[i])\n        end\n\
    \    end\n    return guess\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # Returns\
    \ a vector of abs(game[i] - guess[i]) for all i\n    # It is an error to have\
    \ arrays of different length\n    [abs(game[i] - guess[i]) for i in 1:length(game)]\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    cmp\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        if game[i] == guess[i]\n\
    \            cmp[i] = 0\n        else\n            cmp[i] = abs(game[i] - guess[i])\n\
    \        end\n    end\n    return cmp\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   temp::Vector{Int64} = abs.(game .- guess)\n    return temp\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    result = zeros(Int64, n)\n    for i in 1:n\n        if guess[i]\
    \ != game[i]\n            result[i] = abs(guess[i] - game[i])\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        g = abs(game[i]\
    \ - guess[i])\n        if g > 0\n            res[i] = g\n        end\n    end\n\
    \    return res\nend\nprintln(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprintln(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "[0, 0, 0, 0, 3, 3]\n[4, 4, 1, 0, 0, 6]\nTest Summary: | Pass  Total\ntest\
    \ set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff=zeros(Int64,\
    \ length(game))\n    for i in 1:length(game)\n        diff[i]=abs(game[i]-guess[i])\n\
    \    end\n    return diff\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    distance\
    \ = Vector{Int64}(undef, length(game))\n    for i in 1:length(game)\n        if\
    \ game[i] > guess[i]\n            distance[i] = game[i] - guess[i]\n        elseif\
    \ game[i] < guess[i]\n            distance[i] = guess[i] - game[i]\n        else\n\
    \            distance[i] = 0\n        end\n    end\n    return distance\nend\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    dif\
    \ = [abs(x-y) for (x,y) in zip(game,guess)]\n    return dif\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    error\
    \ = abs.(game .- guess)\n    return error\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i = 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess) .* (game .!= guess) .+ 0 .* (game .== guess)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        error(\"Length of the arrays must be equal!\")\n \
    \   end\n    l = length(game)\n    array_diff = zeros(Int64, l)\n    for i = 1:l\n\
    \        array_diff[i] = abs(game[i] - guess[i])\n    end\n    return array_diff\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = []\n    for i in 1:length(game)\n        diff = abs(game[i] - guess[i])\n\
    \        push!(res, diff)\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        if game[i] == guess[i]\n\
    \            res[i] = 0\n        else\n            res[i] = abs(game[i] - guess[i])\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    points\
    \ = map(x -> abs(x[1] - x[2]), zip(game, guess))\n    return points\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    difference\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        difference[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return difference\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    x =\
    \ map(abs, (game .- guess))\n    return x\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   result = zeros(Int64,length(game))\n    \n    for i in 1:length(game)\n  \
    \      if guess[i] == game[i]\n            result[i] = 0\n        else\n     \
    \       result[i] = abs(guess[i] - game[i])\n        end\n    end\n    \n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   re = zeros(size(game))\n    for i = 1:length(game)\n        if game[i] > guess[i]\n\
    \            re[i] = game[i] - guess[i]\n        elseif game[i] < guess[i]\n \
    \           re[i] = guess[i] - game[i]\n        else\n            re[i] = 0\n\
    \        end\n    end\n    return re\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    error\
    \ = abs.(game-guess)\n    return error\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   n = length(game)\n    diff = Int64[]\n    \n    for i in 1:n\n        push!(diff,abs(game[i]-guess[i]))\n\
    \    end\n    \n    return diff\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   pkg = Pkg.installed()[\"StatsBase\"]\n    if (pkg.version < v\"0.31.0\")\n\
    \        println(\"StatsBase.jl is at version $(pkg.version). Please update to\
    \ at least v0.31.0 for the MathsCup\")\n    end\n    \n    diffs = abs.(game .-\
    \ guess)\n    map(x -> x==0 ? 0 : x, diffs)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpsjcngksv.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  UndefVarError: Pkg not defined\n  Stacktrace:\n   [1] compare(game::Vector{Int64},\
    \ guess::Vector{Int64})\n     @ Main /tmp/tmpsjcngksv.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcngksv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcngksv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsjcngksv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  UndefVarError:\
    \ Pkg not defined\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpsjcngksv.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcngksv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcngksv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsjcngksv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  UndefVarError: Pkg not defined\n\
    \  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n  \
    \   @ Main /tmp/tmpsjcngksv.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcngksv.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcngksv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpsjcngksv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjcngksv.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    v =\
    \ Vector{Int64}()\n    for i in 1:length(game)\n        push!(v, abs(game[i] -\
    \ guess[i]))\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diffs\
    \ = zeros(length(game))\n    for i in 1:length(game)\n        if guess[i] == game[i]\n\
    \            diffs[i] = 0\n        else\n            diffs[i] = abs(guess[i] -\
    \ game[i])\n        end\n    end\n    return diffs\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # TODO:\n\
    \    return [0, 0, 0, 0, 0, 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcc2ytgws.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, 0, 0] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcc2ytgws.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcc2ytgws.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcc2ytgws.jl:26\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [0, 0, 0, 0, 0, 0] == [2, 4, 6]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcc2ytgws.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcc2ytgws.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcc2ytgws.jl:27\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [0, 0, 0, 0, 0, 0] == [2, 0, 0, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcc2ytgws.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcc2ytgws.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcc2ytgws.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    res = zeros(Int64, n)\n    for i in 1:n\n        if guess[i]\
    \ > game[i]\n            res[i] = guess[i] - game[i]\n        elseif guess[i]\
    \ < game[i]\n            res[i] = game[i] - guess[i]\n        end\n    end\n \
    \   return res\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t\
    @test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\
    \t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\
    \t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game - guess)\n    diff[diff .== 0] .= 1\n    return diff\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwf9xn74.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [1,\
    \ 1, 1, 1, 3, 3] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmwf9xn74.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwf9xn74.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmwf9xn74.jl:26\n  Expression: candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n   Evaluated: [1, 1, 1, 1, 1, 1]\
    \ == [0, 0, 0, 0, 0, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwf9xn74.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwf9xn74.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmwf9xn74.jl:28\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [2, 1, 1, 1] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwf9xn74.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwf9xn74.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwf9xn74.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \"Use\
    \ the Array comprehension technique to figure out the value at each index\"\n\
    \    return [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    distance\
    \ = [0]\n    for i in 1:length(game)\n        push!(distance,abs(game[i]-guess[i]))\n\
    \    end\n    return distance\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9urh5mo.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, 0, 3, 3] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9urh5mo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9urh5mo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpi9urh5mo.jl:28\n  Expression: candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n   Evaluated: [0, 0, 0, 0, 0, 0,\
    \ 0] == [0, 0, 0, 0, 0, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9urh5mo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9urh5mo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpi9urh5mo.jl:29\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [0, 2, 4, 6] == [2, 4, 6]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9urh5mo.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9urh5mo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpi9urh5mo.jl:30\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [0, 2, 0, 0, 1] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9urh5mo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9urh5mo."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9urh5mo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(g-s) for (g,s) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    comp\
    \ = [abs(guess[i] - game[i]) for i = 1:length(game)]\n    return comp\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   #if !(length(game) == length(guess))\n    #    throw(ArgumentError(\"game\
    \ and guess must be of the same length\"))\n    #end\n    \n    diffs = []\n \
    \   for i in 1:length(game)\n        diff = abs(game[i] - guess[i])\n        push!(diffs,\
    \ diff)\n    end\n    return diffs\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    d =\
    \ Float64[]\n    for i in 1:length(game)\n        m = abs(game[i] - guess[i])\n\
    \        push!(d, m)\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    L= length(game)\n\
    \    res = zeros(L)\n    for i in 1:L\n        res[i] = abs(game[i]-guess[i])\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = Array{Int64}(length(game))\n    for i in 1:length(game)\n        diff[i] =\
    \ abs(game[i] - guess[i])\n    end\n    return diff\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7bwxp2fi.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n  Closest\
    \ candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ) where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmp7bwxp2fi.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7bwxp2fi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7bwxp2fi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7bwxp2fi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7bwxp2fi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    dif = zeros(Int64, n)\n    for i in 1:n\n        if game[i]\
    \ == guess[i]\n            dif[i] = 0\n        else\n            dif[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return dif\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    @assert\
    \ length(game) == length(guess)\n    return abs.(game - guess)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.((game - guess))\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        error(\"The length of game and guess must be equal\"\
    )\n    end\n    return abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(guess[i] - game[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(abs, map(-, game, guess))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i = 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    b =\
    \ [abs(game[i] - guess[i]) for i = 1:length(game)]\n    return b\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   # assume the input vectors are the same length\n    result = Array{Int64}(undef,\
    \ length(game))\n    \n    for i in 1:length(game)\n        if game[i] == guess[i]\n\
    \            result[i] = 0\n        else\n            result[i] = abs(game[i]\
    \ - guess[i])\n        end\n    end\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    l =\
    \ length(game)\n    diff = Vector{Int64}(l)\n    for i in 1:l\n        if game[i]\
    \ != guess[i]\n            diff[i] = abs(game[i] - guess[i])\n        else\n \
    \           diff[i] = 0\n        end\n    end\n    return diff\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp39yq5ic_.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest\
    \ candidates are:\n    Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmp39yq5ic_.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39yq5ic_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39yq5ic_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp39yq5ic_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmp39yq5ic_.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39yq5ic_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp39yq5ic_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    answer\
    \ = []\n    for i = 1:length(game)\n        if game[i] == guess[i]\n         \
    \   push!(answer, 0)\n        else\n            push!(answer, abs(game[i] - guess[i]))\n\
    \        end\n    end\n    return answer\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    result\
    \ = Array{Int64}(length(game))\n    for i in 1:length(game)\n        if game[i]\
    \ > guess[i]\n            result[i] = game[i] - guess[i]\n        elseif game[i]\
    \ < guess[i]\n            result[i] = guess[i] - game[i]\n        else\n     \
    \       result[i] = 0\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw64ay7la.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n  Closest\
    \ candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ) where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpw64ay7la.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw64ay7la.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw64ay7la.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpw64ay7la.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw64ay7la.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    missing\
    \ = length(game) - length(guess)\n    if missing > 0\n        println(\"Your guess\
    \ is $missing short.\")\n    end\n    missing = length(guess) - length(game)\n\
    \    if missing > 0\n        println(\"Your guess is $missing long.\")\n    end\n\
    \    missing = ifelse(length(game) == length(guess), 0, missing)\n    return [abs(game[i]\
    \ - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n   \n  \
    \  diff_vec = []\n    for i in 1:length(game)\n        diff = abs(game[i] - guess[i])\n\
    \        push!(diff_vec, diff)\n    end\n    \n    return diff_vec\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [ abs(game[i] - guess[i]) for i in 1:length(game) ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(abs,game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.((game - guess))\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i = 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    N =\
    \ length(game)\n    result = []\n    for i = 1:N\n        if game[i] == guess[i]\n\
    \            push!(result, 0)\n        else\n            push!(result, abs(game[i]\
    \ - guess[i]))\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(x -> abs(x[1] - x[2]), zip(game, guess))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diferencias\
    \ = Int64[]\n    @inbounds for i \u2208 1:length(game)\n        push!(diferencias,abs(game[i]-guess[i]))\n\
    \    end\n    return diferencias\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    d =\
    \ []\n    for i = 1:length(game)\n        if game[i] > guess[i]\n            push!(d,\
    \ game[i] - guess[i])\n        elseif game[i] < guess[i]\n            push!(d,\
    \ guess[i] - game[i])\n        elseif game[i] == guess[i]\n            push!(d,\
    \ 0)\n        end\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    # compare(game,\
    \ guess) = (game .!= guess) .* abs.(game - guess)\n    return (game .!= guess)\
    \ .* abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    game_score\
    \ = game\n    guess_score = guess\n    goal_difference = []\n    for i = 1:length(game_score)\n\
    \        if game_score[i] == guess_score[i]\n            push!(goal_difference,\
    \ 0)\n        else\n            push!(goal_difference, abs(game_score[i] - guess_score[i]))\n\
    \        end\n    end\n    return goal_difference\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    len\
    \ = length(game)\n    result = zeros(Int64, len)\n    for i in 1:len\n       \
    \ if game[i] - guess[i] == 0\n            result[i] = 0\n        else\n      \
    \      result[i] = abs(game[i] - guess[i])\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    distance\
    \ = zeros(length(game))\n    for index in 1:length(game)\n        if game[index]\
    \ == guess[index]\n            distance[index] = 0\n        else\n           \
    \ distance[index] = abs(game[index] - guess[index])\n        end\n    end\n  \
    \  return distance\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    output\
    \ = zeros(Int64, game)\n    for i in 1:length(game)\n        output[i] = abs(game[i]\
    \ - guess[i])\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpolw9fsha.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching zeros(::Type{Int64}, ::Vector{Int64})\n\
    \  Closest candidates are:\n    zeros(::Type{T}, !Matched::Union{Integer, AbstractUnitRange}...)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\n    zeros(::Type{T},\
    \ !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\n\
    \    zeros(::Type{T}, !Matched::Tuple{Vararg{Integer, N}}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:524\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpolw9fsha.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpolw9fsha.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpolw9fsha.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpolw9fsha.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching zeros(::Type{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    zeros(::Type{T}, !Matched::Union{Integer, AbstractUnitRange}...) where\
    \ T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:521\n    zeros(::Type{T},\
    \ !Matched::Tuple{}) where T at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:529\n\
    \    zeros(::Type{T}, !Matched::Tuple{Vararg{Integer, N}}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:524\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpolw9fsha.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpolw9fsha.jl:28 [inlined]\n\
    \   [4] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolw9fsha.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    res\
    \ = [abs(game[i] - guess[i]) for i in eachindex(game)]\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    result\
    \ = zeros(Int64, length(game))\n    for i in 1:length(game)\n        result[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        return error(\"length of game and guess must be equal\"\
    )\n    end\n    return map(x-> x == 0 ? 0 : abs(x), game .- guess)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    score\
    \ = [abs(a-b) for (a,b) in zip(game,guess)]\n    return score\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(i-j) for (i,j) in zip(game,guess)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    diff = zeros(Int64, n)\n    for i in 1:n\n        diff[i]\
    \ = abs(game[i] - guess[i])\n    end\n    return diff\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ map(abs, game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n  if length(game)\
    \ != length(guess)\n      error(\"The inputs should be of the same length\")\n\
    \  end\n  diff = Vector{Int64}(undef, length(game))\n  for i = 1:length(game)\n\
    \      if game[i] == guess[i]\n          diff[i] = 0\n      else\n          diff[i]\
    \ = abs(game[i] - guess[i])\n      end\n  end\n  return diff\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    abs.((game - guess).%n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0,\
    \ 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3])\
    \ == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8wokvwd1.jl:26\n  Expression: candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n   Evaluated: [2, 1, 0] == [2, 4, 6]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8wokvwd1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8wokvwd1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8wokvwd1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    @assert\
    \ length(game) == length(guess) \"game and guess arrays must be the same length\"\
    \n    comparison = [0 for i = 1:length(game)]\n    for i = 1:length(game)\n  \
    \      comparison[i] = abs(game[i] - guess[i])\n    end\n    return comparison\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game-guess)\n    iszero(diff) ? zeros(length(diff)) : diff\nend\n \n\
    \ \n```julia\n@testset \"Test Cases\" begin\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    \    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n\
    \    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n\
    \    @test compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n    @test compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ == [4,4,1,0,0,6]\n    @test compare([1,2,3,4,5,1],[1,2,3,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5c7sn1m.jl:21\nin expression starting at\
    \ /tmp/tmpq5c7sn1m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(guess-game)\nend\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nusing Test\n\n\
    @testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ (abs.(game - guess) .== 0) .* (abs.(game - guess))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2oz18wo.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, 0, 0] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi2oz18wo.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2oz18wo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpi2oz18wo.jl:25\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [0, 0, 0] == [2, 4, 6]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2oz18wo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2oz18wo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpi2oz18wo.jl:26\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [0, 0, 0, 0] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2oz18wo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2oz18wo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2oz18wo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   difference = abs.(game-guess)\n    for i in difference\n        if i == 0\n\
    \            continue\n        else\n            println(i)\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "3\n3\ntest set: Error During Test at /tmp/tmppi_4nth8.jl:31\n  Test threw\
    \ exception\n  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmppi_4nth8.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppi_4nth8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppi_4nth8.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppi_4nth8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmppi_4nth8.jl:22\n   [2] macro expansion\n     @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppi_4nth8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(guess[i] - game[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    \n \
    \   len = length(game)\n    dist = zeros(len)\n    \n    for i in 1:len\n    \
    \    if game[i] == guess[i]\n            dist[i] = 0\n        else\n         \
    \   dist[i] = abs(game[i] - guess[i])\n        end\n    end\n    \n    return\
    \ dist\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    n =\
    \ length(game)\n    c = Array{Int64}(n)\n    for i in 1:n\n        c[i] = abs(game[i]\
    \ - guess[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) ==\
    \ [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\
    \t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizh44czi.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0,\
    \ 0, 3, 3]\n  MethodError: no method matching (Array{Int64})(::Int64)\n  Closest\
    \ candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ) where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \     @ Main /tmp/tmpizh44czi.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizh44czi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizh44czi.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpizh44czi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] compare(game::"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizh44czi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    out\
    \ = zeros(size(game)[1])\n    for i in 1:size(game)[1]\n        if (game[i] !=\
    \ guess[i])\n            out[i] = abs(game[i] - guess[i])\n        end\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t\
    @test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\
    \t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\
    \t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [if i == j; 0; else; abs(i-j); end for (i,j) in zip(game,guess)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    guess\
    \ .- game .+ (guess .== game) .* abs.(guess .- game)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0c9po5y.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, -3, -3] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0c9po5y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0c9po5y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb0c9po5y.jl:25\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [-2, -4, -6] == [2, 4, 6]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0c9po5y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0c9po5y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb0c9po5y.jl:26\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [-2, 0, 0, -1] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb0c9po5y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb0c9po5y.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0c9po5y.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    compare(a,b)\
    \ = abs.(b-a) .* a .!= 0 .+ a .* a .== 0\n    return compare(game, guess)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphs87v3kw.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n   Evaluated: [0,\
    \ 0, 0, 0, 0, 0] == [0, 0, 0, 0, 3, 3]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphs87v3kw.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs87v3kw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphs87v3kw.jl:26\n  Expression: candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n   Evaluated: [0, 0, 0] == [2, 4, 6]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphs87v3kw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs87v3kw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphs87v3kw.jl:27\n  Expression: candidate([1, 2, 3, 5], [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1]\n   Evaluated: [0, 0, 0, 0] == [2, 0, 0, 1]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphs87v3kw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphs87v3kw.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphs87v3kw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    if length(game)\
    \ != length(guess)\n        throw(DimensionMismatch(\"game and guess must be the\
    \ same length\"))\n    end\n    return [abs(game[i] - guess[i]) for i in 1:length(game)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
