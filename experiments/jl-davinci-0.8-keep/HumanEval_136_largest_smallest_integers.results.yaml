name: HumanEval_136_largest_smallest_integers
language: jl
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = []\n    pos = []\n    for item\
    \ in lst\n        if item < 0\n            push!(neg, item)\n        elseif item\
    \ > 0\n            push!(pos, item)\n        end\n    end\n    largest_negative\
    \ = neg != [] ? maximum(neg) : nothing\n    smallest_positive = pos != [] ? minimum(pos)\
    \ : nothing\n    return (largest_negative, smallest_positive)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \n    # YOUR CODE HERE\n    \nend\n \n\
    ###### BEGIN TEST ######\n@testset \"Largest Smallest Integers\" begin\n    @testset\
    \ \"Single Positive Integer\" begin\n        @test largest_smallest_integers([2])\
    \ == (Nothing, 2)\n        @test largest_smallest_integers([4]) == (Nothing, 4)\n\
    \        @test largest_smallest_integers([1]) == (Nothing, 1)\n        @test largest_smallest_integers([3])\
    \ == (Nothing, 3)\n        @test largest_smallest_integers([5]) == (Nothing, 5)\n\
    \        @test largest_smallest_integers([7]) == (Nothing, 7)\n    end\n    @testset\
    \ \"Single Negative Integer\" begin\n        @test largest_smallest_integers([-2])\
    \ == (-2, Nothing)\n        @test largest_smallest_integers([-4]) == (-4, Nothing)\n\
    \        @test largest_smallest_integers([-1]) == (-1, Nothing)\n        @test\
    \ largest_smallest_integers([-3]) == (-3, Nothing)\n        @test largest_smallest_integers([-5])\
    \ == (-5, Nothing)\n        @test largest_smallest_integers([-7]) == (-7, Nothing)\n\
    \    end\n    @testset \"Mixed Integers\" begin\n        @test largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (Nothing, 1)\n        @test largest_smallest_integers([-2,\
    \ 4, 1, 3, 5, 7]) == (-2, 1)\n        @test largest_smallest_integers([-2, -4,\
    \ 1, 3, 5, 7]) == (-2, 1)\n        @test largest_smallest_integers([-2, -4, -1,\
    \ 3, 5, 7]) == (-1, 1)\n        @test largest_smallest_integers([-2, -4, -1, -3,\
    \ 5, 7]) == (-1, 5)\n        @test largest_smallest_integers([-2, -4, -1, -3,\
    \ -5, 7]) ==\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"begin\" at /tmp/tmpej8t9au8.jl:36\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpej8t9au8.jl:19\n\
    in expression starting at /tmp/tmpej8t9au8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    neg = intmax(Int64)\n    pos = intmin(Int64)\n    for\
    \ i in lst\n        if i < 0 && i > neg\n            neg = i\n        end\n  \
    \      if i > 0 && i < pos\n            pos = i\n        end\n    end\n    return\
    \ (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuua34isp.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ intmax not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuua34isp.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuua34isp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuua34isp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuua34isp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: intmax not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuua34isp.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuua34isp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuua34isp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuua34isp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: intmax not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpuua34isp.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuua34isp.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuua34isp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpuua34isp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: intmax not defined\n\
    \  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuua34isp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    l = length(lst)\n    if l == 0\n    \
    \    return (nothing, nothing)\n    end\n    largest_negative = nothing\n    smallest_positive\
    \ = nothing\n    for i in 1:l\n        if lst[i] < 0 && (largest_negative == nothing\
    \ || lst[i] > largest_negative)\n            largest_negative = lst[i]\n     \
    \   elseif lst[i] > 0 && (smallest_positive == nothing || lst[i] < smallest_positive)\n\
    \            smallest_positive = lst[i]\n        end\n    end\n    return (largest_negative,\
    \ smallest_positive)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative = -100\n    positive = 100\n\
    \    for i in lst\n        if (i < 0) & (i > negative)\n            negative =\
    \ i\n        end\n        if (i > 0) & (i < positive)\n            positive =\
    \ i\n        end\n    end\n    return negative, positive\nend\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfph323a5.jl:31\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (-100, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfph323a5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfph323a5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfph323a5.jl:32\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (-100, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfph323a5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfph323a5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfph323a5.jl:36\n  Expression: candidate(Vector{Int64}([]))\
    \ == (nothing, nothing)\n   Evaluated: (-100, 100) == (nothing, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfph323a5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfph323a5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfph323a5.jl:37\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\n   Evaluated: (-100, 100) == (nothing, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfph323a5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfph323a5.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfph323a5.jl:38\n  Expression: candidate([-1, -3, -5, "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfph323a5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # Largest negative integer\n    lng =\
    \ maximum([x for x in lst if x < 0])\n    # Smallest positive integer\n    spo\
    \ = minimum([x for x in lst if x > 0])\n    # If there is no negative or positive\
    \ integers, return them as None.\n    if length(lng) == 0\n        lng = nothing\n\
    \    end\n    if length(spo) == 0\n        spo = nothing\n    end\n    return\
    \ (lng, spo)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyodcvgks.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpyodcvgks.jl:14\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpyodcvgks.jl:31 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpyodcvgks.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpyodcvgks.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyodcvgks.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    (a, b) = (nothing, nothing)\n    for i in lst\n     \
    \   if i < 0\n            if isnothing(a)\n                a = i\n           \
    \ elseif i > a\n                a = i\n            end\n        elseif i > 0\n\
    \            if isnothing(b)\n                b = i\n            elseif i < b\n\
    \                b = i\n            end\n        end\n    end\n    return (a,\
    \ b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    for x in\
    \ lst\n        if x < 0\n            if a === nothing || x > a\n             \
    \   a = x\n            end\n        elseif x > 0\n            if b === nothing\
    \ || x < b\n                b = x\n            end\n        end\n    end\n   \
    \ return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    negative = Int64[]\n    positive = Int64[]\n    for i\
    \ in lst\n        if i<0\n            push!(negative, i)\n        elseif i>0\n\
    \            push!(positive, i)\n        end\n    end\n    if isempty(negative)\n\
    \        negative = nothing\n    else\n        negative = maximum(negative)\n\
    \    end\n    if isempty(positive)\n        positive = nothing\n    else\n   \
    \     positive = minimum(positive)\n    end\n    return (negative, positive)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ e in lst\n        if e > 0\n            if b isa nothing || e < b\n        \
    \        b = e\n            end\n        elseif e < 0\n            if a isa nothing\
    \ || e > a\n                a = e\n            end\n        end\n    end\n   \
    \ return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfpkocr_8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  TypeError: in\
    \ isa, expected Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfpkocr_8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfpkocr_8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfpkocr_8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpfpkocr_8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfpkocr_8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfpkocr_8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfpkocr_8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpfpkocr_8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfpkocr_8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfpkocr_8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfpkocr_8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpfpkocr_8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpkocr_8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive = filter(x -> x > 0, lst)\n\
    \    negative = filter(x -> x < 0, lst)\n    if length(positive) == 0\n      \
    \  positive = Nothing\n    else\n        positive = minimum(positive)\n    end\n\
    \    if length(negative) == 0\n        negative = Nothing\n    else\n        negative\
    \ = maximum(negative)\n    end\n    return negative, positive\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsvmki7aa.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpsvmki7aa.jl:25\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpsvmki7aa.jl:32 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpsvmki7aa.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsvmki7aa.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvmki7aa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \n    neg = union!(lst,Set{Int64}())\
    \ # union of the set and array\n    remove!(neg, 0) # remove the zero from the\
    \ array\n    neg_max = maximum(neg) # get the maximum\n    remove!(neg, neg_max)\
    \ # remove the maximum\n    neg_second_max = maximum(neg) # get the second maximum\n\
    \    \n    pos = union!(lst,Set{Int64}()) # union of the set and array\n    remove!(pos,\
    \ 0) # remove the zero from the array\n    pos_min = minimum(pos) # get the minimum\n\
    \    remove!(pos, pos_min) # remove the minimum\n    pos_second_min = minimum(pos)\
    \ # get the second minimum\n    \n    if isempty(neg) # if there is no negative\
    \ integers, return 0\n        neg_max = nothing\n        neg_second_max = nothing\n\
    \    end\n    \n    if isempty(pos) # if there is no positive integers, return\
    \ 0\n        pos_min = nothing\n        pos_second_min = nothing\n    end\n  \
    \  \n    return (neg_max, pos_min) # return the values in a tuple\n    \nend\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfk7ykmmg.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ remove! not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfk7ykmmg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfk7ykmmg.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk7ykmmg.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfk7ykmmg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: remove! not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfk7ykmmg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfk7ykmmg.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk7ykmmg.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfk7ykmmg.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: remove! not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfk7ykmmg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfk7ykmmg.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk7ykmmg.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfk7ykmmg.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: remove! not defined\n\
    \  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk7ykmmg.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    b = nothing\n    a\
    \ = nothing\n    for i = 1:length(lst)\n        if lst[i] &gt; 0\n           \
    \ if b == nothing\n                b = lst[i]\n            elseif lst[i] &lt;\
    \ b\n                b = lst[i]\n            end\n        elseif lst[i] &lt; 0\n\
    \            if a == nothing\n                a = lst[i]\n            elseif lst[i]\
    \ &gt; a\n                a = lst[i]\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfd4q2imu.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ gt not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfd4q2imu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfd4q2imu.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfd4q2imu.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfd4q2imu.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: gt not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfd4q2imu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfd4q2imu.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfd4q2imu.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfd4q2imu.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: gt not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfd4q2imu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfd4q2imu.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfd4q2imu.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfd4q2imu.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: gt not defined\n\
    \  Stacktrace:\n   [1] largest_smalles"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfd4q2imu.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    n_neg = nothing\n    n_pos = nothing\n    for i in lst\n\
    \        if i < 0 && (n_neg == nothing || i > n_neg)\n            n_neg = i\n\
    \        end\n        if i > 0 && (n_pos == nothing || i < n_pos)\n          \
    \  n_pos = i\n        end\n    end\n    return (n_neg, n_pos)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_lst = [x for x in lst if x < 0]\n\
    \    pos_lst = [x for x in lst if x > 0]\n    a = maximum(neg_lst)\n    b = minimum(pos_lst)\n\
    \    if isempty(neg_lst)\n        a = nothing\n    end\n    if isempty(pos_lst)\n\
    \        b = nothing\n    end\n    return a, b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1c5h2twh.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp1c5h2twh.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp1c5h2twh.jl:30 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp1c5h2twh.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1c5h2twh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1c5h2twh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = maximum([x for x in lst if x <\
    \ 0])\n    pos = minimum([x for x in lst if x > 0])\n    if length(lst) == 0\n\
    \        return (nothing, nothing)\n    elseif length(lst) == 1\n        return\
    \ (nothing, nothing)\n    else\n        return (neg, pos)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5lytkaco.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp5lytkaco.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp5lytkaco.jl:28 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp5lytkaco.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5lytkaco.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lytkaco.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positives = filter(v->v>0, lst)\n   \
    \ negatives = filter(v->v<0, lst)\n    return (maximum(negatives), minimum(positives))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5xwxx6rz.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp5xwxx6rz.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp5xwxx6rz.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp5xwxx6rz.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp5xwxx6rz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xwxx6rz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n  # FIXME: implement the function!\n  i_pos\
    \ = Int64[]\n  i_neg = Int64[]\n  for i = 1:length(lst)\n    if lst[i] > 0\n \
    \     push!(i_pos, lst[i])\n    elseif lst[i] < 0\n      push!(i_neg, lst[i])\n\
    \    end\n  end\n  a = nothing\n  b = nothing\n  if length(i_pos) > 0\n    b =\
    \ minimum(i_pos)\n  end\n  if length(i_neg) > 0\n    a = maximum(i_neg)\n  end\n\
    \  return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 return (nothing,\
    \ nothing) end\n    if length(lst) == 1 \n        if lst[1] == 0 return (nothing,\
    \ nothing) end\n    end\n    if length(lst) == 1 \n        if lst[1] != 0 return\
    \ (lst[1], lst[1]) end\n    end\n    neg_lst = Int64[]\n    pos_lst = Int64[]\n\
    \    for i in lst\n        if i > 0 push!(pos_lst, i) end\n        if i < 0 push!(neg_lst,\
    \ i) end\n    end\n    if length(neg_lst) == 0 neg_num = nothing else neg_num\
    \ = maximum(neg_lst) end\n    if length(pos_lst) == 0 pos_num = nothing else pos_num\
    \ = minimum(pos_lst) end\n    return (neg_num, pos_num)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    if\
    \ length(lst) != 0\n        for i in lst\n            if i >= 0 && b === nothing\n\
    \                b = i\n            elseif i >= 0 && b != nothing\n          \
    \      if i < b\n                    b = i\n                end\n            elseif\
    \ i < 0 && a === nothing\n                a = i\n            elseif i < 0 && a\
    \ != nothing\n                if i > a\n                    a = i\n          \
    \      end\n            end\n        end\n    end\n    return (a, b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptlvo4ye7.jl:40\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlvo4ye7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlvo4ye7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptlvo4ye7.jl:45\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\n   Evaluated: (nothing, 0) == (nothing, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlvo4ye7.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlvo4ye7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmptlvo4ye7.jl:47\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlvo4ye7.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlvo4ye7.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptlvo4ye7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_min, pos_max = nothing, nothing\n\
    \    neg_min, neg_max = nothing, nothing\n    for i in lst\n        if i > 0\n\
    \            if pos_min == nothing\n                pos_min = i\n            elseif\
    \ i < pos_min\n                pos_min = i\n            end\n            if pos_max\
    \ == nothing\n                pos_max = i\n            elseif i > pos_max\n  \
    \              pos_max = i\n            end\n        elseif i < 0\n          \
    \  if neg_min == nothing\n                neg_min = i\n            elseif i <\
    \ neg_min\n                neg_min = i\n            end\n            if neg_max\
    \ == nothing\n                neg_max = i\n            elseif i > neg_max\n  \
    \              neg_max = i\n            end\n        end\n    end\n    return\
    \ neg_max, pos_min\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    n, p = Nothing, Nothing\n    for num in lst\n        if\
    \ num < 0 && n == Nothing\n            n = num\n        elseif num < 0 && num\
    \ > n\n            n = num\n        elseif num > 0 && p == Nothing\n         \
    \   p = num\n        elseif num > 0 && num < p\n            p = num\n        end\n\
    \    end\n    return (n, p)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2du_o4xr.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmp2du_o4xr.jl:28\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp2du_o4xr.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp2du_o4xr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2du_o4xr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2du_o4xr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if any(lst .> 0)\n        smallest =\
    \ minimum(lst[lst .> 0])\n    else\n        smallest = nothing\n    end\n    if\
    \ any(lst .< 0)\n        largest = maximum(lst[lst .< 0])\n    else\n        largest\
    \ = nothing\n    end\n    return (largest, smallest)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = None\n    if lst != []\n    \
    \    for i in lst\n            if i > 0\n                if b == None\n      \
    \              b = i\n                elseif i < b\n                    b = i\n\
    \                end\n            elseif i < 0\n                if a == None\n\
    \                    a = i\n                elseif i > a\n                   \
    \ a = i\n                end\n            end\n        end\n    end\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmpv8w871.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmpv8w871.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmpv8w871.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmpv8w871.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpmpv8w871.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmpv8w871.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmpv8w871.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmpv8w871.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpmpv8w871.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmpv8w871.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmpv8w871.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmpv8w871.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpmpv8w871.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] largest"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpv8w871.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_integers = lst[lst .< 0]\n \
    \   positive_integers = lst[lst .> 0]\n    if length(negative_integers) > 0\n\
    \        largest_negative_integer = maximum(negative_integers)\n    else\n   \
    \     largest_negative_integer = nothing\n    end\n    if length(positive_integers)\
    \ > 0\n        smallest_positive_integer = minimum(positive_integers)\n    else\n\
    \        smallest_positive_integer = nothing\n    end\n    return (largest_negative_integer,\
    \ smallest_positive_integer)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a, b = nothing, nothing\n    for (i, n) in enumerate(lst)\n\
    \        if n >= 0 && (isnothing(b) || n < b)\n            b = n\n        elseif\
    \ n < 0 && (isnothing(a) || n > a)\n            a = n\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzvog_uy.jl:32\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzvog_uy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzvog_uy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdzvog_uy.jl:37\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\n   Evaluated: (nothing, 0) == (nothing, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzvog_uy.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzvog_uy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpdzvog_uy.jl:39\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzvog_uy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzvog_uy.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzvog_uy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    largest = nothing\n    smallest = nothing\n\
    \    for i in lst\n        if i > 0\n            if smallest == nothing || i <\
    \ smallest\n                smallest = i\n            end\n        elseif i <\
    \ 0\n            if largest == nothing || i > largest\n                largest\
    \ = i\n            end\n        end\n    end\n    return (largest, smallest)\n\
    end\n@testset \"Example tests\" begin\n    @test largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n    @test largest_smallest_integers([]) ==\
    \ (nothing, nothing)\n    @test largest_smallest_integers([0]) == (nothing, nothing)\n\
    end\n@testset \"Larger tests\" begin\n    @test largest_smallest_integers([17,\
    \ -3, 46, -5, 6, 2, -7, 10, -9, -11, 11, -19, -23, -31, -13, -15, -37, 38, 41,\
    \ -17, -23, -29, -43, -47, -41, -53, -61, -59, -67, -71, -73, -79, -83, -89, -97,\
    \ -101, -103, -107, -109, -113, -127, -137, -139, -149, -151, -157, -163, -167,\
    \ -173, -179, -181, -191, -193, -197, -199, -211, -223, -227, -229, -233, -239,\
    \ -241, -251, -257, -263, -269, -271, -277, -281, -283, -293, -307, -311, -313,\
    \ -317, -331, -337, -347, -349, -353, -359, -367, -373, -379, -383, -389, -397,\
    \ -401, -409, -419, -421, -431, -433, -439, -443, -449, -457, -461, -463, -467,\
    \ -479, -487, -491, -499, -503, -509, -521, -523, -541, -547, -557,\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp0nwko711.jl:28\nin expression starting at /tmp/tmp0nwko711.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negs = filter(x -> x < 0, lst)\n    poss\
    \ = filter(x -> x > 0, lst)\n    neg = get(negs, -1, nothing)\n    pos = get(poss,\
    \ 1, nothing)\n    return (neg, pos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppavxwpav.jl:24\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, 2) == (nothing, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppavxwpav.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppavxwpav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppavxwpav.jl:25\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, 2) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppavxwpav.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppavxwpav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppavxwpav.jl:26\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, 1) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppavxwpav.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppavxwpav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppavxwpav.jl:27\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, 4) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppavxwpav.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppavxwpav.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppavxwpav.jl:28\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppavxwpav.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = []\n    pos = []\n    for v in\
    \ lst\n        if v < 0\n            push!(neg, v)\n        elseif v > 0\n   \
    \         push!(pos, v)\n        end\n    end\n    if neg == []\n        nega\
    \ = nothing\n    else\n        nega = maximum(neg)\n    end\n    if pos == []\n\
    \        posa = nothing\n    else\n        posa = minimum(pos)\n    end\n    return\
    \ (nega, posa)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    for i in\
    \ lst\n        if i < 0 && (a == nothing || a < i)\n            a = i\n      \
    \  elseif i > 0 && (b == nothing || b > i)\n            b = i\n        end\n \
    \   end\n    return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    n = length(lst)\n    if n == 0 \n   \
    \     return (nothing, nothing)\n    end\n    min_pos, max_neg = nothing, nothing\n\
    \    for i in 1:n\n        if lst[i] < 0\n            if max_neg === nothing\n\
    \                max_neg = lst[i]\n            elseif lst[i] > max_neg\n     \
    \           max_neg = lst[i]\n            end\n        elseif lst[i] > 0\n   \
    \         if min_pos === nothing\n                min_pos = lst[i]\n         \
    \   elseif lst[i] < min_pos\n                min_pos = lst[i]\n            end\n\
    \        end\n    end\n    return (max_neg, min_pos)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = filter(x -> x < 0, lst)\n    pos\
    \ = filter(x -> x > 0, lst)\n    if isempty(neg)\n        n = nothing\n    else\n\
    \        n = maximum(neg)\n    end\n    if isempty(pos)\n        p = nothing\n\
    \    else\n        p = minimum(pos)\n    end\n    return (n, p)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # lst = vcat(lst, 0)\n    pos_lst = lst[lst\
    \ .> 0]\n    neg_lst = lst[lst .< 0]\n    if length(pos_lst) == 0\n        min_pos\
    \ = nothing\n    else\n        min_pos = minimum(pos_lst)\n    end\n    if length(neg_lst)\
    \ == 0\n        max_neg = nothing\n    else\n        max_neg = maximum(neg_lst)\n\
    \    end\n    return (max_neg, min_pos)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive = Int64[]\n    negative = Int64[]\n\
    \    for number in lst\n        if number > 0\n            push!(positive, number)\n\
    \        elseif number < 0\n            push!(negative, number)\n        end\n\
    \    end\n    if isempty(positive)\n        positive = nothing\n    else\n   \
    \     positive = minimum(positive)\n    end\n    if isempty(negative)\n      \
    \  negative = nothing\n    else\n        negative = maximum(negative)\n    end\n\
    \    return negative, positive\nend\nprintln(largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7]))\nprintln(largest_smallest_integers([]))\nprintln(largest_smallest_integers([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "(nothing, 1)\n"
  stderr: "ERROR: LoadError: MethodError: no method matching largest_smallest_integers(::Vector{Any})\n\
    Closest candidates are:\n  largest_smallest_integers(!Matched::Vector{Int64})\
    \ at /tmp/tmp_4j5ozxv.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_4j5ozxv.jl:35\n\
    in expression starting at /tmp/tmp_4j5ozxv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # Your code here\n    # a = nothing\n\
    \    # b = nothing\n    # for i in lst\n    #     if i > 0 && isnothing(b)\n \
    \   #         b = i\n    #     elseif i > 0 && i < b\n    #         b = i\n  \
    \  #     elseif i < 0 && isnothing(a)\n    #         a = i\n    #     elseif i\
    \ < 0 && i > a\n    #         a = i\n    #     end\n    # end\n    # return a,\
    \ b\n    #alternative solution, smart\n    neg_list = filter(x -> x < 0, lst)\n\
    \    pos_list = filter(x -> x > 0, lst)\n    if length(neg_list) == 0\n      \
    \  a = nothing\n    else\n        a = maximum(neg_list)\n    end\n    if length(pos_list)\
    \ == 0\n        b = nothing\n    else\n        b = minimum(pos_list)\n    end\n\
    \    return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \"\"\"\n    Create a function that returns\
    \ a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b'\
    \ is the smallest\n    of positive integers in a list.\n    If there is no negative\
    \ or positive integers, return them as None.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjpeqcvm.jl:1\nin expression starting at /tmp/tmpkjpeqcvm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # YOUR CODE HERE\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_2u9p2fx.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp_2u9p2fx.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_2u9p2fx.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_2u9p2fx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_2u9p2fx.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp_2u9p2fx.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2u9p2fx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    return (maximum(lst[lst.<0]), minimum(lst[lst.>0]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdc3lt9u1.jl:23\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpdc3lt9u1.jl:16\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpdc3lt9u1.jl:23 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpdc3lt9u1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdc3lt9u1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc3lt9u1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos = Nothing\n    neg = Nothing\n  \
    \  if length(lst) == 0\n        return (neg, pos)\n    end\n    for i in lst\n\
    \        if i >= 0 && pos == Nothing\n            pos = i\n        elseif i >=\
    \ 0 && pos != Nothing\n            pos = i < pos ? i : pos\n        elseif i <\
    \ 0 && neg == Nothing\n            neg = i\n        elseif i < 0 && neg != Nothing\n\
    \            neg = i > neg ? i : neg\n        end\n    end\n    return (neg, pos)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvhua6hq1.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: Cannot `convert` an object of type Type{Nothing} to an object of\
    \ type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\\n     @ Base ./some.jl:36\\n   [2] cvt1\\n     @ ./essentials.jl:343\
    \ [inlined]\\n   [3] ntuple\\n     @ ./ntuple.jl:49 [inlined]\\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\\n     @ Base ./essentials.jl:344\\\
    n   [5] largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmpvhua6hq1.jl:29\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpvhua6hq1.jl:36 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpvhua6hq1.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpvhua6hq1.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twice"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos = nothing\n    neg = nothing\n  \
    \  for i in lst\n        if i > 0\n            if isnothing(pos)\n           \
    \     pos = i\n            elseif i < pos\n                pos = i\n         \
    \   end\n        elseif i < 0\n            if isnothing(neg)\n               \
    \ neg = i\n            elseif i > neg\n                neg = i\n            end\n\
    \        end\n    end\n    return neg, pos\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7564ox7v.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp7564ox7v.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7564ox7v.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7564ox7v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7564ox7v.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp7564ox7v.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7564ox7v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    min_int = lst[1]\n    max_int = lst[1]\n    for i in\
    \ lst\n        if i < min_int\n            min_int = i\n        end\n        if\
    \ i > max_int\n            max_int = i\n        end\n    end\n    if max_int <\
    \ 0\n        max_int = nothing\n    end\n    if min_int > 0\n        min_int =\
    \ nothing\n    end\n    return (max_int, min_int)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa44u1sx4.jl:39\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, nothing) == (nothing, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa44u1sx4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa44u1sx4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa44u1sx4.jl:40\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa44u1sx4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa44u1sx4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa44u1sx4.jl:41\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa44u1sx4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa44u1sx4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa44u1sx4.jl:42\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa44u1sx4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa44u1sx4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpa44u1sx4.jl:43\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa44u1sx4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # check if list is empty or contains\
    \ only zeros\n    if length(lst) == 0 || all(lst .== 0)\n        return (nothing,\
    \ nothing)\n    end\n    \n    # find indicies for positive and negative numbers\n\
    \    lst_neg = findall(lst .< 0)\n    lst_pos = findall(lst .> 0)\n    \n    #\
    \ check if list contains only negative or positive numbers\n    if isempty(lst_neg)\
    \ || isempty(lst_pos)\n        return (nothing, nothing)\n    end\n    \n    #\
    \ find largest negative number and smallest positive number\n    lst_neg_max =\
    \ maximum(lst[lst_neg])\n    lst_pos_min = minimum(lst[lst_pos])\n    \n    return\
    \ (lst_neg_max, lst_pos_min)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqa2asfi_.jl:38\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa2asfi_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa2asfi_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqa2asfi_.jl:39\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa2asfi_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa2asfi_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqa2asfi_.jl:45\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa2asfi_.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa2asfi_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqa2asfi_.jl:46\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqa2asfi_.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqa2asfi_.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7    "
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqa2asfi_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = (nothing, nothing)\n    positive\
    \ = filter(x -> x > 0, lst)\n    negative = filter(x -> x < 0, lst)\n    if length(positive)\
    \ > 0\n        a[2] = minimum(positive)\n    end\n    if length(negative) > 0\n\
    \        a[1] = maximum(negative)\n    end\n    return a\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv1pz4arh.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpv1pz4arh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1pz4arh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1pz4arh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpv1pz4arh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpv1pz4arh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1pz4arh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1pz4arh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpv1pz4arh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  MethodError: no method matching\
    \ setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpv1pz4arh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1pz4arh.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1pz4arh.jl:28\ntest set:\
    \ Error During Test at /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1pz4arh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \"\"\"\n    NOTE: The return value is\
    \ a tuple (a, b), where 'a' is the largest\n    of negative integers, and 'b'\
    \ is the smallest of positive integers.\n    If there is no negative or positive\
    \ integers, return them as None.\n    \"\"\"\n    negative_ints = []\n    positive_ints\
    \ = []\n    for num in lst\n        if num < 0\n            push!(negative_ints,\
    \ num)\n        elseif num > 0\n            push!(positive_ints, num)\n      \
    \  end\n    end\n    if isempty(negative_ints)\n        a = nothing\n    else\n\
    \        a = maximum(negative_ints)\n    end\n    if isempty(positive_ints)\n\
    \        b = nothing\n    else\n        b = minimum(positive_ints)\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative, positive = 0, 0\n    for number\
    \ in lst\n        if number > 0\n            positive = number\n            if\
    \ negative == 0\n                negative = number\n            end\n        elseif\
    \ number < 0\n            negative = number\n            if positive == 0\n  \
    \              positive = number\n            end\n        end\n    end\n    return\
    \ negative, positive\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79mqnr64.jl:34\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (2, 7) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79mqnr64.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79mqnr64.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp79mqnr64.jl:35\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (2, 7) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79mqnr64.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79mqnr64.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp79mqnr64.jl:36\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (-2, 6) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79mqnr64.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79mqnr64.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp79mqnr64.jl:37\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (-7, 7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp79mqnr64.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp79mqnr64.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp79mqnr64.jl:38\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evalua"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79mqnr64.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    maximum(-lst) isa Nothing ? a = Nothing\
    \ : a = -maximum(-lst)\n    minimum(lst) isa Nothing ? b = Nothing : b = minimum(lst)\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp190sqvzv.jl:22\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (1, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp190sqvzv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp190sqvzv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp190sqvzv.jl:23\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (0, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp190sqvzv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp190sqvzv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp190sqvzv.jl:24\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (-2, -2) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp190sqvzv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp190sqvzv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp190sqvzv.jl:25\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (-7, -7) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp190sqvzv.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp190sqvzv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp190sqvzv.jl:26\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Eval"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp190sqvzv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    largest = nothing\n    smallest = nothing\n\
    \    for item in lst\n        if item > 0\n            if smallest == nothing\
    \ || item < smallest\n                smallest = item\n            end\n     \
    \   elseif item < 0\n            if largest == nothing || item > largest\n   \
    \             largest = item\n            end\n        end\n    end\n    return\
    \ (largest, smallest)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negatives = []\n    positives = []\n\
    \    for num in lst\n        if num &lt; 0\n            push!(negatives, num)\n\
    \        elseif num &gt; 0\n            push!(positives, num)\n        end\n \
    \   end\n    if isempty(negatives)\n        a = nothing\n    else\n        a =\
    \ maximum(negatives)\n    end\n    if isempty(positives)\n        b = nothing\n\
    \    else\n        b = minimum(positives)\n    end\n    return (a, b)\nend\n</code>\n\
    This code is much too verbose and slow. \nWould it be possible to accomplish this\
    \ with a one-liner?\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tgcgtus.jl:34\nin expression starting at\
    \ /tmp/tmp8tgcgtus.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    p=[]\n    n=[]\n    for i in lst\n  \
    \      if i>0\n            push!(p,i)\n        elseif i<0\n            push!(n,i)\n\
    \        end\n    end\n    p=sort(p)\n    n=sort(n, rev=true)\n    if length(p)>0\n\
    \        b=p[1]\n    else\n        b=nothing\n    end\n    if length(n)>0\n  \
    \      a=n[1]\n    else\n        a=nothing\n    end\n    return a,b\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negatives = filter(x -> x < 0, lst)\n\
    \    positives = filter(x -> x > 0, lst)\n    if length(negatives) == 0\n    \
    \    a = nothing\n    else\n        a = reduce(max, negatives)\n    end\n    if\
    \ length(positives) == 0\n        b = nothing\n    else\n        b = reduce(min,\
    \ positives)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst)==0\n        return (nothing,\
    \ nothing)\n    end\n    pos, neg = nothing, nothing\n    for i in lst\n     \
    \   if i<0\n            if neg == nothing\n                neg = i\n         \
    \   elseif i>neg\n                neg = i\n            end\n        elseif i>0\n\
    \            if pos == nothing\n                pos = i\n            elseif i<pos\n\
    \                pos = i\n            end\n        end\n    end\n    return (neg,\
    \ pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    pos_min, pos_max = nothing, nothing\n    neg_min, neg_max\
    \ = nothing, nothing\n    for i in lst\n        if i == 0\n            continue\n\
    \        end\n        if i > 0\n            if pos_min == nothing || i < pos_min\n\
    \                pos_min = i\n            end\n            if pos_max == nothing\
    \ || i > pos_max\n                pos_max = i\n            end\n        else\n\
    \            if neg_min == nothing || i < neg_min\n                neg_min = i\n\
    \            end\n            if neg_max == nothing || i > neg_max\n         \
    \       neg_max = i\n            end\n        end\n    end\n    return (neg_max,\
    \ pos_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # Preallocate space for results\n   \
    \ a = nothing\n    b = nothing\n    # Loop through the list\n    for elem in lst\n\
    \        # Check if elem is positive and if b is initialized\n        if elem\
    \ > 0 && b !== nothing\n            # If so, compare and update smallest positive\
    \ number\n            b = min(b, elem)\n        elseif elem > 0 && b === nothing\n\
    \            # If so, initialize smallest positive number\n            b = elem\n\
    \        end\n        # Check if elem is negative and if a is initialized\n  \
    \      if elem < 0 && a !== nothing\n            # If so, compare and update largest\
    \ negative number\n            a = max(a, elem)\n        elseif elem < 0 && a\
    \ === nothing\n            # If so, initialize largest negative number\n     \
    \       a = elem\n        end\n    end\n    # Return results\n    return (a, b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    smallest_pos = nothing\n    largest_neg = nothing\n \
    \   for num in lst\n        if num < 0 && (largest_neg == nothing || num > largest_neg)\n\
    \            largest_neg = num\n        elseif num > 0 && (smallest_pos == nothing\
    \ || num < smallest_pos)\n            smallest_pos = num\n        end\n    end\n\
    \    return (largest_neg, smallest_pos)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst_0 = filter(x -> x == 0, lst)\n  \
    \  if length(lst_0) == length(lst)\n        return (nothing, nothing)\n    end\n\
    \    lst_neg = filter(x -> x < 0, lst)\n    lst_pos = filter(x -> x > 0, lst)\n\
    \    if length(lst_neg) == 0\n        lst_neg = [0]\n    end\n    if length(lst_pos)\
    \ == 0\n        lst_pos = [0]\n    end\n    return (maximum(lst_neg), minimum(lst_pos))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp654t0gnx.jl:32\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (0, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp654t0gnx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp654t0gnx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp654t0gnx.jl:33\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (0, 1) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp654t0gnx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp654t0gnx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp654t0gnx.jl:39\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp654t0gnx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp654t0gnx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp654t0gnx.jl:40\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp654t0gnx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp654t0gnx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     4     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp654t0gnx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    posVec = []\n    negVec = []\n    for\
    \ x in lst\n        if x > 0\n            push!(posVec, x)\n        elseif x <\
    \ 0\n            push!(negVec, x)\n        end\n    end\n    if length(posVec)\
    \ > 0 && length(negVec) > 0\n        tuple = (maximum(negVec), minimum(posVec))\n\
    \    elseif length(posVec) > 0\n        tuple = (None, minimum(posVec))\n    elseif\
    \ length(negVec) > 0\n        tuple = (maximum(negVec), None)\n    else\n    \
    \    tuple = (None, None)\n    end\n    return tuple\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq99iv7e7.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpq99iv7e7.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq99iv7e7.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq99iv7e7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq99iv7e7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpq99iv7e7.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq99iv7e7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq99iv7e7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq99iv7e7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpq99iv7e7.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq99iv7e7.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq99iv7e7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq99iv7e7.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([0]) == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_s"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq99iv7e7.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    largest_negative = nothing\n    smallest_positive = nothing\n\
    \    for n in lst\n        if n < 0 && (largest_negative == nothing || n > largest_negative)\n\
    \            largest_negative = n\n        end\n        if n > 0 && (smallest_positive\
    \ == nothing || n < smallest_positive)\n            smallest_positive = n\n  \
    \      end\n    end\n    return (largest_negative, smallest_positive)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_numbers = filter(isless(0),\
    \ lst)\n    positive_numbers = filter(isgreater(0), lst)\n    a = nothing\n  \
    \  b = nothing\n    if !isempty(negative_numbers)\n        a = maximum(negative_numbers)\n\
    \    end\n    if !isempty(positive_numbers)\n        b = minimum(positive_numbers)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2vkrn1l5.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Int64)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp2vkrn1l5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vkrn1l5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vkrn1l5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2vkrn1l5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Int64)\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp2vkrn1l5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vkrn1l5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vkrn1l5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2vkrn1l5.jl:32\n  Test threw exception\n  Expression:\
    \ candid"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vkrn1l5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    if !isempty(lst)\n\
    \        a, b = findmax(lst), findmin(lst)\n        if a <= 0\n            a =\
    \ nothing\n        end\n        if b >= 0\n            b = nothing\n        end\n\
    \    end\n    return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphpo566bb.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Tuple{Int64, Int64}, ::Int64)\n  Closest candidates\
    \ are:\n    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Tuple{Int64, Int64}, y::Int64)\n     @ Base\
    \ ./operators.jl:352\n   [2] <=(x::Tuple{Int64, Int64}, y::Int64)\n     @ Base\
    \ ./operators.jl:401\n   [3] largest_smallest_integers(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmphpo566bb.jl:16\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmphpo566bb.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmphpo566bb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphpo566bb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Tuple{Int64, Int64}, ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Tuple{Int64, Int64}, y::Int64)\n     @ Base\
    \ ./operators.jl:352\n   [2] <=(x::Tuple{Int64, Int64}, y::Int64)\n     @ Base\
    \ ./operators.jl:401\n   [3] largest_smallest_integers(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmphpo566bb.jl:16\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphpo566bb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) != 0\n        # use minimum()\
    \ and maximum()\n        return (maximum(lst), minimum(lst))\n    else\n     \
    \   return (nothing, nothing)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt0embzdf.jl:25\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0embzdf.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0embzdf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt0embzdf.jl:26\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0embzdf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0embzdf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt0embzdf.jl:27\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0embzdf.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0embzdf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt0embzdf.jl:28\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0embzdf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0embzdf.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt0embzdf.jl:29\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evalua"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0embzdf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    p = []\n    n = []\n    for x in lst\n\
    \        if x < 0\n            push!(n, x)\n        elseif x > 0\n           \
    \ push!(p, x)\n        end\n    end\n    if length(n) > 0\n        a = maximum(n)\n\
    \    else\n        a = nothing\n    end\n    if length(p) > 0\n        b = minimum(p)\n\
    \    else\n        b = nothing\n    end\n    return (a, b)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    largest = nothing\n    smallest = nothing\n\
    \    for i in lst\n        if i < 0\n            largest == nothing && (largest\
    \ = i)\n            largest < i && (largest = i)\n        elseif i > 0\n     \
    \       smallest == nothing && (smallest = i)\n            smallest > i && (smallest\
    \ = i)\n        end\n    end\n    return (largest, smallest)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \n    max_neg_int = maximum(filter(x\
    \ -> x < 0, lst))\n    min_pos_int = minimum(filter(x -> x > 0, lst))\n    \n\
    \    if min_pos_int === Inf\n        min_pos_int = nothing\n    end\n    \n  \
    \  if max_neg_int === -Inf\n        max_neg_int = nothing\n    end\n    \n   \
    \ return (max_neg_int, min_pos_int)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq0oldjzz.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpq0oldjzz.jl:14\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpq0oldjzz.jl:32 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpq0oldjzz.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpq0oldjzz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0oldjzz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    r = Int64[]\n    for i in lst\n     \
    \   if i < 0\n            push!(r, i)\n        end\n    end\n    r_ = Int64[]\n\
    \    for i in lst\n        if i > 0\n            push!(r_, i)\n        end\n \
    \   end\n    if length(r) != 0\n        a = maximum(r)\n    else\n        a =\
    \ nothing\n    end\n    if length(r_) != 0\n        b = minimum(r_)\n    else\n\
    \        b = nothing\n    end\n    return a, b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return nothing,\
    \ nothing\n    end\n    neg_max = nothing\n    pos_min = nothing\n    for i in\
    \ lst\n        if i < 0 && (neg_max == nothing || i > neg_max)\n            neg_max\
    \ = i\n        end\n        if i > 0 && (pos_min == nothing || i < pos_min)\n\
    \            pos_min = i\n        end\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    a = nothing\n    b = nothing\n    for i in lst\n    \
    \    if i < 0 && (a == nothing || i > a)\n            a = i\n        end\n   \
    \     if i > 0 && (b == nothing || i < b)\n            b = i\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return nothing,\
    \ nothing\n    end\n    neg, pos = 0, 0\n    for e in lst\n        if e < 0\n\
    \            neg = max(neg, e)\n        elseif e > 0\n            pos = min(pos,\
    \ e)\n        end\n    end\n    return neg, pos\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7zylppjn.jl:31\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (0, 0) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zylppjn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zylppjn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7zylppjn.jl:32\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (0, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zylppjn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zylppjn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7zylppjn.jl:33\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (0, 0) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zylppjn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zylppjn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7zylppjn.jl:34\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (0, 0) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zylppjn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zylppjn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp7zylppjn.jl:35\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluate"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7zylppjn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if !any(lst .< 0) && !any(lst .> 0)\n        return (nothing,\
    \ nothing)\n    end\n    if any(lst .< 0) && !any(lst .> 0)\n        return (maximum(lst),\
    \ nothing)\n    end\n    if !any(lst .< 0) && any(lst .> 0)\n        return (nothing,\
    \ minimum(lst))\n    end\n    return (maximum(lst), minimum(lst))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcl1ikxqo.jl:33\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1ikxqo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1ikxqo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcl1ikxqo.jl:34\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1ikxqo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1ikxqo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcl1ikxqo.jl:35\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1ikxqo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1ikxqo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcl1ikxqo.jl:36\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (9, -9) == (-9, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcl1ikxqo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcl1ikxqo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcl1ikxqo.jl:40\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Ev"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl1ikxqo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = maximum([i for i in lst if i < 0])\n\
    \    b = minimum([i for i in lst if i > 0])\n    if a == -Inf && b == Inf\n  \
    \      a = nothing\n        b = nothing\n    end\n    return (a, b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk1_gv_j7.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpk1_gv_j7.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpk1_gv_j7.jl:26 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpk1_gv_j7.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk1_gv_j7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1_gv_j7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_numbers = filter(lst) do x\n\
    \        if x < 0\n            true\n        else\n            false\n       \
    \ end\n    end\n    positive_numbers = filter(lst) do x\n        if x > 0\n  \
    \          true\n        else\n            false\n        end\n    end\n    if\
    \ isempty(negative_numbers) == true\n        a = nothing\n    else\n        a\
    \ = reduce(negative_numbers, max)\n    end\n    if isempty(positive_numbers) ==\
    \ true\n        b = nothing\n    else\n        b = reduce(positive_numbers, min)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptwu380y0.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: no method matching iterate(::typeof(min))\\n  Closest candidates\
    \ are:\\n    iterate(!Matched::Union{LinRange, StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n    [1] _foldl_impl(op::Base.BottomRF{Vector{Int64}}, init::Base._InitialValue,\
    \ itr::Function)\\n      @ Base ./reduce.jl:56\\n    [2] foldl_impl(op::Base.BottomRF{Vector{Int64}},\
    \ nt::Base._InitialValue, itr::Function)\\n      @ Base ./reduce.jl:48\\n    [3]\
    \ mapfoldl_impl(f::typeof(identity), op::Vector{Int64}, nt::Base._InitialValue,\
    \ itr::Function)\\n      @ Base ./reduce.jl:44\\n    [4] #mapfoldl#244\\n    \
    \  @ ./reduce.jl:162 [inlined]\\n    [5] mapfoldl\\n      @ ./reduce.jl:162 [inlined]\\\
    n    [6] #mapreduce#248\\n      @ ./reduce.jl:289 [inlined]\\n    [7] mapreduce\\\
    n      @ ./reduce.jl:289 [inlined]\\n    [8] #reduce#250\\n      @ ./reduce.jl:458\
    \ [inlined]\\n    [9] reduce(op::Vector{Int64}, itr::Function)\\n      @ Base\
    \ ./reduce.jl:458\\n   [10] largest_smallest_integers(lst::Vector{Int64})\\n \
    \     @ Main /tmp/tmptwu380y0.jl:35\\n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmptwu380y0.jl:44 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmptwu380y0.jl:43\\ntest\
    \ set: Error During Test at /tmp/tmptwu380y0.jl:45\\n  Test threw exception\\\
    n  Expression: candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError:\
    \ no method matching iterate(::typeof(min))\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    b:Union{Int64, Nothing}=nothing\n   \
    \ a:Union{Int64, Nothing}=nothing\n    for i in lst\n        if i > 0\n      \
    \      if b != nothing\n                if i < b\n                    b = i\n\
    \                end\n            else\n                b = i\n            end\n\
    \        elseif i < 0\n            if a != nothing\n                if i > a\n\
    \                    a = i\n                end\n            else\n          \
    \      a = i\n            end\n        end\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"Union{Int64, Nothing}\" is not a valid function\
    \ argument name around /tmp/tmpvx76oeyi.jl:13\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpvx76oeyi.jl:1\nin expression starting at /tmp/tmpvx76oeyi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst_neg = filter(x -> x < 0, lst)\n \
    \   lst_pos = filter(x -> x > 0, lst)\n    if length(lst_neg) == 0\n        return\
    \ (None, minimum(lst_pos))\n    elseif length(lst_pos) == 0\n        return (maximum(lst_neg),\
    \ None)\n    else\n        return (maximum(lst_neg), minimum(lst_pos))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpluteeqpv.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpluteeqpv.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpluteeqpv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpluteeqpv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpluteeqpv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpluteeqpv.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpluteeqpv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpluteeqpv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpluteeqpv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluteeqpv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    max_neg = 0\n    min_pos = 0\n    flag\
    \ = false\n    for i = 1:length(lst)\n        if lst[i] > 0 && flag == false\n\
    \            min_pos = lst[i]\n            flag = true\n        elseif lst[i]\
    \ > 0 && lst[i] < min_pos\n            min_pos = lst[i]\n        elseif lst[i]\
    \ < 0 && lst[i] > max_neg\n            max_neg = lst[i]\n        end\n    end\n\
    \    if max_neg == 0 && min_pos == 0\n        return (nothing, nothing)\n    elseif\
    \ max_neg == 0 && min_pos != 0\n        return (nothing, min_pos)\n    elseif\
    \ max_neg != 0 && min_pos == 0\n        return (max_neg, nothing)\n    else\n\
    \        return (max_neg, min_pos)\n    end\nend\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0n4t_lk7.jl:44\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (nothing, 1) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n4t_lk7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n4t_lk7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp0n4t_lk7.jl:45\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, 2) == (-7, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n4t_lk7.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n4t_lk7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp0n4t_lk7.jl:46\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, 2) == (-9, 2)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n4t_lk7.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n4t_lk7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp0n4t_lk7.jl:49\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n4t_lk7.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n4t_lk7.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp0n4t_lk7.jl:50\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == ("
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n4t_lk7.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    passend = lst[lst .> 0]\n    negend =\
    \ lst[lst .< 0]\n    if isempty(passend)\n        a = nothing\n    else\n    \
    \    a = minimum(passend)\n    end\n    if isempty(negend)\n        b = nothing\n\
    \    else\n        b = maximum(negend)\n    end\n    return (b, a)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    (a, b) = (nothing, nothing)\n    for\
    \ i in lst\n        if i > 0 && b == nothing\n            b = i\n        elseif\
    \ i > 0 && i < b\n            b = i\n        elseif i < 0 && a == nothing\n  \
    \          a = i\n        elseif i < 0 && i > a\n            a = i\n        end\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = maximum([item for item in lst if\
    \ item < 0])\n    b = minimum([item for item in lst if item > 0])\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5hf2dsfa.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp5hf2dsfa.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp5hf2dsfa.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp5hf2dsfa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp5hf2dsfa.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hf2dsfa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    return lst == Int64[] ? (nothing, nothing)\
    \ : (maximum(lst[lst .< 0]), minimum(lst[lst .> 0]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqxopw3rz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpqxopw3rz.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpqxopw3rz.jl:20 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpqxopw3rz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpqxopw3rz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxopw3rz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_integers = filter(x -> x < 0,\
    \ lst)\n    positive_integers = filter(x -> x > 0, lst)\n    if isempty(negative_integers)\n\
    \        a = nothing\n    else\n        a = maximum(negative_integers)\n    end\n\
    \    if isempty(positive_integers)\n        b = nothing\n    else\n        b =\
    \ minimum(positive_integers)\n    end\n    return (a, b)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        a = Nothing\n\
    \        b = Nothing\n    else\n        positives = lst[lst .> 0]\n        negatives\
    \ = lst[lst .< 0]\n        if isempty(positives)\n            b = Nothing\n  \
    \      else\n            b = minimum(positives)\n        end\n        if isempty(negatives)\n\
    \            a = Nothing\n        else\n            a = maximum(negatives)\n \
    \       end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp85mnd7cr.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmp85mnd7cr.jl:30\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp85mnd7cr.jl:37 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp85mnd7cr.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp85mnd7cr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85mnd7cr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = nothing, nothing\n    a = maximum(lst[lst\
    \ .< 0]) if any(lst .< 0) else nothing\n    b = minimum(lst[lst .> 0]) if any(lst\
    \ .> 0) else nothing\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfjjhc8i1.jl:12 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfjjhc8i1.jl:14\n\
    in expression starting at /tmp/tmpfjjhc8i1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    negative_integers = filter(x -> x < 0, lst)\n    positive_integers\
    \ = filter(x -> x > 0, lst)\n    if isempty(negative_integers)\n        a = nothing\n\
    \    else\n        a = maximum(negative_integers)\n    end\n    if isempty(positive_integers)\n\
    \        b = nothing\n    else\n        b = minimum(positive_integers)\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    largest_neg = nothing\n    smallest_pos\
    \ = nothing\n    for i in lst\n        if i < 0\n            if largest_neg ==\
    \ nothing\n                largest_neg = i\n            elseif i > largest_neg\n\
    \                largest_neg = i\n            end\n        elseif i > 0\n    \
    \        if smallest_pos == nothing\n                smallest_pos = i\n      \
    \      elseif i < smallest_pos\n                smallest_pos = i\n           \
    \ end\n        end\n    end\n    return (largest_neg, smallest_pos)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # type: (Tuple{Int64,Int64}...)\n   \
    \ a = nothing\n    b = nothing\n    for n in lst\n        a = n <= 0 ? n > a ?\
    \ n : a : a\n        b = n >= 0 ? n < b ? n : b : b\n    end\n    return (a, b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwon2sj3.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmphwon2sj3.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphwon2sj3.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphwon2sj3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphwon2sj3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmphwon2sj3.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphwon2sj3.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwon2sj3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negatives = []\n    positives = []\n\
    \    for i in lst\n        if i < 0\n            push!(negatives, i)\n       \
    \ elseif i > 0\n            push!(positives, i)\n        end\n    end\n    a =\
    \ nothing\n    b = nothing\n    if length(negatives) != 0\n        a = maximum(negatives)\n\
    \    end\n    if length(positives) != 0\n        b = minimum(positives)\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code\n    smallestPos = nothing\n\
    \    largestNeg = nothing\n    for i in lst\n        if i > 0 && (smallestPos\
    \ == nothing || i < smallestPos)\n            smallestPos = i\n        end\n \
    \       if i < 0 && (largestNeg == nothing || i > largestNeg)\n            largestNeg\
    \ = i\n        end\n    end\n    return (largestNeg, smallestPos)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \"\"\"\n    Create a function that returns\
    \ a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b'\
    \ is the smallest\n    of positive integers in a list.\n    If there is no negative\
    \ or positive integers, return them as None.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypgxr6q_.jl:1\nin expression starting at /tmp/tmpypgxr6q_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = Nothing\n    for i in lst\n \
    \       if i < 0\n            a = i > a ? i : a\n        elseif i > 0\n      \
    \      b = i < b ? i : b\n        end\n    end\n    return (a, b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjk0q3r4p.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Int64, ::Type{Nothing})\n  Closest candidates are:\n\
    \    isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Type)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpjk0q3r4p.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjk0q3r4p.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjk0q3r4p.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjk0q3r4p.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Int64, ::Type{Nothing})\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Type)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpjk0q3r4p.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjk0q3r4p.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjk0q3r4p.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    pos_lst = filter(x -> x > 0, lst)\n    neg_lst = filter(x\
    \ -> x < 0, lst)\n    if isempty(pos_lst) && isempty(neg_lst)\n        return\
    \ (nothing, nothing)\n    end\n    if isempty(pos_lst)\n        return (maximum(neg_lst),\
    \ nothing)\n    end\n    if isempty(neg_lst)\n        return (nothing, minimum(pos_lst))\n\
    \    end\n    return (maximum(neg_lst), minimum(pos_lst))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    return (maximum(lst[lst .< 0]), minimum(lst[lst\
    \ .> 0]))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__01fpte.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp__01fpte.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp__01fpte.jl:20 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp__01fpte.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp__01fpte.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__01fpte.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negativos = filter(x -> x < 0, lst)\n\
    \    positivos = filter(x -> x > 0, lst)\n    return(maximum(negativos), minimum(positivos))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcynrys7x.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpcynrys7x.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpcynrys7x.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpcynrys7x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcynrys7x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcynrys7x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = nothing\n    for i = 1:length(lst)\n\
    \        if lst[i] >= 0\n            if isnothing(b) || b > lst[i]\n         \
    \       b = lst[i]\n            end\n        else\n            if isnothing(a)\
    \ || a < lst[i]\n                a = lst[i]\n            end\n        end\n  \
    \  end\n    return a, b\nend\nprintln(largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]))\nprintln(largest_smallest_integers([]))\nprintln(largest_smallest_integers([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "(nothing, 1)\n"
  stderr: "ERROR: LoadError: MethodError: no method matching largest_smallest_integers(::Vector{Any})\n\
    Closest candidates are:\n  largest_smallest_integers(!Matched::Vector{Int64})\
    \ at /tmp/tmpx6bfonx_.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx6bfonx_.jl:28\n\
    in expression starting at /tmp/tmpx6bfonx_.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_max = nothing\n    positive_min\
    \ = nothing\n    for i in lst\n        if i > 0 && positive_min === nothing\n\
    \            positive_min = i\n        elseif i > 0 && i < positive_min\n    \
    \        positive_min = i\n        elseif i < 0 && negative_max === nothing\n\
    \            negative_max = i\n        elseif i < 0 && i > negative_max\n    \
    \        negative_max = i\n        end\n    end\n    return negative_max, positive_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    largest_negative = Int64[]\n    smallest_positive\
    \ = Int64[]\n    for n in lst\n        if n < 0\n            push!(largest_negative,\
    \ n)\n        elseif n > 0\n            push!(smallest_positive, n)\n        end\n\
    \    end\n    if length(largest_negative) == 0\n        largest_negative = nothing\n\
    \    else\n        largest_negative = maximum(largest_negative)\n    end\n   \
    \ if length(smallest_positive) == 0\n        smallest_positive = nothing\n   \
    \ else\n        smallest_positive = minimum(smallest_positive)\n    end\n    return\
    \ largest_negative, smallest_positive\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = []\n    pos = []\n    for i in\
    \ lst\n        i < 0 ? push!(neg, i) : push!(pos, i)\n    end\n    (pos != []\
    \ ? minimum(pos) : nothing, neg != [] ? maximum(neg) : nothing)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1kqpufpt.jl:25\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (1, nothing) == (nothing, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kqpufpt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kqpufpt.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1kqpufpt.jl:26\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (0, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kqpufpt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kqpufpt.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1kqpufpt.jl:27\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (1, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kqpufpt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kqpufpt.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1kqpufpt.jl:28\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (2, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kqpufpt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kqpufpt.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1kqpufpt.jl:29\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1kqpufpt.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_i, neg_i = Int[], Int[]\n    for\
    \ i in lst\n        if i > 0\n            push!(pos_i, i)\n        elseif i <\
    \ 0\n            push!(neg_i, i)\n        end\n    end\n    if isempty(pos_i)\
    \ && isempty(neg_i)\n        return (nothing, nothing)\n    elseif isempty(pos_i)\n\
    \        return (nothing, minimum(pos_i))\n    elseif isempty(neg_i)\n       \
    \ return (maximum(neg_i), nothing)\n    else\n        return (maximum(neg_i),\
    \ minimum(pos_i))\n    end\nend\n    \nlst1 = [2, 4, 1, 3, 5, 7]\nlst2 = []\n\
    lst3 = [0]\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyeec8ehi.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpyeec8ehi.jl:26\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpyeec8ehi.jl:40 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpyeec8ehi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyeec8ehi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyeec8ehi.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    min_positive, max_negative = nothing,\
    \ nothing\n    for value in lst\n        if value > 0\n            if isnothing(min_positive)\
    \ || value < min_positive\n                min_positive = value\n            end\n\
    \        elseif value < 0\n            if isnothing(max_negative) || value > max_negative\n\
    \                max_negative = value\n            end\n        end\n    end\n\
    \    return max_negative, min_positive\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    a = nothing\n    b\
    \ = nothing\n    for i in lst\n        if i < 0 && a == nothing\n            a\
    \ = i\n        end\n        if i < 0 && a != nothing\n            if i > a\n \
    \               a = i\n            end\n        end\n        if i > 0 && b ==\
    \ nothing\n            b = i\n        end\n        if i > 0 && b != nothing\n\
    \            if i < b\n                b = i\n            end\n        end\n \
    \   end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg, pos = nothing, nothing\n    for\
    \ i in lst\n        if i < 0 && (neg == nothing || neg < i)\n            neg =\
    \ i\n        elseif i > 0 && (pos == nothing || pos > i)\n            pos = i\n\
    \        end\n    end\n    return neg, pos\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    n = length(lst)\n    if n == 0\n    \
    \    return (None, None)\n    end\n    a = 0\n    b = 0\n    for i in 1:n\n  \
    \      if lst[i] < 0\n            if a == 0\n                a = lst[i]\n    \
    \        elseif lst[i] > a\n                a = lst[i]\n            end\n    \
    \    elseif lst[i] > 0\n            if b == 0\n                b = lst[i]\n  \
    \          elseif lst[i] < b\n                b = lst[i]\n            end\n  \
    \      end\n    end\n    if a == 0\n        a = None\n    end\n    if b == 0\n\
    \        b = None\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplqdpqqzz.jl:47\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplqdpqqzz.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqdpqqzz.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqdpqqzz.jl:46\ntest set:\
    \ Error During Test at /tmp/tmplqdpqqzz.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplqdpqqzz.jl:35\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqdpqqzz.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqdpqqzz.jl:46\ntest set:\
    \ Error During Test at /tmp/tmplqdpqqzz.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplqdpqqzz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqdpqqzz.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqdpqqzz.jl:46\ntest set:\
    \ Error During Test at /tmp/tmplqdpqqzz.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([0]) == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_s"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqdpqqzz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    max_negative = -Inf\n    min_positive = Inf\n    for\
    \ i in lst\n        if i < 0\n            if i > max_negative\n              \
    \  max_negative = i\n            end\n        elseif i > 0\n            if i <\
    \ min_positive\n                min_positive = i\n            end\n        end\n\
    \    end\n    if min_positive == Inf\n        min_positive = nothing\n    end\n\
    \    if max_negative == -Inf\n        max_negative = nothing\n    end\n    return\
    \ (max_negative, min_positive)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    len = length(lst)\n    if len == 0\n\
    \        return (nothing, nothing)\n    end\n    negative_largest = nothing\n\
    \    positive_smallest = nothing\n    for number in lst\n        if number < 0\n\
    \            if negative_largest == nothing\n                negative_largest\
    \ = number\n            elseif number > negative_largest\n                negative_largest\
    \ = number\n            end\n        elseif number > 0\n            if positive_smallest\
    \ == nothing\n                positive_smallest = number\n            elseif number\
    \ < positive_smallest\n                positive_smallest = number\n          \
    \  end\n        end\n    end\n    return (negative_largest, positive_smallest)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negatives = filter(x -> x < 0, lst)\n\
    \    positives = filter(x -> x > 0, lst)\n    if isempty(negatives)\n        largest_neg\
    \ = nothing\n    else\n        largest_neg = maximum(negatives)\n    end\n   \
    \ if isempty(positives)\n        smallest_pos = nothing\n    else\n        smallest_pos\
    \ = minimum(positives)\n    end\n    return (largest_neg, smallest_pos)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive_integers = Int64[]\n    negative_integers\
    \ = Int64[]\n    for i = 1:length(lst)\n        if lst[i] < 0\n            push!(negative_integers,\
    \ lst[i])\n        elseif lst[i] > 0\n            push!(positive_integers, lst[i])\n\
    \        end\n    end\n    if length(negative_integers) == 0\n        negative_integers\
    \ = nothing\n    else\n        negative_integers = maximum(negative_integers)\n\
    \    end\n    if length(positive_integers) == 0\n        positive_integers = nothing\n\
    \    else\n        positive_integers = minimum(positive_integers)\n    end\n \
    \   return negative_integers, positive_integers\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # Create variables to store the smallest\
    \ positive and\n    # largest negative numbers.\n    smallest_positive = nothing\n\
    \    largest_negative = nothing\n    \n    # Loop through all the integers in\
    \ the list\n    for i in lst\n        # If the integer is positive, compare it\
    \ to the\n        # smallest positive integer we've seen.\n        if i > 0\n\
    \            if smallest_positive == nothing || i < smallest_positive\n      \
    \          smallest_positive = i\n            end\n        # Else, compare it\
    \ to the largest negative integer\n        # we've seen.\n        elseif i < 0\n\
    \            if largest_negative == nothing || i > largest_negative\n        \
    \        largest_negative = i\n            end\n        end\n    end\n    \n \
    \   # Return the largest negative integer and smallest\n    # positive integer.\n\
    \    return (largest_negative, smallest_positive)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_int = nothing\n    positive_int\
    \ = nothing\n    for i in lst\n        if i < 0 && negative_int == nothing\n \
    \           negative_int = i\n        elseif i < 0 && negative_int != nothing\n\
    \            negative_int = max(negative_int, i)\n        elseif i > 0 && positive_int\
    \ == nothing\n            positive_int = i\n        elseif i > 0 && positive_int\
    \ != nothing\n            positive_int = min(positive_int, i)\n        end\n \
    \   end\n    return negative_int, positive_int\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst = vcat(lst, [0])\n    a, b = sort(lst)[end],\
    \ sort(lst)[2]\n    if b < 0\n        return (b, None)\n    elseif a > 0\n   \
    \     return (None, a)\n    elseif a > 0 && b < 0\n        return (b, a)\n   \
    \ else\n        return (None, None)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfp4ia2fb.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfp4ia2fb.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp4ia2fb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp4ia2fb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfp4ia2fb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfp4ia2fb.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp4ia2fb.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp4ia2fb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfp4ia2fb.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfp4ia2fb.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfp4ia2fb.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfp4ia2fb.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfp4ia2fb.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] largest"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfp4ia2fb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n  neg, pos = Nothing, Nothing\n  for i in\
    \ lst\n    if i < 0\n      neg = i\n    elseif i > 0\n      pos = i\n    end\n\
    \  end\n  return neg, pos\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2opvkdop.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\\n \
    \ MethodError: Cannot `convert` an object of type Type{Nothing} to an object of\
    \ type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\\n     @ Base ./some.jl:36\\n   [2] cvt1\\n     @ ./essentials.jl:343\
    \ [inlined]\\n   [3] ntuple\\n     @ ./ntuple.jl:49 [inlined]\\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\\n     @ Base ./essentials.jl:344\\\
    n   [5] largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmp2opvkdop.jl:21\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp2opvkdop.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp2opvkdop.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp2opvkdop.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twice"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive = lst[lst .> 0]\n    negative = lst[lst .< 0]\n\
    \    return (maximum(negative), minimum(positive))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwxrfk65v.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpwxrfk65v.jl:18\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpwxrfk65v.jl:25 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpwxrfk65v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwxrfk65v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwxrfk65v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive_minimum = findmin(filter(x ->\
    \ x >= 0, lst))[1]\n    negative_maximum = findmax(filter(x -> x < 0, lst))[1]\n\
    \    (negative_maximum, positive_minimum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8px86fy.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] largest_smallest_integers(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpu8px86fy.jl:14\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpu8px86fy.jl:22 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpu8px86fy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpu8px86fy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8px86fy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    return (maximum(lst), minimum(lst))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpilk_kf3h.jl:20\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilk_kf3h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilk_kf3h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpilk_kf3h.jl:21\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilk_kf3h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilk_kf3h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpilk_kf3h.jl:22\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilk_kf3h.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilk_kf3h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpilk_kf3h.jl:23\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilk_kf3h.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilk_kf3h.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpilk_kf3h.jl:24\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evalua"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpilk_kf3h.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    nneg = length(lst[lst.<0])\n    npos\
    \ = length(lst[lst.>0])\n    if nneg > 0\n        a = maximum(lst[lst.<0])\n \
    \   else\n        a = nothing\n    end\n    if npos > 0\n        b = minimum(lst[lst.>0])\n\
    \    else\n        b = nothing\n    end\n    return (a, b)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = []\n    b = []\n    for i in lst\n\
    \        if i > 0\n            push!(b, i)\n        elseif i < 0\n           \
    \ push!(a, i)\n        end\n    end\n    if length(a) > 0 && length(b) > 0\n \
    \       return (maximum(a), minimum(b))\n    else\n        return (nothing, nothing)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8398kqwq.jl:33\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398kqwq.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398kqwq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8398kqwq.jl:34\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398kqwq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398kqwq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8398kqwq.jl:40\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398kqwq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398kqwq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8398kqwq.jl:41\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8398kqwq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8398kqwq.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7    "
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8398kqwq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive = nothing\n    negative = nothing\n    for i\
    \ in lst\n        if i < 0 && (negative == nothing || i > negative)\n        \
    \    negative = i\n        end\n        if i > 0 && (positive == nothing || i\
    \ < positive)\n            positive = i\n        end\n    end\n    return (negative,\
    \ positive)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = Int64[]\n    pos = Int64[]\n  \
    \  for x in lst\n        if x > 0\n            push!(pos, x)\n        elseif x\
    \ < 0\n            push!(neg, x)\n        end\n    end\n    return (reduce(max,\
    \ neg, typemax(Int64)), reduce(min, pos, typemin(Int64)))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6tnxcdqz.jl:29\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching reduce(::typeof(max), ::Vector{Int64}, ::Int64)\n  Closest candidates\
    \ are:\n    reduce(::Any, ::AbstractArray; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:371\n\
    \    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp6tnxcdqz.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6tnxcdqz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6tnxcdqz.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6tnxcdqz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ reduce(::typeof(max), ::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    reduce(::Any, ::AbstractArray; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reducedim.jl:371\n\
    \    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp6tnxcdqz.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6tnxcdqz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6tnxcdqz.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp6tnxcdqz.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tnxcdqz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    m = maximum(lst)\n    l = minimum(lst)\n\
    \    @assert m>0 && l<0 \"No positive or negative integers\"\n    return l, m\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfm3p07om.jl:23\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  AssertionError:\
    \ No positive or negative integers\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfm3p07om.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfm3p07om.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfm3p07om.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpfm3p07om.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  AssertionError: No positive\
    \ or negative integers\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpfm3p07om.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfm3p07om.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfm3p07om.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpfm3p07om.jl:25\n  Expression: candidate([1, 3, 2, 4,\
    \ 5, 6, -2]) == (-2, 1)\n   Evaluated: (-2, 6) == (-2, 1)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm3p07om.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfm3p07om.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpfm3p07om.jl:26\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (-7, 7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfm3p0"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm3p07om.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg_largest = neg_smallest = pos_largest\
    \ = pos_smallest = nothing\n    for x in lst\n        isneg(x) && x < neg_largest\
    \ && (neg_largest = x)\n        isneg(x) && (neg_smallest == nothing || x > neg_smallest)\
    \ && (neg_smallest = x)\n        ispos(x) && x > pos_largest && (pos_largest =\
    \ x)\n        ispos(x) && (pos_smallest == nothing || x < pos_smallest) && (pos_smallest\
    \ = x)\n    end\n    return neg_largest, pos_smallest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2_53bc38.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ isneg not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp2_53bc38.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_53bc38.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_53bc38.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2_53bc38.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: isneg not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp2_53bc38.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_53bc38.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_53bc38.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2_53bc38.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: isneg not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2_53bc38.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_53bc38.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_53bc38.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2_53bc38.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: isneg not defined\n\
    \  Stacktrace:\n   [1] lar"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_53bc38.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_min = nothing\n    neg_max = nothing\n\
    \    for i in lst\n        if i > 0\n            if pos_min == nothing || i <\
    \ pos_min\n                pos_min = i\n            end\n        elseif i < 0\n\
    \            if neg_max == nothing || i > neg_max\n                neg_max = i\n\
    \            end\n        end\n    end\n    return neg_max, pos_min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    n_lst = lst[lst .< 0]\n    if !isempty(n_lst)\n\
    \        n_lst = maximum(n_lst)\n    else\n        n_lst = nothing\n    end\n\
    \    p_lst = lst[lst .> 0]\n    if !isempty(p_lst)\n        p_lst = minimum(p_lst)\n\
    \    else\n        p_lst = nothing\n    end\n    return (n_lst, p_lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    max_neg, min_pos = nothing, nothing\n\
    \    for i in lst\n        if i < 0 && isnothing(max_neg)\n            max_neg\
    \ = i\n        elseif i < 0 && max_neg < i\n            max_neg = i\n        elseif\
    \ i > 0 && isnothing(min_pos)\n            min_pos = i\n        elseif i > 0 &&\
    \ min_pos > i\n            min_pos = i\n        end\n    end\n    return max_neg,\
    \ min_pos\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    negatives = [x for x in lst if x < 0]\n    positives\
    \ = [x for x in lst if x > 0]\n    negatives_length = length(negatives)\n    positives_length\
    \ = length(positives)\n    if negatives_length == 0\n        a = nothing\n   \
    \ else\n        a = maximum(negatives)\n    end\n    if positives_length == 0\n\
    \        b = nothing\n    else\n        b = minimum(positives)\n    end\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n  \"\"\"\n  Create a function that returns\
    \ a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is\
    \ the smallest\n  of positive integers in a list.\n  If there is no negative or\
    \ positive integers, return them as None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvorprct2.jl:1\nin expression starting at /tmp/tmpvorprct2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_lst = filter(x -> x > 0, lst)\n \
    \   neg_lst = filter(x -> x < 0, lst)\n    if length(pos_lst) == 0\n        pos_lst\
    \ = None\n    else\n        pos_lst = minimum(pos_lst)\n    end\n    if length(neg_lst)\
    \ == 0\n        neg_lst = None\n    else\n        neg_lst = maximum(neg_lst)\n\
    \    end\n    return (neg_lst, pos_lst)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuu2bz87f.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuu2bz87f.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuu2bz87f.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuu2bz87f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuu2bz87f.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuu2bz87f.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuu2bz87f.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuu2bz87f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuu2bz87f.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuu2bz87f.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuu2bz87f.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuu2bz87f.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuu2bz87f.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([0]) == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_s"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuu2bz87f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n  n_pos = n_neg = 0\n  pos_max = neg_min\
    \ = 0\n  for item in lst\n    if item > 0\n      if n_pos == 0\n        pos_max\
    \ = item\n      elseif item > pos_max\n        pos_max = item\n      end\n   \
    \   n_pos += 1\n    elseif item < 0\n      if n_neg == 0\n        neg_min = item\n\
    \      elseif item < neg_min\n        neg_min = item\n      end\n      n_neg +=\
    \ 1\n    end\n  end\n  if n_pos == 0\n    pos_max = nothing\n  end\n  if n_neg\
    \ == 0\n    neg_min = nothing\n  end\n  return neg_min, pos_max\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7hvymbjj.jl:45\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, 7) == (nothing, 1)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hvymbjj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hvymbjj.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp7hvymbjj.jl:46\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, 7) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hvymbjj.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hvymbjj.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp7hvymbjj.jl:47\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (-2, 6) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hvymbjj.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hvymbjj.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp7hvymbjj.jl:48\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (-7, 7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hvymbjj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hvymbjj.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp7hvymbjj.jl:49\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hvymbjj.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive = Int[]\n    negative = Int[]\n\
    \    for i in lst\n        if i < 0\n            push!(negative, i)\n        elseif\
    \ i > 0\n            push!(positive, i)\n        end\n    end\n    if isempty(positive)\
    \ || isempty(negative)\n        return (nothing, nothing)\n    else\n        return\
    \ (maximum(negative), minimum(positive))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjdr9dnm1.jl:33\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdr9dnm1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdr9dnm1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjdr9dnm1.jl:34\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdr9dnm1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdr9dnm1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjdr9dnm1.jl:40\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdr9dnm1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdr9dnm1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpjdr9dnm1.jl:41\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdr9dnm1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdr9dnm1.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7    "
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdr9dnm1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positives = []\n    negatives = []\n\
    \    for i in lst\n        if i >= 0\n            push!(positives, i)\n      \
    \  else\n            push!(negatives, i)\n        end\n    end\n    a = maximum(negatives)\n\
    \    b = minimum(positives)\n    if isempty(negatives)\n        a = nothing\n\
    \    end\n    if isempty(positives)\n        b = nothing\n    end\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg1ibu4i1.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Any})\n      @ Base ./reduce.jl:331\n    [5] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Any}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce(f::typeof(identity), op::typeof(max), #unused#::IndexLinear,\
    \ A::Vector{Any})\n      @ Base ./reduce.jl:402\n    [8] _mapreduce_dim\n    \
    \  @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpg1ibu4i1.jl:22\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpg1ibu4i1.jl:37 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpg1ibu4i1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg1ibu4i1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1ibu4i1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst)==0\n        return (nothing,\
    \ nothing)\n    end\n    pos_lst = Int64[]\n    neg_lst = Int64[]\n    for i in\
    \ lst\n        if i > 0\n            push!(pos_lst, i)\n        elseif i < 0\n\
    \            push!(neg_lst, i)\n        end\n    end\n    if length(pos_lst) ==\
    \ 0\n        pos_lst = nothing\n    else\n        pos_lst = minimum(pos_lst)\n\
    \    end\n    if length(neg_lst) == 0\n        neg_lst = nothing\n    else\n \
    \       neg_lst = maximum(neg_lst)\n    end\n    return (neg_lst, pos_lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    max_neg = nothing\n    min_pos = nothing\n\
    \    for i in lst\n        if i < 0\n            max_neg = i > max_neg ? i : max_neg\n\
    \        elseif i > 0\n            min_pos = i < min_pos ? i : min_pos\n     \
    \   end\n    end\n    return (max_neg, min_pos)\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5j964f08.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmp5j964f08.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5j964f08.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5j964f08.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5j964f08.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmp5j964f08.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5j964f08.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5j964f08.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a, b = Nothing, Nothing\n    for x in\
    \ lst\n        if x < 0\n            if a === Nothing || x > a\n             \
    \   a = x\n            end\n        elseif x > 0\n            if b === Nothing\
    \ || x < b\n                b = x\n            end\n        end\n    end\n   \
    \ return a, b\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9jcfjey.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpe9jcfjey.jl:25\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpe9jcfjey.jl:32 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpe9jcfjey.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpe9jcfjey.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9jcfjey.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    l = filter(x -> x < 0, lst)\n    if l\
    \ == []\n        a = nothing\n    else\n        a = maximum(l)\n    end\n    l\
    \ = filter(x -> x > 0, lst)\n    if l == []\n        b = nothing\n    else\n \
    \       b = minimum(l)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \"\"\"\n    >>> largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None,\
    \ None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n\
    \    pos_lst = filter(x -> x > 0, lst)\n    neg_lst = filter(x -> x < 0, lst)\n\
    \    if isempty(pos_lst)\n        pos_min = nothing\n    else\n        pos_min\
    \ = minimum(pos_lst)\n    end\n    if isempty(neg_lst)\n        neg_max = nothing\n\
    \    else\n        neg_max = maximum(neg_lst)\n    end\n    return neg_max, pos_min\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos = [i for i in lst if i > 0]\n   \
    \ neg = [i for i in lst if i < 0]\n    return (maximum(neg), minimum(pos))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc7qga24p.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpc7qga24p.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpc7qga24p.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpc7qga24p.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpc7qga24p.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7qga24p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    result = (nothing, nothing)\n    if length(lst)\
    \ != 0\n        for i in lst\n            if i < 0\n                if result[1]\
    \ == nothing\n                    result[1] = i\n                elseif i > result[1]\n\
    \                    result[1] = i\n                end\n            elseif i\
    \ > 0\n                if result[2] == nothing\n                    result[2]\
    \ = i\n                elseif i < result[2]\n                    result[2] = i\n\
    \                end\n            end\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcojrkd7w.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpcojrkd7w.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcojrkd7w.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcojrkd7w.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpcojrkd7w.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpcojrkd7w.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcojrkd7w.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcojrkd7w.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpcojrkd7w.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  MethodError: no method matching\
    \ setindex!(::Tuple{Nothing, Nothing}, ::Int64, ::Int64)\n  Stacktrace:\n   [1]\
    \ largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpcojrkd7w.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcojrkd7w.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcojrkd7w.jl:37\ntest set:\
    \ Error During Test at /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcojrkd7w.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative = []\n    positive = []\n  \
    \  for i in lst\n        if i > 0\n            push!(positive, i)\n        elseif\
    \ i < 0\n            push!(negative, i)\n        end\n    end\n    if length(positive)\
    \ != 0\n        b = minimum(positive)\n    else\n        b = nothing\n    end\n\
    \    if length(negative) != 0\n        a = maximum(negative)\n    else\n     \
    \   a = nothing\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos = Vector{Int64}()\n    neg = Vector{Int64}()\n\
    \    for elem in lst\n        if elem > 0\n            push!(pos, elem)\n    \
    \    elseif elem < 0\n            push!(neg, elem)\n        end\n    end\n   \
    \ b = nothing\n    a = nothing\n    if length(pos) > 0\n        b = minimum(pos)\n\
    \    end\n    if length(neg) > 0\n        a = maximum(neg)\n    end\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst = filter(x -> x < 0 || x > 0, lst)\n\
    \    if isempty(lst)\n        return (nothing, nothing)\n    end\n    return (reduce(max,\
    \ lst), reduce(min, lst))\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmuy6h12.jl:24\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplmuy6h12.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplmuy6h12.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmuy6h12.jl:25\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 1) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplmuy6h12.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplmuy6h12.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmuy6h12.jl:26\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplmuy6h12.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplmuy6h12.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmuy6h12.jl:27\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplmuy6h12.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplmuy6h12.jl:23\ntest set: Test\
    \ Failed at /tmp/tmplmuy6h12.jl:28\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evalua"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmuy6h12.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    negative = []\n    positive = []\n    for i = 1:length(lst)\n\
    \        if lst[i] > 0\n            push!(positive, lst[i])\n        elseif lst[i]\
    \ < 0\n            push!(negative, lst[i])\n        end\n    end\n    if length(negative)\
    \ == 0\n        a = nothing\n    else\n        a = maximum(negative)\n    end\n\
    \    if length(positive) == 0\n        b = nothing\n    else\n        b = minimum(positive)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # if lst is empty\n    if isempty(lst)\n\
    \        return (nothing, nothing)\n    end\n    # find the negative integers\
    \ \n    neg_ints = filter(x -> x < 0, lst)\n    # find the positive integers\n\
    \    pos_ints = filter(x -> x > 0, lst)\n    # return a tuple (a, b) where 'a'\
    \ is the largest of negative \n    # integers, and 'b' is the smallest of positive\
    \ integers in a list\n    if isempty(neg_ints) && isempty(pos_ints)\n        return\
    \ (nothing, nothing)\n    elseif isempty(neg_ints) && !isempty(pos_ints)\n   \
    \     return (nothing, minimum(pos_ints))\n    elseif !isempty(neg_ints) && isempty(pos_ints)\n\
    \        return (maximum(neg_ints), nothing)\n    else\n        return (maximum(neg_ints),\
    \ minimum(pos_ints))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive_ints = []\n    negative_ints\
    \ = []\n    for (i,x) in enumerate(lst)\n        if x >= 0\n            push!(positive_ints,\
    \ x)\n        else\n            push!(negative_ints, x)\n        end\n    end\n\
    \    #println(negative_ints)\n    #println(positive_ints)\n    if !isempty(negative_ints)\n\
    \        max_neg = maximum(negative_ints)\n    else\n        max_neg = nothing\n\
    \    end\n    if !isempty(positive_ints)\n        min_pos = minimum(positive_ints)\n\
    \    else\n        min_pos = nothing\n    end\n    return max_neg, min_pos\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxp1cw88w.jl:42\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, 0) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxp1cw88w.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxp1cw88w.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxp1cw88w.jl:47\n  Expression: candidate([0]) == (nothing,\
    \ nothing)\n   Evaluated: (nothing, 0) == (nothing, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxp1cw88w.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxp1cw88w.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpxp1cw88w.jl:49\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (-1, 0) == (-1, nothing)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxp1cw88w.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxp1cw88w.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxp1cw88w.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    \"\"\"\n    Create a function that returns\
    \ a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b'\
    \ is the smallest\n    of positive integers in a list.\n    If there is no negative\
    \ or positive integers, return them as None.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16jwnmh3.jl:1\nin expression starting at /tmp/tmp16jwnmh3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = 0\n    b = 0\n    for i in lst\n\
    \        if i &lt; 0\n            if i &gt; a\n                a = i\n       \
    \     end\n        elseif i &gt; 0\n            if i &lt; b\n                b\
    \ = i\n            end\n        end\n    end\n    return (a, b)\nend\n</code>\n\
    I checked my code using these cases:\n<code>@testset \"Largest and smallest integers\"\
    \ begin\n    @test largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1)\n    @test largest_smallest_integers([]) == (nothing, nothing)\n    @test\
    \ largest_smallest_integers([0]) == (nothing, nothing)\n    @test largest_smallest_integers([-1,\
    \ -5, -7, 4, 5, -5]) == (-7, 4)\n    @test largest_smallest_integers([-3, -5,\
    \ -2, 1, 2, 3]) == (-2, 1)\nend\n</code>\nAnd the code passed them all. However,\
    \ for some reason, it still says that I failed the test.\nI wonder if I am missing\
    \ something or if the test is broken.\nCan anyone help? Thank you!\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4s_hz_d.jl:28\nin expression starting at\
    \ /tmp/tmpt4s_hz_d.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code here\nend\n@testset \"exercise\
    \ 12\" begin\n    @test largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n    @test largest_smallest_integers([]) == (None, None)\n    @test largest_smallest_integers([0])\
    \ == (None, None)\nend\n \n \n \n \n\"\"\"\n    Create a function that takes in\
    \ a sentence and returns\n    the number of letters and digits in it.\n    Examples:\n\
    \    count_letters_digits(\"Python is fun:)\") == (9, 2)\n    count_letters_digits(\"\
    12345\") == (0, 5)\n    count_letters_digits(\"\") == (0, 0)\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmppps5tqwp.jl:15\nin expression starting at /tmp/tmppps5tqwp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_vector = []\n    neg_vector = []\n\
    \    for i in lst\n        if i > 0\n            push!(pos_vector, i)\n      \
    \  elseif i < 0\n            push!(neg_vector, i)\n        end\n    end\n    if\
    \ length(pos_vector) == 0\n        pos_num = nothing\n    else\n        pos_num\
    \ = minimum(pos_vector)\n    end\n    if length(neg_vector) == 0\n        neg_num\
    \ = nothing\n    else\n        neg_num = maximum(neg_vector)\n    end\n    return\
    \ (neg_num, pos_num)\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_nums = [num for num in lst if num\
    \ > 0]\n    neg_nums = [num for num in lst if num < 0]\n    largest_neg = maximum(neg_nums)\n\
    \    smallest_pos = minimum(pos_nums)\n    return (largest_neg, smallest_pos)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpthcxuu43.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpthcxuu43.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpthcxuu43.jl:24 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpthcxuu43.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpthcxuu43.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthcxuu43.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    a = Int64[]\n    b = Int64[]\n    for i = 1:length(lst)\n\
    \        if lst[i] < 0\n            push!(a, lst[i])\n        elseif lst[i] >\
    \ 0\n            push!(b, lst[i])\n        end\n    end\n    if length(a) == 0\n\
    \        a = nothing\n    else\n        a = maximum(a)\n    end\n    if length(b)\
    \ == 0\n        b = nothing\n    else\n        b = minimum(b)\n    end\n    return\
    \ (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0 && b == nothing\n            b = i\n        elseif\
    \ i > 0 && b != nothing\n            b = min(b, i)\n        elseif i < 0 && a\
    \ == nothing\n            a = i\n        elseif i < 0 && a != nothing\n      \
    \      a = max(a, i)\n        end\n    end\n    return (a, b)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    negative_ls = []\n    positive_ls = []\n    for (i, val)\
    \ in enumerate(lst)\n        if val > 0\n            push!(positive_ls, val)\n\
    \        elseif val < 0\n            push!(negative_ls, val)\n        end\n  \
    \  end\n    if isempty(negative_ls)\n        largest_negative = nothing\n    else\n\
    \        largest_negative = maximum(negative_ls)\n    end\n    if isempty(positive_ls)\n\
    \        smallest_positive = nothing\n    else\n        smallest_positive = minimum(positive_ls)\n\
    \    end\n    return (largest_negative, smallest_positive)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst)==0\n        return (nothing,\
    \ nothing)\n    end\n    neg,pos = nothing,nothing\n    for i in lst\n       \
    \ if i<0 && (neg==nothing || i>neg)\n            neg = i\n        elseif i>0 &&\
    \ (pos==nothing || i<pos)\n            pos = i\n        end\n    end\n    return\
    \ (neg,pos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if size(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    max_neg = nothing\n    min_pos = nothing\n    for i in\
    \ lst\n        if i > 0\n            if i < min_pos || isnothing(min_pos)\n  \
    \              min_pos = i\n            end\n        elseif i < 0\n          \
    \  if i > max_neg || isnothing(max_neg)\n                max_neg = i\n       \
    \     end\n        end\n    end\n    return (max_neg, min_pos)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpry5abulz.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpry5abulz.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpry5abulz.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpry5abulz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpry5abulz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Nothing)\n     @ Base ./operators.jl:352\n\
    \   [2] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpry5abulz.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpry5abulz.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpry5abulz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative = Int64[]\n    positive = Int64[]\n\
    \    for i in lst\n        if i < 0\n            push!(negative, i)\n        elseif\
    \ i > 0\n            push!(positive, i)\n        end\n    end\n    if negative\
    \ == Int64[]\n        negative = nothing\n    else\n        negative = maximum(negative)\n\
    \    end\n    if positive == Int64[]\n        positive = nothing\n    else\n \
    \       positive = minimum(positive)\n    end\n    return negative, positive\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    l = length(lst)\n    if l == 0\n    \
    \    return (nothing, nothing)\n    end\n    a = lst[1]\n    if lst[1] >= 0\n\
    \        b = lst[1]\n    else\n        b = nothing\n    end\n    for x in lst\n\
    \        if x < 0 && x > a\n            a = x\n        end\n        if x >= 0\
    \ && x < b\n            b = x\n        end\n    end\n    return (a, b)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbw4_c172.jl:38\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (2, 1) == (nothing, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbw4_c172.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbw4_c172.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpbw4_c172.jl:39\\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\\n   Evaluated: (2, 0) == (nothing, 1)\\nStacktrace:\\n\
    \ [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbw4_c172.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbw4_c172.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpbw4_c172.jl:40\\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\\n   Evaluated: (1, 1) == (-2, 1)\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbw4_c172.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbw4_c172.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpbw4_c172.jl:41\\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\\n   Evaluated: (4, 2) == (-7, 2)\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbw4_c172.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbw4_c172.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpbw4_c172.jl:42\\n  Expression: candidat"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) != 0\n        a = maximum(lst)\n\
    \        b = minimum(lst)\n        return a, b\n    else \n        return nothing,\
    \ nothing\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfjgkatia.jl:26\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, 1) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjgkatia.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjgkatia.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfjgkatia.jl:27\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 0) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjgkatia.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjgkatia.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfjgkatia.jl:28\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, -2) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjgkatia.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjgkatia.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfjgkatia.jl:29\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, -7) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjgkatia.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjgkatia.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfjgkatia.jl:30\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evalua"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjgkatia.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst) \n        return (nothing,\
    \ nothing)\n    end\n    max_n = findmax(lst)\n    min_p = findmin(lst)\n    a\
    \ = if max_n[1] < 0 max_n[1] else nothing end\n    b = if min_p[1] > 0 min_p[1]\
    \ else nothing end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq2utmi00.jl:28\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq2utmi00.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq2utmi00.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq2utmi00.jl:29\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (nothing, nothing) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq2utmi00.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq2utmi00.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq2utmi00.jl:30\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (nothing, nothing) == (-7, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq2utmi00.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq2utmi00.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq2utmi00.jl:31\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (nothing, nothing) == (-9, 2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq2utmi00.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq2utmi00.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpq2utmi00.jl:35\n  Expression: candidate([-1,"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq2utmi00.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    max_neg = maximum(lst[lst .< 0])\n  \
    \  min_pos = minimum(lst[lst .> 0])\n    return (max_neg, min_pos)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpydzgoxwy.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpydzgoxwy.jl:13\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpydzgoxwy.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpydzgoxwy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpydzgoxwy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydzgoxwy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    return ()\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpevap9o4s.jl:20\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type \n    Tuple{} to an object of type \n    Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ ::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] _tuple_error(T::Type, x::Tuple{})\n     @ Base\
    \ ./essentials.jl:334\n   [2] convert(#unused#::Type{Tuple{Union{Nothing, Int64},\
    \ Union{Nothing, Int64}}}, x::Tuple{})\n     @ Base ./essentials.jl:341\n   [3]\
    \ largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpevap9o4s.jl:13\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpevap9o4s.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpevap9o4s.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpevap9o4s.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type \n    Tuple{} to an object of type \n    Tuple{Union{Nothing,\
    \ Int64},Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ ::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n\
    \    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevap9o4s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b === nothing\n                b\
    \ = i\n            elseif i < b\n                b = i\n            end\n    \
    \    elseif i < 0\n            if a === nothing\n                a = i\n     \
    \       elseif i > a\n                a = i\n            end\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive_integers = [x for x in lst if\
    \ x > 0]\n    negative_integers = [x for x in lst if x < 0]\n    if isempty(positive_integers)\
    \ || isempty(negative_integers)\n        return (nothing, nothing)\n    else\n\
    \        return (maximum(negative_integers), minimum(positive_integers))\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplva1cg9h.jl:26\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing,\
    \ 1)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplva1cg9h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplva1cg9h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplva1cg9h.jl:27\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (nothing, nothing) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplva1cg9h.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplva1cg9h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplva1cg9h.jl:33\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplva1cg9h.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplva1cg9h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmplva1cg9h.jl:34\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluated: (nothing, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplva1cg9h.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplva1cg9h.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7    "
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplva1cg9h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    n=length(lst)\n    negatives=[]\n   \
    \ positives=[]\n    for i=1:n\n        if lst[i]<0\n            push!(negatives,lst[i])\n\
    \        elseif lst[i]>0\n            push!(positives,lst[i])\n        end\n \
    \   end\n    if length(negatives)==0\n        a=nothing\n    else\n        a=maximum(negatives)\n\
    \    end\n    if length(positives)==0\n        b=nothing\n    else\n        b=minimum(positives)\n\
    \    end\n    return (a,b)\nend\nprintln(largest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7]))\nprintln(largest_smallest_integers([]))\nprintln(largest_smallest_integers([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "(nothing, 1)\n"
  stderr: "ERROR: LoadError: MethodError: no method matching largest_smallest_integers(::Vector{Any})\n\
    Closest candidates are:\n  largest_smallest_integers(!Matched::Vector{Int64})\
    \ at /tmp/tmp5iv2_lv1.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5iv2_lv1.jl:36\n\
    in expression starting at /tmp/tmp5iv2_lv1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = nothing\n    for item in lst\n\
    \        if item > 0\n            if !(b == nothing)\n                if item\
    \ < b\n                    b = item\n                end\n            else\n \
    \               b = item\n            end\n        elseif item < 0\n         \
    \   if !(a == nothing)\n                if item > a\n                    a = item\n\
    \                end\n            else\n                a = item\n           \
    \ end\n        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst_pos = filter(x -> x > 0, lst)\n \
    \   lst_neg = filter(x -> x < 0, lst)\n    if !isempty(lst_pos)\n        small\
    \ = minimum(lst_pos)\n    else\n        small = nothing\n    end\n    if !isempty(lst_neg)\n\
    \        large = maximum(lst_neg)\n    else\n        large = nothing\n    end\n\
    \    return large, small\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # YOUR CODE HERE\n    if length(lst)\
    \ == 0\n        return (nothing, nothing)\n    end\n    #  println(lst)\n    negative_list\
    \ = [x for x in lst if x < 0]\n    positive_list = [x for x in lst if x > 0]\n\
    \    if length(negative_list) == 0\n        return (nothing, minimum(positive_list))\n\
    \    end\n    if length(positive_list) == 0\n        return (maximum(negative_list),\
    \ nothing)\n    end\n    return (maximum(negative_list), minimum(positive_list))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsbg4t6nf.jl:39\n  Test threw exception\n\
    \  Expression: candidate([0]) == (nothing, nothing)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmpsbg4t6nf.jl:21\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpsbg4t6nf.jl:39 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpsbg4t6nf.jl:32\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |   10      1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbg4t6nf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    pos_lst = filter(i -> i > 0, lst)\n    neg_lst = filter(i\
    \ -> i < 0, lst)\n    if length(pos_lst) == 0 || length(neg_lst) == 0\n      \
    \  return (None, None)\n    end\n    return (maximum(neg_lst), minimum(pos_lst))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbj27vbg5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpbj27vbg5.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbj27vbg5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj27vbg5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbj27vbg5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpbj27vbg5.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbj27vbg5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj27vbg5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbj27vbg5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpbj27vbg5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbj27vbg5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbj27vbg5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbj27vbg5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([0]) == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_s"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbj27vbg5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_min = nothing\n    neg_max = nothing\n\
    \    for i in lst\n        if i > 0 && isnothing(pos_min)\n            pos_min\
    \ = i\n        elseif i > 0 && i < pos_min\n            pos_min = i\n        elseif\
    \ i < 0 && isnothing(neg_max)\n            neg_max = i\n        elseif i < 0 &&\
    \ i > neg_max\n            neg_max = i\n        end\n    end\n    return neg_max,\
    \ pos_min\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive = []\n    negative = []\n  \
    \  for i in lst\n        if i > 0\n            push!(positive, i)\n        elseif\
    \ i < 0\n            push!(negative, i)\n        end\n    end\n    positive =\
    \ sort(positive)\n    negative = sort(negative, rev=true)\n    if !isempty(positive)\n\
    \        smallest = positive[1]\n    else\n        smallest = nothing\n    end\n\
    \    if !isempty(negative)\n        largest = negative[1]\n    else\n        largest\
    \ = nothing\n    end\n    return largest, smallest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 return (nothing,\
    \ nothing) end\n    min_positive = nothing\n    max_negative = nothing\n    for\
    \ el in lst\n        if el > 0\n            if min_positive == nothing\n     \
    \           min_positive = el\n            elseif el < min_positive\n        \
    \        min_positive = el\n            end\n        elseif el < 0\n         \
    \   if max_negative == nothing\n                max_negative = el\n          \
    \  elseif el > max_negative\n                max_negative = el\n            end\n\
    \        end\n    end\n    return (max_negative, min_positive)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative = -Inf \n    positive = Inf\n\
    \    for i in lst\n        if i > 0\n            if i < positive\n           \
    \     positive = i\n            end\n        elseif i < 0\n            if i >\
    \ negative\n                negative = i\n            end\n        end\n    end\n\
    \    negative == -Inf ? negative = nothing : negative = negative\n    positive\
    \ == Inf ? positive = nothing : positive = positive\n    return negative, positive\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative = findmax(filter(x -> x < 0,\
    \ lst))[1]\n    positive = findmin(filter(x -> x > 0, lst))[1]\n    (negative,\
    \ positive)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptbkyyvpj.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n      @ ./reduce.jl:357\
    \ [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356 [inlined]\n  \
    \  [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n \
    \     @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] findmax\n\
    \      @ ./reduce.jl:803 [inlined]\n   [11] _findmax\n      @ ./reduce.jl:829\
    \ [inlined]\n   [12] #findmax#785\n      @ ./reducedim.jl:1052 [inlined]\n   [13]\
    \ findmax\n      @ ./reducedim.jl:1052 [inlined]\n   [14] largest_smallest_integers(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmptbkyyvpj.jl:13\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmptbkyyvpj.jl:22 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmptbkyyvpj.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptbkyyvpj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptbkyyvpj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos, neg = Vector{Int64}(), Vector{Int64}()\n\
    \    for x in lst\n        if x > 0\n            push!(pos, x)\n        elseif\
    \ x < 0\n            push!(neg, x)\n        end\n    end\n    (minimum(neg), minimum(pos))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8lq4etaj.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp8lq4etaj.jl:21\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp8lq4etaj.jl:28 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp8lq4etaj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8lq4etaj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lq4etaj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (None,\
    \ None)\n    end\n    x = lst[lst .< 0]\n    if isempty(x)\n        a = None\n\
    \    else\n        a = maximum(x)\n    end\n    y = lst[lst .> 0]\n    if isempty(y)\n\
    \        b = None\n    else\n        b = minimum(y)\n    end\n    return (a, b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiv07xh4x.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  UndefVarError:\
    \ None not defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpiv07xh4x.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiv07xh4x.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiv07xh4x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiv07xh4x.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpiv07xh4x.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiv07xh4x.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiv07xh4x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiv07xh4x.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == (nothing, nothing)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpiv07xh4x.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiv07xh4x.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiv07xh4x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiv07xh4x.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([0]) == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_s"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiv07xh4x.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing\n                b =\
    \ i\n            elseif i < b\n                b = i\n            end\n      \
    \  elseif i < 0\n            if a == nothing\n                a = i\n        \
    \    elseif i > a\n                a = i\n            end\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = nothing\n    for n in lst\n \
    \       if n > 0\n            if b == nothing || n < b\n                b = n\n\
    \            end\n        elseif n < 0\n            if a == nothing || n > a\n\
    \                a = n\n            end\n        end\n    end\n    return a, b\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    neg_lst = lst[lst .< 0]\n    if isempty(neg_lst)\n        a = nothing\n\
    \    else\n        a = maximum(neg_lst)\n    end\n    pos_lst = lst[lst .> 0]\n\
    \    if isempty(pos_lst)\n        b = nothing\n    else\n        b = minimum(pos_lst)\n\
    \    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive_lst = filter(ispositive, lst)\n    negative_lst\
    \ = filter(isnegative, lst)\n    if length(positive_lst) == 0\n        positive_min\
    \ = nothing\n    else\n        positive_min = minimum(positive_lst)\n    end\n\
    \    if length(negative_lst) == 0\n        negative_max = nothing\n    else\n\
    \        negative_max = maximum(negative_lst)\n    end\n    return (negative_max,\
    \ positive_min)\nend\n\"\"\"\n    Make a function that returns True if all elements\
    \ are unique,\n    otherwise False.\n    Elements are unique if no two of them\
    \ are the same.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f3q1fvt.jl:30\nin expression starting at\
    \ /tmp/tmp4f3q1fvt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg = nothing\n    pos = nothing\n  \
    \  for i in lst\n        if i < 0\n            if neg == nothing\n           \
    \     neg = i\n            elseif i > neg\n                neg = i\n         \
    \   end\n        elseif i > 0\n            if pos == nothing\n               \
    \ pos = i\n            elseif i < pos\n                pos = i\n            end\n\
    \        end\n    end\n    return neg, pos\nend\nprintln(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]))\nprintln(largest_smallest_integers([]))\nprintln(largest_smallest_integers([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "(nothing, 1)\n"
  stderr: "ERROR: LoadError: MethodError: no method matching largest_smallest_integers(::Vector{Any})\n\
    Closest candidates are:\n  largest_smallest_integers(!Matched::Vector{Int64})\
    \ at /tmp/tmp3bnd07f8.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3bnd07f8.jl:33\n\
    in expression starting at /tmp/tmp3bnd07f8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    if all(lst .== 0)\n        return (nothing, nothing)\n\
    \    end\n    smallest_positive = nothing\n    largest_negative = nothing\n  \
    \  for i in lst\n        if i > 0 && (smallest_positive == nothing || i < smallest_positive)\n\
    \            smallest_positive = i\n        end\n        if i < 0 && (largest_negative\
    \ == nothing || i > largest_negative)\n            largest_negative = i\n    \
    \    end\n    end\n    return (largest_negative, smallest_positive)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # your code\n    pos = nothing\n    neg\
    \ = nothing\n    for i in lst\n        if i < 0\n            if (neg == nothing)\
    \ || (i > neg)\n                neg = i\n            end\n        elseif i > 0\n\
    \            if (pos == nothing) || (i < pos)\n                pos = i\n     \
    \       end\n        end\n    end\n    return (neg, pos)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # 1. Filtrar por negativos y positivos\n\
    \    negatives = filter(x -> x < 0, lst)\n    positives = filter(x -> x > 0, lst)\n\
    \    \n    # 2. Obtener el mayor de negativos y el menor de positivos\n    neg_max\
    \ = if isempty(negatives)\n        nothing\n    else\n        maximum(negatives)\n\
    \    end\n    \n    pos_min = if isempty(positives)\n        nothing\n    else\n\
    \        minimum(positives)\n    end\n    \n    # 3. Devolver una tupla\n    return\
    \ (neg_max, pos_min)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    is_pos = [x>0 for x in lst]\n    is_neg\
    \ = [x<0 for x in lst]\n    if !(true in is_pos)\n        pos_min = nothing\n\
    \    else\n        pos_min = minimum([x for x in lst if x>0])\n    end\n    if\
    \ !(true in is_neg)\n        neg_max = nothing\n    else\n        neg_max = maximum([x\
    \ for x in lst if x<0])\n    end\n    return (neg_max, pos_min)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i >= 0\n            b = i if b == nothing || i < b else\
    \ b\n        else\n            a = i if a == nothing || i > a else a\n       \
    \ end\n    end\n    return (a, b)\nend\nprintln(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]))\nprintln(largest_smallest_integers([]))\nprintln(largest_smallest_integers([0]))\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdb_yg4bs.jl:17\nin expression starting at /tmp/tmpdb_yg4bs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # YOUR CODE HERE\n    if size(lst, 1)\
    \ == 0\n        return (nothing, nothing)\n    end\n    neg = nothing\n    pos\
    \ = nothing\n    for i in lst\n        if i < 0\n            if neg == nothing\n\
    \                neg = i\n            elseif i > neg\n                neg = i\n\
    \            end\n        elseif i > 0\n            if pos == nothing\n      \
    \          pos = i\n            elseif i < pos\n                pos = i\n    \
    \        end\n        end\n    end\n    return (neg, pos)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    positive = nothing\n    negative = nothing\n\
    \    for i in lst\n        if i < 0\n            if negative == nothing\n    \
    \            negative = i\n            elseif i > negative\n                negative\
    \ = i\n            end\n        elseif i > 0\n            if positive == nothing\n\
    \                positive = i\n            elseif i < positive\n             \
    \   positive = i\n            end\n        end\n    end\n    (negative, positive)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
    @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4,\
    \ 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if isempty(lst)\n        return (nothing,\
    \ nothing)\n    end\n    lst = lst[lst .!= 0]\n    if isempty(lst)\n        return\
    \ (nothing, nothing)\n    end\n    i = 1\n    for elem in lst\n        if elem\
    \ < 0\n            lst[i] = elem\n            i += 1\n        end\n    end\n \
    \   if i == 1\n        neg_lst = nothing\n    else\n        neg_lst = lst[1:i-1]\n\
    \    end\n    i = 1\n    for elem in lst\n        if elem > 0\n            lst[i]\
    \ = elem\n            i += 1\n        end\n    end\n    if i == 1\n        pos_lst\
    \ = nothing\n    else\n        pos_lst = lst[1:i-1]\n    end\n    return (neg_lst,\
    \ pos_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz1qd6ll6.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Vector{Int64})\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{Nothing, Vector{Int64}})\n     @ Base\
    \ ./essentials.jl:344\n   [5] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpz1qd6ll6.jl:44\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpz1qd6ll6.jl:51 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpz1qd6ll6.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpz1qd6ll6.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1qd6ll6.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg, pos = reverse(sort(lst))\n    return\
    \ neg[1], pos[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91eb1jno.jl:21\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\n   Evaluated: (7, 5) == (nothing, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91eb1jno.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91eb1jno.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp91eb1jno.jl:22\n  Expression: candidate([2, 4, 1, 3, 5, 7,\
    \ 0]) == (nothing, 1)\n   Evaluated: (7, 5) == (nothing, 1)\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91eb1jno.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91eb1jno.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp91eb1jno.jl:23\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ -2]) == (-2, 1)\n   Evaluated: (6, 5) == (-2, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91eb1jno.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91eb1jno.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp91eb1jno.jl:24\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, 6) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91eb1jno.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91eb1jno.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp91eb1jno.jl:25\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluate"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 9 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91eb1jno.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    lst_pos = lst[lst .> 0]\n    lst_neg\
    \ = lst[lst .< 0]\n    return (maximum(lst_neg), minimum(lst_pos))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4oit82lu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_maximum#749\n      @ ./reducedim.jl:894 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_maximum#748\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #maximum#746\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] largest_smallest_integers(lst::Vector{Int64})\n      @ Main\
    \ /tmp/tmp4oit82lu.jl:15\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp4oit82lu.jl:22 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp4oit82lu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4oit82lu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ B"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oit82lu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1 && lst[1] == 0\n        return (nothing,\
    \ nothing)\n    end\n    positive_values = findall(x -> x > 0, lst)\n    negative_values\
    \ = findall(x -> x < 0, lst)\n    if length(positive_values) > 0\n        smallest_positive\
    \ = minimum(positive_values)\n    else\n        smallest_positive = nothing\n\
    \    end\n    if length(negative_values) > 0\n        largest_negative = maximum(negative_values)\n\
    \    else\n        largest_negative = nothing\n    end\n    return (largest_negative,\
    \ smallest_positive)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmproblqi4t.jl:40\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n   Evaluated: (7, 1) == (-2, 1)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmproblqi4t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmproblqi4t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmproblqi4t.jl:41\n  Expression: candidate([4, 5, 3, 6, 2, 7,\
    \ -7]) == (-7, 2)\n   Evaluated: (7, 1) == (-7, 2)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmproblqi4t.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmproblqi4t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmproblqi4t.jl:42\n  Expression: candidate([7, 3, 8, 4, 9, 2,\
    \ 5, -9]) == (-9, 2)\n   Evaluated: (8, 1) == (-9, 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmproblqi4t.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmproblqi4t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmproblqi4t.jl:45\n  Expression: candidate([-1, -3, -5, -6])\
    \ == (-1, nothing)\n   Evaluated: (4, nothing) == (-1, nothing)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmproblqi4t.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmproblqi4t.jl:37\ntest set: Test\
    \ Failed at /tmp/tmproblqi4t.jl:46\n  Expression: candidate([-1, -3, -5, -6, 0])\
    \ == (-1, nothing)\n   Evaluate"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmproblqi4t.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    # TODO: write your code here\n    \"\"\
    \"## Solution\n    function largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n        a = nothing\n        b = nothing\n\
    \        for i in lst\n            if i > 0 && b == nothing\n                b\
    \ = i\n            elseif i > 0 && b != nothing\n                b = min(b, i)\n\
    \            elseif i < 0 && a == nothing\n                a = i\n           \
    \ elseif i < 0 && a != nothing\n                a = max(a, i)\n            end\n\
    \        end\n        return (a, b)\n    end\n    \"\"\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3jd_6bkd.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp3jd_6bkd.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jd_6bkd.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jd_6bkd.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp3jd_6bkd.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Tuple{Union{Nothing, Int64}, Union{Nothing,\
    \ Int64}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp3jd_6bkd.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jd_6bkd.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    if length(lst) == 1\n        if lst[1] == 0\n       \
    \     return (nothing, nothing)\n        end\n    end\n    if length(lst) == 1\n\
    \        if lst[1] < 0\n            return (lst[1], nothing)\n        end\n  \
    \  end\n    if length(lst) == 1\n        if lst[1] > 0\n            return (nothing,\
    \ lst[1])\n        end\n    end\n    if length(lst) > 1\n        if count(x ->\
    \ x < 0, lst) > 0\n            if count(x -> x > 0, lst) > 0\n               \
    \ return (maximum(filter(x -> x < 0, lst)), minimum(filter(x -> x > 0, lst)))\n\
    \            end\n        end\n    end\n    if length(lst) > 1\n        if count(x\
    \ -> x < 0, lst) > 0\n            if count(x -> x > 0, lst) == 0\n           \
    \     return (maximum(filter(x -> x < 0, lst)), nothing)\n            end\n  \
    \      end\n    end\n    if length(lst) > 1\n        if count(x -> x < 0, lst)\
    \ == 0\n            if count(x -> x > 0, lst) > 0\n                return (nothing,\
    \ minimum(filter(x -> x > 0, lst)))\n            end\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = b = Nothing\n    for v in lst\n \
    \       if v < 0 && (a == Nothing || v > a)\n            a = v\n        elseif\
    \ v > 0 && (b == Nothing || v < b)\n            b = v\n        end\n    end\n\
    \    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpidur22g4.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmpidur22g4.jl:21\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpidur22g4.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpidur22g4.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpidur22g4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidur22g4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negs = Int64[]\n    poss = Int64[]\n\
    \    for i in lst\n        if i > 0\n            push!(poss, i)\n        elseif\
    \ i < 0\n            push!(negs, i)\n        end\n    end\n    if length(negs)\
    \ == 0\n        negs = nothing\n    else\n        negs = sort(negs)[end]\n   \
    \ end\n    if length(poss) == 0\n        poss = nothing\n    else\n        poss\
    \ = sort(poss)[1]\n    end\n    return negs, poss\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    maxneg = -Inf\n    minpos = Inf\n   \
    \ if length(lst) > 0\n        for x in lst\n            if x > 0\n           \
    \     if x < minpos\n                    minpos = x\n                end\n   \
    \         elseif x < 0\n                if x > maxneg\n                    maxneg\
    \ = x\n                end\n            end\n        end\n    end\n    if isinf(maxneg)\n\
    \        maxneg = nothing\n    end\n    if isinf(minpos)\n        minpos = nothing\n\
    \    end\n    return (maxneg, minpos)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    negative_numbers = []\n    positive_numbers\
    \ = []\n    for i in lst\n        if i < 0\n            push!(negative_numbers,\
    \ i)\n        elseif i > 0\n            push!(positive_numbers, i)\n        end\n\
    \    end\n    largest_negative = (length(negative_numbers) == 0) ? nothing : maximum(negative_numbers)\n\
    \    smallest_positive = (length(positive_numbers) == 0) ? nothing : minimum(positive_numbers)\n\
    \    return (largest_negative, smallest_positive)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ i in lst\n        if i > 0\n            if b == nothing || i < b\n         \
    \       b = i\n            end\n        elseif i < 0\n            if a == nothing\
    \ || i > a\n                a = i\n            end\n        end\n    end\n   \
    \ return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = nothing\n    b = nothing\n    for\
    \ x in lst\n        if x > 0\n            if b isa nothing\n                b\
    \ = x\n            elseif x < b\n                b = x\n            end\n    \
    \    elseif x < 0\n            if a isa nothing\n                a = x\n     \
    \       elseif x > a\n                a = x\n            end\n        end\n  \
    \  end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhvcus35.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  TypeError: in\
    \ isa, expected Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmhvcus35.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhvcus35.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhvcus35.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmhvcus35.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmhvcus35.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhvcus35.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhvcus35.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmhvcus35.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  TypeError: in isa, expected\
    \ Type, got a value of type Nothing\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmhvcus35.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhvcus35.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhvcus35.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmhvcus35.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhvcus35.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    small = findmin(lst)\n    large = findmax(lst)\n\
    \    large = (a = large[1]) == 0 ? Nothing : large[1]\n    small = (a = small[1])\
    \ == 0 ? Nothing : small[1]\n    return large, small\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpt5djgxdc.jl:24\\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1)\\n   Evaluated: (7, 1) == (nothing, 1)\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpt5djgxdc.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpt5djgxdc.jl:23\\ntest set: Error\
    \ During Test at /tmp/tmpt5djgxdc.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\\n     @ Base ./some.jl:36\\n   [2] cvt1\\n     @ ./essentials.jl:343\
    \ [inlined]\\n   [3] ntuple\\n     @ ./ntuple.jl:49 [inlined]\\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{Int64, DataType})\\n     @ Base ./essentials.jl:344\\\
    n   [5] largest_smallest_integers(lst::Vector{Int64})\\n     @ Main /tmp/tmpt5djgxdc.jl:17\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpt5djgxdc.jl:25 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpt5djgxdc.jl:23\\ntest set:\
    \ Test Failed at /tmp/tmpt5djgxdc.jl:26\\n  Expression: candidate([1, 3, 2, 4,\
    \ 5, 6, -2]) == (-2, 1)\\n   Evalu"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    pos_max::Int64 = 0\n    neg_min::Int64\
    \ = 0\n    for i in lst\n        if i > 0 && i < pos_max\n            pos_max\
    \ = i\n        elseif i < 0 && i > neg_min\n            neg_min = i\n        end\n\
    \    end\n    if pos_max == 0\n        pos_max = nothing\n    end\n    if neg_min\
    \ == 0\n        neg_min = nothing\n    end\n    return neg_min, pos_max\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0z691mxj.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp0z691mxj.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0z691mxj.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0z691mxj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0z691mxj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp0z691mxj.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0z691mxj.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z691mxj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    min = 9999999999999\n    max = -9999999999999\n\
    \    is_positive = false\n    is_negative = false\n    for i in lst\n        if\
    \ i > 0\n            is_positive = true\n            if i < min\n            \
    \    min = i\n            end\n        elseif i < 0\n            is_negative =\
    \ true\n            if i > max\n                max = i\n            end\n   \
    \     end\n    end\n    if is_positive == false\n        min = nothing\n    end\n\
    \    if is_negative == false\n        max = nothing\n    end\n    return (max,\
    \ min)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    maxNeg = nothing\n    minPos = nothing\n\
    \    for i = 1:length(lst)\n        if lst[i] < 0 && (isnothing(maxNeg) || lst[i]\
    \ > maxNeg)\n            maxNeg = lst[i]\n        elseif lst[i] > 0 && (isnothing(minPos)\
    \ || lst[i] < minPos)\n            minPos = lst[i]\n        end\n    end\n   \
    \ return (maxNeg, minPos)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    a = Nothing\n    b = Nothing\n    for\
    \ i in lst\n        if i < 0 && (a == Nothing || i > a)\n            a = i\n \
    \       end\n        if i > 0 && (b == Nothing || i < b)\n            b = i\n\
    \        end\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7n6xbpm_.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, Int64}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] cvt1\n     @ ./essentials.jl:343\
    \ [inlined]\n   [3] ntuple\n     @ ./ntuple.jl:49 [inlined]\n   [4] convert(#unused#::Type{Tuple{Union{Nothing,\
    \ Int64}, Union{Nothing, Int64}}}, x::Tuple{DataType, Int64})\n     @ Base ./essentials.jl:344\n\
    \   [5] largest_smallest_integers(lst::Vector{Int64})\n     @ Main /tmp/tmp7n6xbpm_.jl:23\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7n6xbpm_.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7n6xbpm_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7n6xbpm_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Type{Nothing} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7n6xbpm_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    neg, pos = nothing, nothing\n    for\
    \ i in lst\n        if i < 0\n            neg = get(neg, i, (x, y) -> x > y ?\
    \ x : y, i)\n        elseif i > 0\n            pos = get(pos, i, (x, y) -> x <\
    \ y ? x : y, i)\n        end\n    end\n    return neg, pos\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp20p6azmv.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching get(::Nothing, ::Int64, ::var\"#2#4\", ::Int64)\n  Closest candidates\
    \ are:\n    get(!Matched::Base.ImmutableDict, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:804\n\
    \    get(!Matched::IOContext, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:343\n\
    \    get(!Matched::Tuple, ::Integer, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:35\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp20p6azmv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp20p6azmv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20p6azmv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp20p6azmv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  MethodError: no method matching\
    \ get(::Nothing, ::Int64, ::var\"#2#4\", ::Int64)\n  Closest candidates are:\n\
    \    get(!Matched::Base.ImmutableDict, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:804\n\
    \    get(!Matched::IOContext, ::Any, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/show.jl:343\n\
    \    get(!Matched::Tuple, ::Integer, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:35\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp20p6azmv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp20p6azmv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20p6azmv.jl:27\ntest set:\
    \ Error D"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20p6azmv.jl:25\n"
  exit_code: 1
  status: SyntaxError
