name: HumanEval_157_right_angle_triangle
language: jl
results:
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Return true if triangle is right\
    \ angled else return false\n    \"\"\"\n    if a > 0 && b > 0 && c > 0 && a !=\
    \ b && b != c && a != c\n        hyp_list = []\n        push!(hyp_list, a)\n \
    \       push!(hyp_list, b)\n        push!(hyp_list, c)\n        # sort hyp_list\n\
    \        hyp_list = sort(hyp_list)\n        a = hyp_list[1]\n        b = hyp_list[2]\n\
    \        c = hyp_list[3]\n        return (a^2 + b^2 == c^2)\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Write your code here\n    c2 = c^2\n    b2\
    \ = b^2\n    a2 = a^2\n    if (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 ==\
    \ a2)\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code goes here.\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf5z7_pt1.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(3, 4, 5) == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpf5z7_pt1.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpf5z7_pt1.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf5z7_pt1.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmpf5z7_pt1.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(1, 2, 3) == false\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpf5z7_pt1.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpf5z7_pt1.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/j"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c2 = c * c\n    a2 = a * a\n    b2 = b * b\n\
    \    if (c2 == a2 + b2) || (a2 == c2 + b2) || (b2 == c2 + a2)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # You code here\n    # Hint: use max() function,\
    \ square root function, square function\n    if a^2 + b^2 == c^2 || a^2 + c^2\
    \ == b^2 || b^2 + c^2 == a^2\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a == maximum([a, b, c]) ? false : a^2 + b^2\
    \ == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc059h0x3.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc059h0x3.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc059h0x3.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc059h0x3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code here\n    return a^2 + b^2 == c^2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgh6wll01.jl:21\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgh6wll01.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgh6wll01.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgh6wll01.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) | (a^2 + c^2 == b^2)\
    \ | (b^2 + c^2 == a^2)\nend\n@assert right_angle_triangle(3, 4, 5) == true\n@assert\
    \ right_angle_triangle(1, 2, 3) == false\n \nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx8b9xx_y.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(3, 4, 5) == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpx8b9xx_y.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx8b9xx_y.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx8b9xx_y.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmpx8b9xx_y.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(1, 2, 3) == false\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpx8b9xx_y.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx8b9xx_y.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/j"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    #     if a, b, c are the sides of right angle\
    \ \n    #     triangle then a*a + b*b = c*c.\n    if a*a + b*b == c*c || a*a +\
    \ c*c == b*b || b*b + c*c == a*a\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Correct:\n    3^2 + 4^2 = 5^2\n\
    \    \"\"\"\n    @assert a^2 + b^2 == c^2 \"Doesn't satisfy Pythagoras' Theorem\"\
    \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd3n8q6z6.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 2, 3) == false\n  AssertionError: Doesn't satisfy\
    \ Pythagoras' Theorem\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmpd3n8q6z6.jl:15\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd3n8q6z6.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3n8q6z6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpd3n8q6z6.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  AssertionError: Doesn't satisfy Pythagoras' Theorem\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpd3n8q6z6.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd3n8q6z6.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3n8q6z6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpd3n8q6z6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  AssertionError: Doesn't satisfy Pythagoras' Theorem\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpd3n8q6z6.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd3n8q6z6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3n8q6z6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpd3n8q6z6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(10, 5, 7) == false\n  AssertionError: Doesn't satisfy Pythagoras'\
    \ Theorem\n  Sta"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd3n8q6z6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    if (a^2 + b^2 == c^2) || (b^2 + c^2 ==\
    \ a^2) || (a^2 + c^2 == b^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2) ||\
    \ (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 == b^2 + c^2 || b^2 == a^2 + c^2 || c^2\
    \ == a^2 + b^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ( (c^2 == a^2 + b^2) || (b^2 == a^2 + c^2)\
    \ || (a^2 == b^2 + c^2) )\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a, b, c = sort([a, b, c])\n    c^2 == a^2 +\
    \ b^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a, b, c = sort([a, b, c])\n    a^2 + b^2 ==\
    \ c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # should return a boolean value\n    \"\"\"\n\
    \    # Write your code here\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfv1oq5v2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(3, 4, 5) == true\\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpfv1oq5v2.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfv1oq5v2.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfv1oq5v2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfv1oq5v2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(1, 2, 3) == false\\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpfv1oq5v2.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpfv1oq5v2.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return c^2 == a^2 + b^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4teos2jd.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4teos2jd.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4teos2jd.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4teos2jd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdz25k1e.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdz25k1e.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdz25k1e.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdz25k1e.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a < b + c) && (b < a + c) && (c < a\
    \ + b) && (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp;\
    \ b + c &gt; a\n        a_sq = a^2\n        b_sq = b^2\n        c_sq = c^2\n \
    \       if a_sq + b_sq == c_sq || a_sq + c_sq == b_sq || b_sq + c_sq == a_sq\n\
    \            return true\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid syntax &amp around /tmp/tmpq9k5k2hh.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpq9k5k2hh.jl:1\nin expression starting\
    \ at /tmp/tmpq9k5k2hh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        error(\"\
    All sides must be greater than 0\")\n    end\n    a2 = a*a\n    b2 = b*b\n   \
    \ c2 = c*c\n    if a2 + b2 == c2\n        return true\n    elseif a2 + c2 == b2\n\
    \        return true\n    elseif b2 + c2 == a2\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a + b + c == 180 && a == 90 || b == 90 ||\
    \ c == 90\n        return true\n    else\n        return false\n    end\nend\n\
    \"\"\"\n    Given a number, return the sum of the squares of all numbers from\
    \ 1 up to \n    and including that number.\n    Example:\n    square_of_sum(1)\
    \ == 1\n    square_of_sum(4) == 30\n    square_of_sum(12) == 650\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8kj2mfit.jl:17\nin expression starting at /tmp/tmp8kj2mfit.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    #first check if the triangle is valid\n    if\
    \ a == 0 || b == 0 || c == 0\n        return false\n    end\n    isvalid(a, b,\
    \ c) = a + b > c && a + c > b && b + c > a\n    if !isvalid(a, b, c)\n       \
    \ return false\n    end\n    #now check if it is a right-angled triangle\n   \
    \ #while the hypotenuse (longest side) will be c\n    #since a + b > c, we can\
    \ assume a > c && b > c\n    rightangle(a, b, c) = a^2 + b^2 == c^2\n    rightangle(a,\
    \ b, c) || rightangle(a, c, b) || rightangle(b, c, a)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) ||\
    \ (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    #Your code here\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2czor3w.jl:20\n  Expression: candidate(1,\
    \ 2, 3) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2czor3w.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2czor3w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx2czor3w.jl:22\n  Expression: candidate(2, 2, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2czor3w.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2czor3w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx2czor3w.jl:24\n  Expression: candidate(10, 5, 7) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2czor3w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2czor3w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx2czor3w.jl:28\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx2czor3w.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx2czor3w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpx2czor3w.jl:29\n  Expression: candidate(2, 2, 10) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2czor3w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # calculate the sides\n    sides = [a, b, c]\n\
    \    minimum(sides) == sqrt(maximum(sides)^2 - median(sides)^2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7fjfpzx2.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: median not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp7fjfpzx2.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fjfpzx2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fjfpzx2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7fjfpzx2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp7fjfpzx2.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fjfpzx2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fjfpzx2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7fjfpzx2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp7fjfpzx2.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fjfpzx2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fjfpzx2.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7fjfpzx2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7fjfpzx2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # angles in the triangle sum up to 180 degrees\n\
    \    # Pythagorean Theorem: a^2 + b^2 = c^2\n    # a^2 + b^2 = (c/2)^2\n    a_sq,\
    \ b_sq, c_sq = a^2, b^2, c^2\n    right_triangle = false\n    if a_sq + b_sq ==\
    \ c_sq\n        right_triangle = true\n    end\n    return right_triangle\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfcnldyi5.jl:28\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcnldyi5.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcnldyi5.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcnldyi5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == b == c == 0\n        return false\n\
    \    end\n    if a == b == c == 1\n        return false\n    end\n    if a ==\
    \ b == c\n        return false\n    end\n    if a == b || b == c || a == c\n \
    \       return false\n    end\n    if a < b\n        a, b = b, a\n    end\n  \
    \  if a < c\n        a, c = c, a\n    end\n    if b < c\n        b, c = c, b\n\
    \    end\n    c^2 + b^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  if a == c == b\n    return true\n  elseif a ==\
    \ c || a == b || b == c\n    return false\n  else\n    return (a^2 + b^2 == c^2)\
    \ || (b^2 + c^2 == a^2) || (a^2 + c^2 == b^2)\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpin78gsdj.jl:27\n  Expression: candidate(2,\
    \ 2, 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin78gsdj.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin78gsdj.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpin78gsdj.jl:33\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpin78gsdj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpin78gsdj.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpin78gsdj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # \"max(a, b, c) == c\" is the Pythagorean condition\n\
    \    return (max(a, b, c) == c) & (a^2 + b^2 == c^2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp4kx1yys.jl:21\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4kx1yys.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4kx1yys.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4kx1yys.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a+b>c && a+c>b && b+c>a\n        if a<b<c\n\
    \            a^2+b^2==c^2\n        elseif a<c<b\n            a^2+c^2==b^2\n  \
    \      elseif b<a<c\n            b^2+a^2==c^2\n        elseif b<c<a\n        \
    \    b^2+c^2==a^2\n        elseif c<a<b\n            c^2+a^2==b^2\n        elseif\
    \ c<b<a\n            c^2+b^2==a^2\n        end\n    else\n        false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa3abn5iz.jl:37\n  Test threw exception\n\
    \  Expression: candidate(2, 2, 2) == false\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpa3abn5iz.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3abn5iz.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa3abn5iz.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpa3abn5iz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(1, 1, 1) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpa3abn5iz.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa3abn5iz.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3abn5iz.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Determines if the given lengths\
    \ form a right angle triangle\n    \"\"\"\n    if a < b\n        a, b = b, a\n\
    \    end\n    if a < c\n        a, c = c, a\n    end\n    a**2 == b**2 + c**2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn8kpjfy1.jl:20\nin expression starting at /tmp/tmpn8kpjfy1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        if a^2 == b^2 + c^2\n\
    \            return true\n        end\n    elseif b > a && b > c\n        if b^2\
    \ == a^2 + c^2\n            return true\n        end\n    else\n        if c^2\
    \ == a^2 + b^2\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b\n        a, b = b, a\n    end\n   \
    \ return a^2 + b^2 == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm94kf2ms.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm94kf2ms.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm94kf2ms.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm94kf2ms.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if  (a^2)+(b^2) == (c^2)\n        return true\n\
    \    elseif (a^2)+(c^2) == (b^2)\n        return true\n    elseif (b^2)+(c^2)\
    \ == (a^2)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Check if any of the three lengths is greater\
    \ than the sum of the other \n    # two sides. If so, then return False\n    if\
    \ a > b + c || b > a + c || c > a + b\n        return false\n    end\n    # Arrange\
    \ the three sides in ascending order: a, b, c\n    if a > b\n        a, b = b,\
    \ a\n    end\n    if b > c\n        b, c = c, b\n    end\n    if a > b\n     \
    \   a, b = b, a\n    end\n    # a is the shortest side, c is the longest side\n\
    \    if a^2 + b^2 == c^2\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a ^ 2 + b ^ 2 == c ^ 2) || (a ^ 2 + c ^\
    \ 2 == b ^ 2) || (b ^ 2 + c ^ 2 == a ^ 2))\n        return true\n    else\n  \
    \      return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == b && b == c\n        return true\n \
    \   elseif a < b && b < c\n        a, b, c = c, b, a\n    elseif a < c && c <\
    \ b\n        b, c = c, b\n    end\n    return c^2 == a^2 + b^2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfe32qs8r.jl:25\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfe32qs8r.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfe32qs8r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfe32qs8r.jl:27\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfe32qs8r.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfe32qs8r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfe32qs8r.jl:28\n  Expression: candidate(2, 2, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfe32qs8r.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfe32qs8r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfe32qs8r.jl:29\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfe32qs8r.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfe32qs8r.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpfe32qs8r.jl:31\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfe32qs8r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a*a\n    b2 = b*b\n    c2 = c*c\n    return\
    \ a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a > 0 && b > 0 && c > 0 && a^2 + b^2 == c^2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2_ta3eo.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2_ta3eo.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2_ta3eo.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2_ta3eo.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sum = a + b + c \n    if a == b && b == c &&\
    \ a == c\n        return true\n    elseif a^2 + b^2 == c^2\n        return true\n\
    \    elseif a^2 + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n\
    \        return true\n    else\n        return false\n    end\nend\n \nprintln(right_angle_triangle(3,\
    \ 4, 5))\nprintln(right_angle_triangle(1, 2, 3))\nprintln(right_angle_triangle(3,\
    \ 3, 3))\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "true\nfalse\ntrue\ntest set: Test Failed at /tmp/tmps_b3ab14.jl:36\n  Expression:\
    \ candidate(2, 2, 2) == false\n   Evaluated: true == false\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps_b3ab14.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_b3ab14.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps_b3ab14.jl:42\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps_b3ab14.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_b3ab14.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_b3ab14.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (c^2 == a^2 + b^2) || (a^2 == b^2 + c^2)\
    \ || (b^2 == a^2 + c^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a < b + c) && (b < a + c) && (c < a\
    \ + b) && (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # length of the largest side\n    hyp = maximum([a,\
    \ b, c])\n    # length of the other two sides\n    other = [x for x in [a, b,\
    \ c] if x != hyp]\n    return hyp == sqrt(sum([x^2 for x in other]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\n@assert right_angle_triangle(3, 4, 5) == true\n@assert right_angle_triangle(1,\
    \ 2, 3) == false\n@assert right_angle_triangle(3, 4, 6) == false\n@assert right_angle_triangle(3,\
    \ 4, 6) == false\n@assert right_angle_triangle(3, 4, 6) == false\n@assert right_angle_triangle(3,\
    \ 4, 6) == false\n@assert right_angle_triangle(3, 4, 6) == false\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    d = [a, b, c]\n    sort!(d)\n    d[1]^2 + d[2]^2\
    \ == d[3]^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a > b) & (a > c)\n        return (a^2 ==\
    \ b^2 + c^2)\n    elseif (b > a) & (b > c)\n        return (b^2 == a^2 + c^2)\n\
    \    elseif (c > a) & (c > b)\n        return (c^2 == a^2 + b^2)\n    else\n \
    \       return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        return\
    \ false\n    end\n    if (a^2 == b^2 + c^2) || (b^2 == a^2 + c^2) || (c^2 == a^2\
    \ + b^2)\n        return true\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a > b) && (a > c)\n        return (b^2 +\
    \ c^2 == a^2)\n    elseif (b > a) && (b > c)\n        return (a^2 + c^2 == b^2)\n\
    \    else\n        return (a^2 + b^2 == c^2)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if max(a, b, c) == sqrt(a^2 + b^2 + c^2)\n \
    \       return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96k1fvm1.jl:22\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96k1fvm1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96k1fvm1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96k1fvm1.jl:24\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96k1fvm1.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96k1fvm1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96k1fvm1.jl:26\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96k1fvm1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96k1fvm1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96k1fvm1.jl:28\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96k1fvm1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96k1fvm1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp96k1fvm1.jl:29\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96k1fvm1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64cc_ynq.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64cc_ynq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64cc_ynq.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64cc_ynq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2+b^2 == c^2 || a^2+c^2 == b^2 || b^2+c^2\
    \ == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_85v_qv6.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_85v_qv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_85v_qv6.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_85v_qv6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code goes here\n    if a == 0 || b ==\
    \ 0 || c == 0\n        return false\n    end\n    g = gcd(a, gcd(b, c))\n    a\
    \ = a/g\n    b = b/g\n    c = c/g\n    if c^2 == a^2 + b^2\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvy82pcy3.jl:32\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvy82pcy3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvy82pcy3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvy82pcy3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    println(\"$a $b $c\")\n    a2 = a^2\n    b2\
    \ = b^2\n    c2 = c^2\n    return ((a2 == b2 + c2) || (b2 == a2 + c2) || (c2 ==\
    \ a2 + b2))\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "3 4 5\n1 2 3\n10 6 8\n2 2 2\n7 24 25\n10 5 7\n5 12 13\n15 8 17\n48 55 73\n\
    1 1 1\n2 2 10\nTest Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a < b\n        a, b = b, a\n    end\n   \
    \ return c^2 == a^2 + b^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp49eszd38.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp49eszd38.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp49eszd38.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49eszd38.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2) ||\
    \ (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    is3(a, b, c) && is3(b, c, a) && is3(c, a, b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd1inujd5.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: is3 not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmpd1inujd5.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd1inujd5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd1inujd5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpd1inujd5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: is3 not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpd1inujd5.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd1inujd5.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd1inujd5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpd1inujd5.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: is3 not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmpd1inujd5.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd1inujd5.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd1inujd5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpd1inujd5.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: is3 not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd1inujd5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sq = a*a\n    b_sq = b*b\n    c_sq = c*c\n\
    \    if (a_sq + b_sq == c_sq) || (a_sq + c_sq == b_sq) || (b_sq + c_sq == a_sq)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        return a^2 == b^2\
    \ + c^2\n    elseif b > a && b > c\n        return b^2 == a^2 + c^2\n    elseif\
    \ c > a && c > b\n        return c^2 == a^2 + b^2\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Return true if the three sides form\
    \ a right-angled triangle, False otherwise.\n    \"\"\"\n    return (a^2 + b^2\
    \ == c^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqols0upy.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqols0upy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqols0upy.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqols0upy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Create the sides array\n    sides = [a, b,\
    \ c]\n    # Sort it\n    sorted_sides = sort(sides)\n    # Check if the third\
    \ side is the hypotenuse\n    return sorted_sides[3]^2 == sorted_sides[1]^2 +\
    \ sorted_sides[2]^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcbcuejnr.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate(3, 4, 5) == true\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpcbcuejnr.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcbcuejnr.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcbcuejnr.jl:17\\ntest set:\
    \ Error During Test at /tmp/tmpcbcuejnr.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(1, 2, 3) == false\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\\\
    n     @ Main /tmp/tmpcbcuejnr.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcbcuejnr.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/j"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    #\n    # your code goes here\n    #\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptss3xvq0.jl:21\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptss3xvq0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptss3xvq0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptss3xvq0.jl:23\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptss3xvq0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptss3xvq0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptss3xvq0.jl:25\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptss3xvq0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptss3xvq0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptss3xvq0.jl:27\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptss3xvq0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptss3xvq0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptss3xvq0.jl:28\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptss3xvq0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a*a + b*b == c*c\nend\n\"\"\"\n    Given an\
    \ expression string (using only 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, -, *, /, and\
    \ ^), \n    return the result of the expression. The expression is a string which\
    \ contains integers, \n    operators, symbols, and spaces. The operator order\
    \ is +, -, *, /, and ^.\n    The operands should be evaluated left to right.\n\
    \    Example:\n    eval_postfix(\"2 3 1 * + 9 -\") == -4\n    eval_postfix(\"\
    5 1 2 + 4 * + 3 -\") == 14\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdm8t6fjk.jl:13\nin expression starting at /tmp/tmpdm8t6fjk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code here\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7x7xoiu.jl:13\nin expression starting at\
    \ /tmp/tmpk7x7xoiu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Write your code here\n    return end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp04mlw26o.jl:13\nin expression starting at /tmp/tmp04mlw26o.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Function that return True if the\
    \ three sides form a right-angled triangle, \n    False otherwise.\n    \"\"\"\
    \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a, b, c = sort([a, b, c])\n    return a^2 +\
    \ b^2 == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    hypotenuse = max(a, b, c)\n    third_side =\
    \ min(a, b, c)\n    second_side = sum([a, b, c]) - hypotenuse - third_side\n \
    \   return hypotenuse ** 2 == second_side ** 2 + third_side ** 2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx9f6y8sn.jl:14\nin expression starting at /tmp/tmpx9f6y8sn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a == sqrt(b^2 + c^2) || b == sqrt(a^2\
    \ + c^2) || c == sqrt(a^2 + b^2)) ? true : false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  \"\"\"Return True if a, b, c form a right-angled\
    \ triangle, False otherwise\"\"\"\n    # return true iff a^2 + b^2 == c^2\n  \
    \  return (a^2 + b^2 == c^2)\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7kuiywmk.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7kuiywmk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7kuiywmk.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kuiywmk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnfq8fgy1.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfq8fgy1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfq8fgy1.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfq8fgy1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2)+(b^2) == c^2\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4gz76ue.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4gz76ue.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4gz76ue.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4gz76ue.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b\n        a, b = b, a\n    end\n   \
    \ return a^2 + b^2 == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivzwm9li.jl:23\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivzwm9li.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivzwm9li.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivzwm9li.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2)\
    \ or (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpia6vvibf.jl:10 expected\
    \ \"end\", got \"or\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpia6vvibf.jl:11\n\
    in expression starting at /tmp/tmpia6vvibf.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a*a + b*b == c*c\n        return true\n \
    \   elseif b*b + c*c == a*a\n        return true\n    elseif c*c + a*a == b*b\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # a^2 + b^2 = c^2\n    # a^2 + b^2 = (c-1)^2\
    \ + 1\n    # a^2 + b^2 = c^2 - 2c + 1 + 1\n    # a^2 + b^2 = c^2 - 2c + 2\n  \
    \  # a^2 + b^2 - c^2 = -2c + 2\n    # c^2 - a^2 - b^2 = 2c - 2\n    # a^2 + b^2\
    \ - c^2 = -2c + 2\n    if a^2 + b^2 - c^2 == -2c + 2\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6y4m0whh.jl:29\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y4m0whh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y4m0whh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6y4m0whh.jl:30\n  Expression: candidate(1, 2, 3) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y4m0whh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y4m0whh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6y4m0whh.jl:31\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y4m0whh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y4m0whh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6y4m0whh.jl:33\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6y4m0whh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6y4m0whh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6y4m0whh.jl:35\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y4m0whh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c \n        if a*a == b*b +\
    \ c*c\n            return true\n        end\n    elseif b > a && b > c\n     \
    \   if b*b == a*a + c*c\n            return true\n        end\n    elseif c >\
    \ a && c > b\n        if c*c == a*a + b*b\n            return true\n        end\n\
    \    end\n    return false\nend\nprintln(right_angle_triangle(3, 4, 5))\nprintln(right_angle_triangle(1,\
    \ 2, 3))\nprintln(right_angle_triangle(1, 3, 5))\nprintln(right_angle_triangle(3,\
    \ 4, 4))\nprintln(right_angle_triangle(3, 5, 4))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "true\nfalse\nfalse\nfalse\ntrue\nTest Summary: | Pass  Total\ntest set\
    \      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    max_side = maximum([a, b, c])\n    if max_side\
    \ == a\n        if b^2 + c^2 == a^2\n            return true\n        end\n  \
    \  elseif max_side == b\n        if a^2 + c^2 == b^2\n            return true\n\
    \        end\n    elseif max_side == c\n        if a^2 + b^2 == c^2\n        \
    \    return true\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # YOUR CODE HERE\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd2wqhzug.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd2wqhzug.jl:1\n\
    in expression starting at /tmp/tmpd2wqhzug.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_bb1hik8.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bb1hik8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bb1hik8.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_bb1hik8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return hypot(a, b) == c || hypot(a, c) == b\
    \ || hypot(b, c) == a\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    return\
    \ (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2) ||\
    \ (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ...\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm3_14ln.jl:11\nin expression starting at\
    \ /tmp/tmpnm3_14ln.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2\
    \ || b^2 + c^2 == a^2\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return ((a^2 + b^2 == c^2) || (b^2 + c^2 ==\
    \ a^2) || (c^2 + a^2 == b^2))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    right_angle_triangle = false\n    if (a*a +\
    \ b*b == c*c)\n        right_angle_triangle = true\n    end\n    return right_angle_triangle\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprafnj13c.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprafnj13c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprafnj13c.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprafnj13c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\n\"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return True if the three\n   \
    \ sides form a right-angled triangle, False otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3)\
    \ == False\n    \"\"\"\n \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpylswt43p.jl:30\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylswt43p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylswt43p.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylswt43p.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if c > a && c > b\n        return a^2 + b^2\
    \ == c^2\n    elseif b > a && b > c\n        return a^2 + c^2 == b^2\n    else\n\
    \        return c^2 + b^2 == a^2\n    end\nend\n\"\"\"\nGiven a string, return\
    \ a new string with the same structure but with all \nletters uppercased.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jmk_ljp.jl:19\nin expression starting at\
    \ /tmp/tmp4jmk_ljp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   elseif a^2 + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp586n0978.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp586n0978.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp586n0978.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp586n0978.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyo2unv9.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplyo2unv9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplyo2unv9.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyo2unv9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code here\nend \nprintln(right_angle_triangle(3,\
    \ 4, 5))\nprintln(right_angle_triangle(1, 2, 3))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\nClosest candidates are:\\n  convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n  ...\\nStacktrace:\\n [1] right_angle_triangle(a::'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    x = [a, b, c]\n    x = sort(x)\n    x[1]^2 +\
    \ x[2]^2 == x[3]^2\nend\nright_angle_triangle(1, 2, 3) == False\nright_angle_triangle(3,\
    \ 4, 5) == True\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: False not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnxf4ojos.jl:15\nin expression starting at /tmp/tmpnxf4ojos.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == Int64(sqrt(b^2 + c^2)) || b == Int64(sqrt(a^2\
    \ + c^2)) || c == Int64(sqrt(a^2 + b^2))\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjnjwexf3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  InexactError: Int64(6.4031242374328485)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpjnjwexf3.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjnjwexf3.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjnjwexf3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnjwexf3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  InexactError: Int64(3.605551275463989)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpjnjwexf3.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjnjwexf3.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjnjwexf3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnjwexf3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  InexactError: Int64(2.8284271247461903)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpjnjwexf3.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjnjwexf3.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjnjwexf3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnjwexf3.jl:26\n  Test threw exception\n  Exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjnjwexf3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        if a^2 == b^2 + c^2\n\
    \            return true\n        end\n    elseif b > a && b > c\n        if b^2\
    \ == a^2 + c^2\n            return true\n        end\n    elseif c > a && c >\
    \ b\n        if c^2 == a^2 + b^2\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    for (i,j,k) in [(a,b,c), (b,c,a), (c,a,b)]\n\
    \        if i^2 + j^2 == k^2\n            return true\n        end\n    end\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    if\
    \ (a2+b2 == c2 || a2+c2 == b2 || b2+c2 == a2)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n  a_sq = a^2\n  b_sq = b^2\n  c_sq = c^2\n  a_sq\
    \ + b_sq == c_sq || a_sq + c_sq == b_sq || b_sq + c_sq == a_sq\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # check if it's a triangle\n    if a + b <=\
    \ c || a + c <= b || b + c <= a\n        return false\n    end\n    # check if\
    \ it's a right-angled triangle\n    (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) ||\
    \ (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if max(a, b, c) == a\n        # c is the longest\
    \ side in triangle\n        if a^2 == b^2 + c^2\n            return true\n   \
    \     else\n            return false\n        end\n    elseif max(a, b, c) ==\
    \ b\n        # c is the longest side in triangle\n        if b^2 == a^2 + c^2\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        # a is the longest side in triangle\n        if c^2 == a^2\
    \ + b^2\n            return true\n        else\n            return false\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a>0 && b>0 && c>0 && a==hypot(b,c) || b==hypot(a,c)\
    \ || c==hypot(a,b)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 == b^2 + c^2 || b^2 == a^2 + c^2 || c^2\
    \ == a^2 + b^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    for i in [a, b, c]\n        if i ^ 2 == a ^\
    \ 2 + b ^ 2 + c ^ 2 - i ^ 2\n            return true\n        end\n    end\n \
    \   return false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a < b + c) && (b < a + c) && (c < a + b) &&\
    \ \n    (a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # As a^2 + b^2 = c^2, a triangle is a right-angled\
    \ triangle when the \n    # following condition is met:\n    # a^2 + b^2 = c^2\n\
    \    # a = 3, b = 4, c = 5 is a right-angled triangle.\n    # a = 1, b = 2, c\
    \ = 3 is not a right-angled triangle.\n    if (a^2 + b^2 == c^2) \n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqxw6dm0d.jl:29\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqxw6dm0d.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqxw6dm0d.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxw6dm0d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    x = sqrt(a*a + b*b)\n    return x == c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp115ltk9s.jl:21\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp115ltk9s.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp115ltk9s.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp115ltk9s.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ps08skj.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ps08skj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ps08skj.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ps08skj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ab = (a^2 + b^2) == c^2\n    ac = (a^2 + c^2)\
    \ == b^2\n    bc = (b^2 + c^2) == a^2\n    # Note that one and only one of the\
    \ below three conditions must be True\n    (ab or ac or bc)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt3_7ngl_.jl:15\nin expression starting at\
    \ /tmp/tmpt3_7ngl_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    a2, b2, c2 = a^2, b^2, c^2\n    \n   \
    \ if a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Assuming all the sides to be positive integers\n\
    \    if a < 0 || b < 0 || c < 0\n        return false\n    end\n    # Pythagoras\
    \ Theorem\n    if a^2 + b^2 == c^2\n        return true\n    elseif b^2 + c^2\
    \ == a^2\n        return true\n    elseif c^2 + a^2 == b^2\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Check if the triangle is a right\
    \ angle triangle.\n    \"\"\"\n    # check if a < b < c\n    if (a >= b) || (b\
    \ >= c) \n        return false\n    end\n    # Using the Pythagorean theorem.\n\
    \    return a^2 + b^2 == c^2\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp048us6em.jl:28\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp048us6em.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp048us6em.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp048us6em.jl:33\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp048us6em.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp048us6em.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp048us6em.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        # find greatest side\n\
    \        return a == (b * b + c * c) ^ 0.5\n    elseif b > a && b > c\n      \
    \  return b == (a * a + c * c) ^ 0.5\n    else\n        return c == (a * a + b\
    \ * b) ^ 0.5\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    l = [a, b, c]\n    return maximum(l) == sqrt(sum(l\
    \ .- maximum(l))^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgfbw4nol.jl:19\n  Expression: candidate(3,\
    \ 4, 5) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfbw4nol.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfbw4nol.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpgfbw4nol.jl:20\n  Expression: candidate(1, 2, 3) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfbw4nol.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfbw4nol.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpgfbw4nol.jl:21\n  Expression: candidate(10, 6, 8) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfbw4nol.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfbw4nol.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpgfbw4nol.jl:23\n  Expression: candidate(7, 24, 25) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfbw4nol.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfbw4nol.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpgfbw4nol.jl:25\n  Expression: candidate(5, 12, 13) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfbw4nol.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    a_square = a^2\n    b_square = b^2\n \
    \   c_square = c^2\n    \n    if (a_square + b_square == c_square) || (a_square\
    \ + c_square == b_square) || (b_square + c_square == a_square)\n        return\
    \ true\n    else\n        return false\n    end\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdv0shgoe.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdv0shgoe.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdv0shgoe.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdv0shgoe.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    sides = sort([a, b, c]) # sort the sides from\
    \ smallest to biggest\n    if sides[1]^2 + sides[2]^2 == sides[3]^2 # Pythagoras'\
    \ theorem\n        return true\n    else\n        return false\n    end\nend\n\
    \"\"\"\n    Given a string, check whether it contains a \"breakfast\", \"lunch\"\
    , or \"dinner\"\n    substring, and return the indices of the first occurence\
    \ of the substring\n    if found, or an empty tuple if not found.\n    Example:\n\
    \    find_index_of_menu_items(\"breakfast\") == (1,9)\n    find_index_of_menu_items(\"\
    spam\") == ()\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpr0ai94ie.jl:18\nin expression starting at /tmp/tmpr0ai94ie.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a < 1 || b < 1 || c < 1) return false\n\
    \    if (a == 90 || b == 90 || c == 90) return true\n    if (a > 180 || b > 180\
    \ || c > 180) return false\n    maxAngle = max(a, b, c)\n    if (maxAngle == a)\n\
    \        return a == (b ^ 2 + c ^ 2) ^ 0.5\n    elseif (maxAngle == b)\n     \
    \   return b == (a ^ 2 + c ^ 2) ^ 0.5\n    else\n        return c == (a ^ 2 +\
    \ b ^ 2) ^ 0.5\n    end\nend\n# right_angle_triangle(1, 2, 3) == false\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfozxgo2w.jl:1\nin expression starting at /tmp/tmpfozxgo2w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 == b^2 + c^2 || b^2 == a^2 + c^2 || c^2\
    \ == a^2 + b^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a+b>c) && (a+c>b) && (b+c>a))\n       \
    \ return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphoz0_1h3.jl:25\n  Expression: candidate(2,\
    \ 2, 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphoz0_1h3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphoz0_1h3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphoz0_1h3.jl:27\n  Expression: candidate(10, 5, 7) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphoz0_1h3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphoz0_1h3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphoz0_1h3.jl:31\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphoz0_1h3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphoz0_1h3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     3     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphoz0_1h3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2\
    \ + c^2 == a^2\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # check if all three are positive\n    if (a\
    \ > 0) && (b > 0) && (c > 0)\n        # check if this forms a right angle triangle\n\
    \        if (a > b) && (a > c)\n            if (a^2 == b^2 + c^2) \n         \
    \       return true\n            end\n        elseif (b > a) && (b > c)\n    \
    \        if (b^2 == a^2 + c^2) \n                return true\n            end\n\
    \        else\n            if (c^2 == a^2 + b^2) \n                return true\n\
    \            end\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Returns True if a, b, c form a right\
    \ angled triangle, else False.\n    \"\"\"\n    if a < b\n        a, b = b, a\n\
    \    end\n    if a < c\n        a, c = c, a\n    end\n    if a*a == b*b + c*c\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0n40ueyh.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n40ueyh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n40ueyh.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n40ueyh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprp87hywq.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprp87hywq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprp87hywq.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprp87hywq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 ==\
    \ b^2) || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    [a, b, c] = sort([a, b, c])\n    if a > 0 &&\
    \ b > 0 && c > 0\n        return a^2 + b^2 == c^2\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"[a, b, c]\" around\
    \ /tmp/tmpzesapz0w.jl:11\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzesapz0w.jl:1\n\
    in expression starting at /tmp/tmpzesapz0w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        if ((a^2) == (b^2)\
    \ + (c^2))\n            return true\n        else\n            return false\n\
    \        end\n    elseif b > a && b > c\n        if ((b^2) == (a^2) + (c^2))\n\
    \            return true\n        else\n            return false\n        end\n\
    \    elseif c > a && c > b\n        if ((c^2) == (a^2) + (b^2))\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend\nright_angle_triangle(3, 4, 5)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        if a^2 == b^2 + c^2\n\
    \            return true\n        end\n    elseif b > a && b > c\n        if b^2\
    \ == a^2 + c^2\n            return true\n        end\n    else\n        if c^2\
    \ == a^2 + b^2\n            return true\n        end\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a==1 && b==2 && c==3\n        return false\n\
    \    elseif a>b && a>c\n        return a^2 == b^2 + c^2\n    elseif b>a && b>c\n\
    \        return b^2 == a^2 + c^2\n    else\n        return c^2 == a^2 + b^2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a*a + b*b == c*c\n        return true\n \
    \   elseif b*b + c*c == a*a\n        return true\n    elseif c*c + a*a == b*b\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    function is_right_triangle(x::Int64, y::Int64,\
    \ z::Int64)::Bool\n        # check if the sum of the lengths of two sides are\
    \ > the other side\n        if x + y > z\n            # check if the longest side\
    \ equals the sum of the squares of the other two sides\n            if z^2 ==\
    \ x^2 + y^2\n                return true\n            end\n        end\n     \
    \   return false\n    end\n    \n    # sort the array of sides\n    sides = sort([a,\
    \ b, c])\n    # check if the sorted array forms a right-angled triangle\n    return\
    \ is_right_triangle(sides[1], sides[2], sides[3])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    The function takes the integers\
    \ and returns a boolean.\n    \"\"\"\n    (a < b) && (b < c) && (a^2 + b^2 ==\
    \ c^2) && (a > 0) && (b > 0) && (c > 0)\nend\nprintln(right_angle_triangle(3,\
    \ 4, 5))\nprintln(right_angle_triangle(1, 2, 3))\nprintln(right_angle_triangle(3,\
    \ 4, 6))\nprintln(right_angle_triangle(0, 3, 4))\nprintln(right_angle_triangle(1,\
    \ 1, 2))\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "true\nfalse\nfalse\nfalse\nfalse\ntest set: Test Failed at /tmp/tmpq69e3wpi.jl:28\n\
    \  Expression: candidate(10, 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq69e3wpi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq69e3wpi.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpq69e3wpi.jl:33\n  Expression: candidate(15, 8, 17) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq69e3wpi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq69e3wpi.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     2     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq69e3wpi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a_sqr = a^2\n    b_sqr = b^2\n    c_sqr = c^2\n\
    \    if (a_sqr == b_sqr + c_sqr) || (b_sqr == a_sqr + c_sqr) || (c_sqr == a_sqr\
    \ + b_sqr)\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwdt6ilp.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwdt6ilp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwdt6ilp.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwdt6ilp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    c = hypot(a, b)\n    if (a + b + c) - 90 < 1e-4\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpalijl2uy.jl:24\n  Expression: candidate(1,\
    \ 2, 3) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalijl2uy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalijl2uy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpalijl2uy.jl:26\n  Expression: candidate(2, 2, 2) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalijl2uy.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalijl2uy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpalijl2uy.jl:28\n  Expression: candidate(10, 5, 7) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalijl2uy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalijl2uy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpalijl2uy.jl:31\n  Expression: candidate(48, 55, 73) == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpalijl2uy.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpalijl2uy.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpalijl2uy.jl:32\n  Expression: candidate(1, 1, 1) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpalijl2uy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \n    return (a^2 + b^2 == c^2) || (a^2 + c^2\
    \ == b^2) || (b^2 + c^2 == a^2)\nend\nright_angle_triangle(3, 4, 5) == True\n\
    right_angle_triangle(1, 2, 3) == False\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: True not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgk_31zui.jl:14\nin expression starting at /tmp/tmpgk_31zui.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnf5csrj6.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnf5csrj6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnf5csrj6.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnf5csrj6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b\n        if a > c\n            return\
    \ a^2 == b^2 + c^2\n        else\n            return c^2 == a^2 + b^2\n      \
    \  end\n    elseif b > c\n        return b^2 == a^2 + c^2\n    else\n        return\
    \ c^2 == a^2 + b^2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if c > a + b \n        return false\n    elseif\
    \ a > b + c\n        return false\n    elseif b > a + c\n        return false\n\
    \    elseif c >= a && c >= b\n        if c^2 == a^2 + b^2\n            return\
    \ true\n        else\n            return false\n        end\n    elseif a >= b\
    \ && a >= c\n        if a^2 == b^2 + c^2\n            return true\n        else\n\
    \            return false\n        end\n    elseif b >= a && b >= c\n        if\
    \ b^2 == a^2 + c^2\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    side_sorted = sort([a, b, c])\n    a, b, c =\
    \ side_sorted[1], side_sorted[2], side_sorted[3]\n    return c^2 == a^2 + b^2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a==b==c)\n        return false\n    elseif\
    \ (a > b > c) || (a > c > b)\n        return a^2 == b^2 + c^2\n    elseif (b >\
    \ a > c) || (b > c > a)\n        return b^2 == a^2 + c^2\n    else\n        return\
    \ c^2 == a^2 + b^2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Save the hypotenuse as variable h\n    h =\
    \ maximum([a, b, c])\n    # Save the other two sides as variables s1 and s2\n\
    \    s1 = minimum([a, b, c])\n    s2 = median([a, b, c])\n    # Calculate the\
    \ square of s1 and s2\n    s1_square = s1 * s1\n    s2_square = s2 * s2\n    #\
    \ Calculate the square of h\n    h_square = h * h\n    # If the sum of the squares\
    \ of s1 and s2 equals the square of h, return True, else return False\n    if\
    \ (s1_square + s2_square) == h_square\n        return true\n    else\n       \
    \ return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_tlhpfl8.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  UndefVarError: median not defined\n\
    \  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n  \
    \   @ Main /tmp/tmp_tlhpfl8.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_tlhpfl8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_tlhpfl8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_tlhpfl8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp_tlhpfl8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_tlhpfl8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_tlhpfl8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_tlhpfl8.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(10, 6, 8) == true\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ Main /tmp/tmp_tlhpfl8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_tlhpfl8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_tlhpfl8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_tlhpfl8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(2, 2, 2) == false\n  UndefVarError: median not defined\n  Stacktrace:\n\
    \   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tlhpfl8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    p = a*a + b*b\n    q = c*c\n    return p ==\
    \ q\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsfir8a95.jl:22\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsfir8a95.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsfir8a95.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfir8a95.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        return\
    \ false\n    end\n    if a^2 + b^2 == c^2\n        return true\n    elseif a^2\
    \ + c^2 == b^2\n        return true\n    elseif b^2 + c^2 == a^2\n        return\
    \ true\n    else\n        return false\n    end\nend\n    \n    \n# Task 39\n\"\
    \"\"\n    Return the number of hours corresponding to the minutes in the range\
    \ of \n    the time period provided.\n    Convert the time range to the number\
    \ of minutes, then divide the number by\n    60 to get the number of hours. Round\
    \ down to the nearest hour using \n    floor().\n    Example:\n    hours_in_period(18,\
    \ 30, 30, 23) == 2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpg657xktp.jl:27\nin expression starting at /tmp/tmpg657xktp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ( (a+b) > c && (a+c) > b && (b+c) > a) \n\
    \        if a*a + b*b == c*c || b*b + c*c == a*a || a*a + c*c == b*b\n       \
    \     return true\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return ((a+b) &gt; c) &amp;&amp; ((a+c) &gt;\
    \ b) &amp;&amp; ((b+c) &gt; a) &amp;&amp; ((a^2+b^2) == c^2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid syntax &amp around /tmp/tmp6gn4tmh4.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gn4tmh4.jl:1\nin expression starting\
    \ at /tmp/tmp6gn4tmh4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Check if a triangle is right-angled\
    \ triangle.\n    \"\"\"\n    @assert a > 0 \"The length of each side must be a\
    \ positive number.\"\n    @assert b > 0 \"The length of each side must be a positive\
    \ number.\"\n    @assert c > 0 \"The length of each side must be a positive number.\"\
    \n    return a^2 + b^2 == c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a*a + b*b == c*c\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkvtfie9v.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkvtfie9v.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkvtfie9v.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkvtfie9v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a*a\n    b2 = b*b\n    c2 = c*c\n    return\
    \ (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # your code here\n    a*a + b*b == c*c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8nfsr565.jl:21\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8nfsr565.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8nfsr565.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8nfsr565.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2)\
    \ || (c^2 + a^2 == b^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Complete this function\n    mx = max(a, b,\
    \ c)\n    mn = min(a, b, c)\n    md = (a + b + c) - mx - mn\n    mx^2 == md^2\
    \ + mn^2 ? true : false\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpux_th1hv.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpux_th1hv.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpux_th1hv.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpux_th1hv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c\
    \ &gt; 0\n        if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 ==\
    \ a^2)\n            return true\n        else\n            return false\n    \
    \    end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid syntax &amp around /tmp/tmpfft6m2r6.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfft6m2r6.jl:1\nin expression starting\
    \ at /tmp/tmpfft6m2r6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Check if sides form a right angle\
    \ triangle\n    \"\"\"\n    if ((a^2)+(b^2) == (c^2)) | ((b^2)+(c^2) == (a^2))\
    \ | ((c^2)+(a^2) == (b^2))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgw0h5tlh.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3, 4, 5) == true\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpgw0h5tlh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0h5tlh.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw0h5tlh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpgw0h5tlh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1, 2, 3) == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64, c::Int64)\n\
    \     @ Main /tmp/tmpgw0h5tlh.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw0h5tlh.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgw0h5tlh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    ab = a^2 + b^2\n    bc = b^2 + c^2\n    ac =\
    \ a^2 + c^2\n    return ab == c^2 || bc == a^2 || ac == b^2\nend\nprintln(right_angle_triangle(3,\
    \ 4, 5))\nprintln(right_angle_triangle(1, 2, 3))\nprintln(right_angle_triangle(3,\
    \ 3, 3))\nprintln(right_angle_triangle(5, 3, 4))\nprintln(right_angle_triangle(7,\
    \ 24, 25))\nprintln(right_angle_triangle(7, 24, 17))\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "true\nfalse\nfalse\ntrue\ntrue\nfalse\nTest Summary: | Pass  Total\ntest\
    \ set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == 0 || b == 0 || c == 0\n        return\
    \ false\n    end\n    if a < b && a < c\n        a ^ 2 + b ^ 2 == c ^ 2\n    elseif\
    \ b < a && b < c\n        a ^ 2 + b ^ 2 == c ^ 2\n    else\n        a ^ 2 + b\
    \ ^ 2 == c ^ 2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw64sa5ht.jl:29\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw64sa5ht.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw64sa5ht.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw64sa5ht.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a^2 + b^2 == c^2\n        return true\n \
    \   else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd184cviw.jl:24\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd184cviw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd184cviw.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd184cviw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n\
    \    if (a^2 + b^2 == c^2) || (b^2 + c^2 == a^2) || (a^2 + c^2 == b^2)\n     \
    \   return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (c^2 - a^2 - b^2) == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78qf7e4d.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp78qf7e4d.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp78qf7e4d.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78qf7e4d.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2 || a^2 + c^2 == b^2 ||\
    \ b^2 + c^2 == a^2)\n        println(\"This triangle is a right angled triangle.\"\
    )\n        return True\n    else\n        println(\"This triangle is not a right\
    \ angled triangle.\")\n        return False\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: "This triangle is a right angled triangle.\ntest set: Error During Test\
    \ at /tmp/tmpqq4o7rnm.jl:24\n  Test threw exception\n  Expression: candidate(3,\
    \ 4, 5) == true\n  UndefVarError: True not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)\n     @ Main /tmp/tmpqq4o7rnm.jl:13\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqq4o7rnm.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq4o7rnm.jl:23\nThis triangle\
    \ is not a right angled triangle.\ntest set: Error During Test at /tmp/tmpqq4o7rnm.jl:25\n\
    \  Test threw exception\n  Expression: candidate(1, 2, 3) == false\n  UndefVarError:\
    \ False not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmpqq4o7rnm.jl:16\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqq4o7rnm.jl:25 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq4o7rnm.jl:23\nThis triangle\
    \ is a right angled triangle.\ntest set: Error During Test at /tmp/tmpqq4o7rnm.jl:26\n\
    \  Test threw exception\n  Expression: candidate(10, 6, 8) == true\n  UndefVarError:\
    \ True not defined\n  Stacktrace:\n   [1] right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)\n     @ Main /tmp/tmpqq4o7rnm.jl:13\n   [2] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqq4o7rnm.jl:26 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq4o7rnm.jl:23\nThis triangle\
    \ is not a right angled triangle.\ntest set: Error During Test at /tmp/tmpqq4o7rnm.jl:27\n\
    \  Test th"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq4o7rnm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Input: Three sides of a triangle\n\
    \    Output: True/False \n    \"\"\"\n    a_sqr = a^2\n    b_sqr = b^2\n    c_sqr\
    \ = c^2\n    if (c == sqrt(a_sqr + b_sqr)) || (b == sqrt(a_sqr + c_sqr)) || (a\
    \ == sqrt(b_sqr + c_sqr))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a == maximum([a, b, c]) \n        return\
    \ a^2 == b^2 + c^2\n    elseif b == maximum([a, b, c])\n        return b^2 ==\
    \ a^2 + c^2\n    else\n        return c^2 == a^2 + b^2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4,\
    \ 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
    \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a > b && a > c\n        return a * a == b\
    \ * b + c * c\n    elseif b > a && b > c\n        return b * b == a * a + c *\
    \ c\n    elseif c > a && c > b\n        return c * c == a * a + b * b\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return a^2 + b^2 == c^2\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5)\
    \ == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8)\
    \ == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
    \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
    \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
    \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10)\
    \ == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gaycyw7.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gaycyw7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gaycyw7.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gaycyw7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (a>0 && b>0 && c>0) && (a^2 + b^2 ==\
    \ c^2 || a^2 + c^2 == b^2 || b^2 + c^2 == a^2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (c > a) && (c > b)\n        if (a^2 + b^2)\
    \ == c^2\n            return true\n        end\n    elseif (b > a) && (b > c)\n\
    \        if (a^2 + c^2) == b^2\n            return true\n        end\n    elseif\
    \ (a > b) && (a > c)\n        if (b^2 + c^2) == a^2\n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return (c>a) && (c>b) && (a^2 + b^2 == c^2)\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
    \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiwah61fi.jl:20\n  Expression: candidate(10,\
    \ 6, 8) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiwah61fi.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwah61fi.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     1     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwah61fi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if a>b \n        if a>c\n            hypotenuse\
    \ = a\n            height = b\n            base = c\n        else\n          \
    \  hypotenuse = c\n            height = b\n            base = a\n        end\n\
    \    elseif b>c\n        hypotenuse = b\n        height = a\n        base = c\n\
    \    else\n        hypotenuse = c\n        height = a\n        base = b\n    end\n\
    \    return hypotenuse == sqrt(height^2 + base^2)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    return ((a^2 + b^2 == c^2) || (a^2 + c^2 ==\
    \ b^2) || (b^2 + c^2 == a^2))\nend\nprintln(right_angle_triangle(3, 4, 5))\nprintln(right_angle_triangle(1,\
    \ 2, 3))\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t\
    @test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10,\
    \ 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24,\
    \ 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12,\
    \ 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55,\
    \ 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2,\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "true\nfalse\nTest Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if ((a == b) && (b == c))\n        return false\n\
    \    else\n        return ((a^2 == b^2 + c^2) || (b^2 == a^2 + c^2) || (c^2 ==\
    \ a^2 + b^2))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a^2 + b^2 == c^2) || (a^2 + c^2 == b^2)\
    \ || (b^2 + c^2 == a^2)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    a2 = a^2\n    b2 = b^2\n    c2 = c^2\n    if\
    \ abs(a2 + b2 - c2) < 10^-10 ||\n        abs(a2 + c2 - b2) < 10^-10 ||\n     \
    \   abs(b2 + c2 - a2) < 10^-10\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\
    \t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t\
    @test(candidate(10, 6, 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7,\
    \ 24, 25) == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5,\
    \ 12, 13) == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48,\
    \ 55, 73) == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2,\
    \ 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    if (a>b) && (a>c)\n        return (a^2 == b^2\
    \ + c^2)\n    elseif (b>a) && (b>c)\n        return (b^2 == a^2 + c^2)\n    else\n\
    \        return (c^2 == a^2 + b^2)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\t@test(candidate(1,\
    \ 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t@test(candidate(2,\
    \ 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t@test(candidate(10,\
    \ 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t@test(candidate(15,\
    \ 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t@test(candidate(1,\
    \ 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    sides form a right-angled triangle, False otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n\
    \    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    (a > 0 && b > 0 && c > 0) && ((a^2 + b^2 ==\
    \ c^2) || (a^2 + c^2 == b^2) || (b^2 + c^2 == a^2))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3, 4, 5) == true)\n\
    \t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6, 8) == true)\n\t\
    @test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25) == true)\n\t\
    @test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13) == true)\n\t\
    @test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73) == true)\n\t\
    @test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   11     11\n"
  exit_code: 0
  status: OK
