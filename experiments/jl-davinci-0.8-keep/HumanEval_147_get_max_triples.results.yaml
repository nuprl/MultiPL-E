name: HumanEval_147_get_max_triples
language: jl
results:
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i = 1:n\n        a[i] = i*i - i + 1\n    end\n    num_triples =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0\n                    num_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ num_triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3 return 0\
    \ end\n    a = zeros(Int64, n)\n    for i in 1:n a[i] = i*i - i + 1 end\n    sum_list\
    \ = []\n    for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    push!(sum_list,\
    \ (a[i], a[j], a[k]))\n                end\n            end\n        end\n   \
    \ end\n    return length(sum_list)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n                if\
    \ mod(a[i] + a[j] + a[k], 3) == 0\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvf6kmtsr.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpvf6kmtsr.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvf6kmtsr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvf6kmtsr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvf6kmtsr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpvf6kmtsr.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvf6kmtsr.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvf6kmtsr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvf6kmtsr.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpvf6kmtsr.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvf6kmtsr.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvf6kmtsr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvf6kmtsr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpvf6kmtsr.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvf6kmtsr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # NOTE: I'm not sure\
    \ about my logic when i < j < k\n    # Instead of calculating all possible combinations\
    \ for i, j, k\n    # We will just have to check whether a[i] + a[j] + a[k] is\
    \ a multiple of 3 \n    # For the first element i we check all the possible combinations\
    \ of j and k\n    # Then we just change the value of i to be the next one and\
    \ continue\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5c8q5qey.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5c8q5qey.jl:1\n\
    in expression starting at /tmp/tmp5c8q5qey.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      triples += 1\n                end\n            end\n        end\n    end\n\
    \    return triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrgmhxs8.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrgmhxs8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrgmhxs8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplrgmhxs8.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrgmhxs8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrgmhxs8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplrgmhxs8.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrgmhxs8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrgmhxs8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplrgmhxs8.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrgmhxs8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrgmhxs8.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrgmhxs8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    modulo_3_map = [0,\
    \ 0, 0]\n    modulo_3_map_2 = [0, 0, 0]\n    for i in 1:n\n        modulo_3_map[(i\
    \ * i - i + 1) % 3] += 1\n    for i in 1:3\n        for j in 1:3\n           \
    \ modulo_3_map_2[(i + j) % 3] += modulo_3_map[i] * modulo_3_map[j]\n    return\
    \ modulo_3_map_2[0]\n    \nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpowg7gsio.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpowg7gsio.jl:1\n\
    in expression starting at /tmp/tmpowg7gsio.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    mod3 = zeros(Int64,3)\n\
    \    for i = 1:n\n        a = i*i - i + 1\n        mod3[1+a%3] += 1\n    end\n\
    \    return mod3[1]*mod3[2] + mod3[2]*mod3[3] + mod3[1]*mod3[3]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfd9jq10s.jl:27\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 6 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd9jq10s.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd9jq10s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfd9jq10s.jl:28\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd9jq10s.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd9jq10s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfd9jq10s.jl:29\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 21 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd9jq10s.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd9jq10s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfd9jq10s.jl:30\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 2211 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd9jq10s.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd9jq10s.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfd9jq10s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Not implemented\n\
    \    \"\"\"\n    a = [i*i - i + 1 for i in 1:n]\n    return a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp37dd0usq.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: Cannot `convert` an object of\
    \ type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n \
    \   convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp37dd0usq.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp37dd0usq.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp37dd0usq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp37dd0usq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: Cannot `convert` an object of type Vector{Int64}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp37dd0usq.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp37dd0usq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp37dd0us"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37dd0usq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    for i=1:n\n     \
    \   for j=1:n\n            for k=1:n\n                if\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpaxtkon_b.jl:18\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpaxtkon_b.jl:19\nin expression\
    \ starting at /tmp/tmpaxtkon_b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples_sum = 0\n\
    \    for i in range(1, n - 1)\n        if (i * i - i + 1) % 3 == 0\n         \
    \   triples_sum += 1\n    end\n    return triples_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw37wwlj6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw37wwlj6.jl:1\n\
    in expression starting at /tmp/tmpw37wwlj6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # Initialize the\
    \ array \n    a = [0 for i in 1:n]\n    cnt = 0\n    # Calculate the array \n\
    \    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    # Iterate through\
    \ the array \n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n\
    \                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    cnt +=\
    \ 1\n                end\n            end\n        end\n    end\n    return cnt\n\
    end\n\"\"\"\n    You are given a string s consisting of digits and characters.\
    \ \n    Return the string s without digits. \n    If there are no characters in\
    \ the string return \"No characters found\".\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp894wqwko.jl:34\nin expression starting at\
    \ /tmp/tmp894wqwko.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if (n<=1): return\
    \ 0\n    a = zeros(Int64, n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n \
    \   end\n    cnt = 0\n    for i in 1:n-2\n        if a[i]%3 != 0\n           \
    \ for j in i+1:n-1\n                if (a[i]+a[j])%3 != 0\n                  \
    \  for k in j+1:n\n                        if (a[i]+a[j]+a[k])%3 == 0\n      \
    \                      cnt += 1\n                        end\n               \
    \     end\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcfvu_gjh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfvu_gjh.jl:1\n\
    in expression starting at /tmp/tmpcfvu_gjh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i * i - i +\
    \ 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n - 2\n        for j in i + 1:n\
    \ - 1\n            for k in j + 1:n\n                (i, j, k, a[i] + a[j] + a[k])\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt +=\
    \ 1\n                end\n            end\n        end\n    end\n    return cnt\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n         \
    \       if mod(a[i] + a[j] + a[k], 3) == 0\n                    triples += 1\n\
    \                end\n            end\n        end\n    end\n    return triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu3mee_el.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpu3mee_el.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3mee_el.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3mee_el.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpu3mee_el.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpu3mee_el.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3mee_el.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3mee_el.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpu3mee_el.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpu3mee_el.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3mee_el.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3mee_el.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpu3mee_el.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpu3mee_el.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3mee_el.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    sum_3 = 0\n    for i in 1:n\n        for j in i+1:n\n\
    \            for k in j+1:n\n                if ((i*i-i+1) + (j*j-j+1) + (k*j-k+1))\
    \ % 3 == 0\n                    sum_3 += 1\n                end\n            end\n\
    \        end\n    end\n    return sum_3\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qdyhdcb.jl:35\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qdyhdcb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qdyhdcb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2qdyhdcb.jl:36\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qdyhdcb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qdyhdcb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2qdyhdcb.jl:37\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qdyhdcb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qdyhdcb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp2qdyhdcb.jl:38\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2qdyhdcb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2qdyhdcb.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qdyhdcb.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Return\
    \ number of triples (a[i], a[j], a[k])\n    where i < j < k, a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n    \"\"\"\n    cnt = 0\n    for i = 1:n-2\n        for\
    \ j = i+1:n-1\n            for k = j+1:n\n                if mod(a[i] + a[j] +\
    \ a[k], 3) == 0\n                    cnt += 1\n                end\n         \
    \   end\n        end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq01t68tq.jl:36\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpq01t68tq.jl:23\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq01t68tq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq01t68tq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq01t68tq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpq01t68tq.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq01t68tq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq01t68tq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq01t68tq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpq01t68tq.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq01t68tq.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq01t68tq.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq01t68tq.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpq01t68tq.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq01t68tq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n     \
    \           if ((i*i - i + 1) + (j*j - j + 1) + (k*j - k + 1)) % 3 == 0\n    \
    \                triples += 1\n                end\n            end\n        end\n\
    \    end\n    return triples\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t\
    @test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph75z5agi.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph75z5agi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph75z5agi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph75z5agi.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph75z5agi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph75z5agi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph75z5agi.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph75z5agi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph75z5agi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph75z5agi.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph75z5agi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph75z5agi.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph75z5agi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Generate\
    \ the array \n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
    \ - i + 1\n    and sum the number of triples (a[i], a[j], a[k]) of a where i <\
    \ j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a =\
    \ zeros(Int64, n)\n    max_triples = 0\n    for i in 1:n\n        a[i] = i*i -\
    \ i + 1\n        for j in i+1:n\n            for k in j+1:n\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n                    max_triples += 1\n      \
    \          end\n            end\n        end\n    end\n    return max_triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6qjqbdr_.jl:40\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qjqbdr_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qjqbdr_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp6qjqbdr_.jl:41\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qjqbdr_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qjqbdr_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp6qjqbdr_.jl:42\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 39 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qjqbdr_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qjqbdr_.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp6qjqbdr_.jl:43\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53889 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qjqbdr_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qjqbdr_.jl:39\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qjqbdr_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum_of_triples =\
    \ 0\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n  \
    \              if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    sum_of_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ sum_of_triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nljyndj.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp2nljyndj.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nljyndj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nljyndj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2nljyndj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2nljyndj.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nljyndj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nljyndj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2nljyndj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2nljyndj.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nljyndj.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nljyndj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2nljyndj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp2nljyndj.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nljyndj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n             \
    \   if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                  \
    \  count += 1\n                end\n            end\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmi_udp77.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi_udp77.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi_udp77.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmi_udp77.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi_udp77.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi_udp77.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmi_udp77.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi_udp77.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi_udp77.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmi_udp77.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi_udp77.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi_udp77.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmi_udp77.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in 1:n\n        k = i+2\n        while k <= n\n            @inbounds res +=\
    \ i+k-1\n            k += 1\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_brmm6u0.jl:30\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 30 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_brmm6u0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_brmm6u0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_brmm6u0.jl:31\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 60 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_brmm6u0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_brmm6u0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_brmm6u0.jl:32\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 360 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_brmm6u0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_brmm6u0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_brmm6u0.jl:33\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 485100 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_brmm6u0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_brmm6u0.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_brmm6u0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # return number of\
    \ triples as mentioned in the problem\n    # YOUR CODE HERE\n    pass\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8cobcejf.jl:24\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp8cobcejf.jl:17\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8cobcejf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8cobcejf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8cobcejf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp8cobcejf.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8cobcejf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8cobcejf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8cobcejf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: pass not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp8cobcejf.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8cobcejf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8cobcejf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8cobcejf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: pass not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp8cobcejf.jl:17\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8cobcejf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum_mod = Dict{Int64,Int64}()\n\
    \    a = [i*i-i+1 for i=1:n]\n    for i=1:n-2\n        for j=i+1:n-1\n       \
    \     sum_mod[mod(a[i]+a[j],3)] += 1\n        end\n    end\n    cnt = 0\n    for\
    \ i=1:n-2\n        cnt += sum_mod[mod(3-a[i],3)]\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcjq0nu71.jl:33\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  KeyError: key 1 not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpcjq0nu71.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcjq0nu71.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcjq0nu71.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcjq0nu71.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  KeyError: key 1 not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] get_max_triples(n::Int64)\n     @ Main\
    \ /tmp/tmpcjq0nu71.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcjq0nu71.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcjq0nu71.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcjq0nu71.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  KeyError: key 1 not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] get_max_triples(n::Int64)\n     @ Main\
    \ /tmp/tmpcjq0nu71.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcjq0nu71.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcjq0nu71.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcjq0nu71.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  KeyError: key 1 not found\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./dict.jl:481 [inlined]\n   [2] get_max_"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjq0nu71.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = []\n    for i\
    \ in 1:n\n        push!(a, i*i - i + 1)\n    end\n    triples = 0\n    for i in\
    \ 1:n\n        for j in i+1:n\n            for k in j+1:n\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n                    triples += 1\n          \
    \      end\n            end\n        end\n    end\n    return triples\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    i_limit = n - 2\n    j_limit = n - 1\n    for i in range(1, i_limit)\n  \
    \      for j in range(i+1, j_limit)\n            for k in range(j+1, n)\n    \
    \            sum_ijk = i*i + j*j + k*k - i - j - k + 1\n                if (sum_ijk\
    \ % 3 == 0)\n                    max_triples += 1\n    return max_triples\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpl4snrtnn.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl4snrtnn.jl:1\n\
    in expression starting at /tmp/tmpl4snrtnn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i * i - i +\
    \ 1 for i in 1:n]\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if mod(a[i] + a[j] + a[k], 3) ==\
    \ 0\n                    println(\"a = [\", a[i], \", \", a[j], \", \", a[k],\
    \ \"]\")\n                    cnt += 1\n                end\n            end\n\
    \        end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "a = [1, 7, 13]\na = [1, 7, 13]\na = [1, 7, 31]\na = [1, 13, 31]\na = [7,\
    \ 13, 31]\na = [1, 7, 13]\na = [1, 7, 31]\na = [1, 7, 43]\na = [1, 7, 73]\na =\
    \ [1, 7, 91]\na = [1, 13, 31]\na = [1, 13, 43]\na = [1, 13, 73]\na = [1, 13, 91]\n\
    a = [1, 31, 43]\na = [1, 31, 73]\na = [1, 31, 91]\na = [1, 43, 73]\na = [1, 43,\
    \ 91]\na = [1, 73, 91]\na = [3, 21, 57]\na = [7, 13, 31]\na = [7, 13, 43]\na =\
    \ [7, 13, 73]\na = [7, 13, 91]\na = [7, 31, 43]\na = [7, 31, 73]\na = [7, 31,\
    \ 91]\na = [7, 43, 73]\na = [7, 43, 91]\na = [7, 73, 91]\na = [13, 31, 43]\na\
    \ = [13, 31, 73]\na = [13, 31, 91]\na = [13, 43, 73]\na = [13, 43, 91]\na = [13,\
    \ 73, 91]\na = [31, 43, 73]\na = [31, 43, 91]\na = [31, 73, 91]\na = [43, 73,\
    \ 91]\na = [1, 7, 13]\na = [1, 7, 31]\na = [1, 7, 43]\na = [1, 7, 73]\na = [1,\
    \ 7, 91]\na = [1, 7, 133]\na = [1, 7, 157]\na = [1, 7, 211]\na = [1, 7, 241]\n\
    a = [1, 7, 307]\na = [1, 7, 343]\na = [1, 7, 421]\na = [1, 7, 463]\na = [1, 7,\
    \ 553]\na = [1, 7, 601]\na = [1, 7, 703]\na = [1, 7, 757]\na = [1, 7, 871]\na\
    \ = [1, 7, 931]\na = [1, 7, 1057]\na = [1, 7, 1123]\na = [1, 7, 1261]\na = [1,\
    \ 7, 1333]\na = [1, 7, 1483]\na = [1, 7, 1561]\na = [1, 7, 1723]\na = [1, 7, 1807]\n\
    a = [1, 7, 1981]\na = [1, 7, 2071]\na = [1, 7, 2257]\na = [1, 7, 2353]\na = [1,\
    \ 7, 2551]\na = [1, 7, 2653]\na = [1, 7, 2863]\na = [1, 7, 2971]\na = [1, 7, 3193]\n\
    a = [1, 7, 3307]\na = [1, 7, 3541]\na = [1, 7, 3661]\na = [1, 7, 3907]\na = [1,\
    \ 7, 4033]\na = [1, 7, 4291]\na = [1, 7, 4423]\na = [1, 7, 4693]\na = [1, 7, 4831]\n\
    a = [1, 7, 5113]\na = [1, 7, 5257]\na = [1, 7, 5551]\na = [1, 7, 5701]\na = [1,\
    \ 7, 6007]\na = [1, 7, 6163]\na = [1, 7, 6481]\na = [1, 7, 6643]\na = [1, 7, 6973]\n\
    a = [1, 7, 7141]\na = [1, 7, 7483]\na = [1, 7, 7657]\na = [1, 7, 8011]\na = [1,\
    \ 7, 8191]\na = [1, 7, 8557]\na = [1, 7, 8743]\na = [1, 7, 9121]\na = [1, 7, 9313]\n\
    a = [1, 7, 9703]\na = [1, 7, 9901]\na = [1, 13, 31]\na = [1, 13, 43]\na = [1,\
    \ 13, 73]\na = [1, 13, 91]\na = [1, 13, 133]\na = [1, 13, 157]\na = [1, 13, 211]\n\
    a = [1, 13, 241]\na = [1, 13, 307]\na = [1, 13, 343]\na = [1, 13, 421]\na = [1,\
    \ 13, 463]\na = [1, 13, 553]\na = [1, 13, 601]\na = [1, 13, 703]\na = [1, 13,\
    \ 757]\na = [1, 13, 871]\na = [1, 13, 931]\na = [1,"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if(i+j+k)%3 == 0\n                    total += 1\n                end\n\
    \            end\n        end\n    end\n    return total\nend\n@timeit get_max_triples(5)\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @timeit not defined\nin expression starting\
    \ at /tmp/tmpi4avyecs.jl:27\nin expression starting at /tmp/tmpi4avyecs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum(i*i-i+1 for i\
    \ in 1:n)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dqu77x9.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 45 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dqu77x9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dqu77x9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2dqu77x9.jl:23\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 76 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dqu77x9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dqu77x9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2dqu77x9.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 340 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dqu77x9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dqu77x9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2dqu77x9.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 333400 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2dqu77x9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2dqu77x9.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dqu77x9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    counter = 0\n   \
    \ for i in range(1, n):\n        for j in range(i+1, n):\n            for k in\
    \ range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1)\
    \ % 3 == 0:\n                    counter += 1\n    return counter\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3zix20i.jl:17\nin expression starting at\
    \ /tmp/tmpe3zix20i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if ((i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1)) % 3 == 0\n        \
    \            res += 1\n                end\n            end\n        end\n   \
    \ end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i * i - i +\
    \ 1 for i in 1:n]\n    count = 0\n    for i in 1:n\n        for j in (i+1):n\n\
    \            for k in (j+1):n\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n                    count += 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend\n@time println(get_max_triples(10^6))\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n \n        a[i] = i*i - i + 1\n    end \n    c = 0\n   \
    \ for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0\n                    c += 1\n   \
    \             end\n            end\n        end\n    end\n    return c\nend \n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n                if\
    \ ((i*i - i + 1) + (j*j - j + 1) + (k*j - k + 1)) % 3 == 0\n                 \
    \   sum += 1\n                end\n            end\n        end\n    end\n   \
    \ return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph33egrv9.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph33egrv9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph33egrv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph33egrv9.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph33egrv9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph33egrv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph33egrv9.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph33egrv9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph33egrv9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph33egrv9.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph33egrv9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph33egrv9.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph33egrv9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (i+j+k) % 3 == 0\n                    res += 1\n                end\n\
    \            end\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwfvf_fa.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwfvf_fa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwfvf_fa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmwfvf_fa.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwfvf_fa.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwfvf_fa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmwfvf_fa.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 42 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwfvf_fa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwfvf_fa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmwfvf_fa.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53922 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmwfvf_fa.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmwfvf_fa.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwfvf_fa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    cache\
    \ = Dict{Int64, Bool}()\n    # cache[i] is a triple of i - 1 for which the following\
    \ is true\n    # i*i-i+1 + (i-1)*(i-1)-(i-1)+1 + (i-2)*(i-2)-(i-2)+1 === 0 (mod\
    \ 3)\n    for i in 1:n\n        if i in cache\n            res += cache[i]\n \
    \       end\n        if i*i-i+1 === 0\n            cache[i] = true\n        else\n\
    \            cache[i] = false\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe6yd4qcb.jl:36\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  AbstractDict collections only contain Pairs;\n\
    \  Either look for e.g. A=>B instead, or use the `keys` or `values`\n  function\
    \ if you are looking for a key or value respectively.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] in(p::Int64, a::Dict{Int64, Bool})\n     @\
    \ Base ./abstractdict.jl:28\n   [3] get_max_triples(n::Int64)\n     @ Main /tmp/tmpe6yd4qcb.jl:20\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpe6yd4qcb.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpe6yd4qcb.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe6yd4qcb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  AbstractDict collections only contain Pairs;\n  Either\
    \ look for e.g. A=>B instead, or use the `keys` or `values`\n  function if you\
    \ are looking for a key or value respectively.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] in(p::Int64, a::Dict{Int64, Bool})\n     @\
    \ Base ./abstractdict.jl:28\n   [3] get_max_triples(n::Int64)\n     @ Main /tmp/tmpe6yd4qcb.jl:20\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpe6yd4qcb.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpe6yd4qcb.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe6yd4qcb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  AbstractDict collections only contain Pairs;\n  Either\
    \ look for e.g. A=>B instead, or use the `keys` or `values`\n  function if you\
    \ are looking for a key or value respectively.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] in(p::Int64, a::D"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6yd4qcb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = zeros(Int64,\
    \ n)\n    for i = 1:n\n        triples[i] = i*i - i + 1\n    end\n    count =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n     \
    \           if (triples[i] + triples[j] + triples[k]) % 3 == 0\n             \
    \       count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nprintln(get_max_triples(5))\nprintln(get_max_triples(7))\n\
    println(get_max_triples(100))\nprintln(get_max_triples(1000))\nprintln(get_max_triples(10000))\n\
    println(get_max_triples(100000))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t\
    @test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: b'1\n10\n53361\n55333611\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    return Int64(n*(n-1)*(n-2)/6) - Int64(n*(n-1)/2) + Int64(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxic7hchk.jl:25\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxic7hchk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxic7hchk.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxic7hchk.jl:26\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 11 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxic7hchk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxic7hchk.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxic7hchk.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 85 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxic7hchk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxic7hchk.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxic7hchk.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 156850 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxic7hchk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxic7hchk.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxic7hchk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = fill(0, n)\n\
    \    count = 0\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    cnt = 0\n    for\
    \ i in 1:n\n        for j in i+1:n\n            if (i*i-i+1 + j*j-j+1) % 3 ==\
    \ 0\n                for k in j+1:n\n                    if (i*i-i+1 + j*j-j+1\
    \ + k*k-k+1) % 3 == 0\n                        cnt += 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    return cnt\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzhat8xk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzhat8xk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzhat8xk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzhat8xk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzhat8xk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzhat8xk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzhat8xk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 1 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzhat8xk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzhat8xk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmptzhat8xk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 5456 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptzhat8xk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptzhat8xk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzhat8xk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    x\
    \ = 1\n    while (x + 2) < n\n        y = x + 1\n        while (y + 1) < n\n \
    \           z = y + 1\n            while z < n\n                if (a[x] + a[y]\
    \ + a[z]) % 3 == 0\n                    count += 1\n                end\n    \
    \            z += 1\n            end\n            y += 1\n        end\n      \
    \  x += 1\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1msowrhp.jl:38\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp1msowrhp.jl:22\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1msowrhp.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1msowrhp.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1msowrhp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp1msowrhp.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1msowrhp.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1msowrhp.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1msowrhp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp1msowrhp.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1msowrhp.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1msowrhp.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp1msowrhp.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp1msowrhp.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1msowrhp.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    i, j, k = 1, 2, 3\n\
    \    count = 0\n    while i < n-2 \n        while j < n-1\n            while k\
    \ < n\n                ijk = i + j + k\n                if mod(ijk, 3) == 0\n\
    \                    count += 1\n                end\n                k += 1\n\
    \            end\n            j += 1\n        end\n        i += 1\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwsgx5sd9.jl:38\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsgx5sd9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsgx5sd9.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwsgx5sd9.jl:39\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 3 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsgx5sd9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsgx5sd9.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwsgx5sd9.jl:40\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 33 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsgx5sd9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsgx5sd9.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsgx5sd9.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return (n-2)*(n-1)*n//6\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55olgmcj.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55olgmcj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55olgmcj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55olgmcj.jl:23\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55olgmcj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55olgmcj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55olgmcj.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55olgmcj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55olgmcj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55olgmcj.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55olgmcj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55olgmcj.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55olgmcj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    counter = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if a[i] + a[j] + a[k] % 3 == 0\n                    counter +=\
    \ 1\n                end\n            end\n        end\n    end\n    return counter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8xsd8603.jl:36\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xsd8603.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xsd8603.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8xsd8603.jl:37\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xsd8603.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xsd8603.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8xsd8603.jl:38\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xsd8603.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xsd8603.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8xsd8603.jl:39\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xsd8603.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xsd8603.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8xsd8603.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    return ceil(Int64, (n-2)/3)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpco4aet2h.jl:26\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco4aet2h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco4aet2h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpco4aet2h.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 3 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco4aet2h.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco4aet2h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpco4aet2h.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 33 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco4aet2h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco4aet2h.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpco4aet2h.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [1:n;] .+ [0:n;]\
    \ .- [0:n;] .* [1:n;]\n    a = collect(a)\n    count = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz0xriqaq.jl:34\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  DimensionMismatch(\"arrays could not be broadcast\
    \ to a common size; got a dimension with lengths 5 and 6\")\n  Stacktrace:\n \
    \   [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] _axes\n  \
    \    @ ./broadcast.jl:224 [inlined]\n    [6] axes\n      @ ./broadcast.jl:222\
    \ [inlined]\n    [7] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [8]\
    \ instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [9] materialize\n   \
    \   @ ./broadcast.jl:860 [inlined]\n   [10] get_max_triples(n::Int64)\n      @\
    \ Main /tmp/tmpz0xriqaq.jl:15\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpz0xriqaq.jl:34 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpz0xriqaq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpz0xriqaq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  DimensionMismatch(\"arrays could not be broadcast to a\
    \ common size; got a dimension with lengths 6 and 7\")\n  Stacktrace:\n    [1]\
    \ _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510\
    \ [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n \
    \   [4] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] _axes\n  \
    \    @ ./broadcast.jl:224 [inlined]\n    [6] axes\n      @ ./broadcast.jl:222\
    \ [inlined]\n    [7] combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [8]\
    \ instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [9] materialize\n   \
    \   @ ./broadcast.jl:860 [inlined]\n   [10] get_max_triples(n::Int64)\n      @\
    \ Main /tmp/tmpz0xriqaq.jl:15\n   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0xriqaq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum_triples = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n       \
    \             sum_triples += 1\n                end\n            end\n       \
    \ end\n    end\n    return sum_triples\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt70k10_i.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70k10_i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70k10_i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt70k10_i.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70k10_i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70k10_i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt70k10_i.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70k10_i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70k10_i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt70k10_i.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt70k10_i.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt70k10_i.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt70k10_i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    N = n - 2\n    i\
    \ = div(N, 3)\n    j = div(2 * N, 3)\n    return i * (i + 1) * j * (j + 1) / 4\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3nadbjvx.jl:25\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nadbjvx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nadbjvx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3nadbjvx.jl:26\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nadbjvx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nadbjvx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3nadbjvx.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 45 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nadbjvx.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nadbjvx.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3nadbjvx.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 1132560 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nadbjvx.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nadbjvx.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nadbjvx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Get the\
    \ max number of triples from an array of squares from 1 to n\n    \"\"\"\n   \
    \ count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in\
    \ j+1:n\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0\n         \
    \           count += 1\n                end\n            end\n        end\n  \
    \  end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return 0\nend\n@test\
    \ get_max_triples(5) == 1\n@test get_max_triples(12) == 8\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpgwjff_bg.jl:17\nin expression starting at /tmp/tmpgwjff_bg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in range(1, n):\n        for j in range(i+1, n):\n            if i + j > n:\n\
    \                break\n            for k in range(j+1, n):\n                if\
    \ (i + j + k) % 3 == 0:\n                    count += 1\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30gx3cci.jl:17\nin expression starting at\
    \ /tmp/tmp30gx3cci.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return sum(tr*(tr+1)//2\
    \ for tr in [tr for tr in 1:n if (((tr+1)*tr)%3==0)]) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_r666voh.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 24 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r666voh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r666voh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_r666voh.jl:23\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 45 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r666voh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r666voh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_r666voh.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 126 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r666voh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r666voh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_r666voh.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 112761 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r666voh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r666voh.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_r666voh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in range(1, n-1)\n        for j in range(i+1, n)\n            for k in range(j+1,\
    \ n+1)\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n\
    \                    res += 1\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzawloj2v.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzawloj2v.jl:1\n\
    in expression starting at /tmp/tmpzawloj2v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum_ = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if ((i*i-i+1) + (j*j-j+1) + (k*k-k+1)) % 3 == 0\n                    sum_\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ sum_\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t\
    @test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) ==\
    \ 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpna8fhyjy.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpna8fhyjy.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpna8fhyjy.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpna8fhyjy.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpna8fhyjy.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpna8fhyjy.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpna8fhyjy.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpna8fhyjy.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpna8fhyjy.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpna8fhyjy.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpna8fhyjy.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpna8fhyjy.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpna8fhyjy.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpna8fhyjy.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpna8fhyjy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    k::Int64 = n\n  \
    \  cnt::Int64 = 0\n    while k >= 1\n        j::Int64 = k - 1\n        while j\
    \ >= 1\n            i::Int64 = j - 1\n            while i >= 1\n             \
    \   if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                  \
    \  cnt += 1\n                end\n                i -= 1\n            end\n  \
    \          j -= 1\n        end\n        k -= 1\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return floor(Int64,\
    \ n / 3) * (n - (2 * floor(Int64, n / 3)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp61aeuttz.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61aeuttz.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61aeuttz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp61aeuttz.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 12 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61aeuttz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61aeuttz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp61aeuttz.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 1122 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61aeuttz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61aeuttz.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61aeuttz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    \"\"\
    \"\n    @param i: index\n    @param j: index\n    @param k: index\n    @return:\
    \ the summation of a[i], a[j], a[k]\n    \"\"\"\n    function add_values(i::Int64,\
    \ j::Int64, k::Int64)::Int64\n        return i*i - i + 1 + j*j - j + 1 + k*k -\
    \ k + 1\n    end\n    \"\"\"\n    @param i: index\n    @param j: index\n    @param\
    \ k: index\n    @return: if the summation of a[i], a[j], a[k] is a multiple of\
    \ 3\n    \"\"\"\n    function test_multiple_3(i::Int64, j::Int64, k::Int64)::Bool\n\
    \        return (add_values(i, j, k) % 3) == 0\n    end\n    \"\"\"\n    @param\
    \ i: index\n    @param j: index\n    @param k: index\n    @return: if a[i] < a[j]\
    \ < a[k]\n    \"\"\"\n    function test_order(i::Int64, j::Int64, k::Int64)::Bool\n\
    \        return i < j < k\n    end\n    \"\"\"\n    @param n: the length of the\
    \ array\n    @return: the count of triples\n    \"\"\"\n    function count_triples(n::Int64)::Int64\n\
    \        count = 0\n        # Outer loop to handle number of elements \n     \
    \   # In first loop we fix the first element \n        # and find the other two\
    \ elements \n        for i = 1:n-2\n            # In second loop we fix the second\
    \ element \n            # and find the third element \n            for j = i+1:n-1\n\
    \                # In third loop we fix the third element \n                #\
    \ and find the other two elements \n                for k = j+1:n\n          \
    \          if test_multiple_3(i, j, k) && test_order(i, j, k)\n              \
    \          count += 1\n                    end\n                end\n        \
    \    end\n        end\n        return count\n    end\n    \"\"\"\n    @param n:\
    \ the length of the\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qrzumg1.jl:1\nin expression starting at /tmp/tmp7qrzumg1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    return Int64(n * (n - 1) * (n - 2) / 6)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbdn2_ywq.jl:25\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdn2_ywq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdn2_ywq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbdn2_ywq.jl:26\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdn2_ywq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdn2_ywq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbdn2_ywq.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdn2_ywq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdn2_ywq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbdn2_ywq.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbdn2_ywq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbdn2_ywq.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbdn2_ywq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0\n  \
    \                  res += 1\n                end\n            end\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if mod(i^2 - i + 1 + j^2 - j + 1 + k^2 - k + 1, 3) == 0\n            \
    \        count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    get the\
    \ maximum number of valid triples from array a\n    \"\"\"\n    # odd number:\
    \ a[i] + a[j] + a[k] = (i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1) = 3*(i*j\
    \ + j*k + k*i)\n    # even number: a[i] + a[j] + a[k] = (i^2 - i + 1) + (j^2 -\
    \ j + 1) + (k^2 - k + 1) = 3*(i*j + j*k + k*i) + 1\n    # so we will only count\
    \ the valid triples for odd numbers\n    s = n % 2 == 0 ? n/2 : (n - 1)/2\n  \
    \  s == 0 ? 0 : div(3*s*(s + 1) + 1, 2)\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1fpi2z7n.jl:30\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 9 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fpi2z7n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fpi2z7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1fpi2z7n.jl:31\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 18 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fpi2z7n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fpi2z7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1fpi2z7n.jl:32\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 45 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fpi2z7n.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fpi2z7n.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1fpi2z7n.jl:33\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 3825 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fpi2z7n.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fpi2z7n.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fpi2z7n.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Returns\
    \ the number of valid triples\n    \"\"\"\n    # create the array\n    a = [ i\
    \ * i - i + 1 for i in 1:n ]\n    # iterate through each combination\n    cnt\
    \ = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt +=\
    \ 1\n                end\n            end\n        end\n    end\n    return cnt\n\
    end\n@testset \"example\" begin\n    @test get_max_triples(5) == 1\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp8w3uo9hy.jl:33\nin expression starting at /tmp/tmp8w3uo9hy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    len = n\n    if n\
    \ >= 1\n        a = zeros(Int64, n)\n        for i = 1:n\n            a[i] = i\
    \ * i - i + 1\n        end\n    end\n    if n >= 3\n        count = 0\n      \
    \  for i = 1:n-2\n            for j = i+1:n-1\n                for k = j+1:n\n\
    \                    if a[i] + a[j] + a[k] % 3 == 0\n                        count\
    \ += 1\n                    end\n                end\n            end\n      \
    \  end\n        return count\n    else\n        return 0\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00ztary5.jl:43\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00ztary5.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00ztary5.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp00ztary5.jl:44\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00ztary5.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00ztary5.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp00ztary5.jl:45\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00ztary5.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00ztary5.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp00ztary5.jl:46\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00ztary5.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00ztary5.jl:42\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00ztary5.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n             \
    \   if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                  \
    \  count += 1\n                end\n            end\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    ans = 0\n    for i in 3:n-1\n        ans += (i-2)\n\
    \    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gf8p7c1.jl:29\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gf8p7c1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gf8p7c1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gf8p7c1.jl:30\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gf8p7c1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gf8p7c1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gf8p7c1.jl:31\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 28 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gf8p7c1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gf8p7c1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gf8p7c1.jl:32\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 4753 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gf8p7c1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gf8p7c1.jl:28\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gf8p7c1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    n = n - 2\n    ans\
    \ = n\n    rem = n % 3\n    if rem == 0\n        return n*(n-1)*(n-2)/6\n    elseif\
    \ rem == 1\n        return (n-1)*(n-1)*(n-3)/6\n    elseif rem == 2\n        return\
    \ (n-1)*(n-2)*(n-2)/6\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiukct5md.jl:32\n  Test threw exception\n\
    \  Expression: candidate(6) == 4\n  InexactError: Int64(1.5)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] get_max_triples(n::Int64)\n     @ Main /tmp/tmpiukct5md.jl:21\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpiukct5md.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpiukct5md.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpiukct5md.jl:33\n  Expression: candidate(10) == 36\n \
    \  Evaluated: 42 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiukct5md.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiukct5md.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpiukct5md.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 148992 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiukct5md.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiukct5md.jl:30\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     2      1      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiukct5md.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n                if\
    \ (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                    res\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcst4oxtz.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcst4oxtz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcst4oxtz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcst4oxtz.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcst4oxtz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcst4oxtz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcst4oxtz.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcst4oxtz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcst4oxtz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcst4oxtz.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcst4oxtz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcst4oxtz.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcst4oxtz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return sum( [1 for\
    \ i in 1:n-2, j in i+1:n-1, k in j+1:n if is_multiple(i,j,k)] )\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_c77kj02.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp_c77kj02.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_c77kj02.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_c77kj02.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_c77kj02.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp_c77kj02.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_c77kj02.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_c77kj02.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_c77kj02.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp_c77kj02.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_c77kj02.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_c77kj02.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_c77kj02.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp_c77kj02.jl:15\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_c77kj02.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # your code goes\
    \ here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgdeldiq3.jl:23\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdeldiq3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdeldiq3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpgdeldiq3.jl:24\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdeldiq3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdeldiq3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpgdeldiq3.jl:25\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdeldiq3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdeldiq3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpgdeldiq3.jl:26\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdeldiq3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdeldiq3.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdeldiq3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return n - 2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_ijxiwa.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_ijxiwa.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_ijxiwa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpq_ijxiwa.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 8 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_ijxiwa.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_ijxiwa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpq_ijxiwa.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 98 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_ijxiwa.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_ijxiwa.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_ijxiwa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [n * n - n +\
    \ 1 for n in 1:n]\n    max_triples = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ \n                    max_triples += 1\n                end\n            end\n\
    \        end\n    end\n    return max_triples\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    for\
    \ i in 2:n-1\n        if ((i^2 - i + 1) + (i^2 - (2*i) + 1) + (i^2 - (3*i) + 1))\
    \ % 3 == 0\n            sum += 1\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0htbuwcn.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0htbuwcn.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0htbuwcn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0htbuwcn.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 8 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0htbuwcn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0htbuwcn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0htbuwcn.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 98 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0htbuwcn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0htbuwcn.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0htbuwcn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Gets\
    \ the number of maximum triples that satisfy the problem's condition\n    \"\"\
    \"\n    total = n::Int64\n    n = n - 1 \n    while n > 0 \n        total += n\n\
    \        n -= 1\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb013tbzb.jl:31\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 15 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb013tbzb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb013tbzb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb013tbzb.jl:32\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 21 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb013tbzb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb013tbzb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb013tbzb.jl:33\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 55 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb013tbzb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb013tbzb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpb013tbzb.jl:34\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 5050 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb013tbzb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb013tbzb.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb013tbzb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    max_triples = 0\n    for i in 1:n\n        a[i] = i*i - i + 1\n    \
    \    max_triples += ((i-1)*(i-2))/2\n    end\n    return max_triples\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzm9wr1w6.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm9wr1w6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm9wr1w6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzm9wr1w6.jl:29\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm9wr1w6.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm9wr1w6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzm9wr1w6.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm9wr1w6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm9wr1w6.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpzm9wr1w6.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzm9wr1w6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzm9wr1w6.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzm9wr1w6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    return Int64(ceil(n/3.0) - 1) * Int64(ceil(n/3.0) -\
    \ 2) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t\
    @test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) ==\
    \ 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp06jdk8zs.jl:25\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06jdk8zs.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06jdk8zs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp06jdk8zs.jl:26\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06jdk8zs.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06jdk8zs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp06jdk8zs.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 3 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06jdk8zs.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06jdk8zs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp06jdk8zs.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 528 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp06jdk8zs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp06jdk8zs.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp06jdk8zs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n\n        for j in i+1:n\n   \
    \         for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n \
    \                   count += 1\n                end\n            end\n       \
    \ end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (i+j+k)%3 == 0\n                    total += 1\n                end\n\
    \            end\n        end\n    end\n    return total\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2hdtfrf.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2hdtfrf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2hdtfrf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi2hdtfrf.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2hdtfrf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2hdtfrf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi2hdtfrf.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 42 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2hdtfrf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2hdtfrf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi2hdtfrf.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53922 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi2hdtfrf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi2hdtfrf.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2hdtfrf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # all values of array\
    \ a, is a multiple of 3, \n    # sum of a multiple of 3 and a multiple of 3 is\
    \ a multiple of 3\n    return (n*(n-1)*(n-2))//6\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpod9so9vg.jl:24\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod9so9vg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod9so9vg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpod9so9vg.jl:25\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod9so9vg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod9so9vg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpod9so9vg.jl:26\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod9so9vg.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod9so9vg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpod9so9vg.jl:27\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod9so9vg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod9so9vg.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpod9so9vg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n     \
    \           if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n          \
    \          triples += 1\n                end\n            end\n        end\n \
    \   end\n    return triples\nend\n@btime get_max_triples(5)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @btime not defined\nin expression starting\
    \ at /tmp/tmpp6cjtisg.jl:27\nin expression starting at /tmp/tmpp6cjtisg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = Array{Int64}(1:n)\
    \ .^ 2 .- 1 .+ 1\n    return sum([a[i] + a[j] + a[k] % 3 == 0 ? 1 : 0 for i in\
    \ 1:n-2, j in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppaq9ef3d.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmppaq9ef3d.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaq9ef3d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaq9ef3d.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppaq9ef3d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmppaq9ef3d.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaq9ef3d.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaq9ef3d.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppaq9ef3d.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmppaq9ef3d.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppaq9ef3d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppaq9ef3d.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppaq9ef3d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmppaq9ef3d.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppaq9ef3d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # your code goes\
    \ here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpku9jtkat.jl:23\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpku9jtkat.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpku9jtkat.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpku9jtkat.jl:24\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpku9jtkat.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpku9jtkat.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpku9jtkat.jl:25\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpku9jtkat.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpku9jtkat.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpku9jtkat.jl:26\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpku9jtkat.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpku9jtkat.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpku9jtkat.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for a in 1:n\n        for b in a+1:n\n            for c in b+1:n\n         \
    \       if (a + b + c) % 3 == 0\n                    triples += 1\n          \
    \      end\n            end\n        end\n    end\n    return triples\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6rebqh0k.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6rebqh0k.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6rebqh0k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rebqh0k.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6rebqh0k.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6rebqh0k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rebqh0k.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 42 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6rebqh0k.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6rebqh0k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6rebqh0k.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53922 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6rebqh0k.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6rebqh0k.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rebqh0k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = Int64[]\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n       \
    \             push!(triples, [i, j, k])\n                end\n            end\n\
    \        end\n    end\n    return length(triples)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoiox0nch.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: Cannot `convert` an object of\
    \ type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n \
    \   convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] get_max_triples(n::Int64)\n     @ Main /tmp/tmpoiox0nch.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoiox0nch.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoiox0nch.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpoiox0nch.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: Cannot `convert` an object of type Vector{Int64}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Int64}, item::Vector{Int64})\n\
    \     @ Base ./array.jl:994\n   [2] get_max_triples(n::Int64)\n     @ Main /tmp/tmpoiox0nch.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoiox0nch.jl:33 [inlined]\n\
    \ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoiox0nch.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = Array{Int64}(undef,\
    \ n)\n    sum = 0\n    for i = 1:n\n        a[i] = i * i - i + 1\n        sum\
    \ += a[i]\n    end\n    (sum % 3 == 0 ? 1 : 0) * (n - 2)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnc4jtr1x.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc4jtr1x.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc4jtr1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnc4jtr1x.jl:29\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc4jtr1x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc4jtr1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnc4jtr1x.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc4jtr1x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc4jtr1x.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpnc4jtr1x.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc4jtr1x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc4jtr1x.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnc4jtr1x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n \n        a[i] = i*i - i + 1\n    end\n    cnt = 0\n  \
    \  for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt += 1\n\
    \                end\n            end\n        end\n    end\n    return cnt\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [0 for i in 1:n]\n\
    \    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = ones(Int64, n)\n\
    \    for i = 2:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            for k = j+1:n\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n            \
    \    end\n            end\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    m = 0\n    for i\
    \ in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n           \
    \     if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n          \
    \          m += 1\n                end\n            end\n        end\n    end\n\
    \    return m\nend\n@btime get_max_triples(10000)\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @btime not defined\nin expression starting\
    \ at /tmp/tmp2u8642ke.jl:27\nin expression starting at /tmp/tmp2u8642ke.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n         \
    \       if ((i^2 - i + 1) + (j^2 - j + 1) + (k^2 - k + 1)) % 3 == 0\n        \
    \            triples += 1\n                end\n            end\n        end\n\
    \    end\n    return triples\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t\
    @test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    n -= 1\n    out =\
    \ 0\n    i = 0\n    while i < n\n        j = i + 1\n        while j < n\n    \
    \        k = j + 1\n            while k < n\n                out += (n*n - n +\
    \ 1 + (j - i)*(n - k)) % 3 == 0 ? 1 : 0\n                k += 1\n            end\n\
    \            j += 1\n        end\n        i += 1\n    end\n    return out\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2hwvmqe.jl:37\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2hwvmqe.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2hwvmqe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv2hwvmqe.jl:38\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2hwvmqe.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2hwvmqe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv2hwvmqe.jl:39\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 24 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2hwvmqe.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2hwvmqe.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpv2hwvmqe.jl:40\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 35904 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2hwvmqe.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2hwvmqe.jl:36\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2hwvmqe.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n     \
    \           if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n    \
    \                max_triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return max_triples\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Get number\
    \ of triples by brute force.\n    \"\"\"\n    number_of_triples = 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiedgnpz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiedgnpz.jl:1\n\
    in expression starting at /tmp/tmpgiedgnpz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    n_triples = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                sum = a[i] + a[j] + a[k]\n      \
    \          if sum % 3 == 0\n                    n_triples += 1\n             \
    \   end\n            end\n        end\n    end\n    return n_triples\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    c = count(1:n)\n\
    \    t = c*c-c+1\n    r = t[1] + t[2] + t[3]\n    println(r)\n    #@show c\n \
    \   #@show t\n    #@show r\n    #return count(t[i] + t[j] + t[k] for i in 1:n,\
    \ j in i+1:n, k in j+1:n)%3==0\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1j94uiqa.jl:30\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  TypeError: non-boolean (Int64) used in boolean\
    \ context\n  Stacktrace:\n    [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n\
    \    [2] _count\n      @ ./reducedim.jl:407 [inlined]\n    [3] #count#735\n  \
    \    @ ./reducedim.jl:405 [inlined]\n    [4] #count#734\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [5] count\n      @ ./reducedim.jl:404 [inlined]\n    [6] get_max_triples(n::Int64)\n\
    \      @ Main /tmp/tmp1j94uiqa.jl:15\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1j94uiqa.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1j94uiqa.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1j94uiqa.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  TypeError: non-boolean (Int64) used in boolean context\n\
    \  Stacktrace:\n    [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n  \
    \  [2] _count\n      @ ./reducedim.jl:407 [inlined]\n    [3] #count#735\n    \
    \  @ ./reducedim.jl:405 [inlined]\n    [4] #count#734\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [5] count\n      @ ./reducedim.jl:404 [inlined]\n    [6] get_max_triples(n::Int64)\n\
    \      @ Main /tmp/tmp1j94uiqa.jl:15\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1j94uiqa.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1j94uiqa.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1j94uiqa.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  TypeError: non-boolean (Int64) used in boolean context\n\
    \  Stacktrace:\n    [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n  \
    \  [2] _count\n      @ ./reducedim.jl:407 [inlined]\n    [3] #co"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1j94uiqa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl9djm_mo.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9djm_mo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9djm_mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl9djm_mo.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9djm_mo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9djm_mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl9djm_mo.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9djm_mo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9djm_mo.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl9djm_mo.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl9djm_mo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl9djm_mo.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl9djm_mo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    triple_sum = 0\n    triple_count = 0\n    for i in 1:n\n\
    \        for j in i+1:n\n            for k in j+1:n\n                triple_sum\
    \ = a[i] + a[j] + a[k]\n                if triple_sum % 3 == 0\n             \
    \       triple_count += 1\n                end\n            end\n        end\n\
    \    end\n    return triple_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3 \n     \
    \   return 0\n    end\n    return (1:n-2) |> sum\nend\nprintln(get_max_triples(5))\n\
    println(get_max_triples(10))\nprintln(get_max_triples(100))\nprintln(get_max_triples(1000))\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "6\n36\n4851\n498501\ntest set: Test Failed at /tmp/tmpmxvo53ht.jl:29\n\
    \  Expression: candidate(5) == 1\n   Evaluated: 6 == 1\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxvo53ht.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxvo53ht.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmxvo53ht.jl:30\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 10 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxvo53ht.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxvo53ht.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmxvo53ht.jl:32\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 4851 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmxvo53ht.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmxvo53ht.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmxvo53ht.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyr310wkx.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpyr310wkx.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr310wkx.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr310wkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyr310wkx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpyr310wkx.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr310wkx.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr310wkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyr310wkx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpyr310wkx.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyr310wkx.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyr310wkx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyr310wkx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpyr310wkx.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyr310wkx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    if n\
    \ % 3 == 0\n        sum += comb(n, 3)\n    end\n    if n % 3 == 1\n        sum\
    \ += comb(n - 1, 3)\n    end\n    if n % 3 == 2\n        sum += comb(n - 2, 3)\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3fjo41l1.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: comb not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp3fjo41l1.jl:23\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fjo41l1.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fjo41l1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp3fjo41l1.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: comb not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp3fjo41l1.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fjo41l1.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fjo41l1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp3fjo41l1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: comb not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp3fjo41l1.jl:20\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fjo41l1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fjo41l1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp3fjo41l1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: comb not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp3fjo41l1.jl:20\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fjo41l1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    number_triples =\
    \ 0\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n  \
    \              if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n       \
    \             number_triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return number_triples\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Calculates\
    \ the number of triples of an integer array where the elements of the triple \n\
    \    sum up to a multiple of 3. \n    \"\"\"\n    a, b, c = 0, 0, 0\n    for i\
    \ = 1:n-2\n        a += i\n        b += i^2\n        c += i^3\n    end\n    a\
    \ *= a\n    b *= a\n    c *= a\n    a *= n*(n+1)\n    c *= n*(n+1)*(2n+1)\n  \
    \  a += b\n    a += c\n    a //= 18\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt9n5ggfi.jl:40\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 23848 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9n5ggfi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9n5ggfi.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpt9n5ggfi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  InexactError: Int64(911200//3)\n  Stacktrace:\n   [1] Integer\n\
    \     @ ./rational.jl:110 [inlined]\n   [2] convert\n     @ ./number.jl:7 [inlined]\n\
    \   [3] get_max_triples(n::Int64)\n     @ Main /tmp/tmpt9n5ggfi.jl:33\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpt9n5ggfi.jl:41 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpt9n5ggfi.jl:39\ntest set:\
    \ Test Failed at /tmp/tmpt9n5ggfi.jl:42\n  Expression: candidate(10) == 36\n \
    \  Evaluated: 215573328 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt9n5ggfi.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt9n5ggfi.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpt9n5ggfi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  InexactError: Int64(-1054101988123852027//18)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] get_max_triples(n::Int64)\n     @ Main\
    \ /tmp/tmpt9n5ggfi.jl:33\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9n5ggfi.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      sum += 1\n                end\n            end\n        end\n    end\n\
    \    return sum\nend\n \n@time for n in 100:100:10_000\n    get_max_triples(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # generator is faster\
    \ than map\n    a = [i*i - i + 1 for i in 1:n]\n    mod3 = [i%3 for i in a]\n\
    \    # mod3[i] + mod3[j] + mod3[k] = 0 \n    # ==> mod3[i] + mod3[j] = 3 - mod3[k]\n\
    \    # ==> mod3[j] = 3 - mod3[i] - mod3[k]\n    cnt = Dict(0=>0, 1=>0, 2=>0)\n\
    \    for v in mod3\n        cnt[v] += 1\n    # k = 0\n    res = cnt[0]*(cnt[0]-1)*(cnt[0]-2)//6\n\
    \    # k = 1\n    res += cnt[1]*(cnt[1]-1)*(cnt[2]-2)//6\n    # k = 2\n    res\
    \ += cnt[2]*(cnt[2]-1)*(cnt[1]-2)//6\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaj9iusi3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaj9iusi3.jl:1\n\
    in expression starting at /tmp/tmpaj9iusi3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return sum( sum(\
    \ isa(tup, Tuple{Int64,Int64,Int64}) for tup in combinations(3, i)) for i in 1:n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptjfpd5pw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: combinations not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n   \
    \ [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#3\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::UnitRange{Int64})\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl(f::typeof(identity), op::typeof(Base.add_sum), nt::Base._InitialValue,\
    \ itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"})\n      @ Base ./reduce.jl:44\n\
    \    [6] mapfoldl(f::Function, op::Function, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#3\"}; init::Base._InitialValue)\n      @ Base ./reduce.jl:162\n    [7]\
    \ mapfoldl\n      @ ./reduce.jl:162 [inlined]\n    [8] mapreduce(f::Function,\
    \ op::Function, itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"}; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n      @ Base ./reduce.jl:289\n\
    \    [9] mapreduce\n      @ ./reduce.jl:289 [inlined]\n   [10] sum(f::Function,\
    \ a::Base.Generator{UnitRange{Int64}, var\"#1#3\"}; kw::Base.Pairs{Symbol, Union{},\
    \ Tuple{}, NamedTuple{(), Tuple{}}})\n      @ Base ./reduce.jl:503\n   [11] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [12] sum(a::Base.Generator{UnitRange{Int64},\
    \ var\"#1#3\"}; kw::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n\
    \      @ Base ./reduce.jl:532\n   [13] sum\n      @ ./reduce.jl:532 [inlined]\n\
    \   [14] get_max_triples(n::Int64)\n      @ Main /tmp/tmptjfpd5pw.jl:15\n   [15]\
    \ macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmptjfpd5pw.jl:22 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmptjfpd5pw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptjfpd5pw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjfpd5pw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    for i = 1:n\n        a = i * i - i + 1\n        for j = i + 1:n\n       \
    \     b = j * j - j + 1\n            for k = j + 1:n\n                c = k *\
    \ k - k + 1\n                if (a + b + c) % 3 == 0\n                    max_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ max_triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Returns\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    triples = 0\n    for i in\
    \ 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n              \
    \  if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                   \
    \ triples += 1\n                end\n            end\n        end\n    end\n \
    \   return triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    k = 1\n    count\
    \ = 0\n    while k<=n-2\n        if ((k*k - k + 1 + (k+1)*(k+1) - (k+1) + 1 +\
    \ (k+2)*(k+2) - (k+2) + 1) % 3) == 0\n            count += 1\n        end\n  \
    \      k += 1\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpggvyvkrn.jl:30\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggvyvkrn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggvyvkrn.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpggvyvkrn.jl:31\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggvyvkrn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggvyvkrn.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpggvyvkrn.jl:32\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggvyvkrn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggvyvkrn.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpggvyvkrn.jl:33\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpggvyvkrn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpggvyvkrn.jl:29\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpggvyvkrn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return ((n-2) * (n-1)\
    \ * n) \xF7 (6)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4gngkbyt.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gngkbyt.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gngkbyt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gngkbyt.jl:23\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gngkbyt.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gngkbyt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gngkbyt.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gngkbyt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gngkbyt.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4gngkbyt.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gngkbyt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gngkbyt.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gngkbyt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    res = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0\n                    res +=\
    \ 1\n                end\n            end\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    idx = 1\n    cnt\
    \ = 0\n    while idx < n\n        jdx = idx + 1\n        while jdx < n\n     \
    \       kdx = jdx + 1\n            while kdx < n\n                if a[idx] +\
    \ a[jdx] + a[kdx] % 3 == 0\n                    cnt += 1\n                end\n\
    \                kdx += 1\n            end\n            jdx += 1\n        end\n\
    \        idx += 1\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps60bgsyw.jl:38\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmps60bgsyw.jl:22\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps60bgsyw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps60bgsyw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps60bgsyw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmps60bgsyw.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps60bgsyw.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps60bgsyw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps60bgsyw.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmps60bgsyw.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps60bgsyw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps60bgsyw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmps60bgsyw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmps60bgsyw.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps60bgsyw.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    len = 0\n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      len += 1\n                end\n            end\n        end\n    end\n\
    \    return len\nend\nn = 5\n@time get_max_triples(n)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "  0.000001 seconds\ntest set: Test Failed at /tmp/tmpgrv0ni37.jl:34\n \
    \ Expression: candidate(5) == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrv0ni37.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrv0ni37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgrv0ni37.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrv0ni37.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrv0ni37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgrv0ni37.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrv0ni37.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrv0ni37.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgrv0ni37.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgrv0ni37.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgrv0ni37.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrv0ni37.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # initialize vars\n\
    \    n_mul_3 = n * 3\n    a = [0 for i in 1:n]\n    max_triples = 0\n    for i\
    \ in 1:n\n        a[i] = i*i - i + 1\n    end\n    # brute force search\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if a[i] + a[j] + a[k] == n_mul_3\n                    max_triples += 1\n\
    \                end\n            end\n        end\n    end\n    return max_triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpunohdesh.jl:39\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunohdesh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunohdesh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpunohdesh.jl:40\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunohdesh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunohdesh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpunohdesh.jl:41\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunohdesh.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunohdesh.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpunohdesh.jl:42\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpunohdesh.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpunohdesh.jl:38\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunohdesh.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    all_triples = []\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              push!(all_triples, (i, j, k))\n            end\n        end\n \
    \   end\n    filter(all_triples) do triple\n        a, b, c = triple\n       \
    \ a + b + c % 3 == 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqj6lcex4.jl:33\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: Cannot `convert` an object of\
    \ type Vector{Any} to an object of type Int64\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpqj6lcex4.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqj6lcex4.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqj6lcex4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqj6lcex4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: Cannot `convert` an object of type Vector{Any}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpqj6lcex4.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqj6lcex4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqj6lcex4.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj6lcex4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    sum\
    \ = 0\n    a = []\n    for i in range(1, n+1)\n        a.append(i * i - i + 1)\n\
    \    for i in range(0, n)\n        for j in range(i+1, n)\n            for k in\
    \ range(j+1, n)\n                sum = a[i] + a[j] + a[k]\n                if\
    \ sum % 3 == 0\n                    count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6xihxdoi.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6xihxdoi.jl:1\n\
    in expression starting at /tmp/tmp6xihxdoi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count::Int64 = 0\n\
    \    a::Int64 = 1\n    b::Int64 = 3\n    c::Int64 = 7\n    while b <= n\n    \
    \    while c <= n && a + b + c <= 3*n\n            if (a + b + c) % 3 == 0\n \
    \               count += 1\n            end\n            c += 2\n        end\n\
    \        a += 2\n        b += 2\n        c = b + 4\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpopmgex7g.jl:37\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopmgex7g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopmgex7g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpopmgex7g.jl:38\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopmgex7g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopmgex7g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpopmgex7g.jl:39\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopmgex7g.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopmgex7g.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpopmgex7g.jl:40\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 360 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopmgex7g.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopmgex7g.jl:36\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopmgex7g.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total_triples = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0\n                    total_triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ total_triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiezzluzm.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpiezzluzm.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiezzluzm.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiezzluzm.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpiezzluzm.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpiezzluzm.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiezzluzm.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiezzluzm.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpiezzluzm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpiezzluzm.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiezzluzm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiezzluzm.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpiezzluzm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpiezzluzm.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiezzluzm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                 \
    \   count += 1\n                end\n            end\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8s4vroht.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s4vroht.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s4vroht.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s4vroht.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s4vroht.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s4vroht.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s4vroht.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s4vroht.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s4vroht.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8s4vroht.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8s4vroht.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8s4vroht.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s4vroht.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = collect(1:n)\n\
    \    a = a.^2 - a + 1\n    count = 0\n    @inbounds for i in 1:n\n        @inbounds\
    \ for j in i+1:n\n            @inbounds for k in j+1:n\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4jtjt3ak.jl:34\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp4jtjt3ak.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jtjt3ak.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jtjt3ak.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4jtjt3ak.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: no method matching +(::Vector{Int64}, ::Int64)\n\
    \  For element-wise addition, use broadcasting with dot syntax: array .+ scalar\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp4jtjt3ak.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jtjt3ak.jl:35 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jtjt3ak.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Returns\
    \ the number of the maximum triples.\n    \"\"\"\n    rem(a::Array, b::Int64)::Int64\
    \ = a % b\n    a = zeros(Int64, n)\n    m = zeros(Int64, 3)\n    for i in 1:n\n\
    \        a[i] = i * i - i + 1\n        if a[i] >= 3\n            m[rem(a[i], 3)\
    \ + 1] += 1\n        end\n    end\n    if rem(sum(a), 3) == 0\n        return\
    \ m[1] * m[2] * m[3] + m[1] * m[1] * m[1] + m[2] * m[2] * m[2] + m[3] * m[3] *\
    \ m[3]\n    elseif rem(sum(a), 3) == 1\n        return m[1] * m[2] * m[3] + m[2]\
    \ * m[2] * m[2]\n    elseif rem(sum(a), 3) == 2\n        return m[1] * m[2] *\
    \ m[3] + m[3] * m[3] * m[3]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_a_up8qr.jl:40\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: no method matching (::var\"#rem#1\"\
    )(::Int64, ::Int64)\n  Closest candidates are:\n    (::var\"#rem#1\")(!Matched::Array,\
    \ ::Int64) at /tmp/tmp_a_up8qr.jl:18\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp_a_up8qr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a_up8qr.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_a_up8qr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_a_up8qr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: no method matching (::var\"#rem#1\")(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    (::var\"#rem#1\")(!Matched::Array,\
    \ ::Int64) at /tmp/tmp_a_up8qr.jl:18\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp_a_up8qr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a_up8qr.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_a_up8qr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_a_up8qr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  MethodError: no method matching (::var\"#rem#1\")(::Int64,\
    \ ::Int64)\n  Closest candidates are:\n    (::var\"#rem#1\")(!Matched::Array,\
    \ ::Int64) at /tmp/tmp_a_up8qr.jl:18\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp_a_up8qr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_a_up8qr.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a_up8qr.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    cnt = 0 \n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      cnt += 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdkcb9dgy.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdkcb9dgy.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdkcb9dgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdkcb9dgy.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdkcb9dgy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdkcb9dgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdkcb9dgy.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdkcb9dgy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdkcb9dgy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdkcb9dgy.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdkcb9dgy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdkcb9dgy.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdkcb9dgy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n \n        a[i] = i*i - i + 1\n    end\n    cnt = 0\n  \
    \  for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt += 1\n\
    \                end\n            end\n        end\n    end\n    return cnt\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = Int64[]\n   \
    \ for i in 1:n\n        push!(a, i*i - i + 1)\n    end\n    cnt = 0\n    for i\
    \ in 1:n\n        for j in i+1:n\n            for k in j+1:n\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n                    cnt += 1\n           \
    \     end\n            end\n        end\n    end\n    return cnt\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Return\
    \ the number of triples of length n where a[i] + a[j] + a[k] is divisible by 3\n\
    \    \"\"\"\n    _count = 0\n    i, j, k = 1, 1, 1\n    while i <= n-2\n     \
    \   j = i+1\n        while j <= n-1\n            k = j+1\n            while k\
    \ <= n\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n\
    \                    _count += 1\n                end\n                k += 1\n\
    \            end\n            j += 1\n        end\n        i += 1\n    end\n \
    \   return _count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return sum([1 for\
    \ i=1:n-2, j=i+1:n-1, k=j+1:n\n        if((i*i-i+1 + j*j-j+1 + k*j-k+1) % 3 ==\
    \ 0)])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t\
    @test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) ==\
    \ 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppusjchwz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmppusjchwz.jl:15\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppusjchwz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppusjchwz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppusjchwz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmppusjchwz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppusjchwz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppusjchwz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppusjchwz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmppusjchwz.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppusjchwz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppusjchwz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppusjchwz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmppusjchwz.jl:15\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppusjchwz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    n > 1 ? n-2 : 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplwqdebxj.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwqdebxj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwqdebxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplwqdebxj.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 8 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwqdebxj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwqdebxj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplwqdebxj.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 98 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwqdebxj.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwqdebxj.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwqdebxj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0\n           \
    \         sum += 1\n                end\n            end\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n             \
    \   if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                  \
    \  count += 1\n                end\n            end\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_f43kh_d.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f43kh_d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f43kh_d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_f43kh_d.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f43kh_d.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f43kh_d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_f43kh_d.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f43kh_d.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f43kh_d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_f43kh_d.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f43kh_d.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f43kh_d.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f43kh_d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = ones(Int64, n)\n\
    \    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    result = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if i+j+k == n\n                    result += 1\n                end\n   \
    \         end\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1ilwm3_.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ilwm3_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ilwm3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl1ilwm3_.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ilwm3_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ilwm3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl1ilwm3_.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 4 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ilwm3_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ilwm3_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl1ilwm3_.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 784 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ilwm3_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ilwm3_.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1ilwm3_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    t = 0\n    for i\
    \ = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n              \
    \  if (i^2-i+1 + j^2-j+1 + k^2-k+1) % 3 == 0\n                    t += 1\n   \
    \             end\n            end\n        end\n    end\n    return t\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples_count = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              val = (i*i - i + 1) + (j*j - j + 1) + (k*j - k + 1)\n         \
    \       if val % 3 == 0\n                    triples_count += 1\n            \
    \    end\n            end\n        end\n    end\n    return triples_count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1ldh2eo.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ldh2eo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ldh2eo.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl1ldh2eo.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ldh2eo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ldh2eo.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl1ldh2eo.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ldh2eo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ldh2eo.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl1ldh2eo.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ldh2eo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ldh2eo.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1ldh2eo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n \
    \   for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n   \
    \             if a[i] + a[j] + a[k] % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovbtsp2p.jl:36\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovbtsp2p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovbtsp2p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpovbtsp2p.jl:37\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovbtsp2p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovbtsp2p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpovbtsp2p.jl:38\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovbtsp2p.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovbtsp2p.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpovbtsp2p.jl:39\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovbtsp2p.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovbtsp2p.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovbtsp2p.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8i5zsmgu.jl:33\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8i5zsmgu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8i5zsmgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8i5zsmgu.jl:34\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8i5zsmgu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8i5zsmgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8i5zsmgu.jl:35\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8i5zsmgu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8i5zsmgu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8i5zsmgu.jl:36\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8i5zsmgu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8i5zsmgu.jl:32\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8i5zsmgu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = []\n  \
    \  for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n    \
    \            if (i * i - i + 1 + j * j - j + 1 + k * j - k + 1) % 3 == 0\n   \
    \                 push!(triples, (i, j, k))\n                end\n           \
    \ end\n        end\n    end\n    return length(triples)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsi4sgojx.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi4sgojx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi4sgojx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsi4sgojx.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi4sgojx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi4sgojx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsi4sgojx.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi4sgojx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi4sgojx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsi4sgojx.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi4sgojx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi4sgojx.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi4sgojx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = collect(1:n)\n\
    \    a = [i*i - i + 1 for i in a]\n    num_triples = 0\n    for i in a\n     \
    \   for j in a[a.index(i)+1:end]\n            for k in a[a.index(j)+1:end]\n \
    \               num_triples += (i + j + k) % 3 == 0\n            end\n       \
    \ end\n    end\n    return num_triples\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr1xofifg.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpr1xofifg.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1xofifg.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1xofifg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr1xofifg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  type Array has no field index\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] get_max_triples(n::Int64)\n     @ Main\
    \ /tmp/tmpr1xofifg.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1xofifg.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1xofifg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr1xofifg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  type Array has no field index\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpr1xofifg.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1xofifg.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1xofifg.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr1xofifg.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  type Array has no field index\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1xofifg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return n % 3 == 0\
    \ ? n - 1 : n\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjkwrmge.jl:22\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjkwrmge.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjkwrmge.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjkwrmge.jl:23\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjkwrmge.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjkwrmge.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjkwrmge.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 10 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjkwrmge.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjkwrmge.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjkwrmge.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 100 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjkwrmge.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjkwrmge.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjkwrmge.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    n_old = n\n    count_3_5\
    \ = 0\n    while(n % 3 == 0)\n        n = n / 3\n        count_3_5 += 1\n    end\n\
    \    count_2 = 0\n    while(n % 2 == 0)\n        n = n / 2\n        count_2 +=\
    \ 1\n    end\n    if n > 1\n        #println(\"n = \", n)\n        return 0\n\
    \    end\n    if count_3_5 == 0\n        return 0\n    end\n    if count_2 < count_3_5\n\
    \        return 0\n    end\n    return (count_2 - count_3_5 + 1) * count_3_5\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps53v1mqn.jl:43\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps53v1mqn.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps53v1mqn.jl:42\ntest set: Test\
    \ Failed at /tmp/tmps53v1mqn.jl:44\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps53v1mqn.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps53v1mqn.jl:42\ntest set: Test\
    \ Failed at /tmp/tmps53v1mqn.jl:45\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps53v1mqn.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps53v1mqn.jl:42\ntest set: Test\
    \ Failed at /tmp/tmps53v1mqn.jl:46\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps53v1mqn.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps53v1mqn.jl:42\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps53v1mqn.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total_triples = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (i+j+k) % 3 == 0\n                    total_triples += 1\n \
    \               end\n            end\n        end\n    end\n    return total_triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2v_9kd7y.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_9kd7y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_9kd7y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2v_9kd7y.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 8 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_9kd7y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_9kd7y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2v_9kd7y.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 42 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_9kd7y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_9kd7y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2v_9kd7y.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53922 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v_9kd7y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v_9kd7y.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2v_9kd7y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Get the\
    \ maximal number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and\
    \ a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Not working yet\n\
    \    # res = 0\n    # for i in 1:n\n    #     for j in 1:n\n    #         for\
    \ k in 1:n\n    #             if i < j < k && ((i * i - i + 1) + (j * j - j +\
    \ 1) + (k * k - k + 1)) % 3 == 0\n    #                 res += 1\n    #      \
    \       end\n    #         end\n    #     end\n    # end\n    # return res\n \
    \   return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmn3l6tmv.jl:38\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: -1 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmn3l6tmv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmn3l6tmv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmn3l6tmv.jl:39\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ -1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmn3l6tmv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmn3l6tmv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmn3l6tmv.jl:40\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ -1 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmn3l6tmv.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmn3l6tmv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmn3l6tmv.jl:41\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: -1 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmn3l6tmv.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmn3l6tmv.jl:37\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmn3l6tmv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    result = 0\n    if\
    \ n <= 2\n        return result\n    end\n    for i in 1:n-2\n        for j in\
    \ i+1:n-1\n            for k in j+1:n\n                sum = (i*i - i + 1) + (j*j\
    \ - j + 1) + (k*j - k + 1)\n                if sum % 3 == 0\n                \
    \    result += 1\n                end\n            end\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizzw6tba.jl:36\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzw6tba.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzw6tba.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpizzw6tba.jl:37\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzw6tba.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzw6tba.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpizzw6tba.jl:38\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzw6tba.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzw6tba.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpizzw6tba.jl:39\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizzw6tba.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizzw6tba.jl:35\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizzw6tba.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # create an array\
    \ a of length n\n    a = [i * i - i + 1 for i in 1:n]\n    # initialize counter\n\
    \    c = 0\n    # iterate over each possible triple combination\n    for i in\
    \ 1:n, j in 1:n, k in 1:n\n        # check each condition\n        if i < j <\
    \ k && (a[i] + a[j] + a[k]) % 3 == 0\n            # update counter\n         \
    \   c += 1\n        end\n    end\n    # return c\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # initialize the\
    \ array a\n    a = Array{Int64}(undef, n)\n    # store a[i] = i*i - i + 1\n  \
    \  for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    count = 0\n    for i\
    \ in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n           \
    \     # check if a[i] + a[j] + a[k] is a multiple of 3\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t\
    @test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    val = 0 \n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if mod(i*i - i + 1 + j*j - j + 1 + k*j - k + 1, 3) == 0\n               \
    \     val += 1\n                end\n            end\n        end\n    end\n \
    \   return val\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8hh3h1n6.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hh3h1n6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hh3h1n6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8hh3h1n6.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hh3h1n6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hh3h1n6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8hh3h1n6.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hh3h1n6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hh3h1n6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8hh3h1n6.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8hh3h1n6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8hh3h1n6.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hh3h1n6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n, j = i+1:n, k = j+1:n\n        if ((i*i-i+1) + (j*j-j+1) + (k*j-k+1))\
    \ % 3 == 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2lhq102.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2lhq102.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2lhq102.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv2lhq102.jl:29\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2lhq102.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2lhq102.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv2lhq102.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2lhq102.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2lhq102.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv2lhq102.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2lhq102.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2lhq102.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2lhq102.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3 return 0\
    \ end\n    if n < 6 return 1 end\n    return 1 + get_max_triples(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0z22a377.jl:25\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0z22a377.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0z22a377.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0z22a377.jl:26\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 6 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0z22a377.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0z22a377.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0z22a377.jl:27\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 96 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0z22a377.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0z22a377.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z22a377.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    cnt = 0\n    for i in 1:n-2, j in i+1:n-1, k in j+1:n\n \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    for i in range(1, n - 1)\n        if (i % 3 == 0)\n            max_triples\
    \ += 1\n        end\n    end\n    return max_triples\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv85u5uc7.jl:29\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv85u5uc7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv85u5uc7.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv85u5uc7.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 3 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv85u5uc7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv85u5uc7.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv85u5uc7.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 33 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv85u5uc7.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv85u5uc7.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv85u5uc7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    n is\
    \ the length of the array.\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs2fwk7b.jl:1\nin expression starting at /tmp/tmphs2fwk7b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    This\
    \ function returns the count of all triples which are multiples of 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qoczqzf.jl:1\nin expression starting at /tmp/tmp5qoczqzf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if mod(a[i] + a[j] + a[k], 3) == 0\n                    count += 1\n    \
    \            end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2hlisk1a.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp2hlisk1a.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2hlisk1a.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2hlisk1a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2hlisk1a.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2hlisk1a.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2hlisk1a.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2hlisk1a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2hlisk1a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp2hlisk1a.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2hlisk1a.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2hlisk1a.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp2hlisk1a.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp2hlisk1a.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hlisk1a.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sum_a = 0\n    i\
    \ = 1\n    while i < n\n        sum_a += (n - i)\n        i += 1\n    end\n  \
    \  return floor(Int64, sum_a / 3)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsp0xnc44.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsp0xnc44.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsp0xnc44.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsp0xnc44.jl:29\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsp0xnc44.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsp0xnc44.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsp0xnc44.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 15 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsp0xnc44.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsp0xnc44.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsp0xnc44.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 1650 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsp0xnc44.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsp0xnc44.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsp0xnc44.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return length([(i, j, k) for i in 1:n-2, j in i+1:n-1, k\
    \ in j+1:n if a[i] + a[j] + a[k] % 3 == 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_pi4070.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpy_pi4070.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_pi4070.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_pi4070.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy_pi4070.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpy_pi4070.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_pi4070.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_pi4070.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy_pi4070.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpy_pi4070.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_pi4070.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_pi4070.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy_pi4070.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpy_pi4070.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_pi4070.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n            \
    \    if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n                 \
    \   count += 1\n                end\n            end\n        end\n    end\n \
    \   return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnbq88c4b.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbq88c4b.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbq88c4b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnbq88c4b.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbq88c4b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbq88c4b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnbq88c4b.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbq88c4b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbq88c4b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnbq88c4b.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbq88c4b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbq88c4b.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnbq88c4b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    You are\
    \ given an integer array a of length n. \n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] is between 1 and n. \n        You have to return a value\
    \ q such that there exists a subset of a with length at least q, \n    such that\
    \ the sum of this subset is divisible by n.\n    \"\"\"\n    q::Int64 = n\n  \
    \  for i = 1:n\n        for j = 1:n\n            for k = 1:n\n               \
    \ if ((i < j) && (j < k)) && ((a[i] + a[j] + a[k]) % n == 0)\n               \
    \     q = maximum(q, a[i] + a[j] + a[k])\n                end\n            end\n\
    \        end\n    end\n    return q\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjaw78zv4.jl:38\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpjaw78zv4.jl:25\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaw78zv4.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaw78zv4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjaw78zv4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpjaw78zv4.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaw78zv4.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaw78zv4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjaw78zv4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpjaw78zv4.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjaw78zv4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjaw78zv4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjaw78zv4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpjaw78zv4.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjaw78zv4.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # MODIFY function\
    \ for your solution.\n    c = 0\n    for i in 1:n\n        for j in i+1:n\n  \
    \          for k in j+1:n\n                if (i*i - i + 1 + j*j - j + 1 + k*k\
    \ - k + 1) % 3 == 0\n                    c += 1\n                end\n       \
    \     end\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = 1:n\n    triples\
    \ = []\n    for i in a\n        for j in a[i+1:end]\n            for k in a[j+1:end]\n\
    \                if (i+j+k)%3 == 0\n                    push!(triples, [i,j,k])\n\
    \                end\n            end\n        end\n    end\n    return length(triples)\n\
    end\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time\
    \ @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test\
    \ get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5)\
    \ == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) ==\
    \ 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time\
    \ @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test\
    \ get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5)\
    \ == 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) ==\
    \ 1\n@time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\n\
    @time @test get_max_triples(5) == 1\n@time @test get_max_triples(5) == 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpk1oiv1w8.jl:28\nin expression starting at /tmp/tmpk1oiv1w8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Get the\
    \ maximum number of possible triples \n    \"\"\"\n    maximum_triples = (n*(n-1)*(n-2))/6\n\
    \    \n    return maximum_triples\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyq6zwqd3.jl:27\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 10 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyq6zwqd3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyq6zwqd3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyq6zwqd3.jl:28\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 20 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyq6zwqd3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyq6zwqd3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyq6zwqd3.jl:29\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 120 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyq6zwqd3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyq6zwqd3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyq6zwqd3.jl:30\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 161700 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyq6zwqd3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyq6zwqd3.jl:26\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyq6zwqd3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples_count = 0\n\
    \    for i in 1:n, j in i+1:n, k in j+1:n\n        if (i*i - i + 1 + j*j - j +\
    \ 1 + k*j - k + 1) % 3 == 0\n            triples_count += 1\n        end\n   \
    \ end\n    return triples_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn2857plf.jl:28\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2857plf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2857plf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2857plf.jl:29\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2857plf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2857plf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2857plf.jl:30\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2857plf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2857plf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpn2857plf.jl:31\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2857plf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2857plf.jl:27\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2857plf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    cnt::Int64 = 0 \n\
    \    sums::Array{Int64,1} = zeros(Int64, 3)\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qyaa0y6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6qyaa0y6.jl:1\n\
    in expression starting at /tmp/tmp6qyaa0y6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    i\
    \ = 1\n    while i < n\n        j = i + 1\n        while j < n\n            k\
    \ = j + 1\n            while k < n\n                if (i^2 - i + 1 + j^2 - j\
    \ + 1 + k^2 - k + 1) % 3 == 0\n                    count += 1\n              \
    \  end\n                k += 1\n            end\n            j += 1\n        end\n\
    \        i += 1\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu4zm9l2z.jl:39\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4zm9l2z.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4zm9l2z.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu4zm9l2z.jl:40\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 21 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4zm9l2z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4zm9l2z.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu4zm9l2z.jl:41\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 51216 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4zm9l2z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4zm9l2z.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4zm9l2z.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    return div(n,3)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsclqe3e4.jl:23\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsclqe3e4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsclqe3e4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsclqe3e4.jl:24\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 3 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsclqe3e4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsclqe3e4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsclqe3e4.jl:25\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 33 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsclqe3e4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsclqe3e4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsclqe3e4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    #return sum(sum(map(divisible_by_3,\
    \ [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\n    #return\
    \ sum(sum(3(map(divisible_by_3, [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for\
    \ j in 1:n, i in 1:n)\n    #return sum(sum(map(divisible_by_3, [i+j+k for i in\
    \ 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\n    return sum(sum(map(divisible_by_3,\
    \ [i+j+k for i in 1:n, j in 1:n, k in 1:n])) for j in 1:n, i in 1:n)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwn7seeix.jl:25\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: divisible_by_3 not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#3\"{Int64})(::Tuple{Int64, Int64})\n      @\
    \ Main ./none:0\n    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3]\
    \ _foldl_impl(op::Base.MappingRF{var\"#1#3\"{Int64}, Base.BottomRF{typeof(Base.add_sum)}},\
    \ init::Base._InitialValue, itr::Base.Iterators.ProductIterator{Tuple{UnitRange{Int64},\
    \ UnitRange{Int64}}})\n      @ Base ./reduce.jl:58\n    [4] foldl_impl\n     \
    \ @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n\
    \    [6] #mapfoldl#244\n      @ ./reduce.jl:162 [inlined]\n    [7] mapfoldl\n\
    \      @ ./reduce.jl:162 [inlined]\n    [8] #mapreduce#248\n      @ ./reduce.jl:289\
    \ [inlined]\n    [9] mapreduce\n      @ ./reduce.jl:289 [inlined]\n   [10] #sum#251\n\
    \      @ ./reduce.jl:503 [inlined]\n   [11] sum\n      @ ./reduce.jl:503 [inlined]\n\
    \   [12] #sum#252\n      @ ./reduce.jl:532 [inlined]\n   [13] sum\n      @ ./reduce.jl:532\
    \ [inlined]\n   [14] get_max_triples(n::Int64)\n      @ Main /tmp/tmpwn7seeix.jl:18\n\
    \   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpwn7seeix.jl:25 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpwn7seeix.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwn7seeix.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: divisible_by_3 not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#3\"{Int64})(::Tuple{Int64, Int64})\n      @ Main ./none:0\n\
    \    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#3\"{Int64}, Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue,\
    \ itr::Base.Iterators.ProductIterator{Tuple{UnitRange{Int64}, UnitRange{Int64}}})\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn7seeix.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    temp_array = zeros(Int64,\
    \ n)\n    for i in 1:n\n        temp_array[i] = i*i - i + 1\n    end\n    temp_array\
    \ = sort(temp_array)\n    cnt = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            if temp_array[i] + temp_array[j] in temp_array[j+1:end]\n       \
    \         cnt += 1\n            end\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9blfltml.jl:35\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9blfltml.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9blfltml.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9blfltml.jl:36\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9blfltml.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9blfltml.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9blfltml.jl:37\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9blfltml.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9blfltml.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp9blfltml.jl:38\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9blfltml.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9blfltml.jl:34\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9blfltml.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    i::Int64 = 1\n  \
    \  j::Int64 = 1\n    k::Int64 = 1\n    cnt::Int64 = 0\n    for i in 1:n-2\n  \
    \      for j in i+1:n-1\n            for k in j+1:n\n                a = i * i\
    \ - i + 1\n                b = j * j - j + 1\n                c = k * k - k +\
    \ 1\n                if (a + b + c) % 3 == 0\n                    cnt += 1\n \
    \               end\n            end\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n      \
    \          i1 = i * i - i + 1\n                j1 = j * j - j + 1\n          \
    \      k1 = k * k - k + 1\n                if mod(i1 + j1 + k1, 3) == 0\n    \
    \                max_triples += 1\n                end\n            end\n    \
    \    end\n    end\n    return max_triples\nend\n@time println(get_max_triples(100))\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "53361\n  0.028626 seconds (13.37 k allocations: 768.545 KiB, 97.21% compilation\
    \ time)\nTest Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    sub_res_1 = 0\n \
    \   sub_res_2 = 0\n    sub_res_3 = 0\n    for i in 1:n-2\n        sub_res_1 +=\
    \ (i+1)\n    end\n    for i in 1:n-1\n        sub_res_2 += (i+1)\n    end\n  \
    \  for i in 1:n\n        sub_res_3 += (i+1)\n    end\n    return sub_res_1*sub_res_2*sub_res_3\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppn2scwhk.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 2520 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn2scwhk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn2scwhk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppn2scwhk.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7560 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn2scwhk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn2scwhk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppn2scwhk.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 154440 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn2scwhk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn2scwhk.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppn2scwhk.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 128685630150 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn2scwhk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn2scwhk.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppn2scwhk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3\n      \
    \  return 0\n    end\n    return div(n-2, 3)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3qonpnw.jl:26\n  Expression: candidate(6)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3qonpnw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3qonpnw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt3qonpnw.jl:27\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 2 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3qonpnw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3qonpnw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt3qonpnw.jl:28\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 32 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt3qonpnw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt3qonpnw.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3qonpnw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # create the array\n\
    \    a = [i*i - i + 1 for i in 1:n]\n    # get the unique combinations of pairs\n\
    \    pairs = [(i,j) for i in 1:n, j in i+1:n]\n    # get the number of pairs that\
    \ are multiple of 3\n    num_pairs = sum([1 for (i,j) in pairs if (a[i] + a[j])\
    \ % 3 == 0])\n    # the number of triples is the number of pairs divided by 2\n\
    \    num_triples = round(Int64, num_pairs/2)\n    # return the number of triples\n\
    \    return num_triples\nend\nn = 5\nget_max_triples(n)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: i not defined\nStacktrace:\n [1] get_max_triples(n::Int64)\n\
    \   @ Main /tmp/tmpasm3q2f4.jl:18\n [2] top-level scope\n   @ /tmp/tmpasm3q2f4.jl:27\n\
    in expression starting at /tmp/tmpasm3q2f4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total_triples = 0\n\
    \    for i in range(1, n-1)\n        for j in range(i+1, n)\n            for k\
    \ in range(j+1, n+1)\n                if (i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0\n                    total_triples += 1\n    return total_triples\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0bf52u4.jl:1\nin expression starting at /tmp/tmpg0bf52u4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n         \
    \       if (i * i - i + 1 + j * j - j + 1 + k * j - k + 1) % 3 == 0\n        \
    \            count += 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqsrdemw3.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsrdemw3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsrdemw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqsrdemw3.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsrdemw3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsrdemw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqsrdemw3.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsrdemw3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsrdemw3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqsrdemw3.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsrdemw3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsrdemw3.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqsrdemw3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i = 1:n \n        a[i] = i*i - i + 1\n    end\n    res = 0\n   \
    \ for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n                    res += 1\n    \
    \            end\n            end\n        end\n    end\n    return res\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    return sum([a[i] + a[j] + a[k] % 3 == 0 for i in 1:n-2, j\
    \ in i+1:n-1, k in j+1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp36ia3k6a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp36ia3k6a.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ia3k6a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ia3k6a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp36ia3k6a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp36ia3k6a.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ia3k6a.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ia3k6a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp36ia3k6a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: i not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmp36ia3k6a.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ia3k6a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ia3k6a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp36ia3k6a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: i not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmp36ia3k6a.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36ia3k6a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [0]*n\n    for\
    \ i in 1:n\n        a[i] = i*i - i + 1\n    end\n    #println(a)\n    count =\
    \ 0\n    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n\
    \                if mod(a[i] + a[j] + a[k], 3) == 0\n                    count\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend\nprintln(get_max_triples(5))\nprintln(get_max_triples(500))\nprintln(get_max_triples(1000))\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\nStacktrace:\n [1] setindex!\n   @ ./array.jl:903 [inlined]\n [2]\
    \ get_max_triples(n::Int64)\n   @ Main /tmp/tmpre171v0m.jl:17\n [3] top-level\
    \ scope\n   @ /tmp/tmpre171v0m.jl:32\nin expression starting at /tmp/tmpre171v0m.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Get the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    triples = 0\n    for i in 1:n-2\n\
    \        for j in i+1:n-1\n            for k in j+1:n\n                if (i*i\
    \ - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                    triples +=\
    \ 1\n                end\n            end\n        end\n    end\n    return triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    n_a = n * n - n +\
    \ 1\n    n_b = n * n - 2 * n + 2\n    n_c = n * n - 3 * n + 3\n    if n_a % 3\
    \ == 0 && n_b % 3 == 0 && n_c % 3 == 0\n        return n - 2\n    elseif n_a %\
    \ 3 == 0 && n_b % 3 == 0\n        return n - 1\n    elseif n_a % 3 == 0 && n_c\
    \ % 3 == 0\n        return n - 1\n    elseif n_b % 3 == 0 && n_c % 3 == 0\n  \
    \      return n - 1\n    elseif n_a % 3 == 0\n        return n\n    elseif n_b\
    \ % 3 == 0\n        return n\n    elseif n_c % 3 == 0\n        return n\n    else\n\
    \        return 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsf0j3cfd.jl:41\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0j3cfd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0j3cfd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsf0j3cfd.jl:42\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0j3cfd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0j3cfd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsf0j3cfd.jl:43\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0j3cfd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0j3cfd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsf0j3cfd.jl:44\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsf0j3cfd.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsf0j3cfd.jl:40\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf0j3cfd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0\n                    count += 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcaf89ssl.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpcaf89ssl.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaf89ssl.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaf89ssl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcaf89ssl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpcaf89ssl.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaf89ssl.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaf89ssl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcaf89ssl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpcaf89ssl.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcaf89ssl.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcaf89ssl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcaf89ssl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpcaf89ssl.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcaf89ssl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    max_triples = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if (i*i - i + 1 + j*j - j\
    \ + 1) % 3 == 0\n                for k = j+1:n\n                    if (i*i -\
    \ i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0\n                        max_triples\
    \ += 1\n                    end\n                end\n            end\n      \
    \  end\n    end\n    return max_triples\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpskqpdd70.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskqpdd70.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskqpdd70.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpskqpdd70.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskqpdd70.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskqpdd70.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpskqpdd70.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 1 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskqpdd70.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskqpdd70.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpskqpdd70.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 5456 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpskqpdd70.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpskqpdd70.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpskqpdd70.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # Write your code\
    \ here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdgi3by87.jl:23\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdgi3by87.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdgi3by87.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdgi3by87.jl:24\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdgi3by87.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdgi3by87.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdgi3by87.jl:25\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 0 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdgi3by87.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdgi3by87.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpdgi3by87.jl:26\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 0 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdgi3by87.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdgi3by87.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgi3by87.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # create array\n\
    \    arr = [i*i - i + 1 for i in 1:n]\n    # get total\n    total = 0\n    for\
    \ i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n             \
    \   temp = arr[i] + arr[j] + arr[k]\n                if (temp % 3 == 0)\n    \
    \                total += 1\n                end\n            end\n        end\n\
    \    end\n    return total\nend\n \n@time get_max_triples(5)\n \n@time get_max_triples(10)\n\
    \ \n@time get_max_triples(15)\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "  0.000002 seconds (1 allocation: 96 bytes)\n  0.000003 seconds (1 allocation:\
    \ 144 bytes)\n  0.000004 seconds (1 allocation: 176 bytes)\nTest Summary: | Pass\
    \  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    s\
    \ = 0\n    i = 1\n    while i < n-1\n        j = i+1\n        k = n\n        while\
    \ j < k\n            if s = rem(a[i] + a[j] + a[k], 3) == 0\n                count\
    \ += 1\n            end\n            if s == 1\n                j += 1\n     \
    \       elseif s == 2\n                k -= 1\n            else\n            \
    \    j += 1\n                k -= 1\n            end\n        end\n        i +=\
    \ 1\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg_j_w0er.jl:22\nin expression starting at /tmp/tmpg_j_w0er.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    # create your array\
    \ here\n    a = [i*i - i + 1 for i in 1:n]\n    count = 0\n    for i in 1:n, j\
    \ in i+1:n, k in j+1:n\n        # print(\"i=$i j=$j k=$k\")\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t\
    @test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) ==\
    \ 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    #  1 \u2264 n \u2264\
    \ 10^5\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6k_l453q.jl:23\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 5 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6k_l453q.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6k_l453q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6k_l453q.jl:24\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6k_l453q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6k_l453q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6k_l453q.jl:25\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 10 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6k_l453q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6k_l453q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6k_l453q.jl:26\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 100 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6k_l453q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6k_l453q.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k_l453q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    multiples = 0\n \
    \   for i = 1:n-2\n        for j = i+1:n-1\n            for k = j+1:n\n      \
    \          if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n           \
    \         multiples += 1\n                end\n            end\n        end\n\
    \    end\n    return multiples\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcb0weskd.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb0weskd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb0weskd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcb0weskd.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb0weskd.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb0weskd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcb0weskd.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb0weskd.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb0weskd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcb0weskd.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcb0weskd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcb0weskd.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcb0weskd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    total = 0\n    for\
    \ i in 2:n\n        for j in 1:i-1\n            for k in 1:j-1\n             \
    \   if (1+3*k+5*j+7*i)%3 == 0\n                    total += 1\n              \
    \  end\n            end\n        end\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3oct9c2x.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oct9c2x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oct9c2x.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3oct9c2x.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 6 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oct9c2x.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oct9c2x.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3oct9c2x.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 39 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oct9c2x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oct9c2x.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3oct9c2x.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 53889 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oct9c2x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oct9c2x.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3oct9c2x.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3 return 0\
    \ end\n    # Of course, we can find the pairs that sum is a multiple of 3 and\
    \ then \n    # search for a triple\n    # But it is more clever to search for\
    \ a triple whose sum of all elements \n    # is 3, 6, 9, ... (a multiple of 3).\n\
    \    # As the number is either sum of two different numbers or the multiplication\n\
    \    # of two numbers, we know that all the two numbers which sum is a multiple\n\
    \    # of 3, must be that one is a multiplication of 3 and the other number is\
    \ 1\n    # and viceversa.\n    # Now, as we are searching for a triple whose sum\
    \ is a multiple of 3, then \n    # we have that all these pairs must be: 3x *\
    \ 1, 1 * 3x (for some x) or 9 * 1.\n    # Why? because, for example:\n    #  \
    \ - 3x * 1 + 1 * 1 = 3x + 1 (a multiple of 3 iff x is a multiple of 3)\n    #\
    \   - 3x * 1 + 1 * 3y = 3x + 3y (a multiple of 3 iff x + y is a multiple of 3)\n\
    \    #   - 3x * 1 + 1 * 9 = 3x + 9 (a multiple of 3 iff x is a multiple of 3)\n\
    \    #   - 3x * 3y + 1 * 1 = 9xy + 1 (a multiple of 3 iff xy is a multiple of\
    \ 3)\n    #   - 3x * 3y + 1 * 3z = 9xy + 3z (a multiple of 3 iff xy + z is a multiple\
    \ of 3)\n    #   - 3x * 3y + 1 * 9 = 9xy + 9 (a multiple of 3 iff xy is a multiple\
    \ of 3)\n    #   - 3x * 9 + 1 * 1 = 27x + 1 (a multiple of 3 iff x is a multiple\
    \ of 3)\n    #   - 3x * 9 + 1 * 3y = 27x + 3y (a multiple of 3 iff x + y is a\
    \ multiple of 3)\n    #   - 3x * 9 + 1 * 9 = 27x + 9 (a multiple of 3 iff x is\
    \ a multiple of 3)\n    # Therefore, we\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprta5bigv.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprta5bigv.jl:1\n\
    in expression starting at /tmp/tmprta5bigv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    i = 0\n    j = 0\n\
    \    k = 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i\
    \ + 1, n):\n            for k in range(j + 1, n):\n                if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count\
    \ += 1\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47c0b3wk.jl:20\nin expression starting at\
    \ /tmp/tmp47c0b3wk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n              \
    \      count += 1\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa79q7mr9.jl:32\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa79q7mr9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa79q7mr9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa79q7mr9.jl:33\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa79q7mr9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa79q7mr9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa79q7mr9.jl:34\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa79q7mr9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa79q7mr9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa79q7mr9.jl:35\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa79q7mr9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa79q7mr9.jl:31\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa79q7mr9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i in 1:n]\n    count = 0\n    for i in 1:n-2\n        for j in i+1:n-1\n\
    \            for k in j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \                    count += 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\
    \t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n\n        for j in (i+1):n\n            for k in (j+1):n\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0\n                    triples += 1\n\
    \                end\n            end\n        end\n    end\n    return triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpejkmhicx.jl:32\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  UndefVarError: a not defined\n  Stacktrace:\n\
    \   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmpejkmhicx.jl:19\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejkmhicx.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejkmhicx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpejkmhicx.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpejkmhicx.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejkmhicx.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejkmhicx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpejkmhicx.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10) == 36\n  UndefVarError: a not defined\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n\
    \     @ Main /tmp/tmpejkmhicx.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejkmhicx.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejkmhicx.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpejkmhicx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(100) == 53361\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ get_max_triples(n::Int64)\n     @ Main /tmp/tmpejkmhicx.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejkmhicx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    \"\"\"\n    Given\
    \ an integer n, returns the maximum number of triples \n    (a[i], a[j], a[k])\
    \ of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\
    \t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uq8rqpc.jl:1\nin expression starting at /tmp/tmp4uq8rqpc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    count = 0\n    for\
    \ i = 1:n, j = i+1:n, k = j+1:n\n        if ((i*i-i+1 + j*j-j+1 + k*k-k+1) % 3\
    \ == 0)\n            count += 1\n        end\n    end\n    return count\nend\n\
    @test get_max_triples(5) == 1\n@test get_max_triples(6) == 4\n@test get_max_triples(7)\
    \ == 7\n@test get_max_triples(8) == 10\n@test get_max_triples(9) == 14\n@test\
    \ get_max_triples(10) == 20\n@test get_max_triples(100) == 2798\n@test get_max_triples(200)\
    \ == 5522\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpue80q0fm.jl:23\nin expression starting at /tmp/tmpue80q0fm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    return a\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4gme5uo0.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == 1\n  MethodError: Cannot `convert` an object of\
    \ type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n \
    \   convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp4gme5uo0.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gme5uo0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gme5uo0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4gme5uo0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(6) == 4\n  MethodError: Cannot `convert` an object of type Vector{Int64}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] get_max_triples(n::Int64)\n     @ Main /tmp/tmp4gme5uo0.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gme5uo0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gme5uo"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gme5uo0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ if n >= 3\n        for i in 1:n\n            for j in i+1:n\n              \
    \  for k in j+1:n\n                    if (i*i - i + 1 + j*j - j + 1 + k*j - k\
    \ + 1) % 3 == 0\n                        triples += 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    return triples\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
    \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
    \ == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjyiaw2e5.jl:34\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyiaw2e5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyiaw2e5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjyiaw2e5.jl:35\n  Expression: candidate(6) == 4\n   Evaluated:\
    \ 7 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyiaw2e5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyiaw2e5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjyiaw2e5.jl:36\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 48 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyiaw2e5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyiaw2e5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpjyiaw2e5.jl:37\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 71313 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyiaw2e5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyiaw2e5.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyiaw2e5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    triples = 0\n   \
    \ for i in 1:n-2, j in i+1:n-1, k in j+1:n\n        @inbounds sum = i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1\n        if sum % 3 == 0\n            triples\
    \ += 1\n        end\n    end\n    return triples\nend\nprintln(get_max_triples(12))\n\
    println(get_max_triples(10))\nprintln(get_max_triples(10^6))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6)\
    \ == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: b'60\n36\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    if n < 3 return 0\
    \ end\n    return Int64(n-2)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_max_triples;\n\t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t\
    @test(candidate(10) == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0qp_h2e.jl:23\n  Expression: candidate(5)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0qp_h2e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0qp_h2e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpr0qp_h2e.jl:25\n  Expression: candidate(10) == 36\n   Evaluated:\
    \ 8 == 36\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0qp_h2e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0qp_h2e.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpr0qp_h2e.jl:26\n  Expression: candidate(100) == 53361\n  \
    \ Evaluated: 98 == 53361\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0qp_h2e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0qp_h2e.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0qp_h2e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = [i*i - i + 1\
    \ for i=1:n]\n    cnt = 0\n    for i=1:n-2\n        for j=i+1:n-1\n          \
    \  for k=j+1:n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n           \
    \         cnt += 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a positive integer n. You have to create an\
    \ integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the\
    \ value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \"\"\"\nfunction get_max_triples(n::Int64)::Int64 \n    a = zeros(Int64,\
    \ n)\n    @simd for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    triples\
    \ = 0\n    for i in 1:n\n        for j in i+1:n\n            for k in j+1:n\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0\n                    triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ triples\nend\nusing Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\
    \t@test(candidate(5) == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10)\
    \ == 36)\n\t@test(candidate(100) == 53361)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
