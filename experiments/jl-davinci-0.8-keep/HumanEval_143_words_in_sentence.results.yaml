name: HumanEval_143_words_in_sentence
language: jl
results:
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    word_arr = split(sentence,\
    \ \" \")\n    prime_word_arr = []\n    for word in word_arr\n        if isprime(length(word))\n\
    \            push!(prime_word_arr, word)\n        end\n    end\n    return join(prime_word_arr,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qgviocc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5qgviocc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qgviocc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qgviocc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5qgviocc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5qgviocc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qgviocc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qgviocc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5qgviocc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5qgviocc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qgviocc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qgviocc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5qgviocc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qgviocc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\" \n    Function\
    \ that returns the words from a sentence with prime word length\n    \"\"\"\n\
    \    prime_length_words = []\n    words = split(sentence, \" \")\n    for word\
    \ in words\n        if prime(length(word))\n            push!(prime_length_words,\
    \ word)\n        end\n    end\n    join(prime_length_words, \" \")\nend\n \n@testset\
    \ \"Example 1\" begin\n    @test words_in_sentence(\"This is a test\") == \"is\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpg1v5ggyh.jl:34\nin expression starting at /tmp/tmpg1v5ggyh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    #split sentence\
    \ into array of words\n    split_sen = split(sentence, \" \")\n    \n    #return\
    \ answer\n    return join(w for w in split_sen if isprime(length(w)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmmswlrsy.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] join(io::IOBuffer,\
    \ iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)}, delim::String)\n      @ Base ./strings/io.jl:346\n    [5]\
    \ join(io::IOBuffer, iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\"\
    , Vector{SubString{String}}}, typeof(identity)})\n      @ Base ./strings/io.jl:345\n\
    \    [6] sprint(f::Function, args::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{SubString{String}}}, typeof(identity)}; context::Nothing, sizehint::Int64)\n\
    \      @ Base ./strings/io.jl:114\n    [7] sprint\n      @ ./strings/io.jl:108\
    \ [inlined]\n    [8] join\n      @ ./strings/io.jl:352 [inlined]\n    [9] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpmmswlrsy.jl:26\n   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpmmswlrsy.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpmmswlrsy.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmmswlrsy.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] join(io::IOBuffer,\
    \ iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)}, delim::String)\n      @ Base ./strings/io.jl:346\n    [5]\
    \ join(io::IOBuffer, iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmswlrsy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = map(l ->\
    \ length(l), split(sentence, \" \"))\n    @assert length(words) > 0\n    for i\
    \ in 2:sqrt(last(words))\n        words = [w for w in words if !(w % i == 0 &&\
    \ w != i)]\n    end\n    return join(split(sentence, \" \")[collect(words)], \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq09zu2jr.jl:33\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is This\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq09zu2jr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq09zu2jr.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpq09zu2jr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ BoundsError: attempt to access 6-element Vector{SubString{String}} at index\
    \ [[5, 2, 2, 5, 9]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{SubString{String}},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmpq09zu2jr.jl:26\n  \
    \ [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpq09zu2jr.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpq09zu2jr.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq09zu2jr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  BoundsError: attempt\
    \ to access 4-element Vector{SubString{String}} at index [[2, 1, 2, 7]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{SubString{String}}, I::Tuple{Vector{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n  \
    \ [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq09zu2jr.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(primes, word)\n        end\n    end\n    return join(primes,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgq_ai6m_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgq_ai6m_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgq_ai6m_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgq_ai6m_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgq_ai6m_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgq_ai6m_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgq_ai6m_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgq_ai6m_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgq_ai6m_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgq_ai6m_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgq_ai6m_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgq_ai6m_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgq_ai6m_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgq_ai6m_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = map(w -> w, words) do w\n        is_prime(length(w))\
    \ ? w : \"\"\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpev_thrwv.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching length(::var\"#2#4\")\n  Closest candidates are:\n    length(!Matched::Union{Base.KeySet,\
    \ Base.ValueIterator}) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.InvasiveLinkedListSynchronized) at /shared/centos7/julia/1.7.3/share/julia/base/task.jl:604\n\
    \    ...\n  Stacktrace:\n    [1] _zip_min_length(is::Tuple{var\"#2#4\", Vector{SubString{String}}})\n\
    \      @ Base.Iterators ./iterators.jl:316\n    [2] length(z::Base.Iterators.Zip{Tuple{var\"\
    #2#4\", Vector{SubString{String}}}})\n      @ Base.Iterators ./iterators.jl:306\n\
    \    [3] length(g::Base.Generator{Base.Iterators.Zip{Tuple{var\"#2#4\", Vector{SubString{String}}}},\
    \ Base.var\"#4#5\"{var\"#1#3\"}})\n      @ Base ./generator.jl:50\n    [4] _similar_shape(itr::Base.Generator{Base.Iterators.Zip{Tuple{var\"\
    #2#4\", Vector{SubString{String}}}}, Base.var\"#4#5\"{var\"#1#3\"}}, #unused#::Base.HasLength)\n\
    \      @ Base ./array.jl:600\n    [5] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{var\"\
    #2#4\", Vector{SubString{String}}}}, Base.var\"#4#5\"{var\"#1#3\"}})\n      @\
    \ Base ./array.jl:723\n    [6] map(::Function, ::Function, ::Vector{SubString{String}})\n\
    \      @ Base ./abstractarray.jl:2966\n    [7] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpev_thrwv.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpev_thrwv.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpev_thrwv.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpev_thrwv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpev_thrwv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = string(sentence)\
    \ .* \" \"\n    primes = list(collect(Prime{Int64}[2:length(words)]))\n    index\
    \ = [i for i in primes if i < length(words)]\n    index = filter(x -> length(words[x])\
    \ != 0, index)\n    return String(join(words[index]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbusiej4.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: Prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjbusiej4.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbusiej4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbusiej4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjbusiej4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: Prime not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpjbusiej4.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbusiej4.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbusiej4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjbusiej4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: Prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjbusiej4.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjbusiej4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjbusiej4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjbusiej4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: Prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbusiej4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [isprime(length(w)) ? w : \"\" for w in words]\n    join(primes,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpug_anypl.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n     @\
    \ Base ./array.jl:724\n   [4] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpug_anypl.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpug_anypl.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpug_anypl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpug_anypl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3]\
    \ collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n     @\
    \ Base ./array.jl:724\n   [4] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpug_anypl.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpug_anypl.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpug_anypl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpug_anypl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n\
    \     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n  \
    \ [3] collect(itr::Base.Generator{Vector{SubString{String}}, var\"#1#2\"})\n \
    \    @ Base"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpug_anypl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    n_words = length(split(sentence))\n\
    \    for i in 1:n_words\n        word = split(sentence)[i]\n        is_prime =\
    \ isprime(length(word))\n        if is_prime\n            return word\n      \
    \  end\n    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpdlrsju7m.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdlrsju7m.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlrsju7m.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlrsju7m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdlrsju7m.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdlrsju7m.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlrsju7m.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlrsju7m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdlrsju7m.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpdlrsju7m.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlrsju7m.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlrsju7m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdlrsju7m.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlrsju7m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    words_prime = map(word -> length(word) in PrimeInt, words)\n   \
    \ return join(filter(x -> x[2], zip(words, words_prime)), \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprtu69ot_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: PrimeInt\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#3\")(word::SubString{String})\n\
    \      @ Main /tmp/tmprtu69ot_.jl:22\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmprtu69ot_.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprtu69ot_.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmprtu69ot_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprtu69ot_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: PrimeInt\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#3\")(word::SubString{String})\n\
    \      @ Main /tmp/tmprtu69ot_.jl:22\n    [2] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [3] _collect(c::Vector{SubString{String}}, itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#1#3\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [5] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [6] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmprtu69ot_.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmprtu69ot_.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprtu69ot_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    return split(sentence, \" \") |> \n        filter(x -> length(x)\
    \ in primes) |> \n        join(\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpb_hzadfp.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching filter(::var\"#1#2\"{Vector{Int64}})\n  Closest candidates are:\n \
    \   filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpb_hzadfp.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb_hzadfp.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb_hzadfp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpb_hzadfp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching filter(::var\"#1#2\"{Vector{Int64}})\n  Closest candidates are:\n \
    \   filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpb_hzadfp.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb_hzadfp.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb_hzadfp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpb_hzadfp.jl:33\n  Test thr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_hzadfp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    tokens = split(sentence,\
    \ \" \")\n    new_tokens = [token for token in tokens if isprime(length(token))]\n\
    \    join(new_tokens, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp1zpandgn.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(token::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp1zpandgn.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1zpandgn.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1zpandgn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1zpandgn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(token::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp1zpandgn.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1zpandgn.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1zpandgn.jl:29\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1zpandgn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_words =\
    \ split(sentence, \" \")\n    result = []\n    for word in sentence_words\n  \
    \      word_length = length(word)\n        if is_prime(word_length)\n        \
    \    push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8t7bvyx9.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8t7bvyx9.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8t7bvyx9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8t7bvyx9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8t7bvyx9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8t7bvyx9.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8t7bvyx9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8t7bvyx9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8t7bvyx9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8t7bvyx9.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8t7bvyx9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8t7bvyx9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8t7bvyx9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8t7bvyx9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4_sqcgza.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4_sqcgza.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_sqcgza.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_sqcgza.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4_sqcgza.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4_sqcgza.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_sqcgza.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_sqcgza.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4_sqcgza.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp4_sqcgza.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_sqcgza.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_sqcgza.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4_sqcgza.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_sqcgza.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = sentence.lowercase()\n\
    \    words = split(sentence, \" \")\n    prime_words = [w for w in words if isprime(length(w))]\n\
    \    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8u60p2rq.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp8u60p2rq.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8u60p2rq.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8u60p2rq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp8u60p2rq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ lowercase\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp8u60p2rq.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8u60p2rq.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8u60p2rq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp8u60p2rq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field lowercase\n  Stacktrace:\n   [1] getproperty\n    \
    \ @ ./Base.jl:42 [inlined]\n   [2] words_in_sentence(sentence::String)\n     @\
    \ Main /tmp/tmp8u60p2rq.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8u60p2rq.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8u60p2rq.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp8u60p2rq.jl:34\n  Test "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u60p2rq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    length(sentence)\
    \ <= 100 || throw(ArgumentError(\"length(sentence) <= 100\"))\n    words = split(sentence,\
    \ \" \")\n    is_prime = isprime.(length.(words))\n    return join(words[is_prime],\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc0qu7141.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpc0qu7141.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc0qu7141.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc0qu7141.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpc0qu7141.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpc0qu7141.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc0qu7141.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc0qu7141.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpc0qu7141.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpc0qu7141.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc0qu7141.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc0qu7141.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpc0qu7141.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0qu7141.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_words, word)\n        end\n    end\n    join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1mi449lu.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1mi449lu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mi449lu.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mi449lu.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mi449lu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1mi449lu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mi449lu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mi449lu.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mi449lu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp1mi449lu.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mi449lu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mi449lu.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp1mi449lu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mi449lu.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \"is\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprjph5a8z.jl:29\n  Expression: candidate(\"\
    lets go for swimming\") == \"go for\"\n   Evaluated: \"is\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjph5a8z.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjph5a8z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprjph5a8z.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"is\" == \"there\
    \ is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjph5a8z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjph5a8z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprjph5a8z.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"is\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjph5a8z.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjph5a8z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprjph5a8z.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"is\" == \"go for it\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjph5a8z.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjph5a8z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprjph5a8z.jl:33\n  Expression: candidate(\"here\") == \"\"\n\
    \   Evaluated"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjph5a8z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = [word for word in words if isprime(length(word))]\n\
    \    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2t74xpz8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp2t74xpz8.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2t74xpz8.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2t74xpz8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2t74xpz8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp2t74xpz8.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2t74xpz8.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2t74xpz8.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t74xpz8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # TODO: Write code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnx2u8c7q.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpnx2u8c7q.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx2u8c7q.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx2u8c7q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnx2u8c7q.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpnx2u8c7q.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx2u8c7q.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnx2u8c7q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \" \".join(word\
    \ for word in split(sentence) if isprime(length(word)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_5i8yklj.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmp_5i8yklj.jl:21\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_5i8yklj.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_5i8yklj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_5i8yklj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmp_5i8yklj.jl:21\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_5i8yklj.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_5i8yklj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_5i8yklj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp_5i8yklj.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_5i8yklj.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_5i8yklj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_5i8yklj.jl:31\n  Test threw exception"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5i8yklj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjpujg4m4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjpujg4m4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpujg4m4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpujg4m4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjpujg4m4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjpujg4m4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpujg4m4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpujg4m4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjpujg4m4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjpujg4m4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpujg4m4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpujg4m4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjpujg4m4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpujg4m4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    for word in split(sentence,\
    \ \" \")\n        if isprime(length(word))\n            word\n        end\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyp6x83gq.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpyp6x83gq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp6x83gq.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp6x83gq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyp6x83gq.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpyp6x83gq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp6x83gq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp6x83gq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyp6x83gq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpyp6x83gq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyp6x83gq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyp6x83gq.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpyp6x83gq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp6x83gq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        len_word = length(word)\n\
    \        if isprime(len_word)\n            push!(prime_words, word)\n        end\n\
    \    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb385si_e.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb385si_e.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb385si_e.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb385si_e.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpb385si_e.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb385si_e.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb385si_e.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb385si_e.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpb385si_e.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpb385si_e.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb385si_e.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb385si_e.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpb385si_e.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb385si_e.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8_2f3epl.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8_2f3epl.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_2f3epl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_2f3epl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_2f3epl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8_2f3epl.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_2f3epl.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_2f3epl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_2f3epl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8_2f3epl.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8_2f3epl.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8_2f3epl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8_2f3epl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_2f3epl.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return replace(sentence,\
    \ r\"\\s\\w+(?=[\\s;.,])\", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp7y2gx3ze.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp7y2gx3ze.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7y2gx3ze.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7y2gx3ze.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7y2gx3ze.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp7y2gx3ze.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7y2gx3ze.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7y2gx3ze.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    out = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            out = out * word * \" \"\n        end\n    end\n    out = out[1:end-1]\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmn0oa2s.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzmn0oa2s.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzmn0oa2s.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmn0oa2s.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzmn0oa2s.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzmn0oa2s.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzmn0oa2s.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmn0oa2s.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzmn0oa2s.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzmn0oa2s.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzmn0oa2s.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmn0oa2s.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzmn0oa2s.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmn0oa2s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    filtered_words = []\n    for word in words\n        if is_prime(length(word))\n\
    \            push!(filtered_words, word)\n        end\n    end\n    return join(filtered_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr4gepioc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr4gepioc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4gepioc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4gepioc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr4gepioc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr4gepioc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4gepioc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4gepioc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr4gepioc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpr4gepioc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4gepioc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4gepioc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr4gepioc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4gepioc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    # split the\
    \ sentence by space and keep only the elements with length prime\n    sentence_arr\
    \ = sentence.split(\" \")\n    sentence_arr = sentence_arr[i -> isprime(length(i))]\n\
    \    \n    # join the elements with space and return\n    output = join(sentence_arr,\
    \ \" \")\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpau9b140r.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpau9b140r.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpau9b140r.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpau9b140r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpau9b140r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpau9b140r.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpau9b140r.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpau9b140r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpau9b140r.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpau9b140r.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpau9b140r.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpau9b140r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpau9b140r.jl:38\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpau9b140r.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return words = split(sentence,\
    \ r\"\\s+\")\n    answer = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(answer, word)\n        end\n    end\n    return join(answer,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph9q7alld.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Vector{SubString{String}} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmph9q7alld.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9q7alld.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9q7alld.jl:34\ntest set:\
    \ Error During Test at /tmp/tmph9q7alld.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Vector{SubString{String}} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmph9q7alld.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9q7alld.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9q7alld.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # default value\n\
    \    words = []\n    # split the string by space\n    strs = split(sentence, \"\
    \ \")\n    # loop through the split strings\n    for str in strs\n        # if\
    \ the length of the string is prime,\n        # push the string to the words array\n\
    \        if isprime(length(str))\n            push!(words, str)\n        end\n\
    \    end\n    # join the words array by space\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj8n_oym6.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpj8n_oym6.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8n_oym6.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8n_oym6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpj8n_oym6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpj8n_oym6.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8n_oym6.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8n_oym6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpj8n_oym6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpj8n_oym6.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8n_oym6.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8n_oym6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpj8n_oym6.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8n_oym6.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    N = length(split(sentence))\n\
    \    i = 0\n    new_sentence = \"\"\n    while i < N\n        word = split(sentence)[i]\n\
    \        if isprime(length(word))\n            new_sentence = new_sentence * word\
    \ * \" \"\n        end\n        i += 1\n    end\n    return trim(new_sentence)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpov8oahog.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  BoundsError: attempt\
    \ to access 4-element Vector{SubString{String}} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpov8oahog.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpov8oahog.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpov8oahog.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpov8oahog.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  BoundsError: attempt to\
    \ access 4-element Vector{SubString{String}} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpov8oahog.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpov8oahog.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpov8oahog.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpov8oahog.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ BoundsError: attempt to access 6-element Vector{SubString{String}} at index\
    \ [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmpov8oahog.jl:25\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpov8oahog.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpov8oahog.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    prime_words = [word\
    \ for word in split(sentence) if isprime(length(word))]\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2v1a_oaq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp2v1a_oaq.jl:21\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2v1a_oaq.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2v1a_oaq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2v1a_oaq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp2v1a_oaq.jl:21\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp2v1a_oaq.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp2v1a_oaq.jl:28\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2v1a_oaq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    filter(words) do word\n        is_prime(length(word))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprxrfveyp.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmprxrfveyp.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprxrfveyp.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxrfveyp.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxrfveyp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprxrfveyp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmprxrfveyp.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprxrfveyp.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprxrfveyp.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprxrfveyp.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprxrfveyp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmprxrfveyp.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprxrfveyp.jl:22\n   [4] macro expansion\n     @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxrfveyp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        word_length = length(word)\n        for prime in primes\n           \
    \ if word_length == prime\n                push!(result, word)\n            end\n\
    \        end\n    end\n    join(result, ' ')\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    isprime(x) = (x > 1) && all(x % i != 0 for i in 2:2:round(Int, sqrt(x)))\n\
    \    primes = [w for w in words if isprime(length(w))]\n    join(primes, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu45l8coo.jl:33\n  Expression: candidate(\"\
    there is no place available here\") == \"there is no place\"\n   Evaluated: \"\
    there is no place available\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu45l8coo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu45l8coo.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu45l8coo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # length of sentence\
    \ is between 1 and 100, let's transform it to an array\n    words = split(sentence,\
    \ \" \")\n    filtered_words = [word for word in words if isprime(length(word))]\n\
    \    return join(filtered_words, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg727nsin.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpg727nsin.jl:23\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpg727nsin.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpg727nsin.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpg727nsin.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpg727nsin.jl:23\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpg727nsin.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpg727nsin.jl:30\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg727nsin.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    valid_words = []\n    for word in words\n        len_word = length(word)\n\
    \        is_prime = true\n        for divisor in 2:len_word-1\n            if\
    \ len_word % divisor == 0\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime\n            push!(valid_words,\
    \ word)\n        end\n    end\n    join(valid_words, \" \")\nend\nprintln(words_in_sentence(\"\
    This is a test\"))\nprintln(words_in_sentence(\"lets go for swimming\"))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "is a\ngo for\ntest set: Test Failed at /tmp/tmp56acotem.jl:45\n  Expression:\
    \ candidate(\"This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp56acotem.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp56acotem.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp56acotem.jl:48\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp56acotem.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp56acotem.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56acotem.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    # filter out words whose length is not prime\n    words = filter(word\
    \ -> isprime(length(word)), words)\n    join(words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdg4e8s2s.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpdg4e8s2s.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdg4e8s2s.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdg4e8s2s.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdg4e8s2s.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdg4e8s2s.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpdg4e8s2s.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdg4e8s2s.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdg4e8s2s.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdg4e8s2s.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpdg4e8s2s.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpdg4e8s2s.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdg4e8s2s.jl:23\n   [4] macro expansion\n     @ /shared/centos7/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdg4e8s2s.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    is_prime(x) = isprime(length(x))\n    return join(filter(is_prime,\
    \ words), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp86zifr4m.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#is_prime#1\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp86zifr4m.jl:22\n   [2] filter(f::var\"#is_prime#1\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp86zifr4m.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp86zifr4m.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp86zifr4m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp86zifr4m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#is_prime#1\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp86zifr4m.jl:22\n   [2] filter(f::var\"#is_prime#1\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp86zifr4m.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp86zifr4m.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp86zifr4m.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp86zifr4m.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#is_prime#1\"\
    )(x::SubString{String})\n     @ Main /tmp/tmp86zifr4m.jl:22\n   [2] filter(f::var\"\
    #is_prime#1\", a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n  \
    \ [3] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp86zifr4m.jl:23\n\
    \   [4] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp86zifr4m.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        word_length = length(word)\n\
    \        if is_prime(word_length)\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpee4s3jkw.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpee4s3jkw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee4s3jkw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpee4s3jkw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpee4s3jkw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpee4s3jkw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee4s3jkw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpee4s3jkw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpee4s3jkw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpee4s3jkw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee4s3jkw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpee4s3jkw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpee4s3jkw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpee4s3jkw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return join(w for\
    \ w in split(sentence) if isprime(length(w)))\nend\n \n@testset \"Example 1\"\
    \ begin\n    @test words_in_sentence(\"This is a test\") == \"is\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp2eiycqah.jl:24\nin expression starting at /tmp/tmp2eiycqah.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \"\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_us2oa6u.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_us2oa6u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_us2oa6u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_us2oa6u.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_us2oa6u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_us2oa6u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_us2oa6u.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_us2oa6u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_us2oa6u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_us2oa6u.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_us2oa6u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_us2oa6u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp_us2oa6u.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \""
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_us2oa6u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = [w for w in words if isprime(length(w))]\n    return\
    \ join(prime_words, \" \")\nend\n \n\"\"\"\n    Problem: Find the length of the\
    \ longest substring\n    without repeating characters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82wep821.jl:26\nin expression starting at\
    \ /tmp/tmp82wep821.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_splitted\
    \ = split(sentence, \" \")\n    sentence_splitted_filter = filter(x -> isprime(length(x)),\
    \ sentence_splitted)\n    join(sentence_splitted_filter, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplujlnh5u.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmplujlnh5u.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplujlnh5u.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplujlnh5u.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplujlnh5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplujlnh5u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmplujlnh5u.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplujlnh5u.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplujlnh5u.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplujlnh5u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplujlnh5u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmplujlnh5u.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplujlnh5u.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplujlnh5u.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = primes_up_to(maximum(length.(words)))\n    return join(filter(w\
    \ -> ismember(length(w), primes), words), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8shf4rr.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu8shf4rr.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8shf4rr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8shf4rr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu8shf4rr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu8shf4rr.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8shf4rr.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8shf4rr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu8shf4rr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_up_to not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu8shf4rr.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8shf4rr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8shf4rr.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu8shf4rr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_up_to\
    \ not defined\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8shf4rr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"Returns the substring\
    \ of `sentence` which contains only prime number length words, in order\"\n  \
    \  sentence = sentence.split(\" \")\n    new_sentence = Array{String}()\n    is_prime(n::Int)\
    \ = n > 1 && !any(i -> n % i == 0, 2:floor(Int, sqrt(n)))\n    for word in sentence\n\
    \        if is_prime(length(word))\n            push!(new_sentence, word)\n  \
    \      end\n    end\n    return join(new_sentence, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvdo0cy3t.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpvdo0cy3t.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvdo0cy3t.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvdo0cy3t.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvdo0cy3t.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpvdo0cy3t.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvdo0cy3t.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvdo0cy3t.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvdo0cy3t.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpvdo0cy3t.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvdo0cy3t.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvdo0cy3t.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpvdo0cy3t.jl:40\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdo0cy3t.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    is_prime(n::Int)::Bool\
    \ = n > 1 && all(n % d != 0 for d in 2:n-1)\n    split_sentence = split(sentence,\
    \ \" \")\n    prime_words = String[]\n    for word in split_sentence\n       \
    \ if is_prime(length(word))\n            push!(prime_words, word)\n        end\n\
    \    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    xs = filter(w -> isprime(length(w)), words)\n    return join(xs, '\
    \ ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv16847pn.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmpv16847pn.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv16847pn.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv16847pn.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv16847pn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpv16847pn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmpv16847pn.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv16847pn.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpv16847pn.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv16847pn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpv16847pn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n\
    \     @ Main /tmp/tmpv16847pn.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpv16847pn.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv16847pn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    \"\"\"\n  \
    \  This function returs a string containing the words,\n    whose lengths are\
    \ prime numbers, from the original sentence.\n    \"\"\"\n    \n    words = split(sentence,\
    \ \" \")\n    n_words = length(words)\n    length_words = length.(words)\n   \
    \ prime_length_words = []\n    for word in length_words\n        if isprime(word)\n\
    \            push!(prime_length_words, word)\n        end\n    end\n    answer\
    \ = words[prime_length_words]\n    return answer \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprjxaldpg.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprjxaldpg.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprjxaldpg.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjxaldpg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprjxaldpg.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprjxaldpg.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprjxaldpg.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjxaldpg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprjxaldpg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmprjxaldpg.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprjxaldpg.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjxaldpg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmprjxaldpg.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjxaldpg.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    sentence = \"\"\n    for w in words\n        if isprime(length(w))\n\
    \            sentence = sentence * w * \" \"\n        end\n    end\n    return\
    \ strip(sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpimxedtme.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpimxedtme.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimxedtme.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimxedtme.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpimxedtme.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpimxedtme.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimxedtme.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimxedtme.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpimxedtme.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpimxedtme.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimxedtme.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimxedtme.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpimxedtme.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimxedtme.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\" Return the\
    \ words in `sentence` with prime length in the same order \"\"\"\n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx74tm95u.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" Return the words in `sentence` with\
    \ prime length in the same order \" == \"is\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx74tm95u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx74tm95u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx74tm95u.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" Return the words in `sentence` with prime length\
    \ in the same order \" == \"go for\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx74tm95u.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx74tm95u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx74tm95u.jl:31\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" Return the words\
    \ in `sentence` with prime length in the same order \" == \"there is no place\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx74tm95u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx74tm95u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx74tm95u.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Return the words in `sentence` with prime\
    \ length in the same order \" == \"Hi am Hussein\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx74tm95u.jl:32 [inlined]\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx74tm95u.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    word_list = split(sentence)\n\
    \    filtered_word_list = filter(word -> isprime(length(word)), word_list)\n \
    \   join(filtered_word_list, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpb4lzbr2o.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpb4lzbr2o.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb4lzbr2o.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpb4lzbr2o.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpb4lzbr2o.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpb4lzbr2o.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpb4lzbr2o.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb4lzbr2o.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpb4lzbr2o.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpb4lzbr2o.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpb4lzbr2o.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpb4lzbr2o.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb4lzbr2o.jl:22\n   [4] macro expansion\n     @ /shared/centos7/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4lzbr2o.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for i in 1:length(words)\n\
    \        w = words[i]\n        if length(w) in primes\n            push!(result,\
    \ w)\n        end\n    end\n    return join(result, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    return sentence\
    \ |> \n        x -> split(x, \" \") |> \n        x -> filter(y -> isprime(length(y)),\
    \ x) |> \n        x -> join(x, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpmyu6mk0j.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#3#7\")(y::SubString{String})\n\
    \      @ Main /tmp/tmpmyu6mk0j.jl:24\n    [2] filter(f::var\"#3#7\", a::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2484\n    [3] #2\n      @ /tmp/tmpmyu6mk0j.jl:24 [inlined]\n\
    \    [4] |>\n      @ ./operators.jl:966 [inlined]\n    [5] #1\n      @ /tmp/tmpmyu6mk0j.jl:23\
    \ [inlined]\n    [6] |>\n      @ ./operators.jl:966 [inlined]\n    [7] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpmyu6mk0j.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpmyu6mk0j.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpmyu6mk0j.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmyu6mk0j.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#3#7\")(y::SubString{String})\n\
    \      @ Main /tmp/tmpmyu6mk0j.jl:24\n    [2] filter(f::var\"#3#7\", a::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2484\n    [3] #2\n      @ /tmp/tmpmyu6mk0j.jl:24 [inlined]\n\
    \    [4] |>\n      @ ./operators.jl:966 [inlined]\n    [5] #1\n      @ /tmp/tmpmyu6mk0j.jl:23\
    \ [inlined]\n    [6] |>\n      @ ./operators.jl:966 [inlined]\n    [7] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpmyu6mk0j.jl:22\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpmyu6mk0j.jl:33 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpmyu6mk0j.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmyu6mk0j.jl:34\n  Test threw exception\n  Expre"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmyu6mk0j.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    is_prime(n::Int)::Bool\
    \ = n in primes(n)\n    filter(x -> is_prime(length(x)), split(sentence, \" \"\
    )) |> join\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmwtqd_nu.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#is_prime#2\")(n::Int64)\n     @\
    \ Main /tmp/tmpmwtqd_nu.jl:21\n   [2] #1\n     @ /tmp/tmpmwtqd_nu.jl:22 [inlined]\n\
    \   [3] filter(f::var\"#1#3\"{var\"#is_prime#2\"}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [4] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmwtqd_nu.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmwtqd_nu.jl:29 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmwtqd_nu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmwtqd_nu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#is_prime#2\")(n::Int64)\n     @ Main\
    \ /tmp/tmpmwtqd_nu.jl:21\n   [2] #1\n     @ /tmp/tmpmwtqd_nu.jl:22 [inlined]\n\
    \   [3] filter(f::var\"#1#3\"{var\"#is_prime#2\"}, a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [4] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmwtqd_nu.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmwtqd_nu.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmwtqd_nu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmwtqd_nu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] (::var\"#is_prime#2\"\
    )(n::Int64)\n     @ Main /tmp/tmpmwtqd_nu.jl:21\n   [2] #1\n     @ /tmp/tmpmwtqd_nu.jl:22\
    \ [inlined]\n   [3] filter(f::var\"#1#3\"{var\"#is_prime#2\"}, a::Vector"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwtqd_nu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \"go for\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp15yap34n.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"go for\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yap34n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yap34n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp15yap34n.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"go for\" == \"there\
    \ is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yap34n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yap34n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp15yap34n.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"go for\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yap34n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yap34n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp15yap34n.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"go for\" == \"go for it\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15yap34n.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15yap34n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp15yap34n.jl:33\n  Expression: candidate(\"here\") == \"\"\n\
    \   Evaluat"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15yap34n.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\"\n    You are\
    \ given a string representing a sentence,\n    the sentence contains some words\
    \ separated by a space,\n    and you have to return a string that contains the\
    \ words from the original sentence,\n    whose lengths are prime numbers,\n  \
    \  the order of the words in the new string should be the same as the original\
    \ one.\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpberauqjj.jl:1\nin expression starting at /tmp/tmpberauqjj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    filter(is_prime, length, words)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptk86_as6.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptk86_as6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk86_as6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk86_as6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptk86_as6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptk86_as6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk86_as6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk86_as6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptk86_as6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptk86_as6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptk86_as6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptk86_as6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptk86_as6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptk86_as6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmnt0bmxc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmnt0bmxc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnt0bmxc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnt0bmxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmnt0bmxc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmnt0bmxc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnt0bmxc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnt0bmxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmnt0bmxc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpmnt0bmxc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnt0bmxc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnt0bmxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmnt0bmxc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnt0bmxc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpel5aj7w7.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpel5aj7w7.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpel5aj7w7.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpel5aj7w7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpel5aj7w7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpel5aj7w7.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpel5aj7w7.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpel5aj7w7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpel5aj7w7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpel5aj7w7.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpel5aj7w7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpel5aj7w7.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpel5aj7w7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpel5aj7w7.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    prime_words = filter(x -> isprime(length(x)), words)\n    join(prime_words,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp42tc_nmk.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp42tc_nmk.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp42tc_nmk.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp42tc_nmk.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp42tc_nmk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp42tc_nmk.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp42tc_nmk.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp42tc_nmk.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp42tc_nmk.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp42tc_nmk.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp42tc_nmk.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp42tc_nmk.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp42tc_nmk.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42tc_nmk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = split(sentence,\
    \ ' ')\n    sentence = filter(x -> isprime(length(x)), sentence)\n    return join(sentence,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuewed_cl.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpuewed_cl.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuewed_cl.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuewed_cl.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuewed_cl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpuewed_cl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpuewed_cl.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuewed_cl.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpuewed_cl.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpuewed_cl.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpuewed_cl.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpuewed_cl.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpuewed_cl.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuewed_cl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\"\n    Convert\
    \ the sentence to a list of words\n    Filter this list for words with prime lengths\n\
    \    Join the words with a space\n    \"\"\"\n    sentence = sentence.split()\n\
    \    sentence = filter(x -> isprime(length(x)), sentence)\n    return join(sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpms4egymf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpms4egymf.jl:26\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpms4egymf.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpms4egymf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpms4egymf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpms4egymf.jl:26\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpms4egymf.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpms4egymf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpms4egymf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpms4egymf.jl:26\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpms4egymf.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpms4egymf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpms4egymf.jl:38\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpms4egymf.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s_prime = []\n  \
    \  s_arr = split(sentence, ' ')\n    for i in s_arr\n        num = length(i)\n\
    \        if isprime(num)\n            push!(s_prime, i)\n        end\n    end\n\
    \    join(s_prime, ' ')\nend\nwords_in_sentence(\"This is a test\")\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ words_in_sentence(sentence::String)\n   @ Main /tmp/tmppm79bwjd.jl:25\n [2]\
    \ top-level scope\n   @ /tmp/tmppm79bwjd.jl:31\nin expression starting at /tmp/tmppm79bwjd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    is_prime(x) = x > 1 && all([x % i != 0 for i in 2:round(Int, sqrt(x))])\n\
    \    primes = [x for x in 1:length(words) if is_prime(x)]\n    return join([words[i]\
    \ for i in primes], \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp16xjql3_.jl:31\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16xjql3_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16xjql3_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp16xjql3_.jl:33\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"is no available\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16xjql3_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16xjql3_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp16xjql3_.jl:34\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I am\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16xjql3_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16xjql3_.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp16xjql3_.jl:35\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"for it\" == \"go for it\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16xjql3_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16xjql3_.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16xjql3_.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    answer = []\n    for word in words\n\
    \        if length(word) in primes\n            push!(answer, word)\n        end\n\
    \    end\n    return join(answer, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # your code here\n\
    end\n\"\"\"\n    Given the root of a binary tree,\n    the level of its root is\
    \ 1,\n    the level of its children is 2,\n    and so on.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwd18dzz.jl:23\nin expression starting at\
    \ /tmp/tmpjwd18dzz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # convert sentence\
    \ into an array of words\n    words = split(sentence, ' ')\n    # create an empty\
    \ string\n    new_sentence = \"\"\n    # loop through each word in the words array\n\
    \    for word in words\n        # check if the length of the word is a prime number\n\
    \        if prime_number(length(word))\n            # if the new_sentence string\
    \ is empty\n            if length(new_sentence) == 0\n                # set the\
    \ new_sentence string to the word\n                new_sentence = word\n     \
    \       else\n                # otherwise add the word to the new_sentence string\n\
    \                new_sentence = new_sentence * \" \" * word\n            end\n\
    \        end\n    end\n    # return the new_sentence string\n    return new_sentence\n\
    end\nwords_in_sentence(\"lets go for swimming\")\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: prime_number not defined\nStacktrace:\n\
    \ [1] words_in_sentence(sentence::String)\n   @ Main /tmp/tmphwonf14j.jl:28\n\
    \ [2] top-level scope\n   @ /tmp/tmphwonf14j.jl:42\nin expression starting at\
    \ /tmp/tmphwonf14j.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s_split = split(sentence,\
    \ \" \")\n    output = \"\"\n    for i in s_split\n        if isprime(length(i))\n\
    \            output = string(output, \" \", i)\n        end\n    end\n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu54p4_q4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu54p4_q4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu54p4_q4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu54p4_q4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu54p4_q4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu54p4_q4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu54p4_q4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu54p4_q4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu54p4_q4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu54p4_q4.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu54p4_q4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu54p4_q4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu54p4_q4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu54p4_q4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = [word for word in words if isprime(length(word))]\n\
    \    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_5ts8rj3.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp_5ts8rj3.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_5ts8rj3.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_5ts8rj3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_5ts8rj3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp_5ts8rj3.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp_5ts8rj3.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp_5ts8rj3.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5ts8rj3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    N = length(sentence)\n\
    \    is_prime = Array{Bool}(N)\n    for i = 1:N\n        is_prime[i] = isprime(i)\n\
    \    end\n    new_sentence = \"\"\n    for i = 1:N\n        if is_prime[length(sentence[i])]\n\
    \            new_sentence = new_sentence * string(sentence[i]) * \" \"\n     \
    \   end\n    end\n    return new_sentence\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyhl231ev.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching (Array{Bool})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpyhl231ev.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyhl231ev.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyhl231ev.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyhl231ev.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching (Array{Bool})(::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpyhl231ev.jl:22\n   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyhl231ev.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    for word in words\n        if !isprime(length(word))\n         \
    \   deleteat!(words, findfirst(words, word))\n        end\n    end\n    output\
    \ = \"\"\n    for word in words\n        output = string(output, word, \" \")\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwsk0own4.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwsk0own4.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsk0own4.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsk0own4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpwsk0own4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwsk0own4.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsk0own4.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsk0own4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpwsk0own4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwsk0own4.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwsk0own4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwsk0own4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpwsk0own4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsk0own4.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sentence = []\n    for word in\
    \ words\n        if length(word) in primes\n            push!(sentence, word)\n\
    \        end\n    end\n    join(sentence, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_words = []\n    for word in words\n        word_len = length(word)\n\
    \        if word_len in primes\n            push!(new_words, word)\n        end\n\
    \    end\n    join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp4qjkwhfx.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4qjkwhfx.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qjkwhfx.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qjkwhfx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4qjkwhfx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp4qjkwhfx.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qjkwhfx.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qjkwhfx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4qjkwhfx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp4qjkwhfx.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4qjkwhfx.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4qjkwhfx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4qjkwhfx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qjkwhfx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    prime_words\
    \ = []\n    words = split(sentence, \" \")\n    \n    for w in words\n       \
    \ if isprime(length(w))\n            push!(prime_words, w)\n        end\n    end\n\
    \    \n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmph98lme33.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmph98lme33.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph98lme33.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph98lme33.jl:37\ntest set:\
    \ Error During Test at /tmp/tmph98lme33.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmph98lme33.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph98lme33.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph98lme33.jl:37\ntest set:\
    \ Error During Test at /tmp/tmph98lme33.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmph98lme33.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph98lme33.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph98lme33.jl:37\ntest set:\
    \ Error During Test at /tmp/tmph98lme33.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph98lme33.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    ###############################\n\
    \    #     YOUR CODE GOES HERE     #\n    ###############################\n  \
    \  ###############################\n    # END OF YOUR CODE SECTION   #\n    ###############################\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp61r0pbfa.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp61r0pbfa.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61r0pbfa.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61r0pbfa.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp61r0pbfa.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp61r0pbfa.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61r0pbfa.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61r0pbfa.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    new_sentence = \"\
    \"\n    for word in split(sentence, ' ')\n        if isprime(length(word))\n \
    \           new_sentence = new_sentence * \" \" * word\n        end\n    end\n\
    \    return lstrip(new_sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpbkoza52d.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpbkoza52d.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkoza52d.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkoza52d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbkoza52d.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpbkoza52d.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkoza52d.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkoza52d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbkoza52d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpbkoza52d.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkoza52d.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkoza52d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpbkoza52d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbkoza52d.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm7cjj2fr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm7cjj2fr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm7cjj2fr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm7cjj2fr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpm7cjj2fr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm7cjj2fr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm7cjj2fr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm7cjj2fr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpm7cjj2fr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpm7cjj2fr.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm7cjj2fr.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm7cjj2fr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpm7cjj2fr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm7cjj2fr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    number_of_words = length(words)\n    prime_words = []\n    for i\
    \ in 1:number_of_words\n        if isprime(length(words[i]))\n            push!(prime_words,\
    \ words[i])\n        end\n    end\n    return join(prime_words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe7njaunf.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpe7njaunf.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7njaunf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7njaunf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe7njaunf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpe7njaunf.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7njaunf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7njaunf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe7njaunf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpe7njaunf.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7njaunf.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7njaunf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpe7njaunf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7njaunf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    result = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    join(result, ' ')\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9pvzi1l.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi9pvzi1l.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9pvzi1l.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9pvzi1l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi9pvzi1l.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi9pvzi1l.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9pvzi1l.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9pvzi1l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi9pvzi1l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpi9pvzi1l.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9pvzi1l.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9pvzi1l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi9pvzi1l.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9pvzi1l.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    is_prime(n::Int) = n > 1 && count(divisor -> n % divisor == 0, 2:sqrt(n))\
    \ == 0\n    for (i, word) in enumerate(words)\n        words[i] = is_prime(length(word))\
    \ ? word : \"\"\n    end\n    filter(x -> length(x) > 0, words)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo2m0nfte.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Vector{SubString{String}} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpo2m0nfte.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo2m0nfte.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2m0nfte.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpo2m0nfte.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Vector{SubString{String}} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpo2m0nfte.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo2m0nfte.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2m0nfte.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    lst = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(lst, word)\n        end\n    end\n    join(lst, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2f3ocm44.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2f3ocm44.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2f3ocm44.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2f3ocm44.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2f3ocm44.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2f3ocm44.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2f3ocm44.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2f3ocm44.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2f3ocm44.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2f3ocm44.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2f3ocm44.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2f3ocm44.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2f3ocm44.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2f3ocm44.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    where {T<:Integer}\n\
    \    words = split(sentence, \" \")\n    prime_words = []\n    for word in words\n\
    \        length = length(word)\n        if length == 2 || length == 3 || length\
    \ == 5 || length == 7 || length == 11 || length == 13 || length == 17 || length\
    \ == 19 || length == 23 || length == 29 || length == 31 || length == 37 || length\
    \ == 41 || length == 43 || length == 47 || length == 53 || length == 59 || length\
    \ == 61 || length == 67 || length == 71 || length == 73 || length == 79 || length\
    \ == 83 || length == 89 || length == 97 || length == 101\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"where {\"\
    \ at /tmp/tmpf1f7bhbu.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1f7bhbu.jl:21\n\
    in expression starting at /tmp/tmpf1f7bhbu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_lengths\
    \ = String.(split(sentence))\n    sentence_lengths = length.(sentence_lengths)\n\
    \    s = [\"is\",\"prime\"]\n    for i in sentence_lengths\n        if primes(i)\n\
    \            s.append(i)\n        end\n    end\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplj6cijet.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplj6cijet.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplj6cijet.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplj6cijet.jl:35\ntest set:\
    \ Error During Test at /tmp/tmplj6cijet.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmplj6cijet.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplj6cijet.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplj6cijet.jl:35\ntest set:\
    \ Error During Test at /tmp/tmplj6cijet.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmplj6cijet.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplj6cijet.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplj6cijet.jl:35\ntest set:\
    \ Error During Test at /tmp/tmplj6cijet.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplj6cijet.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    i = 0\n    j = 0\n\
    \    res = \"\"\n    is_prime = true\n    end_of_sentence = false\n    println(sentence)\n\
    \    for i in 1:length(sentence)\n        c = sentence[i]\n        if c == ' '\
    \ || c == '\\n'\n            end_of_sentence = true\n        end\n        if end_of_sentence\n\
    \            for k in 2:j\n                if j % k == 0\n                   \
    \ is_prime = false\n                    break\n                end\n         \
    \   end\n            if is_prime\n                res = res * \" \" * substring(sentence,\
    \ i - j + 1, i)\n            end\n            end_of_sentence = false\n      \
    \      is_prime = true\n            j = 0\n        else\n            j += 1\n\
    \        end\n    end\n    return res\nend\nwords_in_sentence(\"This is a test\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "This is a test\n"
  stderr: "ERROR: LoadError: UndefVarError: substring not defined\nStacktrace:\n [1]\
    \ words_in_sentence(sentence::String)\n   @ Main /tmp/tmpefn4y8b0.jl:40\n [2]\
    \ top-level scope\n   @ /tmp/tmpefn4y8b0.jl:51\nin expression starting at /tmp/tmpefn4y8b0.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_splitted\
    \ = split(sentence, \" \")\n    word_lengths = map(length, sentence_splitted)\n\
    \    word_lengths_filtered = filter(is_prime, word_lengths)\n    sentence_new\
    \ = sentence_splitted[word_lengths_filtered]\n    return join(sentence_new, \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphh4stegb.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphh4stegb.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh4stegb.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh4stegb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphh4stegb.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphh4stegb.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh4stegb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh4stegb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphh4stegb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphh4stegb.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh4stegb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh4stegb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphh4stegb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphh4stegb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    filter(is_prime, map(length, words))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5kgi35kx.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5kgi35kx.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kgi35kx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kgi35kx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5kgi35kx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5kgi35kx.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kgi35kx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kgi35kx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5kgi35kx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5kgi35kx.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kgi35kx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kgi35kx.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5kgi35kx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5kgi35kx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    prime_numbers = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    words = string(sentence)\n    result = []\n    for word\
    \ in words\n        if length(word) in prime_numbers\n            push!(result,\
    \ word)\n        end\n    end\n    return join(result, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkjahos80.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjahos80.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjahos80.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkjahos80.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjahos80.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjahos80.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkjahos80.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjahos80.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjahos80.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkjahos80.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkjahos80.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkjahos80.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpkjahos80.jl:40\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \""
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjahos80.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence.split(\"\
    \ \")\n    for word in sentence\n        if word in primes\n            word\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_e_ctpgk.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_e_ctpgk.jl:1\n\
    in expression starting at /tmp/tmp_e_ctpgk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # create a table\
    \ of primes under 100 (ASCII 26)\n    primes = primes_under(100)\n    # split\
    \ the sentence\n    words = split(sentence, \" \")\n    # collect words into answer\n\
    \    answer = \"\"\n    for i in 1:length(words)\n        # if the word length\
    \ is a prime, add it to the answer\n        if words[i] in primes\n          \
    \  answer = string(answer, words[i], \" \")\n        end\n    end\n    # trim\
    \ the last space\n    return answer[1:end-1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_5578x39.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_under\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp_5578x39.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5578x39.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5578x39.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5578x39.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_under\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp_5578x39.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5578x39.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5578x39.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5578x39.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_under not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp_5578x39.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5578x39.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5578x39.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5578x39.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_under\
    \ not defined\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5578x39.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    word_prime_number\
    \ = [length(x) isprime(length(x)) for x in split(sentence, ' ')]\n    word_list\
    \ = split(sentence, ' ')\n    word_list[word_prime_number]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid comprehension syntax\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp3dvq15j6.jl:21\nin expression starting at /tmp/tmp3dvq15j6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = split(sentence,\
    \ ' ')\n    sentence = sentence[filter(issubprime, sentence)]\n    return join(sentence,\
    \ ' ')\nend\n@testset \"Example 1\" begin\n    @test words_in_sentence(\"This\
    \ is a test\") == \"is\"\nend\n@testset \"Example 2\" begin\n    @test words_in_sentence(\"\
    lets go for swimming\") == \"go for\"\nend\n@testset \"Test set 1\" begin\n  \
    \  @test words_in_sentence(\"123456789\") == \"\"\n    @test words_in_sentence(\"\
    1221\") == \"21\"\n    @test words_in_sentence(\"1\") == \"\"\n    @test words_in_sentence(\"\
    a\") == \"a\"\n    @test words_in_sentence(\"a b\") == \"a b\"\n    @test words_in_sentence(\"\
    a b b\") == \"a b\"\n    @test words_in_sentence(\"a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z\") == \"a e i l o s\"\n    @test words_in_sentence(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z\") == \"a e i l o s a e i l o s\"\n    @test words_in_sentence(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z\") == \"a e i l o s a e i l o s a e i l o s\"\n    @test words_in_sentence(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m\
    \ n o p q r s\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpir0s5i8z.jl:25\nin expression starting at /tmp/tmpir0s5i8z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"Return a string\
    \ containing the words from the original sentence, whose lengths are prime numbers.\"\
    \n    words = split(sentence, \" \")\n    primes = primes_in_range(1, maximum(length.(words)))\n\
    \    filter(w -> length(w) in primes, words) |> join\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps6d4w2ie.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps6d4w2ie.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps6d4w2ie.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6d4w2ie.jl:30\ntest set:\
    \ Error During Test at /tmp/tmps6d4w2ie.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps6d4w2ie.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps6d4w2ie.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6d4w2ie.jl:30\ntest set:\
    \ Error During Test at /tmp/tmps6d4w2ie.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_in_range not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmps6d4w2ie.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps6d4w2ie.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6d4w2ie.jl:30\ntest set:\
    \ Error During Test at /tmp/tmps6d4w2ie.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_in_range\
    \ not defined\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6d4w2ie.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sent = split(sentence,\
    \ \" \")\n    filt = filter(sent) do word\n        isprime(length(word))\n   \
    \ end\n    join(filt, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp73rn19j_.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp73rn19j_.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp73rn19j_.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp73rn19j_.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp73rn19j_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp73rn19j_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp73rn19j_.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp73rn19j_.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp73rn19j_.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp73rn19j_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp73rn19j_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp73rn19j_.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp73rn19j_.jl:22\n   [4] macro expansion\n     @ /shared/centos7/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73rn19j_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    n = length(sentence)\n\
    \    # Inizialize\n    word = \"\"\n    m = 0\n    s = \"\"\n    # Iterate over\
    \ the sentence\n    for i = 1:n\n        # If the ith char of the sentence is\
    \ a letter\n        if ('a' <= sentence[i] <= 'z') || ('A' <= sentence[i] <= 'Z')\
    \ \n            # Append the letter to the word\n            word = string(word,\
    \ sentence[i])\n        else\n            # If the length of the word is prime,\
    \ append it to the output\n            if isprime(length(word))\n            \
    \    if length(s) != 0\n                    s = string(s, \" \")\n           \
    \     end\n                s = string(s, word)\n            end\n            #\
    \ Re-initialize the word\n            word = \"\"\n        end\n    end\n    if\
    \ isprime(length(word))\n        if length(s) != 0\n            s = string(s,\
    \ \" \")\n        end\n        s = string(s, word)\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaexiw8p7.jl:57\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpaexiw8p7.jl:34\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaexiw8p7.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaexiw8p7.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpaexiw8p7.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpaexiw8p7.jl:34\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaexiw8p7.jl:58 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaexiw8p7.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpaexiw8p7.jl:59\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpaexiw8p7.jl:34\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaexiw8p7.jl:59 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaexiw8p7.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpaexiw8p7.jl:60\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaexiw8p7.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    valid_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(valid_words, word)\n        end\n    end\n    join(valid_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ubnavpa.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9ubnavpa.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ubnavpa.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ubnavpa.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9ubnavpa.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9ubnavpa.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ubnavpa.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ubnavpa.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9ubnavpa.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9ubnavpa.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ubnavpa.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ubnavpa.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9ubnavpa.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ubnavpa.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    word_list = split(sentence)\n\
    \    return join(w for w in word_list if isprime(length(w)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkm6pfd99.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] join(io::IOBuffer,\
    \ iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)}, delim::String)\n      @ Base ./strings/io.jl:346\n    [5]\
    \ join(io::IOBuffer, iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\"\
    , Vector{SubString{String}}}, typeof(identity)})\n      @ Base ./strings/io.jl:345\n\
    \    [6] sprint(f::Function, args::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{SubString{String}}}, typeof(identity)}; context::Nothing, sizehint::Int64)\n\
    \      @ Base ./strings/io.jl:114\n    [7] sprint\n      @ ./strings/io.jl:108\
    \ [inlined]\n    [8] join\n      @ ./strings/io.jl:352 [inlined]\n    [9] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpkm6pfd99.jl:22\n   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpkm6pfd99.jl:29 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpkm6pfd99.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpkm6pfd99.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(w::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] join(io::IOBuffer,\
    \ iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)}, delim::String)\n      @ Base ./strings/io.jl:346\n    [5]\
    \ join(io::IOBuffer, iterator::Base.Generator{Base.Iterators.Filter{var\"#1#2\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm6pfd99.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    output = []\n    for word in words\n        word_length = length(word)\n\
    \        is_prime = true\n        for n in 2:word_length-1\n            if word_length\
    \ % n == 0\n                is_prime = false\n                break\n        \
    \    end\n        end\n        if is_prime\n            push!(output, word)\n\
    \        end\n    end\n    join(output, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_oaw2hd9.jl:43\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_oaw2hd9.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_oaw2hd9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp_oaw2hd9.jl:46\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_oaw2hd9.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_oaw2hd9.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_oaw2hd9.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # STEP 1: initialize\
    \ two empty vectors to store the split_words and the indices of the\n    # prime\
    \ numbers from the split_words vector\n    prime_numbers_indices = Array{Int}()\n\
    \    split_words = split(sentence, r\"\\s+\")\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp60gzf2ne.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60gzf2ne.jl:1\n\
    in expression starting at /tmp/tmp60gzf2ne.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    words_to_keep = []\n    for word in words\n        if is_prime(length(word))\n\
    \            push!(words_to_keep, word)\n        end\n    end\n    return join(words_to_keep,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl1w4tu69.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl1w4tu69.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1w4tu69.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1w4tu69.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl1w4tu69.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl1w4tu69.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1w4tu69.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1w4tu69.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl1w4tu69.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpl1w4tu69.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1w4tu69.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1w4tu69.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpl1w4tu69.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1w4tu69.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # find prime numbers\n\
    \    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # split sentence into an array\n\
    \    split_sentence = split(sentence, \" \")\n    # init\n    new_sentence = \"\
    \"\n    for word in split_sentence\n        # find the length of the word\n  \
    \      word_length = length(word)\n        # check if the length is a prime number\n\
    \        if word_length in prime_numbers\n            # add space\n          \
    \  if length(new_sentence) > 0\n                new_sentence = new_sentence *\
    \ \" \"\n            end\n            # add word\n            new_sentence = new_sentence\
    \ * word\n        end\n    end\n    return new_sentence\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_lengths = Set([ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 ])\n    return join(filter(word\
    \ -> length(word) in prime_lengths, words), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = tokenize(sentence)\n\
    \    for word in words\n        append!(first_sentence_with_prime_length_words,\
    \ word) if isprime(length(word)) == true\n    end\n    return join(first_sentence_with_prime_length_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplrz3kgkt.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplrz3kgkt.jl:23\n\
    in expression starting at /tmp/tmplrz3kgkt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    words = split(sentence, \" \")\n    filter(w->(w->w in primes)(length(w)),\
    \ words)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp455vneze.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Vector{SubString{String}} to an object of type String\n\
    \  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp455vneze.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp455vneze.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp455vneze.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp455vneze.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Vector{SubString{String}} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp455vneze.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp455vneze.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp455vneze.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_words =\
    \ split(sentence, \" \")\n    sentence_primes = []\n    for word in sentence_words\n\
    \        length_of_word = length(word)\n        push!(sentence_primes, word) if\
    \ isprime(length_of_word)\n    end\n    return join(sentence_primes, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphtr8w_5_.jl:23 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphtr8w_5_.jl:25\n\
    in expression starting at /tmp/tmphtr8w_5_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpupq324c9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpupq324c9.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupq324c9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupq324c9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpupq324c9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpupq324c9.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupq324c9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupq324c9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpupq324c9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpupq324c9.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpupq324c9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpupq324c9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpupq324c9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupq324c9.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    n = length(sentence)\n\
    \    print(n)\n    sent = split(sentence)\n    print(sent)\n    out = []\n   \
    \ for word in sent\n        nw = length(word)\n        flag = true\n        for\
    \ i in 2:nw-1\n            if nw % i == 0\n                flag = false\n    \
    \            break\n            end\n        end\n        if flag\n          \
    \  push!(out, word)\n        end\n    end\n    return join(out, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "14SubString{String}[\"This\", \"is\", \"a\", \"test\"]test set: Test Failed\
    \ at /tmp/tmp5txyp628.jl:46\n  Expression: candidate(\"This is a test\") == \"\
    is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5txyp628.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5txyp628.jl:45\n20SubString{String}[\"\
    lets\", \"go\", \"for\", \"swimming\"]32SubString{String}[\"there\", \"is\", \"\
    no\", \"place\", \"available\", \"here\"]15SubString{String}[\"Hi\", \"I\", \"\
    am\", \"Hussein\"]test set: Test Failed at /tmp/tmp5txyp628.jl:49\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n   Evaluated: \"Hi I am\
    \ Hussein\" == \"Hi am Hussein\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5txyp628.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5txyp628.jl:45\n9SubString{String}[\"\
    go\", \"for\", \"it\"]4SubString{String}[\"here\"]7SubString{String}[\"here\"\
    , \"is\"]Test Summary: | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5txyp628.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpglcgxclo.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpglcgxclo.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpglcgxclo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglcgxclo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpglcgxclo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpglcgxclo.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpglcgxclo.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglcgxclo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpglcgxclo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpglcgxclo.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpglcgxclo.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglcgxclo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpglcgxclo.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglcgxclo.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    final_sentence = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            final_sentence = final_sentence * word * \" \"\n        end\n   \
    \ end\n    final_sentence = final_sentence[1:end-1]\n    return final_sentence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9x7z0jy_.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9x7z0jy_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x7z0jy_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x7z0jy_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x7z0jy_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9x7z0jy_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x7z0jy_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x7z0jy_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x7z0jy_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9x7z0jy_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x7z0jy_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x7z0jy_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x7z0jy_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x7z0jy_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    result = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            if length(result) > 0\n                result *= \" \"\n        \
    \    end\n            result *= word\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjm24sh4w.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjm24sh4w.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm24sh4w.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm24sh4w.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjm24sh4w.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjm24sh4w.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm24sh4w.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm24sh4w.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjm24sh4w.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjm24sh4w.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm24sh4w.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm24sh4w.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjm24sh4w.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjm24sh4w.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    num_words = length(split(sentence))\n\
    \    for i in 1:num_words\n        words = split(sentence, \" \")\n        if\
    \ length(words[i]) > 1\n            # not a prime number\n            continue\n\
    \        end\n        # print(words[i])\n    end\n    return \"junk\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprt657h2x.jl:37\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"junk\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt657h2x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt657h2x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprt657h2x.jl:38\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"junk\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt657h2x.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt657h2x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprt657h2x.jl:39\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"junk\" == \"there\
    \ is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt657h2x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt657h2x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprt657h2x.jl:40\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"junk\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprt657h2x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprt657h2x.jl:36\ntest set: Test\
    \ Failed at /tmp/tmprt657h2x.jl:41\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt657h2x.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    new_sentence = []\n    for word in split(sentence, \" \")\n   \
    \     if length(word) in primes\n            push!(new_sentence, word)\n     \
    \   end\n    end\n    return join(new_sentence, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_splitted\
    \ = split(sentence, \" \")\n    prime_words = []\n    for word in sentence_splitted\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprfdfi7_n.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprfdfi7_n.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfdfi7_n.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfdfi7_n.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprfdfi7_n.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmprfdfi7_n.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfdfi7_n.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfdfi7_n.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprfdfi7_n.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmprfdfi7_n.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprfdfi7_n.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprfdfi7_n.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprfdfi7_n.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprfdfi7_n.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = sentence.split()\n\
    \    sentence = [word for word in sentence if isprime(length(word))]\n    return\
    \ \" \".join(sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwbxm3w6w.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpwbxm3w6w.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwbxm3w6w.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwbxm3w6w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwbxm3w6w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpwbxm3w6w.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwbxm3w6w.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwbxm3w6w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwbxm3w6w.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpwbxm3w6w.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwbxm3w6w.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwbxm3w6w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwbxm3w6w.jl:33\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbxm3w6w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = Vector{String}()\n    for word in words\n        word_length\
    \ = length(word)\n        is_prime = true\n        for i in 2:word_length\n  \
    \          if word_length % i == 0\n                is_prime = false\n       \
    \         break\n            end\n        end\n        if is_prime\n         \
    \   push!(result, word)\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsyhdwtha.jl:43\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsyhdwtha.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsyhdwtha.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpsyhdwtha.jl:44\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsyhdwtha.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsyhdwtha.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpsyhdwtha.jl:45\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsyhdwtha.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsyhdwtha.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpsyhdwtha.jl:46\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsyhdwtha.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsyhdwtha.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpsyhdwtha.jl:47\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated:"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsyhdwtha.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    for word in words\n        isprime(length(word)) ? println(word)\
    \ : continue\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkdcc7glt.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkdcc7glt.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkdcc7glt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdcc7glt.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpkdcc7glt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkdcc7glt.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkdcc7glt.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdcc7glt.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpkdcc7glt.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkdcc7glt.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkdcc7glt.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdcc7glt.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpkdcc7glt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdcc7glt.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    ##############################\n\
    \    # DO NOT EDIT THIS FUNCTION #\n    ##############################\n    words\
    \ = split(sentence)\n    new_sentence = []\n    for word in words\n        if\
    \ isprime(length(word))\n            push!(new_sentence, word)\n        end\n\
    \    end\n    return join(new_sentence, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphype8ul1.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphype8ul1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphype8ul1.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphype8ul1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphype8ul1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphype8ul1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphype8ul1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphype8ul1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphype8ul1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphype8ul1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphype8ul1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphype8ul1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphype8ul1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphype8ul1.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    for c in ' '\n  \
    \      ws = split(sentence, c)\n        ws = ws[map(length(ws))]\n        \n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9s285_ik.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] map(f::Int64)\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp9s285_ik.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9s285_ik.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9s285_ik.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9s285_ik.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: objects of\
    \ type Int64 are not callable\n  Maybe you forgot to use an operator such as *,\
    \ ^, %, / etc. ?\n  Stacktrace:\n   [1] map(f::Int64)\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp9s285_ik.jl:23\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9s285_ik.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9s285_ik.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp9s285_ik.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ MethodError: objects of type Int64 are not callable\n  Maybe you forgot to use\
    \ an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] map(f::Int64)\n\
    \     @ Base ./abstractarray.jl:2965\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9s285_ik.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s285_ik.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \"not implemented\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8w_qcztb.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"not implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w_qcztb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w_qcztb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8w_qcztb.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"not implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w_qcztb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w_qcztb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8w_qcztb.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"not implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w_qcztb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w_qcztb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8w_qcztb.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"not implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8w_qcztb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8w_qcztb.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8w_qcztb.jl:32\n  Expre"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8w_qcztb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # Prealocate the\
    \ array\n    words = split(sentence, \" \")\n    len_words = length(words)\n \
    \   prime_words = []\n    # Iterate over the words\n    for i in 1:len_words\n\
    \        word = words[i]\n        # If the length of the word is prime number\n\
    \        if isprime(length(word))\n            # Add to the output vector\n  \
    \          push!(prime_words, word)\n        end\n    end\n    # Return string\
    \ with words separated by a space\n    return join(prime_words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa5pth0w2.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa5pth0w2.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa5pth0w2.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa5pth0w2.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpa5pth0w2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa5pth0w2.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa5pth0w2.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa5pth0w2.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpa5pth0w2.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpa5pth0w2.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa5pth0w2.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa5pth0w2.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpa5pth0w2.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5pth0w2.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_sentence, word)\n        end\n    end\n    join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiby6khld.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpiby6khld.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiby6khld.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiby6khld.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiby6khld.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpiby6khld.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiby6khld.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiby6khld.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiby6khld.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpiby6khld.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiby6khld.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiby6khld.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpiby6khld.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiby6khld.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # select_primes_of_array(get_lengths_of_words(sentence))\n\
    \    select_primes_of_array(get_lengths_of_words(sentence))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd4jq79ut.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: get_lengths_of_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd4jq79ut.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4jq79ut.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4jq79ut.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpd4jq79ut.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: get_lengths_of_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd4jq79ut.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4jq79ut.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4jq79ut.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpd4jq79ut.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: get_lengths_of_words not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpd4jq79ut.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4jq79ut.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4jq79ut.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpd4jq79ut.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: get_lengths_o"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4jq79ut.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    clean_sentence =\
    \ replace(sentence, \".\" => \"\")\n    sentence_split = split(clean_sentence,\
    \ \" \")\n    prime_numbers = primes(0, length(sentence_split[1]))\n    for word\
    \ in sentence_split\n        if length(word) in prime_numbers\n            prime_words\
    \ = string(prime_words, \" \", word)\n        end\n    end\n    return strip(prime_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6g68d7sa.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6g68d7sa.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g68d7sa.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g68d7sa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6g68d7sa.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp6g68d7sa.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g68d7sa.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g68d7sa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6g68d7sa.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6g68d7sa.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g68d7sa.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g68d7sa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6g68d7sa.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6g68d7sa.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_list = split(sentence)\n\
    \    new_sentence = \"\"\n    for word in sentence_list\n        if isprime(length(word))\
    \ == true\n            new_sentence = string(new_sentence, \" \", word)\n    \
    \    end\n    end\n    return new_sentence\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxqzd7294.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxqzd7294.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqzd7294.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqzd7294.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxqzd7294.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpxqzd7294.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqzd7294.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqzd7294.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxqzd7294.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpxqzd7294.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxqzd7294.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxqzd7294.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpxqzd7294.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqzd7294.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    if has_word(word)\n\
    \        println(word)\n    end\nend\n    \n@testset \"example 1\" begin\n   \
    \ @test words_in_sentence(\"This is a test\") == \"is\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpo_joomza.jl:26\nin expression starting at /tmp/tmpo_joomza.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s = split(sentence,\
    \ \" \")\n    r = []\n    for i in s\n        if isprime(length(i))\n        \
    \    push!(r, i)\n        end\n    end\n    return join(r, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzscaxg63.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzscaxg63.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzscaxg63.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzscaxg63.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzscaxg63.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzscaxg63.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzscaxg63.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzscaxg63.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzscaxg63.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzscaxg63.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzscaxg63.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzscaxg63.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzscaxg63.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzscaxg63.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    result = String[]\n    for word in words\n        if isprime(length(word))\n\
    \            push!(result, word)\n        end\n    end\n    return join(result,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2m1trkh3.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2m1trkh3.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2m1trkh3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2m1trkh3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2m1trkh3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2m1trkh3.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2m1trkh3.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2m1trkh3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2m1trkh3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2m1trkh3.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2m1trkh3.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2m1trkh3.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp2m1trkh3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2m1trkh3.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    prime_words\
    \ = []\n    sentence_words = split(sentence, ' ')\n    \n    for word in sentence_words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    \n    return join(prime_words, ' ')\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpklekcjdz.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpklekcjdz.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklekcjdz.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklekcjdz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpklekcjdz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpklekcjdz.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklekcjdz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklekcjdz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpklekcjdz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpklekcjdz.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpklekcjdz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklekcjdz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpklekcjdz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklekcjdz.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    s = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            s = string(s, \" \", word)\n        end\n    end\n    s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqu40gx38.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqu40gx38.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqu40gx38.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqu40gx38.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqu40gx38.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqu40gx38.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqu40gx38.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqu40gx38.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqu40gx38.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpqu40gx38.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqu40gx38.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqu40gx38.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqu40gx38.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqu40gx38.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = split(sentence,\
    \ \" \")\n    ans = []\n    for word in sentence\n        if isprime(length(word))\n\
    \            push!(ans, word)\n        end\n    end\n    return join(ans, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptevyl8jq.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptevyl8jq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptevyl8jq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptevyl8jq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptevyl8jq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptevyl8jq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptevyl8jq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptevyl8jq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptevyl8jq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptevyl8jq.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptevyl8jq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptevyl8jq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmptevyl8jq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptevyl8jq.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    words = [word for word in words if isprime(length(word))]\n    return\
    \ join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmtddeo82.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpmtddeo82.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmtddeo82.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmtddeo82.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmtddeo82.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpmtddeo82.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmtddeo82.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmtddeo82.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmtddeo82.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    res = []\n    for\
    \ w in split(sentence)\n        i = str2int(w)\n        (v = length(res) > 0 ?\
    \ \" \" : \"\") && push!(res, v * w)\n    end\n    return join(res)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppqdr21tc.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: str2int\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmppqdr21tc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqdr21tc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqdr21tc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppqdr21tc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: str2int\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmppqdr21tc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqdr21tc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqdr21tc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppqdr21tc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: str2int not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmppqdr21tc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppqdr21tc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppqdr21tc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmppqdr21tc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: str2int\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqdr21tc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s = split(sentence,\
    \ \" \")\n    return join(filter(is_prime, s), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyu_xwxja.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpyu_xwxja.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyu_xwxja.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyu_xwxja.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyu_xwxja.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpyu_xwxja.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyu_xwxja.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyu_xwxja.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyu_xwxja.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpyu_xwxja.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyu_xwxja.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyu_xwxja.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyu_xwxja.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyu_xwxja.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = sentence.split(\"\
    \ \")\n    sentence = sentence[isprime.(length.(sentence))]\n    return join(sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2fj2gl5k.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp2fj2gl5k.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2fj2gl5k.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2fj2gl5k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2fj2gl5k.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp2fj2gl5k.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2fj2gl5k.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2fj2gl5k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2fj2gl5k.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp2fj2gl5k.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2fj2gl5k.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2fj2gl5k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp2fj2gl5k.jl:33\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fj2gl5k.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primewords = []\n    for word in words\n        length = length(word)\n\
    \        isprime = true\n        if length == 1\n            isprime = false\n\
    \        else\n            for i = 2:floor(length/2)\n                if length\
    \ % i == 0\n                    isprime = false\n                    break\n \
    \               end\n            end\n        end\n        if isprime\n      \
    \      push!(primewords, word)\n        end\n    end\n    return join(primewords,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwq_hg_1p.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwq_hg_1p.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwq_hg_1p.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwq_hg_1p.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpwq_hg_1p.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpwq_hg_1p.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwq_hg_1p.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwq_hg_1p.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpwq_hg_1p.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: length not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwq_hg_1p.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwq_hg_1p.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwq_hg_1p.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpwq_hg_1p.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq_hg_1p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    res = \"\"\n    for word in words\n        if (isprime(length(word)))\n\
    \            res = res * \" \" * word\n        end\n    end\n    return res\n\
    end\n@testset \"Example 1\" begin\n    @test words_in_sentence(\"This is a test\"\
    ) == \"is\"\nend\n@testset \"Example 2\" begin\n    @test words_in_sentence(\"\
    lets go for swimming\") == \"go for\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpl_veljg6.jl:30\nin expression starting at /tmp/tmpl_veljg6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    arr = split(sentence,\
    \ ' ')\n    output = []\n    for s in arr\n        if isprime(length(s))\n   \
    \         push!(output, s)\n        end\n    end\n    join(output, ' ')\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0x7jdiun.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0x7jdiun.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x7jdiun.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x7jdiun.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0x7jdiun.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp0x7jdiun.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x7jdiun.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x7jdiun.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0x7jdiun.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp0x7jdiun.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0x7jdiun.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0x7jdiun.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0x7jdiun.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x7jdiun.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return join([word\
    \ for word in split(sentence) if isprime(length(word))])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplfnk1f3q.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmplfnk1f3q.jl:21\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmplfnk1f3q.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmplfnk1f3q.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplfnk1f3q.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmplfnk1f3q.jl:21\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmplfnk1f3q.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmplfnk1f3q.jl:27\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplfnk1f3q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = []\n    for word in words\n        word_length = length(word)\n\
    \        is_prime = true\n        for number in 2:word_length - 1\n          \
    \  if word_length % number == 0\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime\n            push!(result,\
    \ word)\n        end\n    end\n    return join(result, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp30fn_ss.jl:43\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp30fn_ss.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp30fn_ss.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpp30fn_ss.jl:46\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp30fn_ss.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp30fn_ss.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp30fn_ss.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return find_words(split(sentence,\
    \ \" \"))\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6u3xu92l.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: find_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6u3xu92l.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6u3xu92l.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6u3xu92l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6u3xu92l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: find_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6u3xu92l.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6u3xu92l.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6u3xu92l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6u3xu92l.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: find_words not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6u3xu92l.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6u3xu92l.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6u3xu92l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp6u3xu92l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: find_words\
    \ not defined\n  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6u3xu92l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    prime_numbers = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    sentence_split = split(sentence, \" \")\n    sentence_lengths\
    \ = [length(item) for item in sentence_split]\n    indices = [i for i in eachindex(sentence_lengths)\
    \ if sentence_lengths[i] in prime_numbers]\n    return join(sentence_split[indices],\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    found_primes = primes_in_words(sentence)\n\
    \    if length(found_primes) == 0\n        return \"\"\n    else\n        return\
    \ join(found_primes, \" \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpcl2cb7ne.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_in_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcl2cb7ne.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcl2cb7ne.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcl2cb7ne.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcl2cb7ne.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_in_words\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcl2cb7ne.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcl2cb7ne.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcl2cb7ne.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcl2cb7ne.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_in_words not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpcl2cb7ne.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcl2cb7ne.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcl2cb7ne.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpcl2cb7ne.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_in_words\
    \ not defined\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl2cb7ne.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    string_array = split(sentence,\
    \ \" \")\n    result = []\n    for word in string_array\n        word_length =\
    \ length(word)\n        if isprime(word_length)\n            push!(result, word)\n\
    \        end\n    end\n    return(join(result, \" \"))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkhbbnds5.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkhbbnds5.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkhbbnds5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkhbbnds5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkhbbnds5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkhbbnds5.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkhbbnds5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkhbbnds5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkhbbnds5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkhbbnds5.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkhbbnds5.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkhbbnds5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkhbbnds5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhbbnds5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return sentence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3a433e9a.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"This is a test\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a433e9a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a433e9a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3a433e9a.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"lets go for swimming\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a433e9a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a433e9a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3a433e9a.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"there is no place\
    \ available here\" == \"there is no place\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a433e9a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a433e9a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3a433e9a.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3a433e9a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3a433e9a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3a433e9a.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            result = result * \" \" * word\n        end\n    end\n    return\
    \ replace(result, \"^ \", \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpzi7d1owc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzi7d1owc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi7d1owc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi7d1owc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzi7d1owc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzi7d1owc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi7d1owc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi7d1owc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzi7d1owc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzi7d1owc.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi7d1owc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi7d1owc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzi7d1owc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzi7d1owc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    str = lowercase(sentence)\n\
    \    words = split(str, \" \")\n    prime_words = []\n    for word in words\n\
    \        l = length(word)\n        if isprime(l)\n            push!(prime_words,\
    \ word)\n        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ywspyjs.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4ywspyjs.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ywspyjs.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ywspyjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4ywspyjs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4ywspyjs.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ywspyjs.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ywspyjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4ywspyjs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp4ywspyjs.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ywspyjs.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ywspyjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4ywspyjs.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ywspyjs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    nums = primes(length(split(sentence)))\n\
    \    words = split(sentence)\n    word_lens = length.(words)\n    candidates =\
    \ zip(word_lens, words)\n    filter(x -> x[1] in nums, candidates)\n    map(x\
    \ -> x[2], candidates)\n    join(candidates)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsv_r2g0m.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsv_r2g0m.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsv_r2g0m.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv_r2g0m.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsv_r2g0m.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpsv_r2g0m.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsv_r2g0m.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv_r2g0m.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsv_r2g0m.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpsv_r2g0m.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsv_r2g0m.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsv_r2g0m.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsv_r2g0m.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsv_r2g0m.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\"\n    Steps:\n\
    \        1. split the sentence into a list of words\n        2. check if each\
    \ word has a length of a prime number,\n           if so add it to the new sentence\
    \ string\n        3. return the new sentence string\n    \"\"\"\n    # split sentence\
    \ into a list of words\n    splitted_sentence = split(sentence, \" \")\n    new_sentence\
    \ = \"\"\n    # check if each word has a length of a prime number\n    for word\
    \ in splitted_sentence\n        if isprime(length(word))\n            new_sentence\
    \ = new_sentence * word * \" \"\n        end\n    end\n    return new_sentence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb3j6x3v0.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb3j6x3v0.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3j6x3v0.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3j6x3v0.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpb3j6x3v0.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb3j6x3v0.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3j6x3v0.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3j6x3v0.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpb3j6x3v0.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpb3j6x3v0.jl:33\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb3j6x3v0.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb3j6x3v0.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpb3j6x3v0.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3j6x3v0.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # Split the sentence\
    \ into words and find the ones that are prime-length\n    filter(x -> isprime(length(x)),\
    \ split(sentence, \" \"))\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoilfbno3.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpoilfbno3.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpoilfbno3.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoilfbno3.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoilfbno3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpoilfbno3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpoilfbno3.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpoilfbno3.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoilfbno3.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoilfbno3.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpoilfbno3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpoilfbno3.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpoilfbno3.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoilfbno3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_words = []\n    for w in words\n        if isprime(length(w))\n\
    \            push!(new_words, w)\n        end\n    end\n    return join(new_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo6ojyyh1.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpo6ojyyh1.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo6ojyyh1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo6ojyyh1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo6ojyyh1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpo6ojyyh1.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo6ojyyh1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo6ojyyh1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo6ojyyh1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpo6ojyyh1.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo6ojyyh1.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo6ojyyh1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpo6ojyyh1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo6ojyyh1.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    return \"\"\nend\n\
    \ \n@testset \"Test Example 1\" begin\n    @test words_in_sentence(\"This is a\
    \ test\") == \"is\"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpph5et9m4.jl:24\nin expression starting at /tmp/tmpph5et9m4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [true for i in 1:n]\n    for i in 2:n\n        if primes[i]\
    \ == true\n            for j in i:n\n                primes[j] = false\n     \
    \       end\n        end\n    end\n    println(primes)\nend\n \nwords_in_sentence(\"\
    This is a test\")\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: n not defined\nStacktrace:\n [1] words_in_sentence(sentence::String)\n\
    \   @ Main /tmp/tmpo_z7azy4.jl:22\n [2] top-level scope\n   @ /tmp/tmpo_z7azy4.jl:33\n\
    in expression starting at /tmp/tmpo_z7azy4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    for i in 1:length(words)\n        if isprime(length(words[i]))\n \
    \           println(words[i])\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkjoxm3of.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkjoxm3of.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjoxm3of.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjoxm3of.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkjoxm3of.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkjoxm3of.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjoxm3of.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjoxm3of.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkjoxm3of.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkjoxm3of.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjoxm3of.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjoxm3of.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkjoxm3of.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjoxm3of.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for\
    \ word in words\n        for i in 1:length(word)\n            if is_prime(word,\
    \ i) == true\n                push!(prime_words, word)\n            end\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm0yad6d6.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm0yad6d6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm0yad6d6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm0yad6d6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm0yad6d6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm0yad6d6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm0yad6d6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm0yad6d6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm0yad6d6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpm0yad6d6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm0yad6d6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm0yad6d6.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm0yad6d6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0yad6d6.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    primes = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    words = split(sentence, \" \")\n    prime_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    for w in words\n        if (length(w) isprime()):\n            print(w)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_swx2z6h.jl:23\nin expression starting at\
    \ /tmp/tmp_swx2z6h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    primes = get_primes(100)\n\
    \    words = split(sentence, \" \")\n    new_sentence = []\n    for word in words\n\
    \        if word in primes\n            push!(new_sentence, word)\n        end\n\
    \    end\n    join(new_sentence, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp22tdewq5.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp22tdewq5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22tdewq5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22tdewq5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp22tdewq5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp22tdewq5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22tdewq5.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22tdewq5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp22tdewq5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: get_primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp22tdewq5.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp22tdewq5.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp22tdewq5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp22tdewq5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22tdewq5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"Your Solution Here\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpch45b95u.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"Your Solution Here\" == \"is\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch45b95u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch45b95u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpch45b95u.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"Your Solution Here\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch45b95u.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch45b95u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpch45b95u.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"Your Solution Here\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch45b95u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch45b95u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpch45b95u.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Your Solution Here\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpch45b95u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpch45b95u.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpch45b95u.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpch45b95u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    sentence = String[]\n    for word in words\n        length = count(word)\n\
    \        if is_prime(length)\n            push!(sentence, word)\n        end\n\
    \    end\n    return join(sentence, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8h3_dvw2.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  TypeError: non-boolean\
    \ (Char) used in boolean context\n  Stacktrace:\n   [1] _simple_count(pred::typeof(identity),\
    \ itr::SubString{String}, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8h3_dvw2.jl:24\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp8h3_dvw2.jl:36 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp8h3_dvw2.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8h3_dvw2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  TypeError: non-boolean\
    \ (Char) used in boolean context\n  Stacktrace:\n   [1] _simple_count(pred::typeof(identity),\
    \ itr::SubString{String}, init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n   [3] #count#270\n     @ ./reduce.jl:1199\
    \ [inlined]\n   [4] count\n     @ ./reduce.jl:1199 [inlined]\n   [5] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8h3_dvw2.jl:24\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp8h3_dvw2.jl:37 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp8h3_dvw2.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8h3_dvw2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ TypeError: non-boolean (Char) used in boolean context\n  Stacktrace:\n   [1]\
    \ _simple_count(pred::typeof(identity), itr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8h3_dvw2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    primes_map = Dict(word => count_chars(word)\
    \ in primes for word in words)\n    return join(word for (word, is_prime) in primes_map\
    \ if is_prime)\nend\n@testset \"Example 1\" begin\n    @test words_in_sentence(\"\
    This is a test\") == \"is\"\nend\n@testset \"Example 2\" begin\n    @test words_in_sentence(\"\
    lets go for swimming\") == \"go for\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp_j227npj.jl:26\nin expression starting at /tmp/tmp_j227npj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sentence_words = []\n    for w\
    \ in words\n        word_length = length(w)\n        if word_length in primes\n\
    \            push!(sentence_words, w)\n        end\n    end\n    join(sentence_words,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words\n\
    \        if length(word) in primes\n            append!(result, word)\n      \
    \  end\n    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptlfwwnqx.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"i s\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlfwwnqx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlfwwnqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptlfwwnqx.jl:37\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"g o f o r\" == \"go for\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlfwwnqx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlfwwnqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptlfwwnqx.jl:38\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"t h e r e i s n\
    \ o p l a c e\" == \"there is no place\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlfwwnqx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlfwwnqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptlfwwnqx.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"H i a m H u s s e i n\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptlfwwnqx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptlfwwnqx.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptlfwwnqx.jl:40\n  Expre"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptlfwwnqx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = sentence.lower()\n\
    \    sentence = sentence.replace(\".\", \"\")\n    words = split(sentence, \"\
    \ \")\n    words_lengths = [length(x) for x in words]\n    # println(words_lengths)\n\
    \    new_words = [words[i] for i in findall(isprime, words_lengths)]\n    # println(new_words)\n\
    \    new_sentence = join(new_words, \" \")\n    return new_sentence\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5xtchsr7.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ lower\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp5xtchsr7.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5xtchsr7.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5xtchsr7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5xtchsr7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ lower\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp5xtchsr7.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5xtchsr7.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5xtchsr7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5xtchsr7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field lower\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp5xtchsr7.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5xtchsr7.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5xtchsr7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5xtchsr7.jl:39\n  Test threw except"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xtchsr7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    new_sentence = []\n    for word in words\n        if isprime(length(word))\n\
    \            push!(new_sentence, word)\n        end\n    end\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpapezso8h.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpapezso8h.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapezso8h.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapezso8h.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpapezso8h.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpapezso8h.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapezso8h.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapezso8h.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpapezso8h.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpapezso8h.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapezso8h.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapezso8h.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpapezso8h.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapezso8h.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    for w in words\n        if isprime(length(w))\n            println(w)\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp326imqoc.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp326imqoc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp326imqoc.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp326imqoc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp326imqoc.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp326imqoc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp326imqoc.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp326imqoc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp326imqoc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp326imqoc.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp326imqoc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp326imqoc.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp326imqoc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp326imqoc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s = \"\"\n    for\
    \ j in eachmatch(r\"(\\w+)\", sentence)\n        j1 = size(j.match)\n        if\
    \ isprime(j1)\n            s = s * (j.match * \" \")\n        end\n    end\n \
    \   return s[1:end-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpusd9jy4j.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching size(::SubString{String})\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpusd9jy4j.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpusd9jy4j.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpusd9jy4j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpusd9jy4j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching size(::SubString{String})\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.Q"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusd9jy4j.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \"\"\"\n    Return\
    \ the words from a sentence, whose lengths are prime numbers.\n    \"\"\"\n  \
    \  prime_words = String[]\n    for word in split(sentence)\n        if isprime(length(word))\n\
    \            push!(prime_words, word)\n        end\n    end\n    return join(prime_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplb9w40pn.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplb9w40pn.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplb9w40pn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplb9w40pn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplb9w40pn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplb9w40pn.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplb9w40pn.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplb9w40pn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplb9w40pn.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmplb9w40pn.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplb9w40pn.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplb9w40pn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmplb9w40pn.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplb9w40pn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    arr = split(sentence)\n\
    \    s = \"\"\n    for x in arr\n        if (isprime(length(x)))\n           \
    \ s = s * \" \" * x\n        end\n    end\n    return trim(s)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk8suo6mw.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk8suo6mw.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk8suo6mw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk8suo6mw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk8suo6mw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk8suo6mw.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk8suo6mw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk8suo6mw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk8suo6mw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpk8suo6mw.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk8suo6mw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk8suo6mw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk8suo6mw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8suo6mw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    is_prime(n::Int)\
    \ = n > 1 && all([rem(n, i) != 0 for i in 2:floor(Int, sqrt(n))])\n    words =\
    \ split(sentence)\n    res = join([w for w in words if is_prime(length(w))], \"\
    \ \")\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    new_words = []\n    for i in 1:length(words)\n        if isprime(length(words[i]))\n\
    \            push!(new_words, words[i])\n        end\n    end\n    join(new_words,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcj6hs179.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcj6hs179.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj6hs179.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj6hs179.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcj6hs179.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcj6hs179.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj6hs179.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj6hs179.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcj6hs179.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpcj6hs179.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj6hs179.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj6hs179.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcj6hs179.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcj6hs179.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    s = split(sentence)\n\
    \    return join(s[isprime.(length.(s))])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmh06cycq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmh06cycq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmh06cycq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmh06cycq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmh06cycq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmh06cycq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmh06cycq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmh06cycq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmh06cycq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpmh06cycq.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmh06cycq.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmh06cycq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmh06cycq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmh06cycq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    n = length(sentence)\n\
    \    if n < 2\n        return \"\"\n    end\n    start = 1\n    res = \"\"\n \
    \   for i in 2:n\n        if sentence[i] == ' '\n            word = sentence[start:i-1]\n\
    \            if isprime(length(word))\n                res = res * word * \" \"\
    \n            end\n            start = i+1\n        end\n    end\n    word = sentence[start:n]\n\
    \    if isprime(length(word))\n        res = res * word\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpascaqxh5.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpascaqxh5.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpascaqxh5.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpascaqxh5.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpascaqxh5.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpascaqxh5.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpascaqxh5.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpascaqxh5.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpascaqxh5.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpascaqxh5.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpascaqxh5.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpascaqxh5.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpascaqxh5.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpascaqxh5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = primes_in_range(1, length(sentence))\n    return join(filter(x\
    \ -> ismember(length(x), primes), words), \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvo4bvp3k.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvo4bvp3k.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo4bvp3k.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo4bvp3k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvo4bvp3k.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvo4bvp3k.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo4bvp3k.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo4bvp3k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvo4bvp3k.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_in_range not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpvo4bvp3k.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvo4bvp3k.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvo4bvp3k.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvo4bvp3k.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_in_range\
    \ not defined\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvo4bvp3k.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = Array{String}()\n    for word in words\n        if\
    \ isprime(length(word))\n            push!(prime_words, word)\n        end\n \
    \   end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5_kc47l8.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching (Array{String})()\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp5_kc47l8.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_kc47l8.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5_kc47l8.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5_kc47l8.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching (Array{String})()\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\n\
    \    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp5_kc47l8.jl:22\n   [2] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_kc47l8.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    l, s = length(sentence),\
    \ \" \"\n    for i in 1:l\n        if !(sentence[i] in s) && isprime(length(split(sentence[i],\
    \ \" \")))\n            push!(s, sentence[i])\n        end\n    end\n    join(s,\
    \ \" \")\nend\n\"\"\"\n    You are given a string, and you have to find the number\
    \ of vowels and consonants in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeccr3dut.jl:29\nin expression starting at\
    \ /tmp/tmpeccr3dut.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence_list = split(sentence,\
    \ \" \")\n    sentence_list = [word for word in sentence_list if isprime(length(word))]\n\
    \    join(sentence_list, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8blz5e6l.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp8blz5e6l.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp8blz5e6l.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp8blz5e6l.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp8blz5e6l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp8blz5e6l.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp8blz5e6l.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp8blz5e6l.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8blz5e6l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = [word for word in words if isprime(length(word))]\n\
    \    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpfa3hv_z2.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpfa3hv_z2.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfa3hv_z2.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfa3hv_z2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfa3hv_z2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpfa3hv_z2.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpfa3hv_z2.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpfa3hv_z2.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfa3hv_z2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    split_sentence =\
    \ split(sentence, \" \")\n    prime_words = []\n    for word in split_sentence\n\
    \        length = length(word)\n        # Use 2 because 1 isn't a prime number.\n\
    \        if 2 <= length <= 19 && isprime(length)\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmploodpf28.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmploodpf28.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmploodpf28.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmploodpf28.jl:36\ntest set:\
    \ Error During Test at /tmp/tmploodpf28.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmploodpf28.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmploodpf28.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmploodpf28.jl:36\ntest set:\
    \ Error During Test at /tmp/tmploodpf28.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: length not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmploodpf28.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmploodpf28.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmploodpf28.jl:36\ntest set:\
    \ Error During Test at /tmp/tmploodpf28.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_senten"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmploodpf28.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    parts = split(sentence,\
    \ \" \")\n    prime_parts = [part for part in parts if isprime(length(part))]\n\
    \    return join(prime_parts, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp7zvc15g5.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(part::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp7zvc15g5.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7zvc15g5.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7zvc15g5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7zvc15g5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(part::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp7zvc15g5.jl:22\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7zvc15g5.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7zvc15g5.jl:29\ntest set:\
    \ Error Du"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7zvc15g5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    i = 1\n    j = 1\n\
    \    words = []\n    while i <= length(sentence)\n        if sentence[i] == '\
    \ '\n            push!(words, sentence[j:i-1])\n            j = i + 1\n      \
    \  end\n        i += 1\n    end\n    words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb430j8aw.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Any} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpb430j8aw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb430j8aw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb430j8aw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpb430j8aw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Any} to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpb430j8aw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb430j8aw.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb430j8aw.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    prime_length_words\
    \ = []\n    word_lengths = length.(split(sentence, \" \"))\n    index = 0\n  \
    \  while index < length(word_lengths)\n        if isprime(word_lengths[index])\n\
    \            push!(prime_length_words, sentence[word_lengths[index]])\n      \
    \  end\n        index += 1\n    end\n    return join(prime_length_words, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzjiicazh.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzjiicazh.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjiicazh.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjiicazh.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpzjiicazh.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  BoundsError: attempt to\
    \ access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzjiicazh.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjiicazh.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjiicazh.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpzjiicazh.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ BoundsError: attempt to access 6-element Vector{Int64} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzjiicazh.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjiicazh.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjiicazh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for word in\
    \ words\n        length = 0\n        for letter in word\n            length +=\
    \ Int(letter)\n        end\n        if length in primes\n            result =\
    \ result * word * \" \"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hfwokg1.jl:40\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a \" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hfwokg1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hfwokg1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp0hfwokg1.jl:41\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hfwokg1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hfwokg1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp0hfwokg1.jl:42\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hfwokg1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hfwokg1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp0hfwokg1.jl:43\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I \" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0hfwokg1.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0hfwokg1.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp0hfwokg1.jl:44\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluate"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hfwokg1.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    primes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words_array = []\n    for word\
    \ in words\n        if length(word) in primes\n            push!(words_array,\
    \ word)\n        end\n    end\n    return join(words_array, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppoz7amj7.jl:36\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoz7amj7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoz7amj7.jl:35\ntest set: Test\
    \ Failed at /tmp/tmppoz7amj7.jl:39\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppoz7amj7.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppoz7amj7.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppoz7amj7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # TODO\nend\nprintln(words_in_sentence(\"\
    This is a test\")) # \"is\"\nprintln(words_in_sentence(\"lets go for swimming\"\
    )) # \"go for\"\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] words_in_sentence(sentence::String)\n   @ Main /tmp/tmpdyqgwd_c.jl:22\n\
    \ [2] top-level scope\n   @ /tmp/tmpdyqgwd_c.jl:23\nin expression starting at\
    \ /tmp/tmpdyqgwd_c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    l = length(sentence)\n\
    \    candidate_words = split(sentence, \" \")\n    result = []\n    for word in\
    \ candidate_words\n        if isprime(length(word))\n            push!(result,\
    \ word)\n        end\n    end\n    return join(result, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpop2123tw.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpop2123tw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop2123tw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpop2123tw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpop2123tw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpop2123tw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop2123tw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpop2123tw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpop2123tw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpop2123tw.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpop2123tw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpop2123tw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpop2123tw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpop2123tw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    for (i, word) in enumerate(words)\n        if isprime(length(word))\n\
    \            words[i] = word\n        else\n            words[i] = \"\"\n    \
    \    end\n    end\n    return join(words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcoxbtwre.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcoxbtwre.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcoxbtwre.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcoxbtwre.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcoxbtwre.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpcoxbtwre.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcoxbtwre.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcoxbtwre.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcoxbtwre.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpcoxbtwre.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcoxbtwre.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcoxbtwre.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcoxbtwre.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoxbtwre.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    tokens = split(sentence,\
    \ \" \")\n    isprime(n::Int) = n > 1 && all(rem(n, i) != 0 for i in 2:floor(Int,\
    \ sqrt(n)))\n    for word in tokens\n        if isprime(length(word))\n      \
    \      print(word)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "istest set: Error During Test at /tmp/tmp3nvxn2o0.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp3nvxn2o0.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3nvxn2o0.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3nvxn2o0.jl:33\ngofortest\
    \ set: Error During Test at /tmp/tmp3nvxn2o0.jl:35\n  Test threw exception\n \
    \ Expression: candidate(\"lets go for swimming\") == \"go for\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp3nvxn2o0.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3nvxn2o0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/juli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nvxn2o0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sentence = split(sentence,\
    \ ' ')\n    sentence = sentence[length.(sentence) .% isprime.(length.(sentence))\
    \ .== 0]\n    join(sentence, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpa48mvdc6.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa48mvdc6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa48mvdc6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa48mvdc6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpa48mvdc6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa48mvdc6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa48mvdc6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa48mvdc6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpa48mvdc6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpa48mvdc6.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa48mvdc6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa48mvdc6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpa48mvdc6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa48mvdc6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for word in words\n        word_length\
    \ = length(word)\n        word_length in primes ? push!(new_sentence, word) :\
    \ continue\n    end\n    join(new_sentence, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphja4_c4i.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: new_sentence\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphja4_c4i.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphja4_c4i.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphja4_c4i.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphja4_c4i.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: new_sentence\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmphja4_c4i.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphja4_c4i.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphja4_c4i.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphja4_c4i.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: new_sentence not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmphja4_c4i.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphja4_c4i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphja4_c4i.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphja4_c4i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: new_sentence\
    \ not defined\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphja4_c4i.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    sent_split = split(sentence,\
    \ \" \")\n    new_sent = \"\"\n    for word in sent_split\n        if isprime(length(word))\n\
    \            new_sent = new_sent * word * \" \"\n        end\n    end\n    return\
    \ strip(new_sent)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwham4kcb.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwham4kcb.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwham4kcb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwham4kcb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwham4kcb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwham4kcb.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwham4kcb.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwham4kcb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwham4kcb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwham4kcb.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwham4kcb.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwham4kcb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpwham4kcb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwham4kcb.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    \n    words = split(sentence,\
    \ r\"\\s+\")\n    words = join(filter(x -> isprime(length(x)), words), \" \")\n\
    \    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn3l4jnr6.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpn3l4jnr6.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn3l4jnr6.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn3l4jnr6.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn3l4jnr6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpn3l4jnr6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpn3l4jnr6.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn3l4jnr6.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn3l4jnr6.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn3l4jnr6.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpn3l4jnr6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpn3l4jnr6.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn3l4jnr6.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3l4jnr6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    arr = split(sentence)\n\
    \    res = []\n    for i in arr\n        if isprime(length(i))\n            push!(res,\
    \ i)\n        end\n    end\n    return join(res, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9397jiny.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9397jiny.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9397jiny.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9397jiny.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9397jiny.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9397jiny.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9397jiny.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9397jiny.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9397jiny.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9397jiny.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9397jiny.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9397jiny.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9397jiny.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9397jiny.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ ' ')\n    new_words = String[]\n    for word in words\n        is_prime = true\n\
    \        if length(word) != 0\n            for i in 2:length(word)\n         \
    \       if mod(length(word), i) == 0\n                    is_prime = false\n \
    \                   break\n                end\n            end\n        end\n\
    \        if is_prime\n            push!(new_words, word)\n        end\n    end\n\
    \    return join(new_words, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_1hwlnwl.jl:44\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1hwlnwl.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1hwlnwl.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_1hwlnwl.jl:45\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1hwlnwl.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1hwlnwl.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_1hwlnwl.jl:46\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"\" == \"there is\
    \ no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1hwlnwl.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1hwlnwl.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_1hwlnwl.jl:47\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_1hwlnwl.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_1hwlnwl.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_1hwlnwl.jl:48\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated:"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1hwlnwl.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    prime_words = []\n    for word in words\n        word_length = length(word)\n\
    \        if !in(word_length, [1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22,\
    \ 24, 25, 26, 27, 28, 30])\n            push!(prime_words, word)\n        end\n\
    \    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # Create an Array\
    \ that will hold the primes\n    primes = UInt64[]\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppttcqd5d.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppttcqd5d.jl:1\n\
    in expression starting at /tmp/tmppttcqd5d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    words = split(sentence,\
    \ \" \")\n    result = \"\"\n    for word in words\n        if isprime(length(word))\n\
    \            result = result * \" \" * word\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpys3uel0g.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpys3uel0g.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys3uel0g.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys3uel0g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys3uel0g.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpys3uel0g.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys3uel0g.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys3uel0g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys3uel0g.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpys3uel0g.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpys3uel0g.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpys3uel0g.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpys3uel0g.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpys3uel0g.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    # generate a list\
    \ of all primes up to `len(sentence)`\n    primes = [2]\n    for n in 3:len(sentence)\n\
    \        is_prime = true\n        for p in primes\n            if n % p == 0\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime\n            push!(primes, n)\n        end\n \
    \   end\n    \n    for i in 1:length(sentence)\n        if sentence[i] == ' '\n\
    \            primes = primes .- 1\n        end\n    end\n    \n    # remove zeros\
    \ from the list\n    primes = [p for p in primes if p != 0]\n    \n    new_sentence\
    \ = \"\"\n    word_num = 0\n    for i in 1:length(sentence)\n        new_sentence\
    \ *= sentence[i]\n        if sentence[i] == ' '\n            word_num += 1\n \
    \           if word_num in primes\n                new_sentence *= ' '\n     \
    \       else\n                new_sentence = new_sentence[1:end-1]\n         \
    \   end\n        end\n    end\n    \n    return new_sentence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpth1oofc_.jl:66\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpth1oofc_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpth1oofc_.jl:66 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpth1oofc_.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpth1oofc_.jl:67\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpth1oofc_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpth1oofc_.jl:67 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpth1oofc_.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpth1oofc_.jl:68\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: len not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpth1oofc_.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpth1oofc_.jl:68 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpth1oofc_.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpth1oofc_.jl:69\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpth1oofc_.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\
    \n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go\
    \ for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1\
    \ <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\
    \nfunction words_in_sentence(sentence::String)::String \n    new_list = []\n \
    \   for word in split(sentence)\n        if isprime(length(word))\n          \
    \  push!(new_list, word)\n        end\n    end\n    return join(new_list, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvj_btdo6.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvj_btdo6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvj_btdo6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvj_btdo6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpvj_btdo6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvj_btdo6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvj_btdo6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvj_btdo6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpvj_btdo6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpvj_btdo6.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvj_btdo6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvj_btdo6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpvj_btdo6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvj_btdo6.jl:31\n"
  exit_code: 1
  status: SyntaxError
