name: HumanEval_46_fib4
language: jl
prompt: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) ->\
  \ 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  \    Please write a function to efficiently compute the n-th element of the fib4\
  \ number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n\
  \    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
  \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
  \ == 386)\nend\n"
completions: ["    if n==0\n        return 0\n    elseif n==1\n        return 0\n\
    \    elseif n==2\n        return 2\n    elseif n==3\n        return 0\n    else\n\
    \        i = 4\n        v1 = 0\n        v2 = 0\n        v3 = 2\n        v4 = 0\n\
    \        f = 0\n        while i<=n\n            f = v1 + v2 + v3 + v4\n      \
    \      v1 = v2\n            v2 = v3\n            v3 = v4\n            v4 = f\n\
    \            i += 1\n        end\n        return f\n    end\nend\n        ", " \
    \   return fib4_fast(n)\nend", "    if n<0\n        error(\"fib4: can't compute\
    \ negative fib4 number\")\n    end\n    if n==0\n        return 0\n    end\n \
    \   if n==1\n        return 0\n    end\n    if n==2\n        return 2\n    end\n\
    \    if n==3\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n   \
    \ d = 0\n    for i=4:n\n        a,b,c,d = b,c,d,a+b+c+d\n    end\n    return d\n\
    end\n        ", "    if n == 0\n        return 0\n    elseif n == 1\n        return\
    \ 0\n    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n\
    \    else\n        a, b, c, d = 0, 0, 2, 0\n        for i in 4:n\n           \
    \ a, b, c, d = b, c, d, a + b + c + d\n        end\n        return d\n    end\n\
    end", "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        var = Array{Int64}(undef, 4)\n        var[1] = 0\n        var[2]\
    \ = 0\n        var[3] = 2\n        var[4] = 0\n        for i = 4:n\n         \
    \   var[1] = var[2]\n            var[2] = var[3]\n            var[3] = var[4]\n\
    \            var[4] = var[1] + var[2] + var[3] + var[4]\n        end\n       \
    \ return var[4]\n    end\nend", "    if n < 4\n        return n \n    end\n  \
    \  a, b, c, d = 0, 0, 2, 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a\
    \ + b + c + d\n    end\n    return d\nend", "    if n==0\n        return 0\n \
    \   elseif n==1\n        return 0\n    elseif n==2\n        return 2\n    elseif\
    \ n==3\n        return 0\n    else\n        n1=0\n        n2=0\n        n3=2\n\
    \        n4=0\n        curr=0\n        for i=4:n\n            curr=n1+n2+n3+n4\n\
    \            n1=n2\n            n2=n3\n            n3=n4\n            n4=curr\n\
    \        end\n        return curr\n    end\nend", "    if n < 4 \n        return\
    \ 2^(n-1)\n    end \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n \n        a, b, c, d = b, c, d, a + b + c + d\n    end \n    return d\n\
    end ", "    if n < 4\n        return n - 1\n    end\n    xn = 0\n    xn1 = 0\n\
    \    xn2 = 2\n    xn3 = 0\n    for i in 4:n\n        xn4 = xn + xn1 + xn2 + xn3\n\
    \        xn = xn1\n        xn1 = xn2\n        xn2 = xn3\n        xn3 = xn4\n \
    \   end\n    return xn4\nend\nfib4(10)", "    if n < 2\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a, b, c, d = 0, 0, 2, 0\n        for i = 4:n\n            temp = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = temp\n        end\n        return d\n    end\nend", "    a = 0\n   \
    \ b = 0\n    c = 2\n    d = 0\n    for i = 4:n\n        d = a + b + c\n      \
    \  a = b\n        b = c\n        c = d\n    end\n    return d\nend", "    if n==0\n\
    \        return 0\n    elseif n==1\n        return 0\n    elseif n==2\n      \
    \  return 2\n    elseif n==3\n        return 0\n    else\n        a=0\n      \
    \  b=0\n        c=2\n        d=0\n        for i in 4:n\n            e=a+b+c+d\n\
    \            a=b\n            b=c\n            c=d\n            d=e\n        end\n\
    \        return e\n    end\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n\
    \    if n <= 3\n        return n-1\n    end\n    for i in 4:n\n        d = a +\
    \ b + c\n        a = b\n        b = c\n        c = d\n    end\n    return d\n\
    end", "    seq = [0, 0, 2, 0]\n    if n < 4\n        return seq[n]\n    end\n\
    \    (fib_n_minus_1, fib_n_minus_2, fib_n_minus_3, fib_n_minus_4) = (0, 0, 2,\
    \ 0)\n    for k = 4:n\n        new_fib = fib_n_minus_1 + fib_n_minus_2 + fib_n_minus_3\
    \ + fib_n_minus_4\n        (fib_n_minus_1, fib_n_minus_2, fib_n_minus_3, fib_n_minus_4)\
    \ = (fib_n_minus_2, fib_n_minus_3, fib_n_minus_4, new_fib)\n    end\n    return\
    \ fib_n_minus_4\nend", "  if n < 0 \n    throw(ArgumentError(\"negative numbers\
    \ not allowed\"))\n  end\n  if n < 4\n    return n\n  end\n  a, b, c, d = 0, 0,\
    \ 2, 0\n  for i in 4:n\n    a, b, c, d = b, c, d, a + b + c + d\n  end\n  return\
    \ d\nend", "    val = 0\n    i = 0\n    while i <= n\n        val = val + fib4(i)\n\
    \        i = i + 1\n    end\n    return val\nend", "    if n == 0\n        return\
    \ 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n        return 2\n\
    \    elseif n == 3\n        return 0\n    else \n        a = 0\n        b = 0\n\
    \        c = 2\n        d = 0\n        for i = 4:n\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        end\n        return d\n    end\nend", "    n1, n2, n3, n4 = 0,\
    \ 0, 2, 0\n    i = 4\n    while i <= n\n        n5 = n1 + n2 + n3 + n4\n     \
    \   n1, n2, n3, n4 = n2, n3, n4, n5\n        i += 1\n    end\n    return n1 +\
    \ n2 + n3 + n4\nend", "    if n == 0\n        return 0\n    elseif n == 1\n  \
    \      return 0\n    elseif n == 2\n        return 2\n    elseif n == 3\n    \
    \    return 0\n    else \n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    end\nend", "    a=0\n    b=0\n    c=2\n    d=0\n    for i in 1:n-3\n    \
    \    d=a+b+c\n        a=b\n        b=c\n        c=d\n    end\n    return c\nend",
  "    # YOUR CODE HERE\n    f0 = 0\n    f1 = 0\n    f2 = 2\n    f3 = 0\n    i = 4\n\
    \    if n == 0\n        return f0\n    elseif n == 1\n        return f1\n    elseif\
    \ n == 2\n        return f2\n    elseif n == 3\n        return f3\n    else\n\
    \        for i in 4:n\n            f4 = f3 + f2 + f1 + f0\n            f0 = f1\n\
    \            f1 = f2\n            f2 = f3\n            f3 = f4\n        end\n\
    \        return f4\n    end\nend", "    f1 = 0\n    f2 = 0\n    f3 = 2\n    f4\
    \ = 0\n    for i in 3:n\n        f4 = f1 + f2 + f3 + f4\n        f1 = f2\n   \
    \     f2 = f3\n        f3 = f4\n    end\n    return f4\nend", "    if n == 0 return\
    \ 0\n    elseif n == 1 return 0\n    elseif n == 2 return 2\n    elseif n == 3\
    \ return 0\n    else\n        f_n_1, f_n_2, f_n_3, f_n_4 = 2, 0, 0, 0\n      \
    \  for i in 4:n\n            f_n_1, f_n_2, f_n_3, f_n_4 = f_n_1 + f_n_2 + f_n_3\
    \ + f_n_4, f_n_1, f_n_2, f_n_3\n        end\n        return f_n_1\n    end\nend",
  "    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n    elseif\
    \ n == 2 \n        return 2\n    elseif n == 3 \n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            d = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n        end\n        return d\n    end\nend", "    if n ==\
    \ 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 2\n    elseif n == 3\n        return 0\n    else\n        dp =\
    \ zeros(Int64, n+1)\n        dp[1] = 0\n        dp[2] = 0\n        dp[3] = 2\n\
    \        dp[4] = 0\n        for i in 5:n+1\n            dp[i] = dp[i-1] + dp[i-2]\
    \ + dp[i-3] + dp[i-4]\n        end\n        return dp[n]\n    end\nend", "   \
    \ return fib4_dict[n]\nend\n# 2.  \n\"\"\"Create a function named `is_acceptable_password`\
    \ that returns `true` if the length of the string is greater than or \nequal to\
    \ `10` and it has at least one uppercase letter, at least one lowercase letter,\
    \ and at least one digit. \nOtherwise, it returns `false`.\n    >>> is_acceptable_password(\"\
    short\")\n    false\n    >>> is_acceptable_password(\"muchlonger\")\n    false\n\
    \    >>> is_acceptable_password(\"ashortpassword\")\n    false\n    >>> is_acceptable_password(\"\
    muchlonger5\")\n    true\n    >>> is_acceptable_password(\"shOrt5\")\n    true\n\
    \    >>> is_acceptable_password(\"mostcorrectpasswordever\")\n    true\n    \"\
    \"\"", "    if n == 0 return 0 end\n    if n == 1 return 0 end\n    if n == 2\
    \ return 2 end\n    if n == 3 return 0 end\n    seq = Array{Int64}(4)\n    seq[1]\
    \ = 0\n    seq[2] = 0\n    seq[3] = 2\n    seq[4] = 0\n    for i = 5:n\n     \
    \   append!(seq, seq[end] + seq[end-1] + seq[end-2] + seq[end-3])\n        shift!(seq)\n\
    \    end\n    return seq[end]\nend", "    # TODO\n    return -1\nend", "    if\
    \ n<=3\n        return 0\n    end\n    if n==4\n        return 2\n    end\n  \
    \  a,b,c,d = 0,0,0,2\n    for i in 5:n\n        e = a+b+c+d\n        a,b,c,d =\
    \ b,c,d,e\n    end\n    return d\nend", "    fibs = [0, 0, 2, 0]\n    for i =\
    \ 4:n\n        newfib = fibs[1] + fibs[2] + fibs[3] + fibs[4]\n        fibs =\
    \ fibs[2:end]\n        push!(fibs, newfib)\n    end\n    return fibs[4]\nend",
  "    if n <= 3\n        return 2 * n\n    end", "    # if n is too large then it\
    \ may overflow\n    # use the modulo operator to handle the overflow\n    if n\
    \ == 0 \n        return 0\n    elseif n == 1 \n        return 0\n    elseif n\
    \ == 2 \n        return 2\n    elseif n == 3 \n        return 0\n    else\n  \
    \      f4 = [0, 0, 2, 0] # memory for 4 previous values\n        for i = 4:n\n\
    \            f4[1], f4[2], f4[3], f4[4] = f4[2], f4[3], f4[4], mod(f4[1] + f4[2]\
    \ + f4[3] + f4[4], 1000000007)\n        end\n        return f4[4]\n    end\nend",
  "    n_minus_1, n_minus_2, n_minus_3, n_minus_4 = 1, 1, 1, 1\n    n_minus_1_temp,\
    \ n_minus_2_temp, n_minus_3_temp = 0, 0, 0\n    for i in 1:n\n        n_minus_1_temp\
    \ = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4\n        n_minus_2_temp = n_minus_1\n\
    \        n_minus_3_temp = n_minus_2\n        n_minus_4 = n_minus_3\n        n_minus_1\
    \ = n_minus_1_temp\n        n_minus_2 = n_minus_2_temp\n        n_minus_3 = n_minus_3_temp\n\
    \    end\n    return n_minus_1\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n\
    \ == 3\n        return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    end\nend", "    if (n == 0)\n        return 0\n    elseif (n\
    \ == 1)\n        return 0\n    elseif (n == 2)\n        return 2\n    elseif (n\
    \ == 3)\n        return 0\n    else\n        n1, n2, n3, n4 = 0, 0, 2, 0\n   \
    \     i = 4\n        while (i <= n)\n            n5 = n1 + n2 + n3 + n4\n    \
    \        n1, n2, n3, n4 = n2, n3, n4, n5\n            i += 1\n        end\n  \
    \      return n5\n    end\nend", "    if n==0\n        return 0\n    elseif n==1\n\
    \        return 0\n    elseif n==2\n        return 2\n    elseif n==3\n      \
    \  return 0\n    else\n        prev1 = 1\n        prev2 = 0\n        prev3 = 2\n\
    \        prev4 = 0\n        curr = 0\n        for i in 2:n-1\n            curr\
    \ = prev1 + prev2 + prev3 + prev4\n            prev4 = prev3\n            prev3\
    \ = prev2\n            prev2 = prev1\n            prev1 = curr\n        end\n\
    \        return curr\n    end\nend", "    if n < 4\n        return n-1\n    end\n\
    \    a = [0, 0, 2, 0]\n    for i = 4:n\n        a[4] = a[1] + a[2] + a[3] + a[4]\n\
    \        a[1] = a[2]\n        a[2] = a[3]\n        a[3] = a[4]\n    end\n    return\
    \ a[4]\nend", "    if n == 0 return 0 end\n    if n == 1 return 0 end\n    if\
    \ n == 2 return 2 end\n    if n == 3 return 0 end\n    sum = 0\n    fib4s = [0;\
    \ 0; 2; 0] #fib4s[0] = 0, fib4s[1] = 0, fib4s[2] = 2, fib4s[3] = 0\n    for i\
    \ in 4:n\n        sum = fib4s[1] + fib4s[2] + fib4s[3] + fib4s[4]\n        fib4s[1]\
    \ = fib4s[2]\n        fib4s[2] = fib4s[3]\n        fib4s[3] = fib4s[4]\n     \
    \   fib4s[4] = sum\n    end\n    return sum\nend", "    \nend", "    if n == 0\n\
    \        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n  \
    \      return 2\n    elseif n == 3\n        return 0\n    else\n        four_fib\
    \ = [0, 0, 2, 0]\n        for i = 4:n\n            four_fib[1] = four_fib[2]\n\
    \            four_fib[2] = four_fib[3]\n            four_fib[3] = four_fib[4]\n\
    \            four_fib[4] = four_fib[1] + four_fib[2] + four_fib[3]\n        end\n\
    \        return four_fib[4]\n    end\nend", "    if n == 0 || n == 1 || n == 3\n\
    \        return 0\n    elseif n == 2\n        return 2\n    else \n        a =\
    \ 0\n        b = 0\n        c = 0\n        d = 2\n        for i in 1:n-3\n   \
    \         n = a + b + c + d\n            a = b\n            b = c\n          \
    \  c = d\n            d = n\n        end\n        return n\n    end\nend", " \
    \   if n < 4\n        return [0, 0, 2, 0][n]\n    end\n    a, b, c, d = 0, 0,\
    \ 2, 0\n    for i in 4:n\n        e = a + b + c + d\n        a, b, c, d = b, c,\
    \ d, e\n    end\n    return d\nend", "    if n == 0 || n == 1 || n == 3\n    \
    \    return 0\n    elseif n == 2\n        return 2\n    else\n        a = 0\n\
    \        b = 0\n        c = 0\n        d = 2\n        for i = 4:n\n          \
    \  temp = a + b + c + d\n            a = b\n            b = c\n            c =\
    \ d\n            d = temp\n        end\n        return d\n    end\nend", "   \
    \ a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i = 3:n\n        a = b\n   \
    \     b = c\n        c = d\n        d = a + b + c\n    end\n    return d\nend",
  "    if n <= 3\n        return 0\n    end\n    if n == 4\n        return 2\n   \
    \ end\n    f = zeros(Int64, n+1)\n    f[1] = 0\n    f[2] = 0\n    f[3] = 2\n \
    \   f[4] = 0\n    for i in 5:n\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4]\n\
    \    end\n    return f[n]\nend", "    nums = [0, 0, 2, 0]\n    if n <= 3\n   \
    \     return nums[n]\n    end\n    for i in 4:n\n        new = nums[1] + nums[2]\
    \ + nums[3] + nums[4]\n        nums[1] = nums[2]\n        nums[2] = nums[3]\n\
    \        nums[3] = nums[4]\n        nums[4] = new\n    end\n    return nums[4]\n\
    end", "    \n    # Initialize starting values\n    n_m1 = 0\n    n_m2 = 0\n  \
    \  n_m3 = 2\n    n_m4 = 0\n    \n    # Initialize counter\n    counter = 3\n \
    \   \n    # Create recursive function\n    function fib_inner(n::Int64)::Int64\n\
    \        \n        # Base case\n        if n < 3\n            return n_m3\n  \
    \      \n        # Recursive cases\n        else\n            nonlocal n_m1, n_m2,\
    \ n_m3, n_m4, counter\n            n_m4 = n_m3\n            n_m3 = n_m2\n    \
    \        n_m2 = n_m1\n            n_m1 = n_m4 + n_m3 + n_m2 + n_m1\n         \
    \   counter += 1\n            return fib_inner(n)\n        end\n    end\n    \n\
    \    # Check input\n    if n < 0\n        error(\"Input must be positive\")\n\
    \    end\n    \n    # Call recursive function\n    return fib_inner(n)\nend",
  "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n  \
    \      arr = [0, 0, 2, 0]\n        for i in 4:n\n            push!(arr, arr[end-1]\
    \ + arr[end-2] + arr[end-3] + arr[end-4])\n        end\n        return arr[end]\n\
    \    end\nend", "    a, b, c, d = 0, 0, 2, 0\n    if n == 0\n        return a\n\
    \    elseif n == 1\n        return b\n    elseif n == 2\n        return c\n  \
    \  elseif n == 3\n        return d\n    else\n        for i in 4:n\n         \
    \   a, b, c, d = b, c, d, a + b + c + d\n        end\n        return d\n    end\n\
    end", "    if n < 0 \n        error(\"Argument to fib4 must be positive\")\n \
    \   end\n    a, b, c, d = 0, 0, 2, 0\n    n -= 3\n    while n > 0\n        a,\
    \ b, c, d = b, c, d, (a + b + c + d)\n        n -= 1\n    end\n    return d\n\
    end", "    if n <= 2\n        return 2 * n\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 4\n    b = 8\n    c = 14\n    d = 0\n    for i in 5:n\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n\
    \    return d\nend", "    if n <= 2\n        return 2n - n\n    end\n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    for i in 3:n\n        d = a + b + c\n  \
    \      a = b\n        b = c\n        c = d\n    end\n    return d\nend", "   \
    \ res = 0\n    if n >= 0\n        prev1 = 0\n        prev2 = 0\n        prev3\
    \ = 0\n        prev4 = 0\n        for i in 1:n\n            if i == 1\n      \
    \          res = 0\n            elseif i == 2\n                res = 2\n     \
    \       elseif i == 3\n                res = 0\n            else\n           \
    \     res = prev1 + prev2 + prev3 + prev4\n            end\n            prev4\
    \ = prev3\n            prev3 = prev2\n            prev2 = prev1\n            prev1\
    \ = res\n        end\n    end\n    return res\nend", "    a1 = 0\n    a2 = 0\n\
    \    a3 = 2\n    a4 = 0\n    fib4 = 0\n    for i in range(4,n+1)\n        fib4\
    \ = a1 + a2 + a3 + a4\n        a1 = a2\n        a2 = a3\n        a3 = a4\n   \
    \     a4 = fib4\n    end\n    return fib4\nend", "    #TODO\nend\n \n ", "   \
    \ f0 = 0\n    f1 = 0\n    f2 = 2\n    f3 = 0\n    f4 = 0\n    for i in 4:n\n \
    \       f4 = f3 + f2 + f1 + f0\n        f0 = f1\n        f1 = f2\n        f2 =\
    \ f3\n        f3 = f4\n    end\n    return f4\nend", "    f4 = zeros(Int64,4)\n\
    \    f4[1]=1\n    if n<=3\n        return f4[n]\n    end\n    for i in 4:n\n \
    \       f4[i%4] = f4[(i-1)%4] + f4[(i-2)%4] + f4[(i-3)%4] + f4[(i-4)%4]\n    end\n\
    \    return f4[n%4]\nend", "    if n < 0\n        throw(ArgumentError(\"Argument\
    \ must be non-negative\"))\n    end\n    r1, r2, r3, r4 = 0, 0, 2, 0\n    for\
    \ i = 4:n\n        r4 = r3 + r2 + r1 + r4\n        r1 = r2\n        r2 = r3\n\
    \        r3 = r4\n    end\n    return r4\nend\nfib4(10)", "    #define the matrix\n\
    \    m = [0 1 0 0 ; 1 0 0 0 ; 0 0 0 1 ; 1 0 1 0]\n    b = [0 ; 0 ; 0 ; 1]\n  \
    \  #calculate the fib sequence\n    fib = expm(m, n-1)*b\n    #return the first\
    \ element\n    return fib[1]\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n\
    \ == 3\n        return 0\n    else \n        a = 0\n        b = 0\n        c =\
    \ 2\n        d = 0\n        i = 4\n        while i <= n\n            ans = a +\
    \ b + c + d\n            a = b\n            b = c\n            c = d\n       \
    \     d = ans\n            i += 1\n        end\n        return ans\n    end\n\
    end", "    if n == 0 \n        return 0\n    elseif n == 1\n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for\
    \ i = 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n    \
    \    return d\n    end\nend", "    \n    if n == 0\n        return 0\n    end\n\
    \    \n    if n == 1\n        return 0\n    end\n    \n    if n == 2\n       \
    \ return 2\n    end\n    \n    if n == 3\n        return 0\n    end\n    \n  \
    \  a = 0\n    b = 0\n    c = 2\n    d = 0\n    \n    for i in 4:n\n        temp\
    \ = a\n        a = b\n        b = c\n        c = d\n        d = a + b + c + temp\n\
    \    end\n    \n    return d\nend", "    # Put your code here!\n    nums = [0,\
    \ 0, 2, 0]\n    for i in 4:n\n        nums[1:4] = nums\n        nums[1] = sum(nums)\n\
    \    end\n    return nums[1]\nend\nprintln(fib4(5))\nprintln(fib4(6))\nprintln(fib4(7))",
  "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n  \
    \      four = 0\n        three = 0\n        two = 2\n        one = 0\n       \
    \ for i in 4:n \n            result = four + three + two + one\n            four\
    \ = three\n            three = two\n            two = one\n            one = result\n\
    \        end\n        return result\n    end\nend", "    a = zeros(Int64, (n+1,))\n\
    \    a[1] = 0\n    a[2] = 0\n    a[3] = 2\n    a[4] = 0\n    for i = 5:n+1\n \
    \       a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4]\n    end\n    return a[n+1]\n\
    end", "    #your code here\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n\
    \ == 3\n        return 0\n    else\n        a, b, c, d = 0, 0, 2, 0 \n       \
    \ for i = 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n\
    \        return d\n    end\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n\
    \ == 3\n        return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    end\nend", "    (f, f1, f2, f3, f4) = (0, 0, 2, 0, 0)\n   \
    \ for i in 1:n\n        (f, f1, f2, f3, f4) = (f1, f2, f3, f4, f + f1 + f2 + f3)\n\
    \    end\n    return f\nend", "    if n < 0\n        return 0\n    end\n    #\
    \ Initialize all values to 0, except the 1st two that are 2, 1\n    a, b, c, d\
    \ = 2, 1, 0, 0\n    for i in 4:n\n        a, b, c, d = b + c + d, a, b, c\n  \
    \  end\n    return a\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n    if\
    \ n < 2\n        return a\n    elseif n == 2\n        return c\n    else\n   \
    \     for i = 2:n-1\n            d = b + c + a\n            a = b\n          \
    \  b = c\n            c = d\n        end\n        return d\n    end\nend", " \
    \   a, b, c, d = 0, 0, 2, 0\n    n = n-1\n    while n > 0\n        a, b, c, d\
    \ = b, c, d, a+b+c+d\n        n = n-1\n    end\n    return d\nend", "    f = [0,\
    \ 0, 2, 0]\n    if n == 0\n        return f[1]\n    elseif n == 1\n        return\
    \ f[2]\n    elseif n == 2\n        return f[3]\n    elseif n == 3\n        return\
    \ f[4]\n    else\n        for i in 4:n\n            new_f = f[1] + f[2] + f[3]\
    \ + f[4]\n            f[1] = f[2]\n            f[2] = f[3]\n            f[3] =\
    \ f[4]\n            f[4] = new_f\n        end\n        return f[4]\n    end\n\
    end", "    x1 = 0\n    x2 = 0\n    x3 = 2\n    x4 = 0\n    x5 = 0\n    if n ==\
    \ 0\n        return x1\n    elseif n == 1\n        return x2\n    elseif n ==\
    \ 2\n        return x3\n    elseif n == 3\n        return x4\n    else\n     \
    \   for i = 4:n\n            x5 = x1 + x2 + x3 + x4\n            x1 = x2\n   \
    \         x2 = x3\n            x3 = x4\n            x4 = x5\n        end\n   \
    \     return x5\n    end\nend", "    if n == 0\n        return 0\n    elseif n\
    \ == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n ==\
    \ 3\n        return 0\n    else\n        a, b, c, d = 2, 0, 0, 0\n        for\
    \ i in 4:n\n            d = a + b + c\n            a, b, c = d, a, b\n       \
    \ end\n        return d\n    end\nend\n \n \n\"\"\"In the game of chess, a bishop\
    \ is a piece that can only move diagonally, i.e. only moves of the form (i+j,\
    \ j), where i and j are integers and i!=0.", "    if n == 0\n        return 0\n\
    \    elseif n == 1\n        return 0\n    elseif n == 2\n        return 2\n  \
    \  elseif n == 3\n        return 0\n    else\n        t1 = 0\n        t2 = 0\n\
    \        t3 = 2\n        t4 = 0\n        for i in 4:n\n            t5 = t1 + t2\
    \ + t3 + t4\n            t1 = t2\n            t2 = t3\n            t3 = t4\n \
    \           t4 = t5\n        end\n        return t5\n    end\nend\n    \n    \n\
    \    \n    ", "    f1 = 0\n    f2 = 0\n    f3 = 2\n    f4 = 0\n    for i in 1:n\n\
    \        f4 = f1 + f2 + f3\n        f1 = f2\n        f2 = f3\n        f3 = f4\n\
    \    end\n    return f4\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n \
    \   for i = 4:n\n        temp = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = temp\n    end\n    return a + b + c + d\nend", " \
    \   @assert n > 0 \"n must be positive\"\n    F = zeros(Int64,n)\n    F[1]=0\n\
    \    F[2]=0\n    F[3]=2\n    F[4]=0\n    for i in 5:n\n        F[i] = F[i-1] +\
    \ F[i-2] + F[i-3] + F[i-4]\n    end\n    return F[n]\nend", "    \n    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    \n    for i in 1:n-3\n        a, b, c, d\
    \ = b, c, d, a + b + c + d\n    end\n    \n    return d\nend", "    if n == 0\
    \ || n == 1 || n == 3 \n        return 0\n    elseif n == 2\n        return 2\n\
    \    else\n        prev, prev2, prev3, prev4 = 0, 0, 0, 2 \n        for i in range(n-3)\n\
    \            temp = prev\n            prev = prev + prev2 + prev3 + prev4\n  \
    \          prev4 = prev3\n            prev3 = prev2\n            prev2 = temp\n\
    \        end\n        return prev\n    end\nend", "    \"Compute the n-th element\
    \ of the fib4 number sequence.\"\n    if n <= 0\n        return 0\n    end\n \
    \   if n <= 3\n        return n\n    end\n    prev4 = Int64[]\n    for i in 0:3\n\
    \        push!(prev4, i)\n    end\n    for i in 4:n\n        next = sum(prev4)\n\
    \        push!(prev4, next)\n        shift!(prev4)\n    end\n    return prev4[end]\n\
    end", "    a, b, c, d = 0, 0, 2, 0\n    for _ in 1:n\n        a, b, c, d = b,\
    \ c, d, b + c + d\n    end\n    return a\nend\n@test fib4(5) == 4\n@test fib4(6)\
    \ == 8\n@test fib4(7) == 14", "    a::Int64 = 0;\n    b::Int64 = 0;\n    c::Int64\
    \ = 2;\n    d::Int64 = 0;\n    for i = 3:n\n        temp = c + a;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = temp;\n    end\n    return d;\n\
    end", "    if n == 0 return 0 end\n    if n == 1 return 0 end\n    if n == 2 return\
    \ 2 end\n    if n == 3 return 0 end\n    a = 0\n    b = 0\n    c = 2\n    d =\
    \ 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n\
    \    return d\nend", "    # f1 = 0, f2 = 0, f3 = 2, f4 = 0\n    f1, f2, f3, f4\
    \ = 0, 0, 2, 0\n    if n < 1\n        return 0\n    end\n    for i = 1:n-1\n \
    \       next_fib = f1 + f2 + f3 + f4\n        f1, f2, f3, f4 = f2, f3, f4, next_fib\n\
    \    end\n    return f4\nend", "    n4 = 0\n    n3 = 0\n    n2 = 2\n    n1 = 0\n\
    \    n0 = 0\n    if n == 0\n        return n0\n    elseif n == 1\n        return\
    \ n1\n    elseif n == 2\n        return n2\n    elseif n == 3\n        return\
    \ n3\n    else\n        for i = 4:n\n            n0 = n1 + n2 + n3 + n4\n    \
    \        n4 = n3\n            n3 = n2\n            n2 = n1\n            n1 = n0\n\
    \        end\n        return n0\n    end\nend\n@test fib4(0) == 0\n@test fib4(1)\
    \ == 0\n@test fib4(2) == 2\n@test fib4(3) == 0\n@test fib4(4) == 2\n@test fib4(5)\
    \ == 4\n@test fib4(6) == 8\n@test fib4(7) == 14\n@test fib4(8) == 24\n@test fib4(9)\
    \ == 44\n@test fib4(10) == 82\n@test fib4(25) == 111054\n@test fib4(75) == 224123890\n\
    @test fib4(100) == 7126380512\n@test fib4(500) == 2320990206943511876687\n@test\
    \ fib4(1000) == 5771840076625876720077609898989891125878735819444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444",
  "    if (n==0)\n        return 0\n    elseif (n==1)\n        return 0\n    elseif\
    \ (n==2)\n        return 2\n    elseif (n==3)\n        return 0\n    else\n  \
    \      a = 0\n        b = 0\n        c = 2\n        d = 0\n        i = 4\n   \
    \     while (i<=n)\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n            i = i + 1\n   \
    \     end\n        return d\n    end\nend", "    if n <= 1 \n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        a, b, c, d = 0, 0, 2, 0\n        for i in 4:n\n            a,\
    \ b, c, d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend",
  "    \n    if n < 0\n        error(\"`n` should be non-negative\")\n    end", " \
    \   @assert n \u2265 0\n    n0, n1, n2, n3, n4 = 0, 0, 2, 0, 0\n    for i in 4:n\n\
    \        n4 = n0 + n1 + n2 + n3\n        n0, n1, n2, n3 = n1, n2, n3, n4\n   \
    \ end\n    return n4\nend", "    s=0\n    s1=0\n    s2=2\n    s3=0\n    if n ==\
    \ 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 2\n    elseif n == 3\n        return 0\n    else\n        for\
    \ i=4:n\n            s=s1+s2+s3\n            s1=s2\n            s2=s3\n      \
    \      s3=s\n        end\n        return s\n    end\nend\nfib4(40)", "    if n\
    \ == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n ==\
    \ 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n       \
    \ a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n  \
    \          temp = a + b + c + d\n            a = b\n            b = c\n      \
    \      c = d\n            d = temp\n        end\n        return d\n    end\nend",
  "    a, b, c, d = 0, 0, 2, 0\n    i = 0\n    while i < n\n        a, b, c, d = b,\
    \ c, d, (a + b + c + d)\n        i += 1\n    end\n    return d\nend", "    if\
    \ n==0 || n==1 || n==3\n        return 0\n    elseif n==2\n        return 2\n\
    \    else\n        a,b,c,d=0,0,2,0\n        for i=1:n-4\n            a,b,c,d=b,c,d,a+b+c+d\n\
    \        end\n        return d\n    end\nend", "    \"\"\"\n    Efficiently compute\
    \ the n-th element of the fib4 number sequence.\n    \"\"\"\n    if n < 0\n  \
    \      println(\"Error: negative input\")\n        return -1\n    end\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    # n >= 4\n    fib0 = 0\n    fib1 = 0\n    fib2 = 2\n    fib3 = 0\n\
    \    for i = 4:n\n        fib4 = fib0 + fib1 + fib2 + fib3\n        fib0 = fib1\n\
    \        fib1 = fib2\n        fib2 = fib3\n        fib3 = fib4\n    end\n    return\
    \ fib4\nend", "    # Assuming we're using a for loop, it's O(n)\n    if n == 0\
    \ \n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 2\n    elseif n == 3\n        return 0\n    else\n        # Similar\
    \ to fibbonacci.jl, we'll use an array to store the values\n        fibs = zeros(Int64,\
    \ n+1)\n        fibs[1] = 0\n        fibs[2] = 0\n        fibs[3] = 2\n      \
    \  fibs[4] = 0\n        for i in 4:n\n            fibs[i+1] = fibs[i] + fibs[i-1]\
    \ + fibs[i-2] + fibs[i-3]\n        end\n        return fibs[n+1]\n    end\nend",
  "    if n < 0\n        print(\"Invalid input\")\n        return -1\n    elseif n\
    \ == 0 || n == 1 || n == 3\n        return 0\n    elseif n == 2\n        return\
    \ 2\n    else\n        previous = [0, 0, 2, 0]\n        for i = 4:n\n        \
    \    current = previous[1] + previous[2] + previous[3] + previous[4]\n       \
    \     previous[1] = previous[2]\n            previous[2] = previous[3]\n     \
    \       previous[3] = previous[4]\n            previous[4] = current\n       \
    \ end\n        return current\n    end\nend", "  f_arr = [0, 0, 2, 0]\n  if n\
    \ < 4\n    return f_arr[n+1]\n  end\n  while n > 3\n    f_arr = [f_arr[2], f_arr[3],\
    \ f_arr[4], sum(f_arr)]\n    n -= 1\n  end\n  return f_arr[4]\nend", "    m =\
    \ Dict()\n    if n < 2\n        return 0\n    elseif n < 3\n        return 2\n\
    \    elseif n < 4\n        return 0\n    elseif n < 5\n        return 4\n    elseif\
    \ haskey(m, n)\n        return get(m, n, 0)\n    else\n        val = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        m[n] = val\n        return val\n\
    \    end\nend", "    if n == 0 \n        return 0\n    elseif n == 1 \n      \
    \  return 0\n    elseif n == 2 \n        return 2\n    elseif n == 3 \n      \
    \  return 0\n    else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    end\nend", "    # matrix exponentiation to find the n-th element of the fib4\
    \ sequence\n    # fib4(n) = A^n * v, where A is the matrix\n    #     [1, 1, 1,\
    \ 1]\n    # A = [1, 0, 0, 0]\n    #     [0, 1, 0, 0]\n    #     [0, 0, 1, 0]\n\
    \    # and v is the column vector\n    #     [0]\n    # v = [0]\n    #     [2]\n\
    \    #     [0]\n    A = [1 1 1 1; 1 0 0 0; 0 1 0 0; 0 0 1 0]\n    v = [0; 0; 2;\
    \ 0]\n    # use quick_pow_mod to find the n-th power of A\n    An = quick_pow_mod(A,\
    \ n)\n    # find fib4(n) by using a matrix-vector multiplication\n    An * v\n\
    end", "    #Base cases\n    if n == 0 \n        return 0\n    elseif n == 1 \n\
    \        return 0\n    elseif n == 2 \n        return 2\n    elseif n == 3 \n\
    \        return 0\n    end\n    \n    #Iterative case\n    fn_m4 = 0 #f(n-4)\n\
    \    fn_m3 = 0 #f(n-3)\n    fn_m2 = 2 #f(n-2)\n    fn_m1 = 0 #f(n-1)\n    fn =\
    \ 0\n    for i in 3:n-1\n        fn = fn_m1 + fn_m2 + fn_m3 + fn_m4\n        fn_m4\
    \ = fn_m3\n        fn_m3 = fn_m2\n        fn_m2 = fn_m1\n        fn_m1 = fn\n\
    \    end\n    return fn\nend", "    if n == 0 || n == 1 || n == 3\n        return\
    \ 0\n    elseif n == 2\n        return 2\n    else\n        a, b, c, d = 0, 0,\
    \ 0, 2\n        for i in 4:n\n            a, b, c, d = b, c, d, d + a + b + c\n\
    \        end\n        return d\n    end\nend", "    seq = [0, 0, 2, 0]\n    if\
    \ n < 4\n        return seq[n]\n    end\n    a, b, c, d = 0, 0, 2, 0\n    for\
    \ i in 4:n\n        a, b, c, d = b, c, d, (a + b + c + d)\n    end\n    return\
    \ a + b + c + d\nend\n#print(fib4(7))", "    #Write your code here\n    return\
    \ 0\nend\n \n\"\"\"Write a function that takes a string and returns the number\
    \ of vowels (excluding \"y\") in the string.  \n   This function should be case\
    \ insensitive.\n   >>> count_vowels(\"banana\")\n   3\n   >>> count_vowels(\"\
    Apples and Pears\")\n   8\n   >>> count_vowels(\"Pizza!\")\n   2\n   \"\"\"",
  "    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n\n        d = a + b\
    \ + c\n        a = b\n        b = c\n        c = d\n    end\n    return d\nend",
  "    f4_1 = 0\n    f4_2 = 0\n    f4_3 = 2\n    f4_4 = 0\n    f4_n = 0\n    for i\
    \ = 4:n\n        f4_n = f4_1 + f4_2 + f4_3 + f4_4\n        f4_1 = f4_2\n     \
    \   f4_2 = f4_3\n        f4_3 = f4_4\n        f4_4 = f4_n\n    end\n    return\
    \ f4_n\nend", "    n == 0 && return 0\n    n == 1 && return 0\n    n == 2 && return\
    \ 2\n    n == 3 && return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i = 4:n \n \
    \       temp = a+b+c+d\n        a = b\n        b = c\n        c = d\n        d\
    \ = temp\n    end\n    return d\nend", "    l = zeros(Int64, n)\n    l[1] = 0\n\
    \    l[2] = 2\n    l[3] = 0\n    for i in 4:n\n        l[i] = l[i-1] + l[i-2]\
    \ + l[i-3] + l[i-4]\n    end\n    return l[n]\nend", "    if n == 0\n        return\
    \ 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n        return 2\n\
    \    elseif n == 3\n        return 0\n    else\n        arr = [0, 0, 2, 0]\n \
    \       for i = 3:n-1\n            a = arr[4]\n            b = arr[3]\n      \
    \      c = arr[2]\n            d = arr[1]\n            arr[4] = d + c + b + a\n\
    \            arr[3] = d + c + b\n            arr[2] = d + c\n            arr[1]\
    \ = d\n        end\n        return arr[4]\n    end\nend", "    if n==0\n     \
    \   return 0\n    elseif n<=2\n        return 2^(n-1)\n    else\n        x=0\n\
    \        y=2\n        z=0\n        w=0\n        for i in 3:n\n            x,y,z,w=y,z,w,x+y+z+w\n\
    \        end\n        return x+y+z+w\n    end\nend", "    a = [0, 0, 2, 0]\n \
    \   if n < 4\n        return a[n]\n    end\n    for i in 4:n\n        a.append(a[i-1]\
    \ + a[i-2] + a[i-3] + a[i-4])\n    end\n    return a[n]\nend", "    \n    if n\
    \ == 0\n        return 0\n    end\n    \n    a = 0\n    b = 0\n    c = 2\n   \
    \ d = 0\n    \n    for i in 1:n-3\n        temp = a + b + c + d\n        a = b\n\
    \        b = c\n        c = d\n        d = temp\n    end\n    \n    return a +\
    \ b + c + d\nend", "    if n < 4 \n        return [0, 0, 2, 0][n]\n    prevs =\
    \ [0, 0, 2, 0]\n    for i in 4:n\n        prevs[i % 4] = sum(prevs)\n    end\n\
    \    return prevs[n % 4]\nend", "    prev_elems = [0, 0, 2, 0]\n    next_elem\
    \ = 0\n    for i = 5:n\n        next_elem = sum(prev_elems)\n        prev_elems\
    \ = [prev_elems[2], prev_elems[3], prev_elems[4], next_elem]\n    end\n    return\
    \ next_elem\nend", " \n \n    fib4prev2 = 0\n    fib4prev3 = 0\n    fib4prev4\
    \ = 0\n    fib4prev1 = 2\n \n \n    if (n==1):\n      return fib4prev1\n    end\n\
    \ \n \n    for i = 2:n-1\n      fib4curr = fib4prev1 + fib4prev2 + fib4prev3 +\
    \ fib4prev4\n      fib4prev4 = fib4prev3\n      fib4prev3 = fib4prev2\n      fib4prev2\
    \ = fib4prev1\n      fib4prev1 = fib4curr\n    end\n \n \n    return fib4curr\n\
    end\n \n \n \n \n \n@testset \"function fib4 function\" begin\n    @test fib4(5)\
    \ == 4\n    @test fib4(6) == 8\n    @test fib4(7) == 14\n    @test fib4(8) ==\
    \ 26\n    @test fib4(10) == 52\n    @test fib4(20) == 3192\n    @test fib4(30)\
    \ == 203946\n    @test fib4(40) == 59924575\nend\n \n \n \n ", "    \n    if n\
    \ == 0 \n        return 0\n    elseif n == 1\n        return 0\n    elseif n ==\
    \ 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n       \
    \ a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in 1:n-3\n\
    \            temp = d\n            d = a + b + c + d\n            a = b\n    \
    \        b = c\n            c = temp\n        end\n        return d\n    end\n\
    end", "    prev_prev_prev = 0\n    prev_prev = 0\n    prev = 2\n    curr = 0\n\
    \    for i in range(4, n + 1)\n        curr = prev_prev_prev + prev_prev + prev\n\
    \        prev_prev_prev = prev_prev\n        prev_prev = prev\n        prev =\
    \ curr\n    end\n    return curr\nend\n# Problem 5\n\"\"\"Buddy pairs\n    A buddy\
    \ pair is a pair of numbers whose sum is exactly one more than their product.\
    \ For example, 48 & 75 is a buddy pair, because 48 + 75 = 123, and 48 \xD7 75\
    \ = 3600.  Please write a function buddy(start, limit) that returns the first\
    \ buddy pair with the smallest start member that is greater than or equal to start\
    \ and is smaller than limit. If there is no buddy pair for that range, then return\
    \ Nothing.\n    >>> buddy(10, 50)\n    (48, 75)\n    >>> buddy(48, 50)\n    Nothing\n\
    \    \"\"\"", "    if n < 4\n        return n-1\n    end\n    a, b, c, d = 0,\
    \ 0, 2, 0\n    for _ in range(4, n+1)\n        temp = a + b + c + d\n        a,\
    \ b, c, d = b, c, d, temp\n    end\n    return a + b + c + d\nend", "    a = zeros(Int64,\
    \ n)\n    a[1] = 0\n    a[2] = 2\n    for i in 1:n-3\n        a[i+3] = a[i+2]\
    \ + a[i+1] + a[i]\n    end\n    return a[n]\nend", "    a, b, c, d = 0, 0, 2,\
    \ 0\n    for i in 1:n-3\n        a, b, c, d = b, c, d, a+b+c+d\n    end\n    d\n\
    end", "    a = zeros(Int64,n+1)\n    a[1] = 0\n    a[2] = 0\n    a[3] = 2\n  \
    \  a[4] = 0\n    for i in 5:n+1\n        a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4]\n\
    \    end\n    return a[n+1]\nend", "    A = zeros(Int64, n+1)\n    A[1:4] = [0,\
    \ 0, 2, 0]\n    for i in 5:n+1\n        A[i] = A[i-1] + A[i-2] + A[i-3] + A[i-4]\n\
    \    end\n    return A[n+1]\nend", "    \n    a, b, c, d = 0, 0, 2, 0\n    \n\
    \    for i = 4:n\n        a, b, c, d = b, c, d, (a + b + c + d)\n    end\n   \
    \ \n    return d\nend", "    sequence = zeros(Int64, n+1)\n    sequence[1] = 0\n\
    \    sequence[2] = 0\n    sequence[3] = 2\n    sequence[4] = 0\n    for i in 5:n+1\n\
    \        sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i-3] + sequence[i-4]\n\
    \    end\n    return sequence[n+1]\nend\nfib4(5)\nfib4(6)\nfib4(7)", "    fib4_array\
    \ = zeros(Int64, n+1)\n    fib4_array[1] = 0\n    fib4_array[2] = 0\n    fib4_array[3]\
    \ = 2\n    fib4_array[4] = 0\n    for i in 5:n+1\n        fib4_array[i] = fib4_array[i-1]\
    \ + fib4_array[i-2] + fib4_array[i-3] + fib4_array[i-4]\n    end\n    return fib4_array[n+1]\n\
    end", "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        count\
    \ = n - 3\n        while count > 0\n            temp = c + d\n            a =\
    \ b\n            b = c\n            c = d\n            d = temp\n            count\
    \ -= 1\n        end\n        return a + b + c + d\n    end\nend", "    if n<=2\
    \ \n        return 2*n - 2\n    end\n    f1 = 0\n    f2 = 0\n    f3 = 2\n    f4\
    \ = 0\n    for i=4:n\n        f4 = f1 + f2 + f3 + f4\n        f1 = f2\n      \
    \  f2 = f3\n        f3 = f4\n    end\n    return f4\nend", "    if n == 0\n  \
    \      return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n    \
    \    return 2\n    elseif n == 3\n        return 0\n    else\n        a, b, c,\
    \ d = 0, 0, 2, 0\n        for i in 4:n\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        end\n        return d\n    end\nend", "    assert(n >= 0,\
    \ \"n must be greater than or equal to 0\")\n    if n <= 1\n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\n\
    end", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 2:n\n        a,\
    \ b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend", "    a = 0\n\
    \    b = 0\n    c = 2\n    d = 0\n    if n == 0\n        a\n    elseif n == 1\n\
    \        b\n    elseif n == 2\n        c\n    elseif n == 3\n        d\n    else\n\
    \        for i in 4:n\n            e = a + b + c + d\n            a = b\n    \
    \        b = c\n            c = d\n            d = e\n        end\n        d\n\
    \    end\nend", "    a=0\n    b=0\n    c=2\n    d=0\n    e=0\n    for i=1:n-3\n\
    \        e=a+b+c+d\n        a=b\n        b=c\n        c=d\n        d=e\n    end\n\
    \    return e\nend", "    a, b, c, d = 0, 0, 2, 0\n    for i in 2:n-1\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend", "    N =\
    \ n - 2\n    if N < 2\n        return 2N\n    end\n    fib_nums = zeros(N)\n \
    \   fib_nums[1:2] = 2\n    for k in 3:N\n        fib_nums[k] = sum(fib_nums[k-4:k-1])\n\
    \    end\n    return fib_nums[end]\nend\n\"\"\"\nQ2.2 --- Justification: \n  \
    \  Using the iterative method is more efficient than recursion because it computes\
    \ the values \n    of the lower numbers in the sequence only once, and then reuses\
    \ these values in all the subsequent computations. \n    Thus, the recursion has\
    \ to recompute all the lower numbers every time it calls fib4(n-1), fib4(n-2),\
    \ etc.\n    The iterative method only has to compute the lower numbers once, and\
    \ then reuses them when it computes the higher numbers.\n\"\"\"", "    if n <\
    \ 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n \
    \   for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend", "    (a, b, c, d) = (0, 0, 2, 0)\n    for i = 3:n\n        (a, b, c,\
    \ d) = (b, c, d, a + b + c + d)\n    end\n    return d\nend", "    if n < 3 \n\
    \        return n\n    end\n    f = zeros(Int64, n+1)\n    f[1] = 0\n    f[2]\
    \ = 0\n    f[3] = 2\n    f[4] = 0\n    for i in range(5, n+1)\n        f[i] =\
    \ f[i-1] + f[i-2] + f[i-3] + f[i-4]\n    end\n    return f[n]\nend", "    if n\
    \ <= 3\n        return n - 1\n    end\n    a = 0\n    b = 0\n    c = 2\n    d\
    \ = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b = c\n\
    \        c = d\n    end\n    return d\nend", "    a, b, c, d = 0, 0, 2, 0\n  \
    \  for i in range(1, n+1)\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n\
    \    return a\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 1:n\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n  \
    \  end\n    return d\nend", "    f0::Int64 = 0\n    f1::Int64 = 0\n    f2::Int64\
    \ = 2\n    f3::Int64 = 0\n    if (n == 0)\n        return f0\n    elseif (n ==\
    \ 1)\n        return f1\n    elseif (n == 2)\n        return f2\n    elseif (n\
    \ == 3)\n        return f3\n    else\n        for i in 4:n\n            f4 = f0\
    \ + f1 + f2 + f3\n            f0 = f1\n            f1 = f2\n            f2 = f3\n\
    \            f3 = f4\n        end\n        return f4\n    end\nend\nfib4(5)\n\
    fib4(6)\nfib4(7)", "    \n    # Initialize arrays to store values\n    fib4_vec\
    \ = Array{Int64}(undef, n+1)\n    fib4_vec[1] = 0\n    fib4_vec[2] = 0\n    fib4_vec[3]\
    \ = 2\n    fib4_vec[4] = 0\n    \n    # Iteratively compute fib4\n    for i =\
    \ 5:n+1\n        fib4_vec[i] = fib4_vec[i-1] + fib4_vec[i-2] + fib4_vec[i-3] +\
    \ fib4_vec[i-4]\n    end\n    \n    return fib4_vec[n+1]\n    \nend", "    a =\
    \ [0, 0, 2, 0]\n    if n == 0 || n == 1 || n == 2 || n == 3\n        return a[n]\n\
    \    end\n    for i in 4:n\n        temp = a[1] + a[2] + a[3] + a[4]\n       \
    \ a[1] = a[2]\n        a[2] = a[3]\n        a[3] = a[4]\n        a[4] = temp\n\
    \    end\n    return a[4]\nend", "    if n < 4 \n        return n - 1\n    end\
    \ \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1)\n        a, b, c,\
    \ d = b, c, d, b + c + d + a\n    end\n    return d\nend\nfib4(7)", "    a, b,\
    \ c, d = 0, 0, 2, 0\n    for i = 4:n\n        e = a + b + c + d\n        a, b,\
    \ c, d = b, c, d, e\n    end\n    return a + b + c + d\nend\n ", "    if n ==\
    \ 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n\
    \        return 2\n    elseif n == 3\n        return 0\n    else\n        f0 =\
    \ 0\n        f1 = 0\n        f2 = 2\n        f3 = 0\n        current = 0\n   \
    \     for i in 4:n\n            current = f0 + f1 + f2 + f3\n            f0 =\
    \ f1\n            f1 = f2\n            f2 = f3\n            f3 = current\n   \
    \     end\n        return current\n    end\nend\nfib4(7)", "    if n == 0 \n \
    \       return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n   \
    \     return 2\n    elseif n == 3\n        return 0\n    else\n        a = 0\n\
    \        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n          \
    \  a, b, c, d = b, c, d, a + b + c + d\n        end\n        return d\n    end\n\
    end", "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n\
    \    elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n  \
    \  else\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for\
    \ i in 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n   \
    \     return d\n    end\nend\nfib4(10)", "    if n == 0 return 0 end\n    if n\
    \ == 1 return 0 end\n    if n == 2 return 2 end\n    if n == 3 return 0 end\n\
    \    sequence = Array{Int64}(undef, n)\n    sequence[1] = 0\n    sequence[2] =\
    \ 0\n    sequence[3] = 2\n    sequence[4] = 0\n    for i in 5:n\n        sequence[i]\
    \ = sequence[i-1] + sequence[i-2] + sequence[i-3] + sequence[i-4]\n    end\n \
    \   return sequence[n]\nend", "    a::Int64 = 0\n    b::Int64 = 0\n    c::Int64\
    \ = 2\n    d::Int64 = 0\n    for i in 1:n-2\n        temp = d\n        d = c\n\
    \        c = b + c + d + a\n        a = b\n        b = temp\n    end\n    return\
    \ c\nend", "    if n<3 \n        return 2*n\n    else\n        a=Array{Int64}(n)\n\
    \        a[1]=0\n        a[2]=0\n        a[3]=2\n        for i in 4:n\n      \
    \      a[i]=a[i-1]+a[i-2]+a[i-3]+a[i-4]\n        end\n        return a[n]\n  \
    \  end\nend", "    if n <= 1\n        return 0\n    elseif n == 2\n        return\
    \ 2\n    elseif n == 3\n        return 0\n    else\n        a = 0\n        b =\
    \ 0\n        c = 2\n        d = 0\n        for i in 1:n-3\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend", " \
    \   if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n  \
    \      # Implement here\n        return 0\n    end\nend", "    # YOUR CODE HERE\n\
    \    a = 0\n    b = 0\n    c = 2\n    d = 0\n    if n <= 3\n        return d\n\
    \    end\n    for i = 4:n\n        d = a + b + c\n        a = b\n        b = c\n\
    \        c = d\n    end\n    return d\nend", "    a, b, c, d = 0, 0, 2, 0\n  \
    \  for i in 1:n\n        d = a + b + c + d\n        a, b, c = b, c, d\n    end\n\
    \    return d\nend", "    a::Int64 = 0\n    b::Int64 = 0\n    c::Int64 = 2\n \
    \   d::Int64 = 0\n    if n == 0 \n        return a\n    elseif n == 1\n      \
    \  return b\n    elseif n == 2\n        return c\n    elseif n == 3\n        return\
    \ d\n    else \n        for _ in 4:n\n            a = b\n            b = c\n \
    \           c = d\n            d = a + b + c + d\n        end\n        return\
    \ d\n    end\nend", "    if n < 4\n        return n - 1\n    end\n    a, b, c,\
    \ d = 0, 0, 2, 0\n    for i = 5:n\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    end\n    return d\nend", "    a = 0\n    b = 0\n    c = 2\n    d = 0\n  \
    \  for i = 4:n\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    end\n    return c\nend", "    if n < 4\n        return 0\n    end\n\
    \    if n == 4\n        return 2\n    end\n    f1 = 0\n    f2 = 0\n    f3 = 0\n\
    \    f4 = 2\n    f5 = 4\n    n -= 5\n    while n >= 0\n        f1 = f2\n     \
    \   f2 = f3\n        f3 = f4\n        f4 = f5\n        f5 = f1 + f2 + f3 + f5\n\
    \        n -= 1\n    end\n    return f5\nend", "    a, b, c, d = 0, 0, 2, 0\n\
    \    for i in range(4, n+1)\n        a, b, c, d = b, c, d, a + b + c + d\n   \
    \ end\n    return d\nend", "    fib_sequence = Array{Int64}(undef, n)\n    fib_sequence[1]\
    \ = 0\n    fib_sequence[2] = 0\n    fib_sequence[3] = 2\n    fib_sequence[4] =\
    \ 0\n    for i in 5:n\n        fib_sequence[i] = fib_sequence[i-1] + fib_sequence[i-2]\
    \ + fib_sequence[i-3] + fib_sequence[i-4]\n    end\n    return fib_sequence[n]\n\
    end", "    n1, n2, n3, n4 = 0, 0, 2, 0\n    for i in 2:n-1\n        n1, n2, n3,\
    \ n4 = n2, n3, n4, n1 + n2 + n3 + n4\n    end\n    return n4\nend", "    x = [0,\
    \ 0, 2, 0]\n    x += [0] * (n-3)\n    x[n] = x[n-1] + x[n-2] + x[n-3] + x[n-4]\n\
    \    return x[n]\nend", "    if n == 0 \n        return 0\n    elseif n == 1 \n\
    \        return 0\n    elseif n == 2 \n        return 2\n    elseif n == 3 \n\
    \        return 0\n    else\n        s0 = 0\n        s1 = 0\n        s2 = 2\n\
    \        s3 = 0\n        for i = 4:n\n            s4 = s0 + s1 + s2 + s3\n   \
    \         s0 = s1\n            s1 = s2\n            s2 = s3\n            s3 =\
    \ s4\n        end\n        return s4\n    end\nend", "    \n    return fib4_array(n)[n]\n\
    end", "    cur, nxt, nxt1, nxt2 = 0, 0, 2, 0\n    for i in 1:n-1\n        nxt,\
    \ nxt1, nxt2 = nxt2, cur, nxt\n        cur = nxt2\n    end\n    return cur\nend",
  "    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n  \
    \      f0 = 0\n        f1 = 0\n        f2 = 2\n        f3 = 0\n        for i in\
    \ range(4, n+1)\n            f4 = f3 + f2 + f1 + f0\n            f0 = f1\n   \
    \         f1 = f2\n            f2 = f3\n            f3 = f4\n        end\n   \
    \     return f4\n    end\nend", "    f4_vec = zeros(Int64, n)\n    for i in 1:n\n\
    \        f4_vec[i] = f4_vec[i-1] + f4_vec[i-2] + f4_vec[i-3] + f4_vec[i-4]\n \
    \   end\n    return f4_vec[n]\nend", "    a, b, c, d = 0, 0, 2, 0\n    for i in\
    \ 1:n\n        d = a + b + c + d\n        a, b, c = b, c, d\n    end\n    return\
    \ d\nend", "    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", " \
    \   a = [0, 0, 2, 0]\n    for i = 4:n\n        a[4] = a[1] + a[2] + a[3] + a[4]\n\
    \        for j = 4:-1:2\n            a[j] = a[j-1]\n        end\n    end\n   \
    \ return a[4]\nend", "    f=[0,0,2,0]\n    for i in 4:n\n        append!(f,f[end-4]+f[end-3]+f[end-2]+f[end-1])\n\
    \    end\n    return f[end]\nend", "  if n < 0\n    error(\"Argument must be positive\"\
    )\n  end\n  a, b, c, d = 0, 0, 2, 0\n  for i in 0:n-3\n    a, b, c, d = b, c,\
    \ d, a + b + c + d\n  end\n  return d\nend\n \n \n \n \n\"\"\" Write a function\
    \ to compute the binomial coefficient.  The binomial coefficient can be computed\
    \ using the following formula:\n    C(n,k) = n! / (k! (n-k)!) where ! is the factorial\
    \ operator.\n    C(n,0) = C(n,n) = 1\n    C(n,k) = C(n-1,k-1) + C(n-1,k) if k\
    \ > 0 and n > 0\n    >>> binom(5,3)\n    10\n    >>> binom(5,5)\n    1\n    >>>\
    \ binom(5,0)\n    1\n    >>> binom(5,2)\n    10\n    \"\"\"\n ", "    n > 4 ||\
    \ error(\"Input not valid\")\n    a, b, c, d = 0, 0, 2, 0\n    for i in 4:n\n\
    \        a, b, c, d = b, c, d, b + c + d + a\n    end\n    return d\nend", " \
    \   a=0\n    b=0\n    c=2\n    d=0\n    e=0\n    if n==0\n        return 0\n \
    \   elseif n==1\n        return 0\n    elseif n==2\n        return 2\n    elseif\
    \ n==3\n        return 0\n    else\n        for i in 4:n\n            a=b\n  \
    \          b=c\n            c=d\n            d=e\n            e=a+b+c+d\n    \
    \    end\n        return e\n    end\nend\n ", "    a::Int64 = 0\n    b::Int64\
    \ = 0\n    c::Int64 = 2\n    d::Int64 = 0\n    for i = 3:n\n        d = a + b\
    \ + c\n        a = b\n        b = c\n        c = d\n    end\n    return d\nend\n\
    \"\"\"\n    >>> sumsq(6)\n    91\n    >>> sumsq(10)\n    385\n    >>> sumsq(15)\n\
    \    1240\n\"\"\"", "    if n == 0 || n == 1 || n == 3\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    else \n        fib0 = 0\n        fib1 =\
    \ 0\n        fib2 = 2\n        fib3 = 0\n        fib_n = 0\n        for i = 4:n\n\
    \            fib_n = fib0 + fib1 + fib2 + fib3\n            fib0 = fib1\n    \
    \        fib1 = fib2\n            fib2 = fib3\n            fib3 = fib_n\n    \
    \    end\n        return fib_n\n    end\nend", "  s = 0\n  a = 0\n  b = 0\n  c\
    \ = 2\n  d = 0\n  for i in 1:n\n    s = a + b + c + d\n    a = b\n    b = c\n\
    \    c = d\n    d = s\n  end\n  return s\nend", "    if n == 0 \n        return\
    \ 0\n    elseif n == 1 \n        return 0\n    elseif n == 2 \n        return\
    \ 2\n    elseif n == 3 \n        return 0\n    else \n        a = 0\n        b\
    \ = 0\n        c = 2\n        d = 0\n        for i in 4:n\n            a, b, c,\
    \ d = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend", " \
    \   if n == 0\n        return 0\n    elseif n == 1\n        return 0\n    elseif\
    \ n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n  \
    \      return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end\nend", " \
    \   f4 = Array{Int64}(4)\n    f4[1] = 0\n    f4[2] = 0\n    f4[3] = 2\n    f4[4]\
    \ = 0\n    for i = 5:n\n        new = f4[1] + f4[2] + f4[3] + f4[4]\n        f4[1]\
    \ = f4[2]\n        f4[2] = f4[3]\n        f4[3] = f4[4]\n        f4[4] = new\n\
    \    end\n    return f4[4]\nend", "    if n == 0\n        return 0\n    elseif\
    \ n == 1\n        return 0\n    elseif n == 2\n        return 2\n    elseif n\
    \ == 3\n        return 0\n    else\n        f0, f1, f2, f3 = 0, 0, 2, 0\n    \
    \    for i in range(4, n+1)\n            f4 = f0 + f1 + f2 + f3\n            f0,\
    \ f1, f2, f3 = f1, f2, f3, f4\n        end\n        return f4\n    end\nend",
  "    f::Int64 = 0\n    g::Int64 = 0\n    h::Int64 = 2\n    k::Int64 = 0\n    for\
    \ j = 1:n-2\n        f, g, h, k = f + g + h + k, f, g, h\n    end\n    return\
    \ f + g + h + k\nend\n@test fib4(5) == 4\n@test fib4(6) == 8\n@test fib4(7) ==\
    \ 14\n@test fib4(8) == 26\n@test fib4(9) == 48\n@test fib4(10) == 90\n@test fib4(30)\
    \ == 623374664\n@test fib4(1000) == 745209070\n \n \n ", "    if n == 0 \n   \
    \     return 0\n    elseif n == 1\n        return 0\n    elseif n == 2\n     \
    \   return 2\n    elseif n == 3\n        return 0\n    else\n        a, b, c,\
    \ d = 0, 0, 2, 0\n        for i = 4:n\n            c, d = d, a + b + c + d\n \
    \           a, b = b, c\n        end\n        return d\n    end\nend", "    if\
    \ n < 3 \n        return 2 \n    end \n    if n == 3 \n        return 0 \n   \
    \ end \n    if n < 6 \n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ \n    end \n    prev_fib_seq = Array{Int64}(undef, 4) \n    prev_fib_seq[1]\
    \ = 2 \n    prev_fib_seq[2] = 2 \n    prev_fib_seq[3] = 0 \n    prev_fib_seq[4]\
    \ = 2 \n    for i in 5:n \n        new_fib = prev_fib_seq[1] + prev_fib_seq[2]\
    \ + prev_fib_seq[3] + prev_fib_seq[4] \n        prev_fib_seq[1] = prev_fib_seq[2]\
    \ \n        prev_fib_seq[2] = prev_fib_seq[3] \n        prev_fib_seq[3] = prev_fib_seq[4]\
    \ \n        prev_fib_seq[4] = new_fib \n    end \n    return prev_fib_seq[4] \n\
    end ", "  results = zeros(Int64, n)\n  results[1] = 0\n  results[2] = 2\n  results[3]\
    \ = 0\n  for i in 4:n\n    results[i] = results[i-1] + results[i-2] + results[i-3]\
    \ + results[i-4]\n  end\n  return results[n]\nend", "    if n < 4\n        return\
    \ [0, 0, 2, 0][n]\n    else\n        a, b, c, d = 0, 0, 2, 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend", "    if n <= 0\n        return 0\n    end\n    el1 = 0\n \
    \   el2 = 0\n    el3 = 2\n    el4 = 0\n    for i in 5:n\n        temp = el1\n\
    \        el1 = el2\n        el2 = el3\n        el3 = el4\n        el4 = temp +\
    \ el1 + el2 + el3\n    end\n    return el4\nend", "    #Fib4(n) = Fib4(n-1) +\
    \ Fib4(n-2) + Fib4(n-3) + Fib4(n-4)\n    #Only Fib4(0), Fib4(1), Fib4(2), Fib4(3)\
    \ = 0, 0, 2, 0, respectively\n    #Therefore, if n < 4, return 0\n    if n < 4\n\
    \        return 0\n    end\n    #Use an array to hold the previous four numbers\n\
    \    temp = [0, 0, 2, 0]\n    for i in 4:n\n        #Store the new Fib4(i)\n \
    \       temp[4] = temp[1] + temp[2] + temp[3] + temp[4]\n        #Shift the array\
    \ by one \n        temp[1] = temp[2]\n        temp[2] = temp[3]\n        temp[3]\
    \ = temp[4]\n    end\n    #Return the last Fib4(i)\n    return temp[4]\nend",
  "    # YOUR CODE HERE\n    if n == 0 \n        return 0\n    elseif n == 1\n   \
    \     return 0\n    elseif n == 2\n        return 2\n    elseif n == 3\n     \
    \   return 0\n    else\n        x1 = 0\n        x2 = 0\n        x3 = 2\n     \
    \   x4 = 0\n        for i = 4:n\n            x4 = x1 + x2 + x3 + x4\n        \
    \    x1 = x2\n            x2 = x3\n            x3 = x4\n        end\n        return\
    \ x4\n    end\nend", "    i, j, k, l = 0, 0, 2, 0\n    for i in 1:n\n        i,\
    \ j, k, l = j, k, l, j + k + l\n    end\n    return j\nend", "    f4 = zeros(Int64,\
    \ n)\n    f4[1] = 0\n    f4[2] = 2\n    f4[3] = 0\n    for i = 4:n\n        f4[i]\
    \ = f4[i-1] + f4[i-2] + f4[i-3] + f4[i-4]\n    end\n    return f4[n]\nend\nfib4(10)",
  "    f0, f1, f2, f3, f4 = 0, 0, 2, 0, 1\n    if n < 4\n        return fib4(n)\n\
    \    end\n    n -= 4\n    while n > 0\n        f0, f1, f2, f3, f4 = f1, f2, f3,\
    \ f4, f0 + f1 + f2 + f3\n        n -= 1\n    end\n    return f4\nend", "    if\
    \ n <= 3\n        return 0\n    end\n    if n == 4\n        return 2\n    end\n\
    \    f1 = 0\n    f2 = 0\n    f3 = 0\n    f4 = 2\n    sum = 2\n    for i in 5:n\n\
    \        f1 = f2\n        f2 = f3\n        f3 = f4\n        f4 = sum\n       \
    \ sum = f1 + f2 + f3 + f4\n    end\n    return sum\nend", "    \n    if n < 2\n\
    \        return 0\n    end\n    \n    last_two = 0\n    last_three = 0\n    last_four\
    \ = 0\n    current = 2\n    \n    for i in 3:n\n        last_four = last_three\n\
    \        last_three = last_two\n        last_two = current\n        current =\
    \ last_two + last_three + last_four + current\n    end\n    \n    return current\n\
    end", "    #you should write your code here\nend", "    val1 = 0\n    val2 = 0\n\
    \    val3 = 2\n    val4 = 0\n    for x in 3:n\n        val1 = val2\n        val2\
    \ = val3\n        val3 = val4\n        val4 = val1 + val2 + val3 + val4\n    end\n\
    \    return val4\nend", "    a, b, c, d = 0, 0, 2, 0\n    for i in 1:n\n     \
    \   a, b, c, d = b, c, d, a + b + c + d\n    end\n    return a\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
