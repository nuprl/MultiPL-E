name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\nfunction flip_case(string::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    new_string = \"\"\n    for letter in string\n        letter ==\
    \ string[letter] ? new_string = string[letter] : new_string = uppercase(string[letter])\n\
    \    end\n    return new_string\nend", "    out = \"\"\n    for character in string\n\
    \        out = out * flip(character)\n    end\n    return out\nend", "    flipped_string\
    \ = \"\"\n    for char in string\n        if char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            flipped_string = flipped_string * char\n        else\n         \
    \   flipped_string = flipped_string * string(char)\n    end\n    return flipped_string\n\
    end", "    new_string = \"\"\n    for char in string\n        if char == lowercase(char)\n\
    \            append!(new_string, uppercase(char))\n        else\n            append!(new_string,\
    \ lowercase(char))\n        end\n    end\n    return new_string\nend", "    string\
    \ .= swapcase()\n    return string\nend", "    new_string = \"\"\n    for c in\
    \ string\n        if (islower(c))\n            new_string *= uppercase(c)\n  \
    \      else\n            new_string *= lowercase(c)\n        end\n    end\n  \
    \  return new_string\nend", "    new_string = \"\"\n    for letter in string\n\
    \        switch(letter)\n            case in ('a':'z')\n                new_string\
    \ *= letter |> upcase\n            case in ('A':'Z')\n                new_string\
    \ *= letter |> lowercase\n            else\n                new_string *= letter\n\
    \            end\n        end\n    end\n    return new_string\nend", "    \"\"\
    \"\n    function flip_case(string::String)::String \n        \"\"\"\n    for i\
    \ in 1:length(string)\n        if islower(string[i])\n            string[i] =\
    \ uppercase(string[i])\n        elseif isupper(string[i])\n            string[i]\
    \ = lowercase(string[i])\n        end\n    end\n    return string\nend", "   \
    \ for char in string\n        (isdigit(char) && return char)\n        (isalpha(char)\
    \ && \n        !(isupper(char) && return tolower(char)) &&\n        !(islower(char)\
    \ && return toupper(char)))\n    end\nend", "    # convert string to array of\
    \ characters\n    let characters = to_array(string)\n    # convert array of characters\
    \ to array of substrings of length 1\n    let chars = [ characters[i] for i in\
    \ 1:length(characters) ]\n    # create empty flipped array\n    let flipped =\
    \ [ \"\" for _ in 1:length(chars) ]\n    # iterate over characters and convert\
    \ lowercase to uppercase and vice versa\n    for i in 1:length(chars)\n      \
    \  let c = chars[i]\n        if c == upper(c)\n            flipped[i] = lowercase(c)\n\
    \        elseif c == lowercase(c)\n            flipped[i] = uppercase(c)\n   \
    \     else\n            flipped[i] = c\n        end\n    end\n    # convert flipped\
    \ array to string\n    let flipped_string = join(flipped)\n    return flipped_string\n\
    end", "    string.swapcase()\nend", "    flipped_string = \"\"\n    for c in string\n\
    \        if c in lowercase_characters\n            flipped_string *= uppercase_characters[findfirst(lowercase_characters,\
    \ c)]\n        elseif c in uppercase_characters\n            flipped_string *=\
    \ lowercase_characters[findfirst(uppercase_characters, c)]\n        else\n   \
    \         flipped_string *= c\n        end\n    end\n    return flipped_string\n\
    end", "    flipped_case_string = String[]\n    for c in string\n        if c in\
    \ ['a':'z']\n            push!(flipped_case_string, uppercase(c))\n        elseif\
    \ c in ['A':'Z']\n            push!(flipped_case_string, lowercase(c))\n     \
    \   else\n            push!(flipped_case_string, c)\n        end\n    end\n  \
    \  return join(flipped_case_string)\nend", "    return [upper(i) ? i = lower(i)\
    \ for i in string]\nend", "    char_list = collect(string)\n    out_list = [char_list[i]\
    \ == uppercase(char_list[i]) ? lowercase(char_list[i]) : uppercase(char_list[i])\
    \ for i in 1:length(char_list)]\n    return join(out_list)\nend\nflip_case(\"\
    Hello\")", "    string = string.lower()\n    return string\nend", "    s = String[]\n\
    \    for c in string\n        if islower(c)\n            push!(s, uppercase(c))\n\
    \        else\n            push!(s, lowercase(c))\n        end\n    end\n    return\
    \ join(s)\nend", "    flipped_string = \"\"\n    for char in string\n        if\
    \ char in \"abcdefghijklmnopqrstuvwxyz\"\n            flipped_string *= string(char)\n\
    \        elseif char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            flipped_string\
    \ *= string(char)\n        else\n            flipped_string *= string(char)\n\
    \        end\n    end\n    return flipped_string\nend", "    return map(c -> c\
    \ in ('a':'z') ? uppercase(c) : lowercase(c), string)\nend\nflip_case(\"Hello\"\
    )", "    new = []\n    for i = 1:length(string)\n        if string[i] in [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n            append!(new, uppercase(string[i]))\n     \
    \   elseif string[i] in [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n            append!(new, lowercase(string[i]))\n\
    \        else\n            append!(new, string[i])\n        end\n    end\n   \
    \ return join(new)\nend", "    \n    str = \"\"\n    for i in 1:length(string)\n\
    \        \n        ch = string[i]\n        if (lowercase(ch))\n            push!(str,\
    \ uppercase(ch))\n        else\n            push!(str, lowercase(ch))\n      \
    \  end\n    end\n    return str\nend", "    output = \"\"\n    for c in string\n\
    \        c_val = c.lowercased()\n        if c == c_val\n            c_val = c.uppercased()\n\
    \        end\n        output = string(output, c_val)\n    end\n    return output\n\
    end", "    new_string = \"\"\n    for c in string\n        if isalpha(c)\n   \
    \         if islower(c)\n                new_string = new_string * uppercase(c)\n\
    \            else\n                new_string = new_string * lowercase(c)\n  \
    \      else\n            new_string = new_string * c\n    end\n    return new_string\n\
    end", "    stringflip = \"\"\n    i = 1\n    while i <= length(string)\n     \
    \   if islower(string[i]) == true\n            stringflip = stringflip * string[i]\n\
    \        elseif isupper(string[i]) == true\n            stringflip = stringflip\
    \ * lowercase(string[i])\n        else \n            stringflip = stringflip *\
    \ string[i]\n        end\n        i += 1\n    end\n    return stringflip\nend",
  "    new_string = \"\"\n    for c in string\n        if isalpha(c)\n           \
    \ if islower(c)\n                new_string = new_string * string(c)\n       \
    \     else\n                new_string = new_string * string(c)\n        else\n\
    \            new_string = new_string * string(c)\n    end\n    return new_string\n\
    end", "    string = swapcase(string)\n    return string\nend", "    return [flip_case(c)\
    \ for c in string]\nend", "    s = []\n    for i in string\n        push!(s, islower(i)\
    \ ? uppercase(i) : lowercase(i))\n    end\n    string = join(s)\n    return string\n\
    end", "    new_string = \"\"\n    for character in string\n        if (character\
    \ in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"])\n            new_string = new_string * string(character)\n\
    \        else\n            new_string = new_string * uppercase(character)\n  \
    \      end\n    end\n    return new_string\nend", "    chars = []\n    for c in\
    \ string\n        if islower(c)\n            push!(chars, uppercase(c))\n    \
    \    else\n            push!(chars, lowercase(c))\n        end\n    end\n    return\
    \ join(chars)\nend\nprintln(flip_case(\"Hello\"))", "    output = \"\"\n    for\
    \ c in string\n        #if character is lowercase\n        if islower(c)\n   \
    \         push!(output, Char(c+65-97))\n        else # character is uppercase\n\
    \            push!(output, Char(c+97-65))\n        end\n    end\n    return output\n\
    end", "    return map(string) do s\n        if s \u2208 'a' : ('z' - 'a') + 1\n\
    \            return 'A' + s - 'a'\n        elseif s \u2208 'A' : ('Z' - 'A') +\
    \ 1\n            return 'a' + s - 'A'\n        else\n            return s\n  \
    \      end\n    end\nend", "    output = String[]\n    for character in string\n\
    \        if !(character in \"abcdefghijklmnopqrstuvwxyz\")\n            append!(output,\
    \ character)\n        elseif character in \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \         append!(output, uppercase(character))\n        else\n            append!(output,\
    \ lowercase(character))\n        end\n    end\n    return(join(output))\nend",
  "    new_string = \"\"\n    for i in string\n        if i in string.lowercase\n\
    \            new_string *= i.upper()\n        else\n            new_string *=\
    \ i.lower()\n    end\n    return new_string\nend\n    ", "    flipped_string =\
    \ \"\"\n    for char in string\n        if islower(char)\n            append!(flipped_string,\
    \ toupper(char))\n        else\n            append!(flipped_string, tolower(char))\n\
    \        end\n    end\n    return flipped_string\nend", "    string[Regex(\"[a-z]\"\
    )] = uppercase(string[Regex(\"[a-z]\")])\n    string[Regex(\"[A-Z]\")] = lowercase(string[Regex(\"\
    [A-Z]\")])\n    return string\nend", "    string_flipped = String[]\n    for i\
    \ in string\n        if (islower(i))\n            append!(string_flipped, uppercase(i))\n\
    \        elseif (isupper(i))\n            append!(string_flipped, lowercase(i))\n\
    \        else\n            append!(string_flipped, i)\n        end\n    end\n\
    \    string_flipped = join(string_flipped)\n    return string_flipped\nend", " \
    \   length(string) == 0 && return \"\"\n    string[1] <= \"Z\" ? string[1] = string[1]\
    \ - (\"Z\" - \"z\") : string[1] = string[1] + (\"Z\" - \"z\")\n    return string[1]\
    \ * flip_case(string[2:end])\nend", "    \"\"\"\n    >>> flip_case('Hello')\n\
    \    'hELLO'\n    \"\"\"\n    # initialize an empty string to output\n    output\
    \ = \"\"\n    # Iterate through each character in input string and append each\
    \ character to output string, as long as character\n    # is lowercase, append\
    \ uppercase version of character, as long as character is uppercase, append lowercase\
    \ version\n    # of character.\n    for character in string\n        if character\
    \ in string(\"abcdefghijklmnopqrstuvwxyz\")\n            append!(output, uppercase(character))\n\
    \        elseif character in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n        \
    \    append!(output, lowercase(character))\n        else\n            append!(output,\
    \ character)\n        end\n    end\n    return output\nend", "    \n    flipped_chars\
    \ = []\n    for char in string\n        if char in string.lowercase\n        \
    \    flipped_chars.append(char.upper())\n        elseif char in string.uppercase\n\
    \            flipped_chars.append(char.lower())\n        else\n            flipped_chars.append(char)\n\
    \        end\n    end\n    \n    return join(flipped_chars, \"\")\nend", "   \
    \ new_string = \"\"\n    for x in string\n        if x == uppercase(x)\n     \
    \       new_string = new_string * lowercase(x)\n        else\n            new_string\
    \ = new_string * uppercase(x)\n        end\n    end\n    return new_string\nend",
  "    new_string = \"\"\n    for x in string\n        if islower(x)\n           \
    \ push!(new_string, uppercase(x))\n        elseif isupper(x)\n            push!(new_string,\
    \ lowercase(x))\n        else\n            push!(new_string, x)\n        end\n\
    \    end\n    return new_string\nend", "    return replace(regex(r'[a-z]', \"\
    ig\"), string, upper) replace(regex(r'[A-Z]', \"ig\"), string, lower) end \nend",
  "    flipped_string = []\n    for c in string\n        c == Char(lowercase(c)) ?\
    \ push!(flipped_string, Char(uppercase(c))) : push!(flipped_string, Char(lowercase(c)))\n\
    \    end\n    return join(flipped_string)\nend", "    string_as_bytes = Array{UInt8}(string)\n\
    \    for (i, byte) in enumerate(string_as_bytes)\n        if byte == string_as_bytes[i]\n\
    \            string_as_bytes[i] = char(byte + 32)\n        else\n            string_as_bytes[i]\
    \ = char(byte - 32)\n        end\n    end\n    return String(string_as_bytes)\n\
    end", "    string = map(ch -> get(flipcase, ch, ch), string)\n    return string\n\
    end", "    out = []\n    for i in 1:length(string)\n        if string[i] == upcase(string[i])\n\
    \            append!(out, downcase(string[i]))\n        elseif string[i] == downcase(string[i])\n\
    \            append!(out, upcase(string[i]))\n        else\n            append!(out,\
    \ string[i])\n        end\n    end\n    join(out)\nend", "    out = \"\"\n   \
    \ for c in string\n        if !islower(c)\n            out *= lowercase(c)\n \
    \       else\n            out *= uppercase(c)\n        end\n    end\n    return\
    \ out\nend", "    new_string = String[]\n    for c in string\n        if isupper(c)\n\
    \            push!(new_string, lowercase(c))\n        else\n            push!(new_string,\
    \ uppercase(c))\n        end\n    end\n    join(new_string)\nend", "    new_string::String\
    \ = \"\"\n    for c in string\n        if isupper(c)\n            push!(new_string,\
    \ lowercase(c))\n        elseif islower(c)\n            push!(new_string, uppercase(c))\n\
    \        else\n            push!(new_string, c)\n        end\n    end\n    return\
    \ new_string\nend", "    \"\"\"Replaces chars in a string using a dict.\"\"\"\n\
    \    mapping = Dict(('a','A'), ('b','B'), ('c','C'), ('d','D'), ('e','E'), ('f','F'),\
    \ ('g','G'), ('h','H'), ('i','I'), ('j','J'), ('k','K'), ('l','L'), ('m','M'),\
    \ ('n','N'), ('o','O'), ('p','P'), ('q','Q'), ('r','R'), ('s','S'), ('t','T'),\
    \ ('u','U'), ('v','V'), ('w','W'), ('x','X'), ('y','Y'), ('z','Z'))\n    return\
    \ map(c -> mapping[c], string)\nend\n ", "    string[1] = uppercase(string[1])\n\
    \    return string\nend", "    return lowercase(string) == string ? uppercase(string)\
    \ : lowercase(string)\nend", "  output = \"\"\n  for i in 1:length(string)\n \
    \   if islower(string[i])\n      output = string(i) * string[i] \n    else\n \
    \     output = string(i) * string[i]\n  end\n  return output\nend", "    stringflip\
    \ = uppercase(string)\n    stringflip = lowercase(stringflip)\n    return stringflip\n\
    end\n    ", "    flipped_str = \"\"\n    for i in string\n        if islower(i)\n\
    \            flipped_str *= uppercase(i)\n        elseif isupper(i)\n        \
    \    flipped_str *= lowercase(i)\n        else\n            flipped_str *= i\n\
    \        end\n    end\n    return flipped_str\nend", "    str_arr = string\n \
    \   for i=1:length(str_arr)\n        if islower(str_arr[i])\n            str_arr[i]\
    \ = uppercase(str_arr[i])\n        else\n            str_arr[i] = lowercase(str_arr[i])\n\
    \        end\n    end\n    return str_arr\nend", "    flipped = []\n    for i\
    \ = 1:length(string)\n        if !in('a':char, 'z':char) <: string[i] <: !in('A':char,\
    \ 'Z':char)\n            push!(flipped, string[i])\n        elseif islower(string[i])\n\
    \            push!(flipped, uppercase(string[i]))\n        else\n            push!(flipped,\
    \ lowercase(string[i]))\n        end\n    end\n    return join(flipped)\nend",
  "    string .& String .lower .& String .uppercase\nend", "    # do stuff\n    return\
    \ string\nend", "    output = []\n    for c in string\n        if c \u2208 [\"\
    a\"...\"z\"]\n            push!(output, uppercase(c))\n        elseif c \u2208\
    \ [\"A\"...\"Z\"]\n            push!(output, lowercase(c))\n        else\n   \
    \         push!(output, c)\n        end\n    end\n    return join(output)\nend",
  "    new_string = \"\"\n    for char in string\n        if char in uppercase(string)\n\
    \            push!(new_string, lowercase(char))\n        elseif char in lowercase(string)\n\
    \            push!(new_string, uppercase(char))\n        else\n            push!(new_string,\
    \ char)\n        end\n    end\n    return new_string\nend\nflip_case(\"Hello\"\
    )", "    flipped_case = \"\"\n    for letter in string\n        if letter in \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            flipped_case *= letter\n        elseif\
    \ letter in \"abcdefghijklmnopqrstuvwxyz\"\n            flipped_case *= uppercase(letter)\n\
    \        else\n            flipped_case *= letter\n        end\n    end\n    return\
    \ flipped_case\nend", "    string = swapcase(string)\n    return string\nend",
  "    if string == \"\"\n        return \"\"\n    else\n        if string[1] >= \"\
    a\" && string[1] <= \"z\"\n            return string[1] * string[1:end]\n    \
    \    elseif string[1] >= \"A\" && string[1] <= \"Z\"\n            return lowercase(string[1])\
    \ * string[1:end]\n        else\n            return string[1] * string[1:end]\n\
    \        end\n    end\nend", "    return string.swapcase()\nend", "    pass\n\
    \    \n    \n@doc\"\"\" Create a random string of length n.\n    >>> random_string(7)\n\
    \    'EuCZcTm'\n    \"\"\"", "    output = \"\"\n    for c in string\n       \
    \ i = findfirst(c,('a':'z') | ('A':'Z'))\n        if i == nothing\n          \
    \  push!(output,c)\n        else\n            if findfirst(c, ('a':'z')) != nothing\n\
    \                push!(output, uppercase(c))\n            else\n             \
    \   push!(output, lowercase(c))\n            end\n        end\n    end\n    return\
    \ output\nend", "    str = map(Char, string)\n    return join(map(char->case(char),\
    \ str))\nend", "    new_string = []\n    for i in string\n        if isupper(i)\n\
    \            push!(new_string, tolower(i))\n        elseif islower(i)\n      \
    \      push!(new_string, toupper(i))\n        else\n            push!(new_string,\
    \ i)\n        end\n    end\n    new_string = string(new_string)\n    return new_string\n\
    end", "    return lowercase(string) * uppercase(string)\nend", "    flipped_string\
    \ = \"\" \n    for char in string \n        if char in \"abcdefghijklmnopqrstuvwxyz\"\
    \ \n            flipped_string = flipped_string * string(upper(char)) \n     \
    \   else \n            flipped_string = flipped_string * string(lower(char)) \n\
    \    end \n    return flipped_string \nend ", "    new = []\n    for i = 1:length(string)\n\
    \        if islower(string[i])\n            push!(new, uppercase(string[i]))\n\
    \        else\n            push!(new, lowercase(string[i]))\n        end\n   \
    \ end\n    return join(new)\nend", "    s = String[]\n    for x in string\n  \
    \      if islower(x)\n            push!(s, uppercase(x))\n        elseif isupper(x)\n\
    \            push!(s, lowercase(x))\n        else\n            push!(s, x)\n \
    \       end\n    end\n    return join(s)\nend", "    return map(x -> islower(x)\
    \ ? uppercase(x) : lowercase(x), string)\nend", "    string = string |> String\
    \ \n    ret = String[]\n    for i=1:length(string)\n        c = string[i]\n  \
    \      if islower(c) \n            push!(ret, uppercase(c))\n        elseif isupper(c)\n\
    \            push!(ret, lowercase(c))\n        else\n            push!(ret, c)\n\
    \        end\n    end\n    join(ret)\nend\n ", "    output = \"\"\n    for s in\
    \ string\n        if s == s[1:1] | uppercase(s) == true\n            output =\
    \ output * s[1:1] | lowercase(s)\n        else\n            output = output *\
    \ s[1:1] | uppercase(s)\n    end\n    return output\nend", "    for i = 1:length(string)\n\
    \        if islower(string[i])\n            string[i] = uppercase(string[i])\n\
    \        else\n            string[i] = lowercase(string[i])\n        end\n   \
    \ end\n    return string\nend", "    s = Char[]\n    for char in string\n    \
    \    # If char is uppercase, make it lowercase; otherwise make it uppercase\n\
    \        s = push!(s, Int(char) - 32 * (Int(char) in (65:90)))\n    end\n    String(s)\n\
    end", "    string = [character in string if islower(character) \"character\" else\
    \ if isupper(character) \"character\" else \"\"]\n    return string\nend\n ",
  "    string = \"Hello\"\n    for s in string\n        string = string.replace(s,\
    \ s.lower())\n        for s in string\n            string = string.replace(s,\
    \ s.upper())\n    end\n    println(string)\nend", "    s = \"\"\n    for i in\
    \ string\n        if i \u2208 lowercase_letters\n            push!(s, upper(i))\n\
    \        elseif i \u2208 uppercase_letters\n            push!(s, lower(i))\n \
    \       else\n            push!(s, i)\n        end\n    end\n    return s\nend",
  "    for i in 1:length(string)\n        if (string[i] in Char('a':'z'))\n      \
    \      string[i] = uppercase(string[i])\n        elseif (string[i] in Char('A':'Z'))\n\
    \            string[i] = lowercase(string[i])\n        end\n    end\n    return\
    \ string\nend", "    flipped_string = \"\"\n    for letter in string\n       \
    \ if letter in string(\"abcdefghijklmnopqrstuvwxyz\")\n            flipped_string\
    \ = flipped_string * string(letter)\n        else\n            flipped_string\
    \ = flipped_string * letter\n    end\n    return flipped_string\nend", "    flipped_string\
    \ = \"\"\n    for letter in string\n        if letter in string(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            flipped_string = flipped_string * uppercase(letter)\n        elseif\
    \ letter in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            flipped_string\
    \ = flipped_string * lowercase(letter)\n        else\n            flipped_string\
    \ = flipped_string * letter\n        end\n    end\n    return flipped_string\n\
    end", "   flippedString = \"\"\n    for letter in string\n        letter == uppercase(letter)\
    \ ? (flippedString *= lowercase(letter)) : (flippedString *= uppercase(letter))\n\
    \    end\n    return flippedString\nend\n```", "    out_string = \"\"\n    for\
    \ char in string\n        if char in lowercase(string)\n            char = uppercase(char)\n\
    \        elseif char in uppercase(string)\n            char = lowercase(char)\n\
    \        end\n        out_string = string(out_string, char)\n    end\n    return\
    \ out_string\nend", "    str = replace(replace(string, \"A\", \"a\"), \"a\", \"\
    A\")\n    str = replace(replace(str, \"B\", \"b\"), \"b\", \"B\")\n    str = replace(replace(str,\
    \ \"C\", \"c\"), \"c, \"C\")\n    str = replace(replace(str, \"D\", \"d\"), \"\
    d\", \"D\")\n    str = replace(replace(str, \"E\", \"e\"), \"e\", \"E\")\n   \
    \ str = replace(replace(str, \"F\", \"f\"), \"f\", \"F\")\n    str = replace(replace(str,\
    \ \"G\", \"g\"), \"g\", \"G\")\n    str = replace(replace(str, \"H\", \"h\"),\
    \ \"h\", \"H\")\n    str = replace(replace(str, \"I\", \"i\"), \"i\", \"I\")\n\
    \    str = replace(replace(str, \"J\", \"j\"), \"j\", \"J\")\n    str = replace(replace(str,\
    \ \"K\", \"k\"), \"k\", \"K\")\n    str = replace(replace(str, \"L\", \"l\"),\
    \ \"l\", \"L\")\n    str = replace(replace(str, \"M\", \"m\"), \"m\", \"M\")\n\
    \    str = replace(replace(str, \"N\", \"n\"), \"n\", \"N\")\n    str = replace(replace(str,\
    \ \"O\", \"o\"), \"o\", \"O\")\n    str = replace(replace(str, \"P\", \"p\"),\
    \ \"p\", \"P\")\n    str = replace(replace(str, \"Q\", \"q\"), \"q\", \"Q\")\n\
    \    str = replace(replace(str, \"R\", \"r\"), \"r\", \"R\")\n    str = replace(replace(str,\
    \ \"S\", \"s\"), \"s\", \"S\")\n    str = replace(replace(str, \"T\", \"t\"),\
    \ \"t\", \"T\")\n    str = replace(replace(str, \"U\", \"u\"), \"u\", \"U\")\n\
    \    str = replace(replace(str, \"V\", \"v\"), \"v\", \"V\")\n    str = replace(replace(str,\
    \ \"W\", \"w\"), \"w\", \"W\")\n    str = replace(", "    new_string = \"\"\n\
    \    for character in string\n        if islower(character)\n            append!(new_string,\
    \ uppercase(character))\n        elseif isupper(character)\n            append!(new_string,\
    \ lowercase(character))\n        else\n            append!(new_string, character)\n\
    \        end\n    end\n    return new_string\nend", "    flipped_string = \"\"\
    \n    for i in string\n        if uppercase(i)\n            push!(flipped_string,\
    \ lowercase(i))\n        else\n            push!(flipped_string, uppercase(i))\n\
    \        end\n    end\n    return flipped_string\nend", "    flipped_string =\
    \ \"\"\n    for character in string\n        if isa(character, String)\n     \
    \       if character in (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n                flipped_string\
    \ = flipped_string * string(character[1]) \n            elseif character in (\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n                flipped_string = flipped_string * string(character[1])\
    \ \n            else\n                flipped_string = flipped_string * character\n\
    \            end\n        end\n    end\n    return flipped_string\nend", "   \
    \ new_string = \"\"\n    for letter in string\n        if islower(letter)\n  \
    \          new_string = new_string * uppercase(letter)\n        else\n       \
    \     new_string = new_string * lowercase(letter)\n    end\n    return new_string\n\
    end", "    string = upper(string)\n    string = lower(string)\n    return string\n\
    end", "    return [upper(c) ? c : lower(c) for c in string]\nend", "    return_string\
    \ = \"\"\n    for letter in string\n        if letter in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            return_string = return_string * (letter::String * string(\"abcdefghijklmnopqrstuvwxyz\"\
    ))\n        elseif letter in string(\"abcdefghijklmnopqrstuvwxyz\")\n        \
    \    return_string = return_string * (letter::String * string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n        else\n            return_string = return_string * letter\n       \
    \ end\n    end\n    return return_string\nend", "    new_string = \"\"\n    for\
    \ character in string\n        if islower(character)\n            push!(new_string,\
    \ uppercase(character))\n        elseif isupper(character)\n            push!(new_string,\
    \ lowercase(character))\n        else\n            push!(new_string, character)\n\
    \        end\n    end\n    return new_string\nend", "    new_string = \"\"\n \
    \   for c in string\n        if isalpha(c) == false\n            push!(new_string,\
    \ c)\n        elseif c == uppercase(c)\n            push!(new_string, lowercase(c))\n\
    \        elseif c == lowercase(c)\n            push!(new_string, uppercase(c))\n\
    \        end\n    end\n    return new_string\nend", "    nstring = \"\"\n    for\
    \ ch in string\n        if ch in lowercase\n            push!(nstring, uppercase[lowercase\
    \ .== ch])\n        elseif ch in uppercase\n            push!(nstring, lowercase[uppercase\
    \ .== ch])\n        else\n            push!(nstring, ch)\n        end\n    end\n\
    \    return nstring\nend", "    s = string\n    for i in 1:length(s)\n       \
    \ if (s[i] <= 'Z') & (s[i] >= 'A')\n            s[i] = lowercase(s[i])\n     \
    \   elseif (s[i] <= 'z') & (s[i] >= 'a')\n            s[i] = uppercase(s[i])\n\
    \        end\n    end\n    return s\nend", "    out = \"\"\n    for i = 1:length(string)\n\
    \        c = string[i]\n        if islower(c)\n            c = uppercase(c)\n\
    \        elseif isupper(c)\n            c = lowercase(c)\n        end\n      \
    \  out *= c\n    end\n    return out\nend", "    newstring = \"\"\n    for c in\
    \ string\n        if c in \"A\"*\"Z\"\n            newstring *= c\n        elseif\
    \ c in \"a\"*\"z\"\n            newstring *= uppercase(c)\n        else\n    \
    \        newstring *= c\n        end\n    end\n    return newstring\nend\n \n\
    \ \n\"\"\" For a given number of size n, print the first n even numbers from 1.\n\
    \    >>> print_evens(5)\n    2\n    4\n    6\n    8\n    10\n    \"\"\"", "  \
    \  char_list = [char in string]\n    flip_char_list = []\n    for char in char_list\n\
    \        if char in lowercase_letters\n            append(flip_char_list, char\
    \ in uppercase_letters)\n        else\n            append(flip_char_list, char\
    \ in lowercase_letters)\n    end\n    string = join(flip_char_list)\n    return\
    \ string\nend", "    new_string = \"\"\n    for letter in string\n        if islower(letter)\n\
    \            push!(new_string, toupper(letter))\n        else\n            push!(new_string,\
    \ tolower(letter))\n        end\n    end\n    return new_string\nend", "    string2\
    \ = \"\" \n    for x in string \n        if x in lowercase(string) \n        \
    \    string2 *= uppercase(x) \n        elseif x in uppercase(string) \n      \
    \      string2 *= lowercase(x) \n        else \n            string2 *= x \n  \
    \  end \n    return string2 \nend", "    return string.swapcase()\nend", "   \
    \ newString = \"\"\n    for letter in string\n        if letter in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            newString = newString * string(letter)\n        elseif letter in\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            newString = newString * string(letter)\n\
    \    end\n    return newString\nend", "    for (i,c) in enumerate(string)\n  \
    \      if c in (upper_alphabet)\n            string[i] = lowercase(c)\n      \
    \  elseif c in (lower_alphabet)\n            string[i] = uppercase(c)\n      \
    \  end\n    end\n    return string\nend", "    flipped_case = \"\"\n    for c\
    \ in string\n        if islower(c)\n            flipped_case *= uppercase(c)\n\
    \        elseif isupper(c)\n            flipped_case *= lowercase(c)\n       \
    \ else\n            flipped_case *= c\n        end\n    end\n    return flipped_case\n\
    end", "    flipped = []\n    for char in string\n        new_char = lowercase(char)\
    \ ? uppercase(char) : lowercase(char)\n        push!(flipped, new_char)\n    end\n\
    \    return string(flipped)\nend", "    new_string = \"\"\n    for i in range(length(string))\n\
    \        if islower(string[i])\n            new_string = new_string * string[i]\n\
    \        elseif isupper(string[i])\n            new_string = new_string * lowercase(string[i])\n\
    \        else\n            new_string = new_string * string[i]\n        end\n\
    \    end\n    return new_string\nend", "    flipped = String[]\n    for i in string\n\
    \        if islower(i)\n            push!(flipped, uppercase(i))\n        else\n\
    \            push!(flipped, lowercase(i))\n        end\n    end\n    return join(flipped)\n\
    end", "    string_arr = split(string, \"\")\n    for letter in string_arr\n  \
    \      if islower(letter)\n            uppercase!(letter)\n        else\n    \
    \        lowercase!(letter)\n        end\n    end\n    return join(string_arr,\
    \ \"\")\nend", "    new_string = \"\"\n    for i in string\n        uppercase(i)\
    \ ? push!(new_string, lowercase(i)) : push!(new_string, uppercase(i))\n    end\n\
    \    return new_string\nend", "    for i=1:length(string)\n        if isupper(string[i])\n\
    \            string[i] = lowercase(string[i])\n        elseif islower(string[i])\n\
    \            string[i] = uppercase(string[i])\n        end\n    end\n    return\
    \ string\nend", "    string = lowercase(string)\n    string = uppercase(string)\n\
    \    string\nend", "    \n    flipped_string = \"\"\n    \n    for letter in string\n\
    \        \n        if (islower(letter))\n            push!(flipped_string, uppercase(letter))\n\
    \        elseif(isupper(letter))\n            push!(flipped_string, lowercase(letter))\n\
    \        else\n            push!(flipped_string, letter)\n        end\n    end\n\
    \    \n    return flipped_string\nend", "    #string = bytearray(string)\n   \
    \ for i in string\n        if i == i.lowercase\n            string[i] = i.uppercase\n\
    \        elseif i == i.uppercase\n            string[i] = i.lowercase\n      \
    \  end\n    end\n    return string\nend", "    str = \"\"\n    for letter in string\n\
    \        if letter == islower(letter)\n            str = push!(str,uppercase(letter))\n\
    \        else\n            str = push!(str,lowercase(letter))\n        end\n \
    \   end\n    return str\nend", "    flipped_string = \"\"\n    for char in string\n\
    \        if islower(char)\n            push!(flipped_string, uppercase(char))\n\
    \        elseif isupper(char)\n            push!(flipped_string, lowercase(char))\n\
    \        else\n            push!(flipped_string, char)\n        end\n    end\n\
    \    return flipped_string\nend", "    new_string = \"\"\n    for c in string\n\
    \        if uppercase(c)\n            new_string *= lowercase(c)\n        elseif\
    \ lowercase(c)\n            new_string *= uppercase(c)\n        else\n       \
    \     new_string *= c\n        end\n    end\n    return new_string\nend", "  \
    \  new_string = ''\n    for c in string\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            new_string = new_string * c*lowercase(c)\n        elseif c in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            new_string = new_string * c*uppercase(c)\n        else\n        \
    \    new_string = new_string * c\n        end\n    end\n    return new_string\n\
    end", "    new_string = \"\"\n    for char in string\n        if islower(char)\n\
    \            push!(new_string, toupper(char))\n        elseif isupper(char)\n\
    \            push!(new_string, tolower(char))\n        else\n            push!(new_string,\
    \ char)\n        end\n    end\n    return new_string\nend", "    for i in 1:length(string)\n\
    \        if islower(string[i])\n            string[i] = uppercase(string[i])\n\
    \        elseif isupper(string[i])\n            string[i] = lowercase(string[i])\n\
    \        end\n    end\n    return string\nend", "    string_flipped = string[]\n\
    \    for i in 1:length(string)\n        if islower(string[i]) == true\n      \
    \      string_flipped[i] = uppercase(string[i])\n        else\n            string_flipped[i]\
    \ = lowercase(string[i])\n        end\n    end\n    return string_flipped\nend\n\
    \ \nstring_flipped = flip_case(\"SopHia\")\nprintln(string_flipped)\n    ", " \
    \   for char in string\n        if char \u2208 lowercase letters\n           \
    \ uppercase(char)\n        elseif char \u2208 uppercase letters\n            lowercase(char)\n\
    \        else\n            char\nend\nend ", "    filtered_string = filter(isletter,\
    \ string)\n    flipped_string = map(flip_letters, filtered_string)\n    return\
    \ join(flipped_string)\nend", "   flipped_string = uppercase(string)\n   flipped_string\
    \ = lowercase(flipped_string)\n   return flipped_string\nend", "    for i in string\
    \ \n        if i.islower()\n            i = i.upper()\n        else \n       \
    \     i = i.lower()\n    end\nend\n\"\"\"\nTake two arrays of integers and find\
    \ the difference between their products.\nAssume there are no repeated numbers.",
  "  str = \"\"\n  for char in string\n    if char in string(char,i) \u2208 string.islower(char,i)\n\
    \      str = string(char,i).upper()\n      string.replace(string(char,i),str)\n\
    \    elseif char in string(char,i) \u2208 string.isupper(char,i)\n      str =\
    \ string(char,i).lower()\n      string.replace(string(char,i),str)\n    end\n\
    \  end\n  print(string)\nend", "    return join(lowercase(string).*uppercase(string))\n\
    end", "   new_string = ''\n   for char in string\n       if islower(char)\n  \
    \         new_string = new_string * char2str(char2int(char)-32)\n       elseif\
    \ isupper(char)\n           new_string = new_string * char2str(char2int(char)+32)\n\
    \       else\n           new_string = new_string * char2str(char2int(char))\n\
    \       end\n   end\n   return new_string\nend", "    new_string = \"\"\n    for\
    \ i in string\n        if i in \"abcdefghijklmnopqrstuvwxyz\"\n            new_string\
    \ = new_string * i\n        else\n            new_string = new_string * i\n  \
    \  end\n    return new_string\nend", "    flipped_string = \"\"\n    for letter\
    \ in string\n        if isalpha(letter)\n            if islower(letter)\n    \
    \            append!(flipped_string, uppercase(letter))\n            else\n  \
    \              append!(flipped_string, lowercase(letter))\n            end\n \
    \       else\n            append!(flipped_string, letter)\n        end\n    end\n\
    \    return flipped_string\nend", "    new_string = \"\"\n    for x in string\n\
    \        if x in string(islower())\n            new_string = new_string * x.upper()\n\
    \        elseif x in string(isupper())\n            new_string = new_string *\
    \ x.lower()\n        else\n            new_string = new_string * x\n        end\n\
    \    end\n    return new_string\nend\n\"\"\" For a given string, return the sum\
    \ of ASCII values of each character in the string.\n    >>> ascii_sum('Hello')\n\
    \    500\n    \"\"\"", "    flipped_str = \"\"\n    for i in 1:length(string)\n\
    \        letter = string[i]\n        # Check if letter is already lowercase \n\
    \        if letter == lowercase(letter)\n            flipped_str = flipped_str\
    \ * uppercase(letter)\n        else\n            flipped_str = flipped_str * lowercase(letter)\n\
    \        end\n    end\n    return flipped_str\nend", "    modified_string = \"\
    \"\n    for character in string\n        if(islower(character))\n            modified_string\
    \ = modified_string * uppercase(character)\n        else\n            modified_string\
    \ = modified_string * lowercase(character)\n        end\n    end\n    return modified_string\n\
    end", "    string = convert(Char, string)\n    for i in 1:length(string)\n   \
    \     if islower(string[i])\n            string[i] = string[i] | ' '\n       \
    \ elseif isupper(string[i])\n            string[i] = string[i] & '_'\n       \
    \ end\n    end\n    return string\nend", "    for character in string\n      \
    \  if character == character.lowercase\n            character = character.uppercase\n\
    \        else\n            character = character.lowercase\n    end\n    return\
    \ character\nend\nend", "  string = replace(string, r\"a\", \"A\")\n  string =\
    \ replace(string, r\"b\", \"B\")\n  string = replace(string, r\"c\", \"C\")\n\
    \  string = replace(string, r\"d\", \"D\")\n  string = replace(string, r\"e\"\
    , \"E\")\n  string = replace(string, r\"f\", \"F\")\n  string = replace(string,\
    \ r\"g\", \"G\")\n  string = replace(string, r\"h\", \"H\")\n  string = replace(string,\
    \ r\"i\", \"I\")\n  string = replace(string, r\"j\", \"J\")\n  string = replace(string,\
    \ r\"k\", \"K\")\n  string = replace(string, r\"l\", \"L\")\n  string = replace(string,\
    \ r\"m\", \"M\")\n  string = replace(string, r\"n\", \"N\")\n  string = replace(string,\
    \ r\"o\", \"O\")\n  string = replace(string, r\"p\", \"P\")\n  string = replace(string,\
    \ r\"q\", \"Q\")\n  string = replace(string, r\"r\", \"R\")\n  string = replace(string,\
    \ r\"s\", \"S\")\n  string = replace(string, r\"t\", \"T\")\n  string = replace(string,\
    \ r\"u\", \"U\")\n  string = replace(string, r\"v\", \"V\")\n  string = replace(string,\
    \ r\"w\", \"W\")\n  string = replace(string, r\"x\", \"X\")\n  string = replace(string,\
    \ r\"y\", \"Y\")\n  string = replace(string, r\"z\", \"Z\")\n  string = replace(string,\
    \ r\"A\", \"a\")\n  string = replace(string, r\"B\", \"b\")\n  string = replace(string,\
    \ r\"C\", \"c\")\n  string = replace(string, r\"D\", \"d\")\n  string = replace(string,\
    \ r\"E\", \"e\")\n  string = replace(string, r\"F\", \"f\")\n  string = replace(string,\
    \ r\"G\", \"g\")\n  string = replace(string, r\"H\", \"h\")\n ", "    # Convert\
    \ string to char array\n    arr = collect(string)\n    for i in 1:length(arr)\n\
    \        # If character is uppercase\n        if isupper(arr[i])\n           \
    \ # Convert to lowercase\n            arr[i] = lowercase(arr[i])\n        else\n\
    \            # Convert to uppercase\n            arr[i] = uppercase(arr[i])\n\
    \        end\n    end\n    join(arr)\nend", "    return string |> uppercase |>\
    \ lowercase\nend", "    if length(string) == 0\n        return \"\"\n    elseif\
    \ islower(string[1])\n        return uppercase(string[1]) * flip_case(string[2:end])\n\
    \    else\n        return lowercase(string[1]) * flip_case(string[2:end])\n  \
    \  end\nend", "    return replace(string, \n        r\"\\p{Lu}\", \n        function(matched_string)\n\
    \            return lowercase(matched_string)\n        end\n    )\nend", "   \
    \ string = string.lower()\n    string = string.upper()\n    return string\nend",
  "    string[1] = lowercase(string[1])\n    return string\nend", "    new_string\
    \ = \"\"\n    for c \u2208 string\n        if islower(c)\n            append!(new_string,\
    \ uppercase(c))\n        elseif isupper(c)\n            append!(new_string, lowercase(c))\n\
    \        else\n            append!(new_string, c)\n        end\n    end\n    return\
    \ new_string\nend", "    out = \"\"\n    for char in string\n        if char in\
    \ lowercase(string)\n            out = out * uppercase(char)\n        elseif char\
    \ in uppercase(string)\n            out = out * lowercase(char)\n        else\n\
    \            out = out * char\n        end\n    end\n    return out\nend", " \
    \   new_string = \"\"\n    for i in string\n        if i in string(\"A\"::String):\n\
    \            new_string = push!(new_string, i)\n        elseif i in string(\"\
    a\"::String):\n            new_string = push!(new_string, string(\"A\"::String))\n\
    \        elseif i in string(\"B\"::String):\n            new_string = push!(new_string,\
    \ i)\n        elseif i in string(\"b\"::String):\n            new_string = push!(new_string,\
    \ string(\"B\"::String))\n        elseif i in string(\"C\"::String):\n       \
    \     new_string = push!(new_string, i)\n        elseif i in string(\"c\"::String):\n\
    \            new_string = push!(new_string, string(\"C\"::String))\n        elseif\
    \ i in string(\"D\"::String):\n            new_string = push!(new_string, i)\n\
    \        elseif i in string(\"d\"::String):\n            new_string = push!(new_string,\
    \ string(\"D\"::String))\n        elseif i in string(\"E\"::String):\n       \
    \     new_string = push!(new_string, i)\n        elseif i in string(\"e\"::String):\n\
    \            new_string = push!(new_string, string(\"E\"::String))\n        elseif\
    \ i in string(\"F\"::String):\n            new_string = push!(new_string, i)\n\
    \        elseif i in string(\"f\"::String):\n            new_string = push!(new_string,\
    \ string(\"F\"::String))\n        elseif i in string(\"G\"::String):\n       \
    \     new_string = push!(new_string, i)\n        elseif i in string(\"g\"::String):\n\
    \            new_string = push!(new_string, string(\"G\"::String))\n        elseif\
    \ i in string(\"H\"::String):\n            new_string = push!(new_string, i)\n\
    \        elseif i in string(\"h\"::String):\n            new_string = push!(new_string,\
    \ string(\"H\"::String))\n        elseif i in string(\"I\"::String", "    for\
    \ i in range(length(string))\n        string[i] = islower(string[i]) ? uppercase(string[i])\
    \ : lowercase(string[i])\n    end\n    return string\nend", "    flipped = Char[]\n\
    \    for i in string\n        if islower(i)\n            append!(flipped, uppercase(i))\n\
    \        elseif isupper(i)\n            append!(flipped, lowercase(i))\n     \
    \   else\n            append!(flipped, i)\n        end\n    end\n    return flipped\n\
    end", "    string = flipud(string)\n    return string\nend", "    \n    #Create\
    \ variables to store the output\n    output_string = \"\"\n    \n    #Go through\
    \ each character in the string\n    for char in string\n        \n        #If\
    \ the character is uppercase\n        if char in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            \n            #Add the lowercase character to the output\n    \
    \        push!(output_string, char)\n            \n        #If the character is\
    \ lowercase    \n        elseif char in string(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            \n            #Add the uppercase character to the output\n    \
    \        push!(output_string, char)\n            \n        #Else    \n       \
    \ else\n            \n            #Ignore it\n            continue\n         \
    \   \n        end\n        \n    end\n    \n    #Return the output\n    return\
    \ output_string\nend", "    string.swapcase()\nend", "    string_modified = string\n\
    \    for i in string\n        if i in uppercase(string)\n            i = lowercase(i)\n\
    \            push!(string_modified, i)\n        elseif i in lowercase(string)\n\
    \            i = uppercase(i)\n            push!(string_modified, i)\n       \
    \ end\n    end\n    string_modified\nend", "    output = \"\"\n    for c in string\n\
    \        if c == c |> upper()\n            output *= c |> lower()\n        else\n\
    \            output *= c |> upper()\n        end\n    end\n    return output\n\
    end", "    output = []\n    for i in string\n        if i in lowercase\n     \
    \       push!(output, uppercase[findfirst(lowercase, i)])\n        elseif i in\
    \ uppercase\n            push!(output, lowercase[findfirst(uppercase, i)])\n \
    \       else\n            push!(output, i)\n        end\n    end\n    return join(output)\n\
    end", "    out = \"\"\n    for c in string\n        if c == c in uppercase(c)\n\
    \            push!(out,lowercase(c))\n        elseif c == c in lowercase(c)\n\
    \            push!(out,uppercase(c))\n        else\n            push!(out,c)\n\
    \        end\n    end\n    return out\nend", "    res = \"\"\n    for c in string\n\
    \        if islower(c)\n            push!(res, uppercase(c))\n        else\n \
    \           push!(res, lowercase(c))\n        end\n    end\n    return res\nend",
  "    flipped = []\n    for c in string\n        if islower(c)\n            append!(flipped,\
    \ uppercase(c))\n        elseif isupper(c)\n            append!(flipped, lowercase(c))\n\
    \        else\n            append!(flipped, c)\n        end\n    end\n    return(join(flipped))\n\
    end\nflip_case(\"Hello\")", "    \n    flipped_string = \"\"\n    \n    for char\
    \ in string\n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            flipped_string\
    \ *= string(lowercase(char))\n        elseif char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            flipped_string *= string(uppercase(char))\n        else\n      \
    \      flipped_string *= char\n        end\n    end\n    \n    return flipped_string\n\
    \    \nend", "    for c in string \n        if islower(c) \n            c = toupper(c)\n\
    \        elseif isupper(c) \n            c = tolower(c)\n        end\n    end\n\
    end", "    for i in range(1,length(string))\n        if string[i] == uppercase(string[i])\n\
    \            string[i] = lowercase(string[i])\n        else\n            string[i]\
    \ = uppercase(string[i])\n    end\n    return string\nend", "    flipped = \"\"\
    \n    for c in string\n        if islower(c)\n            push!(flipped, uppercase(c))\n\
    \        else\n            push!(flipped, lowercase(c))\n        end\n    end\n\
    \    return flipped\nend", "    flipped_string = String[]\n    for c in string\n\
    \        if (c == lowercase(c))\n            append!(flipped_string, uppercase(c))\n\
    \        else\n            append!(flipped_string, lowercase(c))\n        end\n\
    \    end\n    return join(flipped_string)\nend", "    return(replace(replace(string,\
    \ r\"[a-z]\", r\"&\"), r\"[A-Z]\", r\"&\"))\nend", "    new_string = \"\"\n  \
    \  for i in string\n        if isalpha(i) \n            if islower(i)\n      \
    \          new_string = new_string * uppercase(i)\n            else \n       \
    \         new_string = new_string * lowercase(i)\n        else \n            new_string\
    \ = new_string * i\n        end\n    end\n    return new_string\nend", "    for\
    \ i in eachindex(string)\n        if string[i] in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            string[i] = uppercase(string[i])\n        elseif string[i] in \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            string[i] = lowercase(string[i])\n \
    \       end\n    end\n    return string\nend", "    new_string = \"\"\n    for\
    \ char in string\n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \
    \    new_string = new_string * char\n        elseif char in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            new_string = new_string * uppercase(char)\n        else\n      \
    \      new_string = new_string * char\n        end\n    end\n    return new_string\n\
    end", "    ret::String = \"\"\n    for i in string\n        if(islower(i))\n \
    \           ret *= uppercase(i)\n        else\n            ret *= lowercase(i)\n\
    \        end\n    end\n    return ret\nend", "    result::String = \"\"\n    for\
    \ i in string\n        if islower(i)\n            result *= uppercase(i)\n   \
    \     elseif isupper(i)\n            result *= lowercase(i)\n        else\n  \
    \          result *= i\n        end\n    end\n    return result\nend", "    return\
    \ [ tolower(c) > c ? tolower(c) : toupper(c) for c in string ]\nend", "    out\
    \ = \"\"\n    for i in string\n        out = string(i)\n        println(out)\n\
    \    end\nend", "    string_out = \"\"\n    for c in string\n        if c in \"\
    abcdefghijklmnopqrstuvwxyz\"\n            push!(string_out, string(uppercase(c)))\n\
    \        elseif c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            push!(string_out,\
    \ string(lowercase(c)))\n        else\n            push!(string_out, c)\n    \
    \    end\n    end\n    return string_out\nend", "    newstring = string[1:end]\n\
    \    if isupper(string[1])\n        return string[1]*islower(newstring)\n    else\n\
    \        return string[1]*isupper(newstring)\nend", "    return string[1:end]\n\
    end", "    \n    for i in 1:length(string)\n        \n        if islower(string[i])\
    \ == true\n            string[i] = uppercase(string[i])\n        elseif isupper(string[i])\
    \ == true\n            string[i] = lowercase(string[i])\n        end\n       \
    \ \n    end\n    \n    return string", "    return string |> replace(/[a-z]/,\
    \ ch -> uppercase(ch)) |> replace(/[A-Z]/, ch -> lowercase(ch))\nend", "    new\
    \ = String[]\n    for character in string\n        if character.islower()\n  \
    \          push!(new, character.upper())\n        elseif character.isupper()\n\
    \            push!(new, character.lower())\n        else\n            push!(new,\
    \ character)\n        end\n    end\n    string = join(new)\n    return string\n\
    end", "    a = \"\"\n    for l in string\n        if l in uppercase(string)\n\
    \            a = a * l * lowercase(l)\n        else\n            a = a * l * uppercase(l)\n\
    \        end\n    end\n    return a\nend", "    string_array = []\n    for character\
    \ in string\n        if character in string(\"abcdefghijklmnopqrstuvwxyz\")\n\
    \            character = uppercase(character)\n        else \n            character\
    \ = lowercase(character)\n        end\n        append!(string_array, character)\n\
    \    end\n    return join(string_array)\nend", "    return map(c -> islower(c)\
    \ ? uppercase(c) : lowercase(c), string)\nend", "    output = \"\"\n    for i\
    \ in string\n        if i == uppercase(i)\n            push!(output, lowercase(i))\n\
    \        else\n            push!(output, uppercase(i))\n        end\n    end\n\
    \    return output\nend", "    for character in string\n        if islower(character)\n\
    \            character = uppercase(character)\n        else\n            character\
    \ = lowercase(character)\n    end\n    return string\nend\n            ", "  \
    \  n = length(string)\n    chararray = collect(string)\n    for i in 1:n\n   \
    \     if  islower(chararray[i])\n            chararray[i] = uppercase(chararray[i])\n\
    \        else\n            chararray[i] = lowercase(chararray[i])\n        end\n\
    \    end\n    newstring = join(chararray)\n    return newstring\nend", "    output\
    \ = []\n    for char in string\n        if char in uppercase(characters(string))\n\
    \            push!(output, lowercase(char))\n        else\n            push!(output,\
    \ uppercase(char))\n        end\n    end\n    return string(output)\nend", " \
    \   str = []\n    for char in string\n        if char == lowercase(char)\n   \
    \         push!(str, uppercase(char))\n        elseif char == uppercase(char)\n\
    \            push!(str, lowercase(char))\n        else\n            push!(str,\
    \ char)\n        end\n    end\n    str = join(str)\n    return str\nend", "  \
    \  for i = 1:length(string)\n        if islower(string[i])\n            string[i]\
    \ = uppercase(string[i])\n        else\n            string[i] = lowercase(string[i])\n\
    \        end\n    end\n    return string\nend", "    for letter in string\n  \
    \      if islower(letter)\n            replace(string,letter,uppercase(letter))\n\
    \        elseif isupper(letter)\n            replace(string,letter,lowercase(letter))\n\
    \        end\n    end\nend\n    ", "    new_string = \"\"\n    for ch in string\n\
    \        if ch in \"abcdefghijklmnopqrstuvwxyz\"\n            new_string = new_string\
    \ * string(ch)[0] * \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        elseif ch in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            new_string = new_string * string(ch)[0] * \"abcdefghijklmnopqrstuvwxyz\"\
    \n        else\n            new_string = new_string * string(ch)[0]\n        end\n\
    \    end\n    return new_string\nend", "    new_string = string |> String.lower\
    \ |> String.capitalize\n    return new_string\nend", "    flipped = []\n    for\
    \ s in string\n        if islower(s)\n            append!(flipped, uppercase(s))\n\
    \        elseif isupper(s)\n            append!(flipped, lowercase(s))\n     \
    \   else\n            append!(flipped, s)\n        end\n    end\n    return join(flipped)\n\
    end", "    flipped_string = \"\"\n    for letter in string\n        letter = Char.lowercase(letter)\
    \ ? uppercase(letter) : lowercase(letter)\n        append!(flipped_string, letter)\n\
    \    end\n    return flipped_string\nend", "    for i in 1:length(string)\n  \
    \      c = string[i]\n        c isletter(c) && (isupper(c) ? (string[i] = lowercase(c))\
    \ : (string[i] = uppercase(c)))\n    end\n    return string\nend", "    new_string\
    \ = \"\"\n    for character in string\n        if islower(character)\n       \
    \     append!(new_string, uppercase(character))\n        elseif isupper(character)\n\
    \            append!(new_string, lowercase(character))\n        else\n       \
    \     append!(new_string, character)\n        end\n    end\n    return new_string\n\
    end", "    for i = 1:length(string)\n        if string[i] == lowercase(string[i])\n\
    \            string[i] = uppercase(string[i])\n        else\n            string[i]\
    \ = lowercase(string[i])\n        end\n    end\n    return string\nend", "   \
    \ string = string.lowercase()\nend", "    new_string = \"\"\n    for i in string\n\
    \        if islower(i)\n            new_string = new_string * uppercase(i)\n \
    \       else\n            new_string = new_string * lowercase(i)\n        end\n\
    \    end\n    return new_string\nend", "    out = \"\"\n    for c in string\n\
    \        if islower(c)\n            out *= uppercase(c)\n        elseif isupper(c)\n\
    \            out *= lowercase(c)\n        else\n            out *= c\n       \
    \ end\n    end\n    return out\nend", "    string[string .== 'A':lower()] .= 'a'\n\
    \    string[string .== 'B':lower()] .= 'b'\n    string[string .== 'C':lower()]\
    \ .= 'c'\n    string[string .== 'D':lower()] .= 'd'\n    string[string .== 'E':lower()]\
    \ .= 'e'\n    string[string .== 'F':lower()] .= 'f'\n    string[string .== 'G':lower()]\
    \ .= 'g'\n    string[string .== 'H':lower()] .= 'h'\n    string[string .== 'I':lower()]\
    \ .= 'i'\n    string[string .== 'J':lower()] .= 'j'\n    string[string .== 'K':lower()]\
    \ .= 'k'\n    string[string .== 'L':lower()] .= 'l'\n    string[string .== 'M':lower()]\
    \ .= 'm'\n    string[string .== 'N':lower()] .= 'n'\n    string[string .== 'O':lower()]\
    \ .= 'o'\n    string[string .== 'P':lower()] .= 'p'\n    string[string .== 'Q':lower()]\
    \ .= 'q'\n    string[string .== 'R':lower()] .= 'r'\n    string[string .== 'S':lower()]\
    \ .= 's'\n    string[string .== 'T':lower()] .= 't'\n    string[string .== 'U':lower()]\
    \ .= 'u'\n    string[string .== 'V':lower()] .= 'v'\n    string[string .== 'W':lower()]\
    \ .= 'w'\n    string[string .== 'X':lower()] .= 'x'\n    string[string .== 'Y':lower()]\
    \ .= 'y'\n    string[string .== 'Z':lower()] .= 'z'\n    string[string .== 'a':lower()]\
    \ .= 'A'\n    string[string .== 'b':lower()] .= 'B'\n    string[string .== '",
  "    newstring = \"\"\n    for character in string\n        if islower(character)\n\
    \            push!(newstring, uppercase(character))\n        else\n          \
    \  push!(newstring, lowercase(character))\n        end\n    end\n    return newstring\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
