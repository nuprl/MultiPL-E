name: HumanEval_8_sum_product
language: jl
results:
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        return\
    \ (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ += number\n        product_ *= number\n    end\n    return (sum_, product_)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # TODO\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqwnsygb4.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == (0, 1)\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Tuple{Int64,\
    \ Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\\\
    n    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_product(numbers::Vector{Int64})\\n     @\
    \ Main /tmp/tmpqwnsygb4.jl:10\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqwnsygb4.jl:16 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqwnsygb4.jl:15\\ntest set:\
    \ Error During Test at /tmp/tmpqwnsygb4.jl:17\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Int64, Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\\\
    n    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_product(numbers::Vector{Int64})\\n     @\
    \ Main /tmp/tmpqwnsygb4.jl:10\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqwnsygb4.jl:17 [inlined]\\"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i = 1:length(numbers)\n     \
    \   sum += numbers[i]\n        product *= numbers[i]\n    end\n    return (sum,\
    \ product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    s = 0\n        p = 1\n        for x in numbers\n            s += x\n    \
    \        p *= x\n        end\n        return (s, p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    prod = 1\n    for number in numbers\n        sum_\
    \ += number\n        prod *= number\n    end\n    return (sum_, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum = 0\n        prod = 1\n        for number in numbers\n            sum\
    \ += number\n            prod *= number\n        end\n        return (sum, prod)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ else\n        return (sum(numbers), prod(numbers))\n    end\nend\n@test sum_product([])\
    \ == (0, 1)\n@test sum_product([1, 2, 3, 4]) == (10, 24)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp415rq82f.jl:16\nin expression starting at /tmp/tmp415rq82f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    total = 0\n    product = 1\n    for i in numbers\n        total\
    \ += i\n        product *= i\n    end\n    return (total, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i = 1:length(numbers)\n     \
    \   sum += numbers[i]\n        product *= numbers[i]\n    end\n    return (sum,\
    \ product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ else\n        sum = numbers[1]\n        product = numbers[1]\n        for i\
    \ = 2:n\n            sum += numbers[i]\n            product *= numbers[i]\n  \
    \      end\n        return (sum, product)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    total_sum = 0\n    total_product = 1\n    for number in numbers\n\
    \        total_sum += number\n        total_product *= number\n    end\n    return\
    \ total_sum, total_product\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s, p = 0, 1\n    for i in numbers\n        s += i\n        p *=\
    \ i\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum_of_numbers = 0\n        product_of_numbers = 1\n        for i in numbers\n\
    \            sum_of_numbers += i\n            product_of_numbers *= i\n      \
    \  end\n        return (sum_of_numbers, product_of_numbers)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for i in numbers\n        s += i\n      \
    \  p *= i\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for number in numbers\n        sum +=\
    \ number\n        prod *= number\n    end\n    return (sum, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i = 1:length(numbers)\n     \
    \   sum += numbers[i]\n        product *= numbers[i]\n    end\n    (sum, product)\n\
    end\nsum_product([1, 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\n    \n\"\"\" For a given\
    \ positive integer k, return the total sum of all integers\n    from 1 to k included,\
    \ that are divisible by 6. \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpcrmkqj8f.jl:12\nin expression starting at /tmp/tmpcrmkqj8f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    product = 1\n    sum = 0\n    for number in numbers\n        product\
    \ *= number\n        sum += number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # empty sum and product\n    @assert sum(numbers) == 0\n    @assert\
    \ prod(numbers) == 1\n    # given sum and product\n    @assert sum(numbers) ==\
    \ 10\n    @assert prod(numbers) == 24\n    return (sum(numbers), prod(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg_oc1vg6.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  AssertionError: sum(numbers)\
    \ == 10\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg_oc1vg6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_oc1vg6.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_oc1vg6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_oc1vg6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  AssertionError: sum(numbers) == 0\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpg_oc1vg6.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_oc1vg6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_oc1vg6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_oc1vg6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  AssertionError: sum(numbers) == 0\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpg_oc1vg6.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_oc1vg6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_oc1vg6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_oc1vg6.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  AssertionError: sum(numbers) == 0\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpg_oc1vg6.jl:10\n\
    \   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_oc1vg6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for i = 1:length(numbers)\n        s += numbers[i]\n\
    \        p *= numbers[i]\n    end\n    return (s, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for num in numbers\n        sum += num\n\
    \        prod *= num\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum, product = 0, 1\n    for number in numbers\n        sum +=\
    \ number\n        product *= number\n    end\n    return sum, product\nend\n \n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n  empty_sum = 0\n  empty_product = 1\n  for i in numbers\n    empty_sum\
    \ += i\n    empty_product *= i\n  end\n  return empty_sum, empty_product\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for num in numbers\n        sum += num\n\
    \        prod *= num\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    temp = 0\n    temp1 = 1\n    for i = 1:length(numbers)\n      \
    \  temp = temp + numbers[i]\n        temp1 = temp1 * numbers[i]\n    end\n   \
    \ return temp, temp1\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # Implementation goes here.\n    return sum(numbers), prod(numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for number in numbers\n        s += number\n\
    \        p *= number\n    end\n    return (s, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers) \n        return (0, 1)\n    else \n      \
    \  return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nsum_product([1,\
    \ 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for number in numbers\n        sum +=\
    \ number\n        prod *= number\n    end\n    return (sum, prod)\nend\nsum_product([1,\
    \ 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for n in numbers\n        s += n\n      \
    \  p *= n\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(Int64)\n    prod = zero(Int64)\n    if isempty(numbers)\n\
    \        return sum, prod\n    end\n    for i in numbers\n        sum += i\n \
    \       prod *= i\n    end\n    return sum, prod\nend\nsum_product([1, 2, 3, 4])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_3g3moe.jl:26\n  Expression: candidate(Vector{Int64}([]))\
    \ == (0, 1)\n   Evaluated: (0, 0) == (0, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu_3g3moe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu_3g3moe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu_3g3moe.jl:27\n  Expression: candidate([1, 1, 1]) == (3,\
    \ 1)\n   Evaluated: (3, 0) == (3, 1)\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu_3g3moe.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu_3g3moe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu_3g3moe.jl:29\n  Expression: candidate([3, 5, 7]) == (15,\
    \ 105)\n   Evaluated: (15, 0) == (15, 105)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu_3g3moe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu_3g3moe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu_3g3moe.jl:30\n  Expression: candidate([10]) == (10, 10)\n\
    \   Evaluated: (10, 0) == (10, 10)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu_3g3moe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu_3g3moe.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_3g3moe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    prod_ = 1\n    for num in numbers\n        sum_ +=\
    \ num\n        prod_ *= num\n    end\n    return (sum_, prod_)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum(numbers) != 0 ? sum(numbers) : 0\n    product(numbers) != 1\
    \ ? product(numbers) : 1\n    (sum(numbers), product(numbers))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp8b5tyc3.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: product\
    \ not defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpp8b5tyc3.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8b5tyc3.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8b5tyc3.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpp8b5tyc3.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpp8b5tyc3.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8b5tyc3.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8b5tyc3.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpp8b5tyc3.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpp8b5tyc3.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp8b5tyc3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp8b5tyc3.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpp8b5tyc3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpp8b5tyc3.jl:10\n\
    \   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8b5tyc3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for number in numbers\n        sum +=\
    \ number\n        prod *= number\n    end\n    return (sum, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n  # acc is a tuple of (sum, product) \n  acc = (0, 1)\n  for num in\
    \ numbers\n    acc = (acc[1] + num, acc[2] * num)\n  end\n  return acc\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    res_tuple = (0, 1)\n    for number in numbers\n        res_tuple\
    \ = add_to_tuple(res_tuple, number)\n    end\n    return res_tuple\nend\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk256li3p.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: add_to_tuple not\
    \ defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpk256li3p.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk256li3p.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk256li3p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpk256li3p.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: add_to_tuple not defined\n\
    \  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpk256li3p.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk256li3p.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk256li3p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpk256li3p.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: add_to_tuple not defined\n\
    \  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpk256li3p.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk256li3p.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk256li3p.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpk256li3p.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([10]) == (10, 10)\n  UndefVarError: add_to_tuple not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpk256li3p."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk256li3p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    total_sum = 0\n    total_product = 1\n    for n in numbers\n  \
    \      total_sum += n\n        total_product *= n\n    end\n    return (total_sum,\
    \ total_product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for x in numbers\n        sum += x\n\
    \        prod *= x\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # Write code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpswub9xqg.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Int64, Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpswub9xqg.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpswub9xqg.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpswub9xqg.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpswub9xqg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Int64, Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpswub9xqg.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpswub9xqg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswub9xqg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        sum_product_tuple\
    \ = (sum(numbers), prod(numbers))\n        return sum_product_tuple\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\n@assert sum_product([])\
    \ == (0, 1)\n@assert sum_product([1, 2, 3, 4]) == (10, 24)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_product(::Vector{Any})\\\
    nClosest candidates are:\\n  sum_product(!Matched::Vector{Int64}) at /tmp/tmpn9rqjwuo.jl:8\\\
    nStacktrace:\\n [1] top-level scope\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    iseven(n) = n % 2 == 0\n    x = sum(numbers)\n    y = 1\n    if\
    \ x == 0\n        y = 1\n    else\n        y = prod(numbers)\n    end\n    return\
    \ (x, y)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum, product = 0, 1\n    for number in numbers\n        sum +=\
    \ number\n        product *= number\n    end\n    return sum, product\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_of_numbers, product_of_numbers = 0, 1\n    for element in numbers\n\
    \        sum_of_numbers += element\n        product_of_numbers *= element\n  \
    \  end\n    return sum_of_numbers, product_of_numbers\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # implement me\nend\n \n# test your code\nassert sum_product([])\
    \ == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n@edit sum_product\n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"sum_product\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrd0fsn0.jl:13\nin expression\
    \ starting at /tmp/tmpsrd0fsn0.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    @inbounds sum = 0\n    @inbounds prod = 1\n    for i = 1:length(numbers)\n\
    \        sum += numbers[i]\n        prod *= numbers[i]\n    end\n    (sum, prod)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum, product = 0, 1\n    for i in numbers\n        sum += i\n \
    \       product *= i\n    end\n    return sum, product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ else\n        s = sum(numbers)\n        p = 1\n        for i = 1:n\n       \
    \     p *= numbers[i]\n        end\n        return (s, p)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = sum(numbers)\n    p = prod(numbers)\n    return (s, p)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    int_sum = 0 \n    int_product = 1 \n    for number in numbers \n\
    \        int_sum += number \n        int_product *= number \n    end \n    return\
    \ int_sum, int_product \nend \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # initialize the variables\n    sum = 0\n    product = 1\n    #\
    \ iterate through the list\n    for i = 1:length(numbers)\n        sum += numbers[i]\n\
    \        product *= numbers[i]\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    out = (0, 1)\n    for number in numbers\n        out[1] += number\n\
    \        out[2] *= number\n    end\n    return out\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptw81zjvf.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 1]) == (3, 1)\n  MethodError: no method matching\
    \ setindex!(::Tuple{Int64, Int64}, ::Int64, ::Int64)\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptw81zjvf.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw81zjvf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw81zjvf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmptw81zjvf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  MethodError: no method matching setindex!(::Tuple{Int64,\
    \ Int64}, ::Int64, ::Int64)\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptw81zjvf.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw81zjvf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw81zjvf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmptw81zjvf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  MethodError: no method matching setindex!(::Tuple{Int64,\
    \ Int64}, ::Int64, ::Int64)\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmptw81zjvf.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptw81zjvf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptw81zjvf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmptw81zjvf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([10]) == (10, 10)"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptw81zjvf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for number in numbers\n        sum +=\
    \ number\n        prod *= number\n    end\n    return (sum, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for i in numbers\n\
    \        sum_of_numbers += i\n        product_of_numbers *= i\n    end\n    return\
    \ sum_of_numbers, product_of_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    \"\"\"\n    For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum =\
    \ 0\n    product = 1\n    for i in numbers\n        sum += i\n        product\
    \ *= i\n    end\n    (sum, product)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i = 1:length(numbers)\n     \
    \   sum += numbers[i]\n        product *= numbers[i]\n    end\n    return (sum,\
    \ product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    \ \nsum_product([])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_product(::Vector{Any})\\\
    nClosest candidates are:\\n  sum_product(!Matched::Vector{Int64}) at /tmp/tmpzebtooxq.jl:8\\\
    nStacktrace:\\n [1] top-level scope\\n   @ /tmp/'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum = 0\n        prod = 1\n        for number in numbers\n            sum\
    \ += number\n            prod *= number\n        end\n        return (sum, prod)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n  total = 0\n  prod = 1\n  for num in numbers\n    total += num\n \
    \   prod *= num\n  end\n  return (total, prod)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0 \n    product = 1\n    for x in numbers\n        sum +=\
    \ x\n        product *= x\n    end\n    return sum, product\nend\nsum_product([])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_product(::Vector{Any})'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(numbers[1])\n    product = one(numbers[1])\n    for\
    \ num in numbers\n        sum += num\n        product *= num\n    end\n    return\
    \ (sum, product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9y_fes9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpe9y_fes9.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe9y_fes9.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe9y_fes9.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9y_fes9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n \n    sum = 0\n    product = 1\n    \n    for i in numbers\n     \
    \   sum += i\n        product *= i\n    end\n    \n    return sum, product\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum = 0\n        prod = 1\n        for number in numbers\n            sum\
    \ += number\n            prod *= number\n        end\n        return (sum, prod)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp1zlad4_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Tuple{Int64, Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp1zlad4_.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1zlad4_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1zlad4_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpp1zlad4_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Tuple{Int64, Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:336\n\
    \    convert(::Type{T}, !Matched::Tuple{Vararg{Any, N}}) where {N, T<:Tuple} at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:337\n    convert(::Type{T},\
    \ !Matched::CartesianIndex) where T<:Tuple at /shared/centos7/julia/1.7.3/share/julia/base/multidimensional.jl:137\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpp1zlad4_.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1zlad4_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1zlad4_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum, product = 0, 1\n    for n in numbers\n        sum += n\n \
    \       product *= n\n    end\n    return sum, product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum, product = 0, 1\n    for i in numbers\n        sum += i\n \
    \       product *= i\n    end\n    return sum, product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # write your code here\n    return (0,1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbc03nq45.jl:18\n  Expression: candidate([1,\
    \ 1, 1]) == (3, 1)\n   Evaluated: (0, 1) == (3, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc03nq45.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc03nq45.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc03nq45.jl:19\n  Expression: candidate([100, 0]) == (100,\
    \ 0)\n   Evaluated: (0, 1) == (100, 0)\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbc03nq45.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc03nq45.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc03nq45.jl:20\n  Expression: candidate([3, 5, 7]) == (15,\
    \ 105)\n   Evaluated: (0, 1) == (15, 105)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc03nq45.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc03nq45.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbc03nq45.jl:21\n  Expression: candidate([10]) == (10, 10)\n\
    \   Evaluated: (0, 1) == (10, 10)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbc03nq45.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbc03nq45.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbc03nq45.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_value = 0\n    product_value = 1\n    for number in numbers\n\
    \        sum_value += number\n        product_value *= number\n    end\n    return\
    \ (sum_value, product_value)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for n in numbers\n        s += n\n      \
    \  p *= n\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ else\n        return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum = 0\n        product = 1\n        for number in numbers\n           \
    \ sum += number\n            product *= number\n        end\n        return (sum,\
    \ product)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    #use sum() and prod() functions\n    return (sum(numbers), prod(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for num in numbers\n        s += num\n  \
    \      p *= num\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for num in numbers\n        sum += num\n\
    \        prod *= num\n    end\n    return (sum, prod)\nend\nsum_product([1, 2,\
    \ 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(numbers[1])\n    prod = one(numbers[1])\n    for n in\
    \ numbers\n        sum += n\n        prod *= n\n    end\n    return (sum, prod)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkzi8e8ul.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpkzi8e8ul.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzi8e8ul.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzi8e8ul.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzi8e8ul.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\n@assert sum_product([])\
    \ == (0, 1)\n@assert sum_product([1, 2, 3, 4]) == (10, 24)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching sum_product(::Vector{Any})\\\
    nClosest candidates are:\\n  sum_product(!Matched::Vector{Int64}) at /tmp/tmpfuptvevt.jl:8\\\
    nStacktrace:\\n [1] top-level scope\\n   @ /tmp/'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum(numbers) == 0 && prod(numbers) == 1 ? (0, 1) : (sum(numbers),\
    \ prod(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum::Int64 = 0\n    product::Int64 = 1\n    for num in numbers\n\
    \        sum += num\n        product *= num\n    end\n    return (sum, product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        return\
    \ (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum::Int64 = 0\n    prod::Int64 = 1\n    for num in numbers\n \
    \       sum += num\n        prod *= num\n    end\n    return (sum, prod)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = sum(numbers)\n    product = prod(numbers)\n    return (sum,\
    \ product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4xzc8s5k.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: sum not\
    \ defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp4xzc8s5k.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xzc8s5k.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xzc8s5k.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4xzc8s5k.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp4xzc8s5k.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xzc8s5k.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xzc8s5k.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4xzc8s5k.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp4xzc8s5k.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xzc8s5k.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xzc8s5k.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4xzc8s5k.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp4xzc8s5k.jl:9\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xzc8s5k.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = sum(numbers)\n    product = prod(numbers)\n    tuple = (sum,\
    \ product)\n    return tuple\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6h4ih9wi.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: sum not\
    \ defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6h4ih9wi.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h4ih9wi.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h4ih9wi.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6h4ih9wi.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp6h4ih9wi.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h4ih9wi.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h4ih9wi.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6h4ih9wi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp6h4ih9wi.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6h4ih9wi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6h4ih9wi.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6h4ih9wi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp6h4ih9wi.jl:9\n\
    \   [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6h4ih9wi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for number in numbers\n        sum +=\
    \ number\n        prod *= number\n    end\n    return (sum, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    local sum::Int64 = 0\n    local product::Int64 = 1\n    for number\
    \ in numbers\n        sum += number\n        product *= number\n    end\n    return\
    \ (sum, product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    total = 0\n    product = 1\n    for num in numbers\n        total\
    \ += num\n        product *= num\n    end\n    return (total, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if numbers == []\n        return (0, 1)\n    else\n        return\
    \ (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), product(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnosmlod4.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: product\
    \ not defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmpnosmlod4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnosmlod4.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnosmlod4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnosmlod4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpnosmlod4.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnosmlod4.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnosmlod4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnosmlod4.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpnosmlod4.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnosmlod4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnosmlod4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnosmlod4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmpnosmlod4.jl:9\n\
    \   [2] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnosmlod4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # write your code here\n    return (0, 1)\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2vl_wipg.jl:19\n  Expression: candidate([1,\
    \ 1, 1]) == (3, 1)\n   Evaluated: (0, 1) == (3, 1)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2vl_wipg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2vl_wipg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp2vl_wipg.jl:20\n  Expression: candidate([100, 0]) == (100,\
    \ 0)\n   Evaluated: (0, 1) == (100, 0)\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2vl_wipg.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2vl_wipg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp2vl_wipg.jl:21\n  Expression: candidate([3, 5, 7]) == (15,\
    \ 105)\n   Evaluated: (0, 1) == (15, 105)\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2vl_wipg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2vl_wipg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp2vl_wipg.jl:22\n  Expression: candidate([10]) == (10, 10)\n\
    \   Evaluated: (0, 1) == (10, 10)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2vl_wipg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2vl_wipg.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vl_wipg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_prod = (sum(numbers), product(numbers))\n    return sum_prod\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3jbrejzc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  UndefVarError: product\
    \ not defined\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n   \
    \  @ Main /tmp/tmp3jbrejzc.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jbrejzc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jbrejzc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3jbrejzc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1]) == (3, 1)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp3jbrejzc.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jbrejzc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jbrejzc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3jbrejzc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp3jbrejzc.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3jbrejzc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3jbrejzc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp3jbrejzc.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 7]) == (15, 105)\n  UndefVarError: product not defined\n  Stacktrace:\n\
    \   [1] sum_product(numbers::Vector{Int64})\n     @ Main /tmp/tmp3jbrejzc.jl:9\n\
    \   [2] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jbrejzc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    prod = 1\n    for number in numbers\n        sum_\
    \ += number\n        prod *= number\n    end\n    return (sum_, prod)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s, p = 0, 1\n    for num in numbers\n        s += num\n       \
    \ p *= num\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for number in numbers\n        s += number\n\
    \        p *= number\n    end\n    return (s, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s, p = 0, 1\n    for n in numbers\n        s += n\n        p *=\
    \ n\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = sum(numbers)\n    p = prod(numbers)\n    res = (s, p)\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return sum(numbers), prod(numbers)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for x in numbers\n        sum +=\
    \ x\n        product *= x\n    end\n    return sum, product\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return(sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    s = 0\n        p = 1\n        for i in numbers\n            s += i\n    \
    \        p *= i\n        end\n        return (s, p)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = zero(numbers[1])\n    prod_ = one(numbers[1])\n    for num\
    \ in numbers\n        sum_ += num\n        prod_ *= num\n    end\n    return (sum_,\
    \ prod_)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd5i_bypt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpd5i_bypt.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd5i_bypt.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd5i_bypt.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5i_bypt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    \"\"\" @brief Sums and multiplies numbers.\n    @param numbers\
    \ A vector of integers.\n    @return A tuple with the sum and product of the numbers.\n\
    \    \"\"\"\n    # Base case, return a zero sum and one product for empty list\n\
    \    if isempty(numbers)\n        return (0, 1)\n    end\n    \n    # Recursive\
    \ case, add the next element of the list to the sum and\n    # multiply the next\
    \ element by the product\n    # The reduction functions can be replaced by + and\
    \ *, but I found\n    # this to be clearer and easier to understand\n    return\
    \ (reduce(sum, numbers[1], numbers[2:end]),\n            reduce(prod, numbers[1],\
    \ numbers[2:end]))\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpepglxcj5.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 1]) == (3, 1)\n  MethodError: no method matching\
    \ reduce(::typeof(sum), ::Int64, ::Vector{Int64})\n  Closest candidates are:\n\
    \    reduce(::Any, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n\
    \    reduce(::Any, ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpepglxcj5.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpepglxcj5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpepglxcj5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpepglxcj5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  MethodError: no method matching reduce(::typeof(sum),\
    \ ::Int64, ::Vector{Int64})\n  Closest candidates are:\n    reduce(::Any, ::Number)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:460\n    reduce(::Any,\
    \ ::Any; kw...) at /shared/centos7/julia/1.7.3/share/julia/base/reduce.jl:458\n\
    \    reduce(::Any, !Matched::SharedArrays.SharedArray) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SharedArrays/src/SharedArrays.jl:569\n\
    \    ...\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n     @ Main\
    \ /tmp/tmpepglxcj5.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpepglxcj5.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpepglxcj5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpep"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepglxcj5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        sum\
    \ = 0\n        prod = 1\n        for i in numbers\n            sum += i\n    \
    \        prod *= i\n        end\n        return (sum, prod)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        return\
    \ (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    @assert !isempty(numbers) \"List must not be empty\"\n    sum =\
    \ 0\n    product = 1\n    for number in numbers\n        sum += number\n     \
    \   product *= number\n    end\n    return (sum, product)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpij2ekem6.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == (0, 1)\n  AssertionError: List\
    \ must not be empty\n  Stacktrace:\n   [1] sum_product(numbers::Vector{Int64})\n\
    \     @ Main /tmp/tmpij2ekem6.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpij2ekem6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpij2ekem6.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij2ekem6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        sum\
    \ = reduce(+, numbers)\n        product = reduce(*, numbers)\n        return (sum,\
    \ product)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return sum, prod\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n  sum = 0\n  product = 1\n  for x in numbers\n    sum += x\n    product\
    \ *= x\n  end\n  return (sum, product)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for n in numbers\n        s += n\n      \
    \  p *= n\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ else\n        s = 0\n        p = 1\n        for i in 1:n\n            s += numbers[i]\n\
    \            p *= numbers[i]\n        end\n        return (s, p)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for n in numbers\n        s += n\n      \
    \  p *= n\n    end\n    (s, p)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for num in numbers\n        s += num\n  \
    \      p *= num\n    end\n    return (s, p)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i = 1:length(numbers)\n     \
    \   sum += numbers[i]\n        product *= numbers[i]\n    end\n    return (sum,\
    \ product)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum::Int64 = 0\n    product::Int64 = 1\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    end\n    return (sum, product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # Note that this is best-effort and may suffer from overflow\n\
    \    if isempty(numbers)\n        return (0, 1)\n    else\n        return reduce((x,\
    \ y) -> (x[1] + y, x[2] * y), numbers)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpf9w9rs6w.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 1]) == (3, 1)\n  BoundsError\n  Stacktrace:\n\
    \    [1] getindex\n      @ ./number.jl:98 [inlined]\n    [2] #1\n      @ /tmp/tmpf9w9rs6w.jl:13\
    \ [inlined]\n    [3] _mapreduce(f::typeof(identity), op::var\"#1#2\", #unused#::IndexLinear,\
    \ A::Vector{Int64})\n      @ Base ./reduce.jl:410\n    [4] _mapreduce_dim\n  \
    \    @ ./reducedim.jl:330 [inlined]\n    [5] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [6] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n    [7]\
    \ #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n    [8] reduce\n      @ ./reducedim.jl:371\
    \ [inlined]\n    [9] sum_product(numbers::Vector{Int64})\n      @ Main /tmp/tmpf9w9rs6w.jl:13\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpf9w9rs6w.jl:22 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpf9w9rs6w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpf9w9rs6w.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([100, 0]) == (100, 0)\n  BoundsError\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./number.jl:98 [inlined]\n    [2] #1\n      @ /tmp/tmpf9w9rs6w.jl:13\
    \ [inlined]\n    [3] _mapreduce(f::typeof(identity), op::var\"#1#2\", #unused#::IndexLinear,\
    \ A::Vector{Int64})\n      @ Base ./reduce.jl:410\n    [4] _mapreduce_dim\n  \
    \    @ ./reducedim.jl:330 [inlined]\n    [5] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [6] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n    [7]\
    \ #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n    [8] reduce\n      @ ./reducedim.jl:371\
    \ [inlined]\n    [9] sum_product(numbers::Vector{Int64})\n      @ Main /tmp/tmpf9w9rs6w.jl:13\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpf9w9rs6w.jl:23 [inlined]\n\
    \   [12] macro expansion\n      @ /s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9w9rs6w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    n = length(numbers)\n    if n == 0\n        return (0, 1)\n   \
    \ elseif n == 1\n        return (numbers[1], numbers[1])\n    elseif n == 2\n\
    \        return (numbers[1] + numbers[2], numbers[1] * numbers[2])\n    else\n\
    \        sum = numbers[1] + numbers[2]\n        product = numbers[1] * numbers[2]\n\
    \        for i in 3:n\n            sum += numbers[i]\n            product *= numbers[i]\n\
    \        end\n        return (sum, product)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for i in numbers\n        s += i\n      \
    \  p *= i\n    end\n    return (s, p)\nend\n \nsum_product([])\nsum_product([1,\
    \ 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_product(::Vector{Any})\n\
    Closest candidates are:\n  sum_product(!Matched::Vector{Int64}) at /tmp/tmptxo5pju0.jl:8\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptxo5pju0.jl:18\nin expression\
    \ starting at /tmp/tmptxo5pju0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n  #for loop\n  sum = 0\n  product = 1\n  for num in numbers\n    sum\
    \ += num\n    product *= num\n  end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw3goyd2w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3goyd2w.jl:1\n\
    in expression starting at /tmp/tmpw3goyd2w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    return (sum(numbers), prod(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return sum, prod\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum, product = 0, 1\n        for i in numbers\n            sum += i\n   \
    \         product *= i\n        end\n        return (sum, product)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for num in numbers\n        sum +=\
    \ num\n        product *= num\n    end\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i = 1:length(numbers)\n        sum\
    \ += numbers[i]\n        prod *= numbers[i]\n    end\n    return (sum, prod)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    # sum_product([]) \n    return (sum(numbers), prod(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    sum = reduce(+, numbers)\n        product = reduce(*, numbers)\n        return\
    \ (sum, product)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for (i, v) in enumerate(numbers)\n\
    \        sum += v\n        product *= v\n    end\n    return (sum, product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if isempty(numbers)\n        return (0, 1)\n    else\n        total_sum,\
    \ total_product = 0, 1\n        for number in numbers\n            total_sum +=\
    \ number\n            total_product *= number\n        end\n        return (total_sum,\
    \ total_product)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if(length(numbers) == 0)\n        return (0, 1)\n    end\n    sum\
    \ = 0\n    prod = 1\n    for i = 1:length(numbers)\n        sum += numbers[i]\n\
    \        prod *= numbers[i]\n    end\n    return (sum, prod)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if numbers == []\n        (0, 1)\n    else\n        (sum(numbers),\
    \ prod(numbers))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    prod = 1\n    for i in numbers\n        sum += i\n\
    \        prod *= i\n    end\n    return (sum, prod)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0\n        return (0, 1)\n    else\n    \
    \    return (sum(numbers), prod(numbers))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum +=\
    \ i\n        product *= i\n    end\n    return (sum, product)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    end\n    return (sum, product)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0 \n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    end\n    return sum, product\nend\nsum_product([1,\
    \ 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    s = 0\n    p = 1\n    for i = 1:length(numbers)\n        s += numbers[i]\n\
    \        p *= numbers[i]\n    end\n    return (s, p)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
