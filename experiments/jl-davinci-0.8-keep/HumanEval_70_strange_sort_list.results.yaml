name: HumanEval_70_strange_sort_list
language: jl
results:
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # base cases\n    if length(lst) == 0\n        return lst\n    elseif\
    \ length(lst) == 1\n        return lst\n    end\n    \n    # set up data structure\n\
    \    lst_sorted = sort(lst)\n    L = length(lst)\n    lst_sorted_strange = zeros(Int64,\
    \ L)\n    \n    # loop through odd/even number of values\n    if iseven(L)\n \
    \       for i in 1:2:L\n            lst_sorted_strange[i] = lst_sorted[Int64(ceil(L/2))-Int64((i-1)/2)]\n\
    \            lst_sorted_strange[i+1] = lst_sorted[L-Int64((i-1)/2)]\n        end\n\
    \    else\n        for i in 1:2:L-1\n            lst_sorted_strange[i] = lst_sorted[Int64(ceil(L/2))-Int64((i-1)/2)]\n\
    \            lst_sorted_strange[i+1] = lst_sorted[L-Int64((i-1)/2)]\n        end\n\
    \        lst_sorted_strange[L] = lst_sorted[Int64(ceil(L/2))]\n    end\n    return\
    \ lst_sorted_strange\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdpdkx0r.jl:44\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 4, 1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdpdkx0r.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdpdkx0r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmdpdkx0r.jl:45\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [7, 9, 6, 8, 7] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdpdkx0r.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdpdkx0r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmdpdkx0r.jl:46\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [3, 5, 2, 4, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdpdkx0r.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdpdkx0r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmdpdkx0r.jl:47\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [6, 9, 5, 8, 1, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmdpdkx0r.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmdpdkx0r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpmdpdkx0r.jl:50\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdpdkx0r.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # Initialize the output\n    out = Int64[]\n    # Initialize the input\n\
    \    k = lst\n    # Loop until the size of the output is equal to the size of\
    \ the input\n    while length(out) != length(lst)\n        # Find the minimum\
    \ of the remaining integers\n        a = minimum(k)\n        # Add the minimum\
    \ value to the output\n        push!(out, a)\n        # Remove the minimum value\
    \ from the input\n        k = setdiff(k, a)\n        # Find the maximum of the\
    \ remaining integers\n        b = maximum(k)\n        # Add the maximum value\
    \ to the output\n        push!(out, b)\n        # Remove the maximum value from\
    \ the input\n        k = setdiff(k, b)\n    end\n    # Return the output\n   \
    \ return out\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxs67p77r.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n \
    \ ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpxs67p77r.jl:25\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpxs67p77r.jl:40 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpxs67p77r.jl:38\\ntest\
    \ set: Error During Test at /tmp/tmpxs67p77r.jl:41\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrac"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    even = []\n    odd = []\n    for i in 1:length(lst)\n        if i % 2\
    \ == 0\n            push!(even, lst[i])\n        else\n            push!(odd,\
    \ lst[i])\n        end\n    end\n    return odd\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbt5ykkgi.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbt5ykkgi.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbt5ykkgi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbt5ykkgi.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbt5ykkgi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbt5ykkgi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbt5ykkgi.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbt5ykkgi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbt5ykkgi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbt5ykkgi.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 7, 9] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbt5ykkgi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbt5ykkgi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpbt5ykkgi.jl:32\n  Expression: candidate([5, 5, 5, 5]) == [5"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbt5ykkgi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    m = minimum(lst)\n    M = maximum(lst)\n    lst = [x for x in lst if (x\
    \ != m) && (x != M)]\n    sorted_list = [m, M]\n    while length(lst) > 0\n  \
    \      m = minimum(lst)\n        sorted_list = [sorted_list..., m]\n        M\
    \ = maximum(lst)\n        sorted_list = [sorted_list..., M]\n        lst = [x\
    \ for x in lst if (x != m) && (x != M)]\n    end\n    return sorted_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkx2muu9m.jl:31\\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkx2muu9m.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkx2muu9m.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpkx2muu9m.jl:32\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkx2muu9m.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkx2muu9m.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpkx2muu9m.jl:34\\n  Expression: candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\\n   Evaluated: [5, 5] == [5, 5, 5, 5]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpkx2muu9m.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpkx2muu9m.jl:29\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # sort the array using sort() \n    sort!(lst) \n    istart = 1\n    iend\
    \ = length(lst)\n    result = Int64[]\n    while istart < iend\n        push!(result,\
    \ lst[istart])\n        push!(result, lst[iend])\n        istart += 1\n      \
    \  iend -= 1\n    end\n    if istart == iend\n        push!(result, lst[istart])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    sorted_lst = sort(lst)\n\
    \    i = 1\n    j = length(sorted_lst)\n    result = zeros(length(sorted_lst))\n\
    \    for k = 1:2:length(sorted_lst)\n        result[k] = sorted_lst[i]\n     \
    \   i += 1\n    end\n    for k = 2:2:length(sorted_lst)\n        result[k] = sorted_lst[j]\n\
    \        j -= 1\n    end\n    return result\nend\n@assert strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n@assert strange_sort_list([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]\n@assert strange_sort_list([]) == []\n \n \n\"\"\"\n    Given an integer\
    \ n, return the sum of all integers up to n.\n    Sum of all integers in range\
    \ m...n = ((m + n) * (n - m + 1)) / 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) < 3\n\
    \        return lst\n    end\n    start = length(lst) == 2\n    sorted = zeros(Int64,\
    \ length(lst))\n    if start\n        sorted[1] = minimum(lst)\n        sorted[2]\
    \ = maximum(lst)\n    else\n        sorted[1] = minimum(lst)\n        lst = lst[lst\
    \ .!= sorted[1]]\n        while !isempty(lst)\n            if start\n        \
    \        sorted[end] = maximum(lst)\n                start = false\n         \
    \   else\n                sorted[end+1] = maximum(lst)\n                start\
    \ = true\n            end\n            lst = lst[lst .!= sorted[end]]\n      \
    \      if start\n                sorted[end+1] = minimum(lst)\n              \
    \  start = false\n            else\n                sorted[end+2] = minimum(lst)\n\
    \                start = true\n            end\n            lst = lst[lst .!=\
    \ sorted[end+1]]\n        end\n    end\n    return sorted\nend\nstrange_sort_list([1,\
    \ 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [5]\\nStacktrace:\\n [1] setindex!\\n   @ ./array.jl:903 [inlined]\\\
    n [2] '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    @assert length(lst)\
    \ >= 0\n    n = length(lst)\n    strange_lst = Vector{Int64}(undef, n)\n    if\
    \ n % 2 == 0\n        idx = 1:2:n\n        strange_lst[idx] = copy(sort(lst)[1:Int(ceil(n/2))])\n\
    \        idx = 2:2:n\n        strange_lst[idx] = copy(sort(lst)[Int(ceil(n/2)):end])\n\
    \    else\n        idx = 1:2:n\n        strange_lst[idx] = copy(sort(lst)[1:Int(ceil(n/2))])\n\
    \        idx = 2:2:n-1\n        strange_lst[idx] = copy(sort(lst)[Int(ceil(n/2)):end])\n\
    \        strange_lst[end] = lst[end]\n    end\n    return strange_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5x76wmmr.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  DimensionMismatch(\"\
    tried to assign 3 elements to 2 destinations\")\\n  Stacktrace:\\n   [1] throw_setindex_mismatch(X::Vector{Int64},\
    \ I::Tuple{Int64})\\n     @ Base ./indices.jl:191\\n   [2] setindex_shape_check\\\
    n     @ ./indices.jl:245 [inlined]\\n   [3] setindex!\\n     @ ./array.jl:910\
    \ [inlined]\\n   [4] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp5x76wmmr.jl:22\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp5x76wmmr.jl:37 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp5x76wmmr.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp5x76wmmr.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  DimensionMismatch(\"tried\
    \ to assign 3 elements to 2 destinations\")\\n  Stacktrace:\\n   [1] throw_setindex_mismatch(X::Vector{Int64},\
    \ I::Tuple{Int64})\\n     @ Base ./indices.jl:191\\n   [2] setindex_shape_check\\\
    n     @ ./indices.jl:245 [inlined]\\n   [3] setindex!\\n     @ ./array.jl:910\
    \ [inlined]\\n   [4] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp5x76wmmr.jl:27\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp5x76wmmr.jl:38 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp5x76wmmr.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp5x76wmmr.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  DimensionMismatch(\"tried\
    \ to assign 3 elements to 2 destinations\")\\n  Stacktrace:\\n   [1] throw_setindex_mismatch(X::Vector{Int64},\
    \ I::Tuple{Int64})\\n     @ Base ./indices.j"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted_lst = sort(lst)\n    i = 1\n    j = length(sorted_lst)\n    res\
    \ = []\n    while i <= j\n        push!(res, sorted_lst[i])\n        i += 1\n\
    \        if i <= j\n            push!(res, sorted_lst[j])\n            j -= 1\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(lst) == 0\n        return []\n    end\n    \n    sorted\
    \ = [minimum(lst)]\n    lst = filter(x -> x != minimum(lst), lst)\n    \n    for\
    \ i in 1:length(lst)\n        push!(sorted, maximum(lst))\n        lst = filter(x\
    \ -> x != maximum(lst), lst)\n        \n        if length(lst) == 0\n        \
    \    break\n        end\n        \n        push!(sorted, minimum(lst))\n     \
    \   lst = filter(x -> x != minimum(lst), lst)\n    end\n    \n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmc_wy44k.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n \
    \ ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function,\
    \ #unused#::Type{Int64})\\n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum(a::Vector{Int64})\\n      @ Base ./reducedim.jl:889\\n   [17]\
    \ strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpmc_wy44k.jl:21\\\
    n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpmc_wy44k.jl:40 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpmc_wy44k.jl:38\\ntest\
    \ set: Error During Test at /tmp/tmpmc_wy44k.jl:41\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    x = sort(lst)\n    res = Vector{Int64}(undef, n)\n\
    \    i = 1\n    j = n\n    k = 1\n    while i <= j\n        res[k] = x[i]\n  \
    \      res[k+1] = x[j]\n        i += 1\n        j -= 1\n        k += 2\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj_bh9hsb.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n \
    \ BoundsError: attempt to access 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\\
    n   [1] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpj_bh9hsb.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj_bh9hsb.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpj_bh9hsb.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpj_bh9hsb.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpj_bh9hsb.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj_bh9hsb.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpj_bh9hsb.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpj_bh9hsb.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([111111]) == [111111]\\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [2]\\n  Stacktrace:\\n   [1] setindex!\\n     @ ./array.jl:903\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpj_bh9hsb.jl:20\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj_bh9hsb.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    result = similar(lst)\n    # Write your code here.\n    start=1\n    l=length(lst)\n\
    \    if l==0\n        return result\n    end\n    for i=1:length(lst)\n      \
    \  if i%2==1\n            result[i]=minimum(lst)\n            index=findall(x->x==minimum(lst),lst)\n\
    \            if length(index)>1\n                start=start+1\n            end\n\
    \            lst=removeat!(lst,index[start])\n        else\n            result[i]=maximum(lst)\n\
    \            index=findall(x->x==maximum(lst),lst)\n            if length(index)>1\n\
    \                start=start+1\n            end\n            lst=removeat!(lst,index[start])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2a6tv3kr.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ removeat! not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp2a6tv3kr.jl:26\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2a6tv3kr.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2a6tv3kr.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp2a6tv3kr.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: removeat! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp2a6tv3kr.jl:26\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2a6tv3kr.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2a6tv3kr.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp2a6tv3kr.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: removeat! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp2a6tv3kr.jl:26\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2a6tv3kr.jl:45 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2a6tv3kr.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp2a6tv3kr.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: remov"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == Int64[]\n        return Int64[]\n    end\n    if all(x -> x\
    \ == lst[1], lst)\n        return lst\n    end\n    if length(lst) < 2\n     \
    \   return lst\n    end\n    minimum = minimum(lst)\n    minimum_index = findall(lst\
    \ .== minimum)[1]\n    maximum = maximum(lst)\n    maximum_index = findall(lst\
    \ .== maximum)[1]\n    lst[minimum_index] = maximum\n    lst[maximum_index] =\
    \ minimum\n    return vcat(minimum, strange_sort_list(lst[minimum_index + 1:maximum_index\
    \ - 1]), maximum)\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4fq6ddm5.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp4fq6ddm5.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4fq6ddm5.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4fq6ddm5.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4fq6ddm5.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: minimum not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp4fq6ddm5.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4fq6ddm5.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4fq6ddm5.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4fq6ddm5.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: minimum not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp4fq6ddm5.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4fq6ddm5.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4fq6ddm5.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4fq6ddm5.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: minimum\
    \ not"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst_sort = sort(lst)\n\
    \    lst_result = zeros(Int64, length(lst))\n    @inbounds for i in 1:2:length(lst)\n\
    \        lst_result[i] = lst_sort[i]\n    end\n    @inbounds for i in 2:2:length(lst)\n\
    \        lst_result[i] = lst_sort[length(lst) - i + 1]\n    end\n    return lst_result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3wqsdoo.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3wqsdoo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3wqsdoo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq3wqsdoo.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3wqsdoo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3wqsdoo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq3wqsdoo.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3wqsdoo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3wqsdoo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq3wqsdoo.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3wqsdoo.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3wqsdoo.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpq3wqsdoo.jl:36\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3wqsdoo.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    return sort(lst)[1:2:end]\
    \ .* ones(length(lst)\xF72) .+ sort(lst)[2:2:end] .* ones(length(lst)\xF72)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgc7p_63s.jl:22\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [3, 7] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgc7p_63s.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgc7p_63s.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    lst = sort(lst)\n\
    \    result = [lst[1]]\n    lst = lst[2:end]\n    while length(lst) != 0\n   \
    \     result = [result; lst[end]]\n        lst = lst[1:end-1]\n        if length(lst)\
    \ != 0\n            result = [result; lst[1]]\n            lst = lst[2:end]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO your code here!\n    sorted = sort(lst)\n    limit = div(length(sorted),\
    \ 2)\n    odd = true\n    m = limit\n    while m > 0\n        shift!(sorted, m)\n\
    \        m = m - 1\n        if odd\n            odd = false\n        else\n  \
    \          odd = true\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdhjq0z2q.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ shift! not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpdhjq0z2q.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdhjq0z2q.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdhjq0z2q.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpdhjq0z2q.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: shift! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpdhjq0z2q.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdhjq0z2q.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdhjq0z2q.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpdhjq0z2q.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: shift! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpdhjq0z2q.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpdhjq0z2q.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdhjq0z2q.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpdhjq0z2q.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: shift!\
    \ not def"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    a = sort(lst)\n\
    \    res = [a[1]]\n    for i in 1:length(a)\n        if i % 2 == 0\n         \
    \   push!(res, a[i])\n        else\n            pushfirst!(res, a[i])\n      \
    \  end\n    end\n    return res\nend\nstrange_sort_list([1, 2, 3, 4])\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ujkwoem.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [3, 1, 1, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ujkwoem.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ujkwoem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1ujkwoem.jl:33\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 7, 5, 5, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ujkwoem.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ujkwoem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1ujkwoem.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 3, 1, 1, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ujkwoem.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ujkwoem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1ujkwoem.jl:35\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [8, 6, 1, 1, 5, 7, 9] == [1, 9, 5, 8, 6,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ujkwoem.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ujkwoem.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1ujkwoem.jl:36\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ujkwoem.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) == 2\n        return [lst[1],\
    \ lst[2]]\n    end\n    res = []\n    while length(lst) != 0\n        push!(res,\
    \ lst[1])\n        lst = lst[2:end]\n        if length(lst) == 0\n           \
    \ break\n        end\n        push!(res, lst[end])\n        lst = lst[1:end-1]\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvfrs1djo.jl:41\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfrs1djo.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfrs1djo.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvfrs1djo.jl:45\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvfrs1djo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvfrs1djo.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfrs1djo.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if !isempty(lst)\n        maxi = maximum(lst)\n        mini = minimum(lst)\n\
    \        new_list = [mini, maxi]\n        new_list_temp = [x for x in lst if x\
    \ != maxi && x != mini]\n        strange_sort_list(new_list_temp)\n    else \n\
    \        return new_list\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyytrqpcp.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ new_list not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyytrqpcp.jl:19\\n   [2] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 2 times)\\n     @ Main /tmp/tmpyytrqpcp.jl:17\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyytrqpcp.jl:27 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyytrqpcp.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpyytrqpcp.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: new_list not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpyytrqpcp.jl:19\\n   [2] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 3 times)\\n     @ Main /tmp/tmpyytrqpcp.jl:17\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyytrqpcp.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpyytrqpcp.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpyytrqpcp.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: new_list not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpyytrqpcp.jl:19\\n   [2] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 3 times)\\n     @ Main /tmp/tmpyytrqpcp.jl:17\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpyytrqpcp.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/cen"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    s = sort(lst)\n    N = length(s)\n    v = Vector{Int64}(undef, N)\n  \
    \  j = 0\n    k = N\n    for i = 1:2:N-1\n        v[i] = s[j+1]\n        v[i+1]\
    \ = s[k]\n        j += 1\n        k -= 1\n    end\n    if N % 2 == 1\n       \
    \ v[N] = s[N/2+1]\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_z5sg1u5.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n \
    \ ArgumentError: invalid index: 3.5 of type Float64\\n  Stacktrace:\\n    [1]\
    \ to_index(i::Float64)\\n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64},\
    \ i::Float64)\\n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp_z5sg1u5.jl:24\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmp_z5sg1u5.jl:34 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp_z5sg1u5.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp_z5sg1u5.jl:35\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  ArgumentError:\
    \ invalid index: 3.5 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp_z5sg1u5.jl:24\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmp_z5sg1u5.jl:35 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp_z5sg1u5.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp_z5sg1u5.jl:41\\n  Test threw exception\\\
    n  Expression: candidate([111111]) == [1"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted = sort(lst)\n    strange = zeros(Int64, length(lst))\n    order\
    \ = 1\n    if length(lst) % 2 == 0\n        order = -1\n    end\n    while length(sorted)\
    \ > 0\n        push!(strange, popfirst!(sorted))\n        push!(strange, pop!(sorted))\n\
    \        sorted = sort(sorted, rev=order)\n    end\n    return strange\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3qsee8di.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  TypeError:\
    \ in keyword argument rev, expected Union{Nothing, Bool}, got a value of type\
    \ Int64\\n  Stacktrace:\\n   [1] sort(v::Vector{Int64}; kws::Base.Pairs{Symbol,\
    \ Int64, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Int64}}})\\n     @ Base.Sort\
    \ ./sort.jl:772\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp3qsee8di.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp3qsee8di.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp3qsee8di.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp3qsee8di.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  TypeError: in keyword argument\
    \ rev, expected Union{Nothing, Bool}, got a value of type Int64\\n  Stacktrace:\\\
    n   [1] sort(v::Vector{Int64}; kws::Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:rev,),\
    \ Tuple{Int64}}})\\n     @ Base.Sort ./sort.jl:772\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp3qsee8di.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp3qsee8di.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp3qsee8di.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp3qsee8di.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  TypeError: in keyword argument\
    \ rev, expected Union{Nothing, Bool}, got a value of type Int64\\n  Stacktrace:\\\
    n   [1] sort(v::Vector{Int64}; kws::Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:rev,),\
    \ Tuple{Int64}}})\\n     @ Base.Sort ./sort.jl:772"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    if length(lst) == 2\n        return [lst[1],\
    \ lst[2]]\n    end\n    return [lst[1], lst[end], strange_sort_list(lst[2:end-1])...]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkx5juyis.jl:31\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkx5juyis.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkx5juyis.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpkx5juyis.jl:35\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkx5juyis.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkx5juyis.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkx5juyis.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    return lst\nend\n \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpazgaqbr7.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazgaqbr7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazgaqbr7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpazgaqbr7.jl:21\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazgaqbr7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazgaqbr7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpazgaqbr7.jl:22\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazgaqbr7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazgaqbr7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpazgaqbr7.jl:23\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpazgaqbr7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpazgaqbr7.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpazgaqbr7.jl:26\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazgaqbr7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    x, y = sortperm(lst)\n    if length(x) == 0\n        x = []\n    elseif\
    \ length(x) % 2 == 0\n        x = [x[1:end \xF7 2]; reverse(x[end \xF7 2 + 1:end])]\n\
    \    else\n        x = [x[1:end \xF7 2]; x[end \xF7 2 + 1]; reverse(x[end \xF7\
    \ 2 + 2:end])]\n    end\n    lst[x]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n   \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n   \
    \ if n == 1\n        return lst\n    end\n    if n % 2 == 0\n        add_one =\
    \ false\n    else\n        add_one = true\n    end\n    res = Int64[]\n    while\
    \ length(lst) > 0\n        min_val = minimum(lst)\n        push!(res, min_val)\n\
    \        deleteat!(lst, findall(lst .== min_val)[1])\n        if length(lst) ==\
    \ 0\n            break\n        end\n        max_val = maximum(lst)\n        push!(res,\
    \ max_val)\n        deleteat!(lst, findall(lst .== max_val)[1])\n    end\n   \
    \ if add_one == true\n        res[end] = res[end] + 1\n    end\n    return res\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp4d5_c4f.jl:49\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 8] == [5, 9, 6,\
    \ 8, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4d5_c4f.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4d5_c4f.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpp4d5_c4f.jl:50\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4d5_c4f.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4d5_c4f.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4d5_c4f.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    new_lst = zeros(length(lst))\n\
    \    sort_lst = sort(lst)\n    n = length(lst)\n    index_min = 1\n    index_max\
    \ = n\n    for i in 1:n\n        if i % 2 == 1\n            new_lst[i] = sort_lst[index_min]\n\
    \            index_min += 1\n        else\n            new_lst[i] = sort_lst[index_max]\n\
    \            index_max -= 1\n        end\n    end\n    return new_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) < 2\n        return lst\n    end\n    half_length = div(length(lst),\
    \ 2)\n    left = sort(lst[1:half_length])\n    right = sort(lst[half_length+1:end])\n\
    \    left = reverse(left)\n    lst = [lst[1] for lst in left]\n    lst = lst .*\
    \ collect(1:length(left))\n    lst[1] = left[1]\n    lst = lst .+ collect(1:length(left))\n\
    \    lst[1] = lst[1] - 1\n    lst = lst .+ [left[i] for i in lst]\n    lst = lst\
    \ .+ [right[i] for i in lst]\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz6qc1mxe.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 2-element Vector{Int64} at index [4]\\n  Stacktrace:\\n  \
    \  [1] getindex(A::Vector{Int64}, i1::Int64)\\n      @ Base ./array.jl:861\\n\
    \    [2] (::var\"#2#5\")(i::Int64)\\n      @ Main ./none:0\\n    [3] iterate\\\
    n      @ ./generator.jl:47 [inlined]\\n    [4] collect_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#2#5\"}, offs::Int64, st::Int64)\\n\
    \      @ Base ./array.jl:782\\n    [5] collect_to_with_first!(dest::Vector{Int64},\
    \ v1::Int64, itr::Base.Generator{Vector{Int64}, var\"#2#5\"}, st::Int64)\\n  \
    \    @ Base ./array.jl:760\\n    [6] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#5\"})\\n      @ Base ./array.jl:734\\n    [7] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpz6qc1mxe.jl:24\\n    [8] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpz6qc1mxe.jl:33 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpz6qc1mxe.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpz6qc1mxe.jl:34\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError:\
    \ attempt to access 2-element Vector{Int64} at index [6]\\n  Stacktrace:\\n  \
    \ [1] getindex(A::Vector{Int64}, i1::Int64)\\n     @ Base ./array.jl:861\\n  \
    \ [2] (::var\"#2#5\")(i::Int64)\\n     @ Main ./none:0\\n   [3] iterate\\n   \
    \  @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#2#5\"})\\n     @ Base ./array.jl:724\\n   [5] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpz6qc1mxe.jl:24\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpz6qc1mxe.jl:34 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    new_lst\
    \ = Vector{Int64}(undef,n)\n    i = 1\n    while i <= n\n        sorted_lst =\
    \ sort(lst)\n        new_lst[i] = sorted_lst[1]\n        i += 1\n        if i\
    \ > n\n            break\n        end\n        new_lst[i] = sorted_lst[end]\n\
    \        i += 1\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1w_9r3s.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 1, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1w_9r3s.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1w_9r3s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe1w_9r3s.jl:36\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 5, 9, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1w_9r3s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1w_9r3s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe1w_9r3s.jl:37\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 1, 5, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1w_9r3s.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1w_9r3s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe1w_9r3s.jl:38\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 1, 9, 1, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe1w_9r3s.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe1w_9r3s.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe1w_9r3s.jl:41\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1w_9r3s.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    output = Vector{Int64}()\n    n = length(lst)\n    if n == 0\n       \
    \ return output\n    end\n    i = 1\n    while i <= n\n        min_index = findmin(lst)[2]\n\
    \        output = [output, lst[min_index]]\n        deleteat!(lst, min_index)\n\
    \        if isempty(lst)\n            break\n        end\n        max_index =\
    \ findmax(lst)[2]\n        output = [output, lst[max_index]]\n        deleteat!(lst,\
    \ max_index)\n        i += 2\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0 \n        return []\n    end\n    sorted_list = Array{Int64}(length(lst))\n\
    \    while !isempty(lst)\n        smallest = findmin(lst)[1]\n        push!(sorted_list,\
    \ smallest)\n        deleteat!(lst, smallest)\n        if isempty(lst)\n     \
    \       break\n        end\n        largest = findmax(lst)[1]\n        push!(sorted_list,\
    \ largest)\n        deleteat!(lst, largest)\n    end\n    return sorted_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsds17oim.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching (Array{Int64})(::Int64)\\n  Closest candidates are:\\n  \
    \  (Array{T})(!Matched::LinearAlgebra.AbstractQ) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmpsds17oim.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsds17oim.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsds17oim.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) <= 2\n        return lst\n    end\n    strange_sort_list(collect(lst[1:2:end]))\
    \ .+ strange_sort_list(collect(lst[2:2:end]))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz65w_sq8.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [3, 7] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz65w_sq8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz65w_sq8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz65w_sq8.jl:23\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [18, 24] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz65w_sq8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz65w_sq8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz65w_sq8.jl:24\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [6, 12] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz65w_sq8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz65w_sq8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz65w_sq8.jl:25\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [26, 25] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz65w_sq8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz65w_sq8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz65w_sq8.jl:26\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5,"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz65w_sq8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    return [lst[1]]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0z4_a0t.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0z4_a0t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0z4_a0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0z4_a0t.jl:23\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5] == [5, 9, 6, 8, 7]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0z4_a0t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0z4_a0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0z4_a0t.jl:24\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1] == [1, 5, 2, 4, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0z4_a0t.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0z4_a0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0z4_a0t.jl:25\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0z4_a0t.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0z4_a0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0z4_a0t.jl:26\n  Expression: candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5]\n   Evaluat"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0z4_a0t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    length(lst) == 0 && return lst\n    i = 1\n    result = zeros(Int64, length(lst))\n\
    \    while i < length(lst) + 1\n        # print(lst, result)\n        if i % 2\
    \ == 1\n            if i == 1\n                result[i] = minimum(lst)\n    \
    \        else\n                result[i] = minimum(setdiff(lst, result))\n   \
    \         end\n        else\n            result[i] = maximum(setdiff(lst, result))\n\
    \        end\n        i += 1\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjf1u119g.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpjf1u119g.jl:24\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpjf1u119g.jl:39 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpjf1u119g.jl:34\\ntest\
    \ set: Error During Test at /tmp/tmpjf1u119g.jl:42\\n  Test threw exception\\\
    n  Expression: candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2,\
    \ 2]\\n  ArgumentError: reducing over an empty collection is not allo"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst[1] = minimum(lst)\n\
    \    lst[2] = maximum(lst[2:end])\n    if length(lst) == 2\n        return lst\n\
    \    end\n    lst[3] = minimum(lst[3:end])\n    if length(lst) == 3\n        return\
    \ lst\n    end\n    return [lst[1], lst[3]] * strange_sort_list(lst[4:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvy4mvw7_.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpvy4mvw7_.jl:16\\n   [18] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpvy4mvw7_.jl:24\\n   [19] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [20] macro expansion\\n      @ /tmp/tmpvy4mvw7_.jl:31 [inlined]\\\
    n   [21] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [22] top-level scope\\n      @ /tmp/tmpvy4mvw7_.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if isempty(lst)\n        return []\n    end\n    \n    ordered_list\
    \ = zeros(Int64, length(lst))\n    n_h = length(lst)\n    n_t = 1\n    n_c = 0\n\
    \    for i = 1:length(lst)\n        if mod(i, 2) == 0\n            n_c = n_h\n\
    \            n_h -= 1\n        else\n            n_c = n_t\n            n_t +=\
    \ 1\n        end\n        ordered_list[i] = lst[n_c]\n    end\n    return ordered_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxradc9hd.jl:41\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxradc9hd.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxradc9hd.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpxradc9hd.jl:45\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxradc9hd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxradc9hd.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxradc9hd.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    N = length(lst)\n    if N % 2 == 0\n        s = 1\n\
    \        e = N\n    else\n        s = 2\n        e = N\n    end\n    new_lst =\
    \ []\n    for i in 1:2:N\n        push!(new_lst, lst[i])\n        push!(new_lst,\
    \ lst[e])\n        e -= 1\n    end\n    return new_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8af7xe6p.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8af7xe6p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8af7xe6p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8af7xe6p.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 8, 9, 7] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8af7xe6p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8af7xe6p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8af7xe6p.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 4, 5, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8af7xe6p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8af7xe6p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8af7xe6p.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 8, 8, 7] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8af7xe6p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8af7xe6p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8af7xe6p.jl:40\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8af7xe6p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    min = minimum(lst)\n   \
    \ max = maximum(lst)\n    if min == max\n        return fill(min, size(lst))\n\
    \    end\n    idx_min = findall(lst.==min)[1]\n    idx_max = findall(lst.==max)[1]\n\
    \    lst[idx_min] = max\n    lst[idx_max] = min\n    strange_sort_list(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n <= 1\n        return lst\n    end\n    sorted_part\
    \ = strange_sort_list(lst[2:end])\n    min_value = minimum(sorted_part)\n    i\
    \ = 1\n    while i <= length(sorted_part) && sorted_part[i] != min_value\n   \
    \     i += 1\n    end\n    if i % 2 == 1\n        return [lst[1]; [sorted_part[1:i-1];\
    \ [sorted_part[i+1:end]; [min_value]]]]\n    else\n        return [sorted_part[i];\
    \ [sorted_part[1:i-1]; [sorted_part[i+1:end]; [lst[1]]]]]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuygebeni.jl:33\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpuygebeni.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpuygebeni.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpuygebeni.jl:34\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 8, 7, 6] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpuygebeni.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpuygebeni.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpuygebeni.jl:35\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 4, 3, 2] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpuygebeni.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpuygebeni.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpuygebeni.jl:36\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [5, 7, 9, 8, 6, 1] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpuygebeni.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpuygebeni.jl:32\\ntest set: Test"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpuygebeni.jl:30\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    sorted = sort(lst)\n\
    \    left = lst[1:end\xF72]\n    right = lst[end\xF72+1:end]\n    return [left[1],\
    \ right[end\xF72], left[2:end\xF72], right[1:end\xF72-1]]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) == 2\n        return lst\n\
    \    end\n    @assert length(lst) >= 2\n    new_lst = []\n    for i = 1:2:length(lst)\n\
    \        if i != length(lst)\n            push!(new_lst, lst[i])\n           \
    \ push!(new_lst, lst[end-i+1])\n        else\n            push!(new_lst, lst[i])\n\
    \        end\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpow3v9szb.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow3v9szb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow3v9szb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpow3v9szb.jl:39\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow3v9szb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow3v9szb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpow3v9szb.jl:40\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow3v9szb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow3v9szb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpow3v9szb.jl:41\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 7, 8, 9, 6] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow3v9szb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow3v9szb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpow3v9szb.jl:44\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpow3v9szb.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    if length(lst) % 2 == 0\n        n = length(lst)\n\
    \    else\n        n = length(lst) - 1\n    end\n    return [lst[i] for i in [1,\
    \ n, 2, n-1, 3, n-2, 4, n-3, 5, n-4, 6, n-5, 7, n-6, 8, n-7, 9, n-8, 10, n-9,\
    \ 11, n-10, 12, n-11, 13, n-12, 14, n-13, 15, n-14, 16, n-15, 17, n-16, 18, n-17,\
    \ 19, n-18, 20, n-19, 21, n-20, 22, n-21, 23, n-22, 24, n-23, 25, n-24, 26, n-25,\
    \ 27, n-26, 28, n-27, 29, n-28, 30, n-29, 31, n-30, 32, n-31, 33, n-32, 34, n-33,\
    \ 35, n-34, 36, n-35, 37, n-36, 38, n-37, 39, n-38, 40, n-39, 41, n-40, 42, n-41,\
    \ 43, n-42, 44, n-43, 45, n-44, 46, n-45, 47, n-46, 48, n-47, 49, n-48, 50, n-49,\
    \ 51, n-50, 52, n-51, 53, n-52, 54, n-53, 55, n-54, 56, n-55, 57, n-56, 58, n-57,\
    \ 59, n-58, 60, n-59, 61, n-60, 62, n-61, 63, n-62, 64, n-63, 65, n-64, 66, n-65,\
    \ 67, n-66, 68, n-67, 69, n-68, 70, n-69, 71, n-70, 72, n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2vibyjj.jl:24\nin expression starting at\
    \ /tmp/tmpt2vibyjj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxe6j8g8.jl:19\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxe6j8g8.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxe6j8g8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjxe6j8g8.jl:20\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxe6j8g8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxe6j8g8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjxe6j8g8.jl:21\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxe6j8g8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxe6j8g8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjxe6j8g8.jl:22\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjxe6j8g8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjxe6j8g8.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjxe6j8g8.jl:25\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxe6j8g8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    x = push!(lst, -Inf, Inf)\n    sort!(x)\n  \
    \  str = zeros(Int64, length(lst))\n    j = 1\n    for i = 2:length(x)-1\n   \
    \     if j == 1\n            str[j] = x[i]\n            j = 2\n        else\n\
    \            str[j] = x[end-i+1]\n            j = 1\n        end\n    end\n  \
    \  return str\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuz7agldz.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  InexactError:\
    \ Int64(-Inf)\\n  Stacktrace:\\n    [1] Int64\\n      @ ./float.jl:812 [inlined]\\\
    n    [2] convert\\n      @ ./number.jl:7 [inlined]\\n    [3] setindex!\\n    \
    \  @ ./array.jl:903 [inlined]\\n    [4] _append!(a::Vector{Int64}, #unused#::Base.HasLength,\
    \ iter::Tuple{Float64, Float64})\\n      @ Base ./array.jl:1060\\n    [5] append!\\\
    n      @ ./array.jl:1050 [inlined]\\n    [6] push!\\n      @ ./array.jl:1051 [inlined]\\\
    n    [7] strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpuz7agldz.jl:18\\\
    n    [8] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpuz7agldz.jl:38 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpuz7agldz.jl:37\\ntest\
    \ set: Error During Test at /tmp/tmpuz7agldz.jl:39\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  InexactError:\
    \ Int64(-Inf)\\n  Stacktrace:\\n    [1] Int64\\n      @ ./float.jl:812 [inlined]\\\
    n    [2] convert\\n      @ ./number.jl:7 [inlined]\\n    [3] setindex!\\n    \
    \  @ ./array.jl:903 [inlined]\\n    [4] _append!(a::Vector{Int64}, #unused#::Base.HasLength,\
    \ iter::Tuple{Float64, Float64})\\n      @ Base ./array.jl:1060\\n    [5] append!\\\
    n      @ ./array.jl:1050 [inlined]\\n    [6] push!\\n      @ ./array.jl:1051 [inlined]\\\
    n    [7] strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpuz7agldz.jl:18\\\
    n    [8] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpuz7agldz.jl:39 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpuz7agldz.jl:37\\ntest\
    \ set: Error During Test at /tmp/tmpuz7ag"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_len = length(lst)\n    if lst_len == 0 \n        return lst\n    end\n\
    \    if lst_len % 2 == 0\n        return [min(lst) lst[argmax(lst[1:end-1])+1]\
    \ strange_sort_list(filter(x -> x != min(lst) && x != lst[argmax(lst[1:end-1])+1],\
    \ lst))]\n    else\n        return [min(lst) lst[argmax(lst[1:end])+1] strange_sort_list(filter(x\
    \ -> x != min(lst) && x != lst[argmax(lst[1:end])+1], lst))]\n    end\nend\nprintln(strange_sort_list([1,\
    \ 2, 3, 4]))\nprintln(strange_sort_list([5, 5, 5, 5]))\nprintln(strange_sort_list([]))\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    output = zeros(length(lst))\n\
    \    for i in eachindex(lst)\n        if i % 2 == 1\n            output[i] = minimum(lst)\n\
    \        else\n            output[i] = maximum(lst)\n        end\n        lst\
    \ = deleteat!(lst, find(lst .== output[i]))\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuodd819c.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ find not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpuodd819c.jl:22\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuodd819c.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuodd819c.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpuodd819c.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: find not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpuodd819c.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuodd819c.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuodd819c.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpuodd819c.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: find not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpuodd819c.jl:22\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpuodd819c.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuodd819c.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpuodd819c.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: find\
    \ not defined\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    min, max = minimum(lst),\
    \ maximum(lst)\n    rest = [i for i in lst if i != min && i != max]\n    return\
    \ [min, max] .+ strange_sort_list(rest)\nend\n@testset \"strange_sort_list\" begin\n\
    \    @test strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    @test strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    @test strange_sort_list([]) == []\nend;\n \n\
    \ \n\"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
    \ sorting, is when you start with the minimum value,\n    then maximum of the\
    \ remaining integers, then minimum and so on.\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmppi9p3cwn.jl:19\nin expression starting at /tmp/tmppi9p3cwn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) %\
    \ 2 == 0\n        new_lst = Vector{Int64}(undef,length(lst))\n        i = 1\n\
    \        while i <= length(lst)\n            if i == 1\n                new_lst[i]\
    \ = minimum(lst)\n                deleteat!(lst, findall(lst .== minimum(lst)))\n\
    \            elseif i == length(lst)\n                new_lst[i] = minimum(lst)\n\
    \                deleteat!(lst, findall(lst .== minimum(lst)))\n            else\n\
    \                new_lst[i] = maximum(lst)\n                deleteat!(lst, findall(lst\
    \ .== maximum(lst)))\n            end\n            i += 1\n        end\n     \
    \   return new_lst\n    else\n        new_lst = Vector{Int64}(undef,length(lst))\n\
    \        i = 1\n        while i <= length(lst)\n            if i == 1\n      \
    \          new_lst[i] = minimum(lst)\n                deleteat!(lst, findall(lst\
    \ .== minimum(lst)))\n            elseif i == length(lst)\n                new_lst[i]\
    \ = maximum(lst)\n                deleteat!(lst, findall(lst .== maximum(lst)))\n\
    \            else\n                new_lst[i] = minimum(lst)\n               \
    \ deleteat!(lst, findall(lst .== minimum(lst)))\n            end\n           \
    \ i += 1\n        end\n        return new_lst\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpspn6lbsf.jl:56\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 0, 0] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpspn6lbsf.jl:56 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpspn6lbsf.jl:55\\ntest set: Test\
    \ Failed at /tmp/tmpspn6lbsf.jl:57\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 9, 47343351000304, 47343351000336]\
    \ == [5, 9, 6, 8, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpspn6lbsf.jl:57 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpspn6lbsf.jl:55\\ntest set: Test\
    \ Failed at /tmp/tmpspn6lbsf.jl:58\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 5, 0, 47343444677328] == [1, 5, 2,\
    \ 4, 3]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpspn6lbsf.jl:58 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpspn6lbsf.jl:55\\ntest set: Test\
    \ Failed at /tmp/tmpspn6lbsf.jl:59\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 9, 8, 1, 1, 47343447592193] == [1,\
    \ 9, 5, 8, 6, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpspn6lbsf.jl:59 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-leve"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst) \n        return []\n    end\n    lst_min, lst_rest =\
    \ split_by_min(lst)\n    lst_max, lst_rest = split_by_max(lst_rest)\n    return\
    \ [lst_min, lst_max]  *> strange_sort_list(lst_rest)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbli2z2w6.jl:17\nin expression starting at\
    \ /tmp/tmpbli2z2w6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    newset = zeros(Int64, n)\n    newset[1] = minimum(lst)\n\
    \    i = 2\n    while length(lst) > 0\n        push!(newset, maximum(lst))\n \
    \       push!(newset, minimum(lst))\n        i += 2\n    end\n    return newset\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    sorted_list = sort(lst)\n\
    \    result = []\n    while length(sorted_list) > 0\n        if length(sorted_list)\
    \ == 1\n            result = vcat(result, sorted_list[1])\n            sorted_list\
    \ = sorted_list[2:end]\n        else\n            result = vcat(result, sorted_list[1])\n\
    \            result = vcat(result, sorted_list[end])\n            sorted_list\
    \ = sorted_list[2:end-1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    min_val = minimum(lst)\n\
    \    next_element = max_except(lst, min_val)\n    remaining_list = deleteat!(lst,\
    \ findall(x -> x == min_val || x == next_element, lst))\n    push!(push!(push!([],\
    \ min_val), next_element), strange_sort_list(remaining_list))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe5rawmkc.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ max_except not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpe5rawmkc.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe5rawmkc.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe5rawmkc.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpe5rawmkc.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: max_except\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpe5rawmkc.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe5rawmkc.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe5rawmkc.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpe5rawmkc.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: max_except\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpe5rawmkc.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe5rawmkc.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe5rawmkc.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpe5rawmkc.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    if n\
    \ == 1\n        return lst\n    end\n    minimum(lst)\n    #println(minimum(lst))\n\
    \    #println(lst)\n    push!(lst, maximum(lst))\n    ind = findall(lst .== minimum(lst))\n\
    \    push!(lst, lst[ind[1]])\n    ind = findall(lst .== maximum(lst))\n    pop!(lst,\
    \ ind[1])\n    #println(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # nothing to sort\n    if length(lst) == 0\n        return []\n    end\n\
    \    \n    # get the minimum and maximum value\n    min_val = minimum(lst)\n \
    \   max_val = maximum(lst)\n    \n    # create a dictionary\n    # { key: value\
    \ }\n    # key - value of the list\n    # value - state (true/false) - if number\
    \ was already used\n    # thus it helps to avoid duplicate values\n    # state\
    \ true - number was already used\n    num_state = Dict()\n    for num in lst\n\
    \        num_state[num] = false\n    end\n    \n    # now we can sort \n    #\
    \ for each iteration we will add one element \n    # to the sorted list and set\
    \ it's state to true\n    # at the first we will search the minimum value\n  \
    \  # at the second we will search the maximum value\n    # and so on\n    sorted_lst\
    \ = []\n    while length(sorted_lst) < length(lst)\n        if length(sorted_lst)\
    \ % 2 == 0\n            i = min_val\n            while true\n                if\
    \ num_state[i] == false\n                    push!(sorted_lst, i)\n          \
    \          num_state[i] = true\n                    break\n                end\n\
    \                i += 1\n            end\n        else\n            i = max_val\n\
    \            while true\n                if num_state[i] == false\n          \
    \          push!(sorted_lst, i)\n                    num_state[i] = true\n   \
    \                 break\n                end\n                i -= 1\n       \
    \     end\n        end\n    end\n    \n    # return the sorted list\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaej4ydvg.jl:74\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\\
    n  KeyError: key 2 not found\\n  Stacktrace:\\n   [1] getindex\\n     @ ./dict.jl:481\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpaej4ydvg.jl:43\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpaej4ydvg.jl:74 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpaej4ydvg.jl:70\\ntest set:\
    \ Error During Test at /tmp/tmpaej4ydvg.jl:75\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  KeyError: key 4 not found\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./dict.jl:481 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpaej4ydvg.jl:53\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpaej4ydvg.jl:75 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpaej4ydvg.jl:70\\ntest set:\
    \ Error During Test at /tmp/tmpaej4ydvg.jl:78\\n  Test threw exception\\n  Expression:\
    \ candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\\n  KeyError:\
    \ key -4 not found\\n  Stacktrace:\\n   [1] getindex\\n     @ ./dict.jl:481 [inlined]\\\
    n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpaej4ydvg.jl:43\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpaej4ydvg.jl:78 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpaej4ydvg.jl:70\\nTest Summary:\
    \ | Pass  Err"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    first, last = minimum(lst), maximum(lst)\n    res\
    \ = zeros(Int64, n)\n    for i = 1:n\n        if i % 2 == 1\n            res[i]\
    \ = first\n            first = lst[findall(lst .!= first)[1]]\n        else\n\
    \            res[i] = last\n            last = lst[findall(lst .!= last)[1]]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv3x_9aqg.jl:31\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 2, 1] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpv3x_9aqg.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpv3x_9aqg.jl:30\\ntest set: Test\
    \ Failed at /tmp/tmpv3x_9aqg.jl:32\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 6, 5, 5] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpv3x_9aqg.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpv3x_9aqg.jl:30\\ntest set: Test\
    \ Failed at /tmp/tmpv3x_9aqg.jl:33\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 2, 1, 1] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpv3x_9aqg.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpv3x_9aqg.jl:30\\ntest set: Test\
    \ Failed at /tmp/tmpv3x_9aqg.jl:34\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 9, 5, 5, 6, 6] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpv3x_9aqg.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpv3x_9aqg.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(lst)\n    # Base case\n    if len == 0\n        return lst\n\
    \    end\n    if len == 1\n        return lst\n    end\n    if len == 2\n    \
    \    return [minimum(lst), maximum(lst)]\n    end\n    # Obtain first and last\
    \ elements\n    list = minimum(lst)\n    popfirst!(lst)\n    push!(list, maximum(lst))\n\
    \    popfirst!(lst)\n    # Sort remaining elements in alternating order\n    for\
    \ i in 1:len - 2\n        if i % 2 == 0\n            push!(list, minimum(lst))\n\
    \            popfirst!(lst)\n        else\n            push!(list, maximum(lst))\n\
    \            popfirst!(lst)\n        end\n    end\n    return list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4strc1dj.jl:45\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst) \n        return []\n    end\n    sort_lst = deepcopy(lst)\n\
    \    sort!(sort_lst)\n    new_lst = deepcopy(sort_lst)\n    remove_indexes = [1,\
    \ length(sort_lst)]\n    new_lst[remove_indexes] = 0\n    for (i,_) in enumerate(sort_lst)\n\
    \        if i % 2 == 0\n            append!(sort_lst, new_lst[remove_indexes[1]])\n\
    \            remove_indexes[1] += 1\n        else\n            prepend!(sort_lst,\
    \ new_lst[remove_indexes[2]])\n            remove_indexes[2] -= 1\n        end\n\
    \    end\n    sort_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeuev5bz4.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpeuev5bz4.jl:19\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpeuev5bz4.jl:36 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpeuev5bz4.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpeuev5bz4.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpeuev5bz4.jl:19\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpeuev5bz4.jl:37 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    lst_new = Float64[]\n\
    \    while !isempty(lst)\n        lst_new = push!(lst_new, minimum(lst))\n   \
    \     lst = lst[lst .!= minimum(lst)]\n        if !isempty(lst)\n            lst_new\
    \ = push!(lst_new, maximum(lst))\n            lst = lst[lst .!= maximum(lst)]\n\
    \        end\n    end\n    return floor.(Int64, lst_new)\nend\n\"\"\"\n    Given\
    \ list of integers, return list in reverse strange order.\n    Strange sorting,\
    \ is when you start with the minimum value,\n    then maximum of the remaining\
    \ integers, then minimum and so on.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksvcjy9g.jl:26\nin expression starting at\
    \ /tmp/tmpksvcjy9g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0 \n        return []\n    end\n    if length(lst) ==\
    \ 1 \n        return lst\n    end\n    sort!(lst)\n    tmp_lst = [lst[1]]\n  \
    \  j = 2\n    while j < length(lst)\n        push!(tmp_lst, lst[end-j+2])\n  \
    \      push!(tmp_lst, lst[j])\n        j += 1\n    end\n    return tmp_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu89m8fw3.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 2, 3, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu89m8fw3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu89m8fw3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu89m8fw3.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 7, 7, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu89m8fw3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu89m8fw3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu89m8fw3.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 3, 3, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu89m8fw3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu89m8fw3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu89m8fw3.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 5, 8, 6, 7, 7, 6, 8] == [1, 9, 5,\
    \ 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu89m8fw3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu89m8fw3.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpu89m8fw"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu89m8fw3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    sorted = sort(lst)\n\
    \    if length(lst) % 2 == 0\n        return [sorted[i] for i in 1:2:length(lst)]\
    \ \n        .+ [sorted[i] for i in 2:2:length(lst)]\n    else\n        return\
    \ [sorted[i] for i in 1:2:length(lst)] \n        .+ [sorted[i] for i in 2:2:length(lst)]\
    \ .+ [sorted[length(lst)]]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpofrca_gx.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpofrca_gx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpofrca_gx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpofrca_gx.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpofrca_gx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpofrca_gx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpofrca_gx.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpofrca_gx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpofrca_gx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpofrca_gx.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpofrca_gx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpofrca_gx.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpofrca_gx.jl:33\n  Expression: candidate([5, 5, 5, 5]) == [5"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofrca_gx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    lst_sorted = sort(lst)\n    lst_sorted_reversed\
    \ = reverse(lst_sorted)\n    new_lst = []\n    for i = 1:2:length(lst)\n     \
    \   if i+1 > length(lst)\n            append!(new_lst, lst_sorted[i])\n      \
    \  else\n            append!(new_lst, lst_sorted[i])\n            append!(new_lst,\
    \ lst_sorted_reversed[i])\n        end\n    end\n    return new_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5x3nm7u.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5x3nm7u.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5x3nm7u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5x3nm7u.jl:37\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5x3nm7u.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5x3nm7u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5x3nm7u.jl:38\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5x3nm7u.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5x3nm7u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5x3nm7u.jl:39\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5x3nm7u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5x3nm7u.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5x3nm7u.jl:42\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5x3nm7u.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    #find min and max\n    min,\
    \ max = findminmax(lst)\n    #remove them from list\n    lst = deleteat!(lst,\
    \ findall(lst .== min))\n    lst = deleteat!(lst, findall(lst .== max))\n    #insert\
    \ them in a new list\n    newlst = [min, max]\n    #apply recursively\n    newlst\
    \ = vcat(newlst, strange_sort_list(lst))\n    return newlst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7bi4cgbm.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ findminmax not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7bi4cgbm.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7bi4cgbm.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7bi4cgbm.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp7bi4cgbm.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: findminmax\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7bi4cgbm.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7bi4cgbm.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7bi4cgbm.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp7bi4cgbm.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: findminmax\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7bi4cgbm.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7bi4cgbm.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7bi4cgbm.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp7bi4cgbm.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: fi"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    sorted_lst = sort(lst)\n\
    \    sort_index = 1\n    for i in 2:2:length(sorted_lst)\n        sorted_lst[i],\
    \ sorted_lst[sort_index] = sorted_lst[sort_index], sorted_lst[i]\n        sort_index\
    \ += 1\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprcg4anhe.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 4, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcg4anhe.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcg4anhe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprcg4anhe.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [6, 8, 7, 5, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcg4anhe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcg4anhe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprcg4anhe.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [2, 4, 3, 1, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcg4anhe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcg4anhe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprcg4anhe.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 7, 9, 1, 8, 6] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprcg4anhe.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprcg4anhe.jl:27\ntest set: Test\
    \ Failed at /tmp/tmprcg4anhe.jl:34\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcg4anhe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    function sort_lst(sorted_lst::Vector{Int64}, unsorted_lst::Vector{Int64})::Vector{Int64}\n\
    \        if length(unsorted_lst) == 0\n            return sorted_lst\n       \
    \ else\n            # add min value of unsorted list to sorted_lst\n         \
    \   push!(sorted_lst, findmin(unsorted_lst)[1])\n            # delete the min\
    \ value of unsorted list\n            deleteat!(unsorted_lst, findmin(unsorted_lst)[2])\n\
    \            # if unsorted list is not empty\n            if length(unsorted_lst)\
    \ != 0\n                # add max value of unsorted list to sorted_lst\n     \
    \           push!(sorted_lst, findmax(unsorted_lst)[1])\n                # delete\
    \ the max value of unsorted list\n                deleteat!(unsorted_lst, findmax(unsorted_lst)[2])\n\
    \            end\n        end\n        return sort_lst(sorted_lst, unsorted_lst)\n\
    \    end\n    \n    return sort_lst([], lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted_lst = deepcopy(lst)\n    sort!(sorted_lst)\n    res = Vector{Int64}()\n\
    \    for i in 1:2:length(sorted_lst)\n        if i == length(sorted_lst)\n   \
    \         push!(res, sorted_lst[i])\n        else\n            push!(res, sorted_lst[i])\n\
    \            push!(res, sorted_lst[end + 1 - i])\n        end\n    end\n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0f1e9o7_.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f1e9o7_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f1e9o7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0f1e9o7_.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 7, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f1e9o7_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f1e9o7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0f1e9o7_.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 3, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f1e9o7_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f1e9o7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0f1e9o7_.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0f1e9o7_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0f1e9o7_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0f1e9o7_.jl:36\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0f1e9o7_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sort(lst)\n    \n    output = []\n    length = length(lst)\n   \
    \ mid = ceil(length/2)\n    \n    j = 1\n    k = length\n    \n    for i in 1:mid\n\
    \        push!(output, lst[j])\n        push!(output, lst[k])\n        j += 1\n\
    \        k -= 1\n    end\n    \n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp60xam17h.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ length not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp60xam17h.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp60xam17h.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp60xam17h.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp60xam17h.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: length not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp60xam17h.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp60xam17h.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp60xam17h.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp60xam17h.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: length not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp60xam17h.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp60xam17h.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp60xam17h.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp60xam17h.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: length\
    \ not def"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    vals = sort(lst)\n\
    \    new_lst = []\n    while length(vals) > 0\n        push!(new_lst, vals[1])\n\
    \        popfirst!(vals)\n        if length(vals) > 0\n            push!(new_lst,\
    \ vals[end])\n            pop!(vals)\n        end\n    end\n    return new_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    if length(lst) %\
    \ 2 == 0\n        count = length(lst) - 1\n    else\n        count = length(lst)\n\
    \    end\n    new_lst = []\n    for i in range(1, length(lst), 2)\n        new_lst\
    \ = push!(new_lst, lst[i])\n        new_lst = push!(new_lst, lst[count])\n   \
    \     count -= 1\n    end\n    if length(lst) % 2 == 1\n        new_lst = push!(new_lst,\
    \ lst[1])\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkexcxsuy.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpkexcxsuy.jl:22\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpkexcxsuy.jl:36 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpkexcxsuy.jl:35\\ntest\
    \ set: Error During Test at /tmp/tmpkexcxsuy.jl:37\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpkexcxsuy.jl:22\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpkexcxsuy.jl:37 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpkexcxsuy.jl:35\\ntest\
    \ set: Error During Test at /tmp/tmpkexcxsuy.jl:38\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4, 5]) == ["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_sorted = sort(lst)\n    lst_strange = zeros(length(lst))\n    for\
    \ i in 1:2:length(lst)\n        lst_strange[i] = lst_sorted[i]\n    end\n    for\
    \ i in 2:2:length(lst)\n        if i == length(lst)\n            lst_strange[i]\
    \ = lst_sorted[i]\n        else\n            lst_strange[i] = lst_sorted[length(lst)-i+1]\n\
    \        end\n    end\n    return lst_strange\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph4cmeb3r.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4cmeb3r.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4cmeb3r.jl:30\ntest set: Test\
    \ Failed at /tmp/tmph4cmeb3r.jl:32\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4cmeb3r.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4cmeb3r.jl:30\ntest set: Test\
    \ Failed at /tmp/tmph4cmeb3r.jl:33\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4cmeb3r.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4cmeb3r.jl:30\ntest set: Test\
    \ Failed at /tmp/tmph4cmeb3r.jl:34\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4cmeb3r.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4cmeb3r.jl:30\ntest set: Test\
    \ Failed at /tmp/tmph4cmeb3r.jl:37\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph4cmeb3r.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) == 2\n        if lst[1] >\
    \ lst[2]\n            return [lst[2], lst[1]]\n        else\n            return\
    \ lst\n        end\n    end\n    sorted_lst = sort(lst)\n    res = Vector{Int64}(length(lst))\n\
    \    res[1] = sorted_lst[1]\n    res[2] = sorted_lst[end]\n    for i in 3:length(lst)\n\
    \        if i % 2 == 0\n            res[i] = sorted_lst[end - div(i, 2) + 1]\n\
    \        else\n            res[i] = sorted_lst[div(i, 2) + 1]\n        end\n \
    \   end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz9e_jv1z.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    lst = sort(lst)\n    i = 1\n    j = length(lst)\n    output = []\n\
    \    while(i <= j)\n        push!(output, lst[i])\n        i = i + 1\n       \
    \ if(i <= j)\n            push!(output, lst[j])\n            j = j - 1\n     \
    \   end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(lst)\n    new_lst = Vector{Int64}(len)\n    len = (len %\
    \ 2 == 0) ? len/2 : (len-1)/2\n    for i in 1:Int(len)\n        new_lst[2*i-1]\
    \ = minimum(lst)\n        new_lst[2*i] = maximum(lst)\n        lst = deleteat!(lst,\
    \ indexin(lst, [minimum(lst), maximum(lst)]))\n    end\n    if length(lst) ==\
    \ 1\n        new_lst[end] = lst[1]\n    end\n    return new_lst\nend\n \n\"\"\"\
    \n    Given integer, return number of digits.\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0z23dkv.jl:26\nin expression starting at\
    \ /tmp/tmpe0z23dkv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    res = [minimum(lst)]\n\
    \    lst = lst[lst .!= minimum(lst)]\n    while length(lst) > 0\n        res =\
    \ [res; maximum(lst)]\n        lst = lst[lst .!= maximum(lst)]\n        if length(lst)\
    \ > 0\n            res = [res; minimum(lst)]\n            lst = lst[lst .!= minimum(lst)]\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvhtbng3l.jl:36\\n  Expression: candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\\n   Evaluated: [5] == [5, 5, 5, 5]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvhtbng3l.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvhtbng3l.jl:31\\ntest set: Test\
    \ Failed at /tmp/tmpvhtbng3l.jl:39\\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\\n   Evaluated: [-5, 5, 0, 2] == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvhtbng3l.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvhtbng3l.jl:31\\nTest Summary:\
    \ | Pass  Fail  Total\\ntest set      |    7     2      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) <= 1 \n        return lst\n    end\n    lst1 = lst[findmin(lst)]\n\
    \    lst = lst[findmax(lst)]\n    push!(lst1, lst)\n    return strange_sort_list(lst1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv0rcczxj.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ invalid index: (1, 1) of type Tuple{Int64, Int64}\\n  Stacktrace:\\n    [1]\
    \ to_index(i::Tuple{Int64, Int64})\\n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64},\
    \ i::Tuple{Int64, Int64})\\n      @ Base ./indices.jl:277\\n    [3] to_indices\\\
    n      @ ./indices.jl:333 [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325\
    \ [inlined]\\n    [5] getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n\
    \    [6] strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpv0rcczxj.jl:15\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpv0rcczxj.jl:25 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpv0rcczxj.jl:24\\ntest\
    \ set: Error During Test at /tmp/tmpv0rcczxj.jl:26\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ invalid index: (5, 1) of type Tuple{Int64, Int64}\\n  Stacktrace:\\n    [1]\
    \ to_index(i::Tuple{Int64, Int64})\\n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64},\
    \ i::Tuple{Int64, Int64})\\n      @ Base ./indices.jl:277\\n    [3] to_indices\\\
    n      @ ./indices.jl:333 [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325\
    \ [inlined]\\n    [5] getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n\
    \    [6] strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpv0rcczxj.jl:15\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpv0rcczxj.jl:26 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpv0rcczxj.jl:24\\ntest\
    \ set: Error During Test at /tmp/tmpv0rcczx"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    sorted_list = sort(lst)\n\
    \    n = length(sorted_list)\n    result = zeros(Int64, n)\n    i = 1\n    i2\
    \ = 1\n    while i2 <= n\n        if i <= n\n            result[i2] = sorted_list[i]\n\
    \            i += 1\n            i2 += 1\n        end\n        if i <= n\n   \
    \         result[i2] = sorted_list[n - i + 1]\n            i += 1\n          \
    \  i2 += 1\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zelk5bq.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zelk5bq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zelk5bq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_zelk5bq.jl:40\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zelk5bq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zelk5bq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_zelk5bq.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zelk5bq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zelk5bq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_zelk5bq.jl:42\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zelk5bq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zelk5bq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_zelk5bq.jl:45\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zelk5bq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    p = sortperm(lst)\n    return [lst[p[i]] for i in 1:2:length(p)] * [lst[p[i]]\
    \ for i in 2:2:length(p)]\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst) \n        return lst\n    end\n    left = lst[1]\n   \
    \ lst_sorted = strange_sort_list(lst[2:end])\n    if length(lst_sorted) % 2 ==\
    \ 0\n        return vcat(left, [lst_sorted[end], lst_sorted[1:end-1]]...)\n  \
    \  else\n        return vcat(left, [lst_sorted[1], lst_sorted[2:end]]...)\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmrnkfb7f.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmrnkfb7f.jl:18\\n   [3] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 3 times)\\n     @ Main /tmp/tmpmrnkfb7f.jl:16\\n   [4] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmpmrnkfb7f.jl:28 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpmrnkfb7f.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpmrnkfb7f.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmrnkfb7f.jl:18\\n   [3] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 4 times)\\n     @ Main /tmp/tmpmrnkfb7f.jl:16\\n   [4] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmpmrnkfb7f.jl:29 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpmrnkfb7f.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpmrnkfb7f.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmrnkfb7f.jl:18\\n   [3] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 4 times)\\n     @ Main "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    list = deepcopy(lst)\n    sorted = []\n    if length(list)==0\n      \
    \  return list\n    end\n    if length(list)==1\n        return list\n    end\n\
    \    if length(list)%2 == 0\n        for i in 1:2:length(list)\n            if\
    \ list[i] < list[i+1]\n                push!(sorted, list[i])\n              \
    \  push!(sorted, list[i+1])\n            else\n                push!(sorted, list[i+1])\n\
    \                push!(sorted, list[i])\n            end\n        end\n    else\n\
    \        for i in 1:2:length(list)-1\n            if list[i] < list[i+1]\n   \
    \             push!(sorted, list[i])\n                push!(sorted, list[i+1])\n\
    \            else\n                push!(sorted, list[i+1])\n                push!(sorted,\
    \ list[i])\n            end\n        end\n        push!(sorted, list[end])\n \
    \   end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7s9ul4ch.jl:49\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s9ul4ch.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s9ul4ch.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp7s9ul4ch.jl:50\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s9ul4ch.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s9ul4ch.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp7s9ul4ch.jl:51\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s9ul4ch.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s9ul4ch.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp7s9ul4ch.jl:52\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 1, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s9ul4ch.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s9ul4ch.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp7s9ul4ch.jl:55\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s9ul4ch.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    n = length(lst)\n   \
    \ res = fill(0, n)\n    if n%2 == 0\n        res[1] = minimum(lst)\n        res[n]\
    \ = maximum(lst)\n        for i = 2:n-1\n            if i%2 == 0\n           \
    \     res[i] = maximum(lst)\n            else\n                res[i] = minimum(lst)\n\
    \            end\n        end\n    else\n        res[1] = minimum(lst)\n     \
    \   res[2] = maximum(lst)\n        for i = 3:n\n            if i%2 == 0\n    \
    \            res[i] = maximum(lst)\n            else\n                res[i] =\
    \ minimum(lst)\n            end\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpid5_332b.jl:45\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 1, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpid5_332b.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpid5_332b.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmpid5_332b.jl:46\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 5, 9, 5] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpid5_332b.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpid5_332b.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmpid5_332b.jl:47\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 1, 5, 1] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpid5_332b.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpid5_332b.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmpid5_332b.jl:48\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 9, 1, 9, 1, 9] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpid5_332b.jl:48 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpid5_332b.jl:44\\ntest set: Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    arr = sort(lst)\n    n = length(arr)\n    new_arr = []\n    push!(new_arr,\
    \ arr[1])\n    i = n\n    j = 2\n    for k = 2:n\n        if k % 2 == 0\n    \
    \        push!(new_arr, arr[i])\n            i -= 1\n        else\n          \
    \  push!(new_arr, arr[j])\n            j += 1\n        end\n    end\n    return\
    \ new_arr\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe2_4aixg.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  BoundsError: attempt to access 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpe2_4aixg.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpe2_4aixg.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpe2_4aixg.jl:33\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    8      1      9\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_sorted = sort(lst)\n    len_ = length(lst_sorted)\n    result = zeros(Int64,\
    \ len_)\n    if len_ % 2 == 0\n        for i in 1:2:len_\n            result[i]\
    \ = lst_sorted[i]\n            result[i+1] = lst_sorted[len_ + 1 - i]\n      \
    \  end\n    else\n        result[1] = lst_sorted[1]\n        for i in 2:2:len_\n\
    \            result[i] = lst_sorted[i]\n            result[i+1] = lst_sorted[len_\
    \ + 1 - i]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp69wwi_7j.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wwi_7j.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wwi_7j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp69wwi_7j.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 8, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wwi_7j.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wwi_7j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp69wwi_7j.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 4, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wwi_7j.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wwi_7j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp69wwi_7j.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 7, 8, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69wwi_7j.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69wwi_7j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp69wwi_7j.jl:40\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69wwi_7j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    if n\
    \ == 1\n        return lst\n    end\n    n1 = int(ceil(n/2))\n    n2 = n - n1\n\
    \    lst1 = lst[1:n1]\n    lst2 = lst[n1+1:n]\n    a = strange_sort_list(lst1)\n\
    \    b = strange_sort_list(lst2)\n    ans = Vector{Int64}(n)\n    i = 1\n    j\
    \ = 1\n    for k = 1:n\n        if a[i] <= b[j]\n            ans[k] = a[i]\n \
    \           i += 1\n        else\n            ans[k] = b[j]\n            j +=\
    \ 1\n        end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpserugpv1.jl:44\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ int not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpserugpv1.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpserugpv1.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpserugpv1.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmpserugpv1.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: int not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpserugpv1.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpserugpv1.jl:45 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpserugpv1.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmpserugpv1.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: int not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpserugpv1.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpserugpv1.jl:46 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpserugpv1.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmpserugpv1.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: int not\
    \ defined\\n  Stac"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sort(lst,by = (x,y) -> length(y) - length(x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpufhwuabd.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(lst)\n    if N == 0\n        return lst\n    end\n    m1 =\
    \ sort(lst)[1]\n    m2 = sort(lst)[end]\n    index1 = findfirst(lst, m1)\n   \
    \ index2 = findfirst(lst, m2)\n    if N % 2 == 0\n        return [m1, m2, strange_sort_list(filter(x\
    \ -> x != m1 && x != m2, lst))...]\n    else\n        return [m1, strange_sort_list(filter(x\
    \ -> x != m1, lst))...]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk7vp3i_2.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching findfirst(::Vector{Int64}, ::Int64)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\\
    n    findfirst(::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1920\\\
    n    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpk7vp3i_2.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk7vp3i_2.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk7vp3i_2.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    if n\
    \ == 1\n        return lst\n    end\n    if n == 2\n        return [minimum(lst),\
    \ maximum(lst)]\n    end\n    if n == 3\n        return [minimum(lst), maximum(lst),\n\
    \                lst[find(lst .!= minimum(lst) .* maximum(lst))[1]]]\n    end\n\
    \    if n == 4\n        lst1 = lst[lst .!= maximum(lst)]\n        return [minimum(lst),\
    \ maximum(lst),\n                minimum(lst1), maximum(lst1)]\n    end\n    res\
    \ = zeros(Int64, n)\n    ind = 1\n    while ind <= n\n        res[ind] = minimum(lst)\n\
    \        lst = lst[lst .!= minimum(lst)]\n        if ind < n\n            res[ind\
    \ + 1] = maximum(lst)\n            lst = lst[lst .!= maximum(lst)]\n        end\n\
    \        ind += 2\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw5de3hqf.jl:49\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 1, 3] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpw5de3hqf.jl:49 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpw5de3hqf.jl:48\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    if length(lst) == 2\n        return lst[end:-1:1]\n\
    \    end\n    if length(lst) == 3\n        return [lst[2], lst[3], lst[1]]\n \
    \   end\n    if length(lst) % 2 == 0\n        r = [lst[1]]\n        for i in 1:length(lst)\
    \ \xF7 2\n            lst = push!(lst, lst[end - i + 1])\n            lst = push!(lst,\
    \ lst[i + 1])\n        end\n        return lst\n    else\n        r = [lst[1]]\n\
    \        for i in 1:(length(lst) + 1) \xF7 2\n            lst = push!(lst, lst[end\
    \ - i + 1])\n            lst = push!(lst, lst[i + 1])\n        end\n        return\
    \ lst\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxzb_xh0i.jl:45\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4, 4, 2, 4, 3] == [1, 4,\
    \ 2, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzb_xh0i.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzb_xh0i.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpxzb_xh0i.jl:46\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9, 9, 6, 9, 7, 6, 8] == [5, 9, 6,\
    \ 8, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzb_xh0i.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzb_xh0i.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpxzb_xh0i.jl:47\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5, 5, 2, 5, 3, 2, 4] == [1, 5, 2,\
    \ 4, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzb_xh0i.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzb_xh0i.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpxzb_xh0i.jl:48\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1, 1, 6, 1, 7, 6, 8] ==\
    \ [1, 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxzb_xh0i.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxzb_xh0i.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzb_xh0i.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsv9x8v8.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsv9x8v8.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsv9x8v8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnsv9x8v8.jl:21\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsv9x8v8.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsv9x8v8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnsv9x8v8.jl:22\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsv9x8v8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsv9x8v8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnsv9x8v8.jl:23\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsv9x8v8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsv9x8v8.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnsv9x8v8.jl:26\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsv9x8v8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n <= 2\n        return lst\n    end\n    idx =\
    \ []\n    for i in range(1, n, 2)\n        push!(idx, i)\n    end\n    for i in\
    \ range(2, n, 2)\n        push!(idx, i)\n    end\n    sort(lst)[idx]\nend\nstrange_sort_list([1,\
    \ 2, 3, 4])\nstrange_sort_list([5, 5, 5, 5])\nstrange_sort_list([])\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: invalid index: 1.0 of type Float64\nStacktrace:\n\
    \  [1] to_index(i::Float64)\n    @ Base ./indices.jl:300\n  [2] to_index(A::Vector{Int64},\
    \ i::Float64)\n    @ Base ./indices.jl:277\n  [3] to_indices\n    @ ./indices.jl:333\
    \ [inlined]\n  [4] to_indices\n    @ ./indices.jl:325 [inlined]\n  [5] getindex(A::Vector{Int64},\
    \ I::Float64)\n    @ Base ./abstractarray.jl:1218\n  [6] macro expansion\n   \
    \ @ ./multidimensional.jl:867 [inlined]\n  [7] macro expansion\n    @ ./cartesian.jl:64\
    \ [inlined]\n  [8] _unsafe_getindex!\n    @ ./multidimensional.jl:862 [inlined]\n\
    \  [9] _unsafe_getindex(#unused#::IndexLinear, A::Vector{Int64}, I::Vector{Any})\n\
    \    @ Base ./multidimensional.jl:853\n [10] _getindex\n    @ ./multidimensional.jl:839\
    \ [inlined]\n [11] getindex\n    @ ./abstractarray.jl:1218 [inlined]\n [12] strange_sort_list(lst::Vector{Int64})\n\
    \    @ Main /tmp/tmpmgj8n84q.jl:23\n [13] top-level scope\n    @ /tmp/tmpmgj8n84q.jl:25\n\
    in expression starting at /tmp/tmpmgj8n84q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    lst_sort = sort(lst)\n\
    \    lst_result = Vector{Int64}(undef, length(lst))\n    length_half = length(lst)\
    \ / 2\n    start = 0\n    if length(lst) % 2 == 0\n        start = 1\n    end\n\
    \    for i in range(1, stop=length_half)\n        lst_result[2*i - start - 1]\
    \ = lst_sort[i]\n        lst_result[2*i] = lst_sort[end - i + 1]\n    end\n  \
    \  if start == 1\n        lst_result[end] = lst_sort[length_half + 1]\n    end\n\
    \    return lst_result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvycqhshz.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpvycqhshz.jl:23\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpvycqhshz.jl:36 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpvycqhshz.jl:35\\ntest\
    \ set: Error During Test at /tmp/tmpvycqhshz.jl:37\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpvycqhshz.jl:23\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpvycqhshz.jl:37 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpvycqhshz.jl:35\\ntest\
    \ set: Error During Test at /tmp/tmpvycqhshz.jl:38\\n  Test threw exception\\\
    n  Expression: candidate([1, 2, 3, 4, 5]) == ["
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    min_val = minimum(lst)\n\
    \    remaining = lst[lst .!= min_val]\n    max_val = maximum(remaining)\n    remaining\
    \ = remaining[remaining .!= max_val]\n    return [min_val, max_val, strange_sort_list(remaining)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) < 2 \n        return lst\n    end\n    x = minimum(lst)\n\
    \    rem = setdiff(lst, [x])\n    y = maximum(rem)\n    rem = setdiff(rem, [y])\n\
    \    rest = strange_sort_list(rem)\n    return [x, y, rest...]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcuwzf0j8.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpcuwzf0j8.jl:17\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpcuwzf0j8.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpcuwzf0j8.jl:26\\ntest\
    \ set: Test Failed at /tmp/tmpcuwzf0j8.jl:34\\n  Expression: candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\\n   Evaluated: [-5, 5, 0,\
    \ 2] == [-5, 5, -5, 5, 0, 2, 2, 2]'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    res = []\n    i = 1\n\
    \    while i < length(lst)\n        min_val = findmin(lst)[1]\n        push!(res,\
    \ min_val)\n        deleteat!(lst, findall(lst .== min_val)[1])\n        max_val\
    \ = findmax(lst)[1]\n        push!(res, max_val)\n        deleteat!(lst, findall(lst\
    \ .== max_val)[1])\n        i += 2\n    end\n    if isempty(lst)\n        return\
    \ res\n    else\n        return push!(res, lst[1])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpt5ksspb6.jl:37\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 2] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpt5ksspb6.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpt5ksspb6.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpt5ksspb6.jl:38\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 6] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpt5ksspb6.jl:38 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpt5ksspb6.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpt5ksspb6.jl:39\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 2] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpt5ksspb6.jl:39 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpt5ksspb6.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmpt5ksspb6.jl:40\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 9, 5, 8, 6] == [1, 9, 5, 8, 6, 7]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpt5ksspb6.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpt5ksspb6.jl:36\\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted = sort(lst)\n    for i = 1:2:length(sorted)\n        sorted[i:i+1]\
    \ = sorted[i+1:-1:i]\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdfu9j2jf.jl:23\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [2, 1, 4, 3] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpdfu9j2jf.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpdfu9j2jf.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    ret = []\n    asc_lst = sort(lst)\n    len_lst = length(lst)\n    count\
    \ = 1\n    while count <= len_lst\n        if count % 2 == 1\n            push!(ret,\
    \ asc_lst[count])\n        else\n            push!(ret, asc_lst[len_lst - count\
    \ + 1])\n        end\n        count += 1\n    end\n    return ret\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5moihpok.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5moihpok.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5moihpok.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5moihpok.jl:32\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5moihpok.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5moihpok.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5moihpok.jl:33\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5moihpok.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5moihpok.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5moihpok.jl:34\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5moihpok.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5moihpok.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp5moihpok.jl:37\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5moihpok.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    if length(lst) %\
    \ 2 == 0\n        n = Int(length(lst)/2)\n    else\n        n = Int(ceil(length(lst)/2))\n\
    \    end\n    sorted_list = Vector{Int64}(n)\n    for i in 1:n\n        if i ==\
    \ 1\n            sorted_list[i] = minimum(lst)\n        else\n            sorted_list[i]\
    \ = minimum(setdiff(lst, sorted_list))\n        end\n    end\n    for i in 1:n\n\
    \        if i == 1\n            sorted_list[n-i+1] = maximum(lst)\n        else\n\
    \            sorted_list[n-i+1] = maximum(setdiff(lst, sorted_list))\n       \
    \ end\n    end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpixinrdve.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\\n  Closest candidates are:\\n   \
    \ Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\\\
    n    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    ...\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmpixinrdve.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpixinrdve.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpixinrdve.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) % 2 == 0\n        lst_ext = [lst[i] == lst[i+1] ? lst[i]\
    \ : lst[i] + lst[i+1] for i = 1:2:length(lst)]\n    else\n        lst_ext = [lst[i]\
    \ == lst[i+1] ? lst[i] : lst[i] + lst[i+1] for i = 1:2:length(lst)-1]\n      \
    \  push!(lst_ext, lst[end])\n    end\n    sum([lst_ext[i] - abs(lst_ext[i+1] -\
    \ lst_ext[i]) for i = 1:2:length(lst_ext)])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    lst = sort(lst)\n  \
    \  front, back = lst[1], lst[2:end]\n    if isempty(back)\n        return lst\n\
    \    end\n    return [front, reverse(back)[1]] .* vcat(strange_sort_list(front\
    \ .== back .? back[2:end], reverse(back)[2:end]))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"back .\"\
    \ at /tmp/tmprhc3gx8b.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhc3gx8b.jl:20\n\
    in expression starting at /tmp/tmprhc3gx8b.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return []\n    end\n    v = sort(lst)\n\
    \    ans = zeros(Int64, n)\n    for i = 1:2:n\n        if i == n\n           \
    \ ans[i] = v[i]\n        else\n            ans[i] = v[i]\n            ans[i+1]\
    \ = v[n+1-i]\n        end\n    end\n    return ans\nend\n\"\"\"\n    Test if the\
    \ list satisfies strange order.\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc642u210.jl:28\nin expression starting at /tmp/tmpc642u210.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sorted = sort(lst)\n    out = Int64[]\n    \n    for i in 1:2:length(sorted)\n\
    \        append!(out, sorted[i])\n    end\n    \n    for i in length(sorted):-2:1\n\
    \        prepend!(out, sorted[i])\n    end\n    \n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_mcn1my.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 4, 1, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_mcn1my.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_mcn1my.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9_mcn1my.jl:32\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 5, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_mcn1my.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_mcn1my.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9_mcn1my.jl:33\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 1, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_mcn1my.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_mcn1my.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9_mcn1my.jl:34\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 7, 9, 1, 6, 8] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_mcn1my.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_mcn1my.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp9_mcn1my.jl:37\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_mcn1my.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted_list = sort(lst)\n    if length(sorted_list) % 2 == 0\n       \
    \ strange_sorted_list = Array{Int64}(undef,length(sorted_list))\n        for i\
    \ in 1:2:length(sorted_list)\n            strange_sorted_list[i] = sorted_list[ceil(Int64,\
    \ i/2)]\n            strange_sorted_list[i+1] = sorted_list[end - floor(Int64,\
    \ i/2)]\n        end\n    else\n        strange_sorted_list = Array{Int64}(undef,length(sorted_list))\n\
    \        for i in 1:2:length(sorted_list)-1\n            strange_sorted_list[i]\
    \ = sorted_list[ceil(Int64, i/2)]\n            strange_sorted_list[i+1] = sorted_list[end\
    \ - floor(Int64, i/2)]\n        end\n        strange_sorted_list[end] = sorted_list[ceil(Int64,\
    \ length(sorted_list)/2)]\n    end\n    return strange_sorted_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    m, M = minimum(lst), maximum(lst)\n    while m == M\n        lst = lst[lst\
    \ .!= m]\n        m, M = minimum(lst), maximum(lst)\n    end\n    res = [m]\n\
    \    while !isempty(lst)\n        lst = lst[lst .!= m]\n        m, M = minimum(lst),\
    \ maximum(lst)\n        while m == M\n            lst = lst[lst .!= m]\n     \
    \       m, M = minimum(lst), maximum(lst)\n        end\n        push!(res, M)\n\
    \        lst = lst[lst .!= M]\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt6pp9blr.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpt6pp9blr.jl:23\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpt6pp9blr.jl:35 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpt6pp9blr.jl:34\\ntest\
    \ set: Error During Test at /tmp/tmpt6pp9blr.jl:36\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sort_list = Vector{Int64}(undef, length(lst))\n    while !isempty(lst)\n\
    \        i = indmin(lst)\n        push!(sort_list, lst[i])\n        deleteat!(lst,\
    \ i)\n        if !isempty(lst)\n            i = indmax(lst)\n            push!(sort_list,\
    \ lst[i])\n            deleteat!(lst, i)\n        end\n    end\n    return sort_list\n\
    end\n# Test\nprintln(strange_sort_list([1, 2, 3, 4]))\nprintln(strange_sort_list([5,\
    \ 5, 5, 5]))\nprintln(strange_sort_list([]))\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: indmin not defined\nStacktrace:\n [1]\
    \ strange_sort_list(lst::Vector{Int64})\n   @ Main /tmp/tmpbfj32mgz.jl:14\n [2]\
    \ top-level scope\n   @ /tmp/tmpbfj32mgz.jl:26\nin expression starting at /tmp/tmpbfj32mgz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    lst = sort(lst)\n\
    \    result = [lst[1]]\n    lst = lst[2:end]\n    while length(lst) > 0\n    \
    \    result = [result, lst[end]]\n        lst = lst[1:end-1]\n        if length(lst)\
    \ > 0\n            result = [result, lst[1]]\n            lst = lst[2:end]\n \
    \       end\n    end\n    return flatten(result)\nend\n\"\"\"\n    Given list\
    \ of integers, return list in strange order.\n    Strange sorting, is when you\
    \ start with the minimum value,\n    then maximum of the remaining integers, then\
    \ minimum and so on.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44d_0qdv.jl:28\nin expression starting at\
    \ /tmp/tmp44d_0qdv.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    lowest = minimum(lst)\n    lst = lst[lst .!=\
    \ lowest]\n    highest = maximum(lst)\n    lst = lst[lst .!= highest]\n    return\
    \ [lowest, highest, strange_sort_list(lst)...]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnmxcdw_i.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpnmxcdw_i.jl:20\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpnmxcdw_i.jl:33 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpnmxcdw_i.jl:28\\ntest\
    \ set: Test Failed at /tmp/tmpnmxcdw_i.jl:36\\n  Expression: candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\\n   Evaluated: [-5, 5, 0,\
    \ 2] == [-5, 5, -5, 5, 0, 2, 2, 2]'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    j = 1\n\
    \    sorted_lst = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 1\n \
    \           sorted_lst[i] = minimum(lst)\n        else\n            sorted_lst[i]\
    \ = maximum(lst)\n        end\n        lst = deleteat!(lst, find(lst .== sorted_lst[i]))\n\
    \    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvz0zkgi1.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ find not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpvz0zkgi1.jl:24\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvz0zkgi1.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvz0zkgi1.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpvz0zkgi1.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: find not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpvz0zkgi1.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvz0zkgi1.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvz0zkgi1.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpvz0zkgi1.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: find not defined\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpvz0zkgi1.jl:24\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvz0zkgi1.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvz0zkgi1.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpvz0zkgi1.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: find\
    \ not defined\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # Corner cases\n    if isempty(lst)\n        return lst\n    end\n   \
    \ # The main algorithm\n    sorted = sort(lst)\n    @assert rem(length(sorted),\
    \ 2) == 0\n    n = length(sorted)\n    result = zeros(Int64, n)\n    result[1:2:n]\
    \ = sorted[1:n/2]\n    result[2:2:n] = sorted[n/2+1:n]\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_yz2dtl8.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] macro expansion\\\
    n      @ ./multidimensional.jl:867 [inlined]\\n    [7] macro expansion\\n    \
    \  @ ./cartesian.jl:64 [inlined]\\n    [8] _unsafe_getindex!\\n      @ ./multidimensional.jl:862\
    \ [inlined]\\n    [9] _unsafe_getindex\\n      @ ./multidimensional.jl:853 [inlined]\\\
    n   [10] _getindex\\n      @ ./multidimensional.jl:839 [inlined]\\n   [11] getindex\\\
    n      @ ./abstractarray.jl:1218 [inlined]\\n   [12] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp_yz2dtl8.jl:21\\n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [14] macro expansion\\n      @ /tmp/tmp_yz2dtl8.jl:30 [inlined]\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [16] top-level scope\\n      @ /tmp/tmp_yz2dtl8.jl:29\\ntest\
    \ set: Error During Test at /tmp/tmp_yz2dtl8.jl:31\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  AssertionError:\
    \ rem(length(sorted), 2) == 0\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp_yz2dtl8.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_yz2dtl8.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_yz2dtl8.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp_yz2dtl8.jl:32"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0 \n        return []\n    end\n    min_value = minimum(lst)\n\
    \    lst_without_min = lst[lst .!= min_value]\n    max_value = maximum(lst_without_min)\n\
    \    lst_without_max = lst_without_min[lst_without_min .!= max_value]\n    return\
    \ [min_value, max_value] .* ones(2) .+ strange_sort_list(lst_without_max)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt8peya8b.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 2\
    \ and 0\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:516 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:510 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:504 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:499\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:281 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:860 [inlined]\\n    [7] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 2 times)\\n      @ Main /tmp/tmpt8peya8b.jl:19\\n    [8] macro expansion\\\
    n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpt8peya8b.jl:26 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpt8peya8b.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    reverse!(sort!(lst))\n    lst2 = lst[2:end]\n    lst3 = lst[1:end-1]\n\
    \    sort!(lst2)\n    sort!(lst3)\n    lst2\n    lst3\n    lst2\n    reverse!(lst2)\n\
    \    lst3\n    lst2\n    reverse!(lst3)\n    lst3\n    lst3\n    lst3\n    join(lst3,\
    \ lst2)\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    res = Int64[]\n    while !isempty(lst)\n        push!(res, [extrema(lst)...])\n\
    \        lst = lst[1:end .!= res[end]]\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return []\n    end\n    small\
    \ = findmin(lst)[1]\n    lst = deleteat!(lst, small)\n    large = findmax(lst)[1]\n\
    \    return [small, large] * strange_sort_list(lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1kswlwv0.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 1-element Vector{Int64} at index [2]\\n  Stacktrace:\\n  \
    \ [1] _deleteat!\\n     @ ./array.jl:959 [inlined]\\n   [2] deleteat!\\n     @\
    \ ./array.jl:1423 [inlined]\\n   [3] strange_sort_list(lst::Vector{Int64})\\n\
    \     @ Main /tmp/tmp1kswlwv0.jl:17\\n   [4] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 3 times)\\n     @ Main /tmp/tmp1kswlwv0.jl:19\\n   [5] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp1kswlwv0.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp1kswlwv0.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp1kswlwv0.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n   [1] _deleteat!\\n\
    \     @ ./array.jl:959 [inlined]\\n   [2] deleteat!\\n     @ ./array.jl:1423 [inlined]\\\
    n   [3] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp1kswlwv0.jl:17\\\
    n   [4] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp1kswlwv0.jl:19\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmp1kswlwv0.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp1kswlwv0.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp1kswlwv0.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\\n  Stacktrace:\\n   [1] _deleteat!\\n\
    \     @ ./array.jl:959 [inlined]\\n   [2] deleteat!\\n     @ ./array.jl:1423 [inlined]\\\
    n   [3] strange"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if isempty(lst)\n        return []\n    end\n    \n    if length(lst)\
    \ == 1\n        return lst\n    end\n    \n    min_lst = minimum(lst)\n    remainder\
    \ = lst[lst .!= min_lst]\n    max_lst = maximum(remainder)\n    remain = remainder[remainder\
    \ .!= max_lst]\n    \n    return [min_lst, max_lst, strange_sort_list(remain)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    tmp=lst\n    res=[]\n    while length(tmp)>1\n        a=minimum(tmp)\n\
    \        append!(res,a)\n        deleteat!(tmp,findfirst(x->x==a,tmp))\n     \
    \   b=maximum(tmp)\n        append!(res,b)\n        deleteat!(tmp,findfirst(x->x==b,tmp))\n\
    \    end\n    append!(res,tmp[1])\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp45qhtkkw.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp45qhtkkw.jl:22\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp45qhtkkw.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp45qhtkkw.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp45qhtkkw.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  BoundsError: attempt\
    \ to access 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp45qhtkkw.jl:22\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp45qhtkkw.jl:33 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp45qhtkkw.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp45qhtkkw.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmp45qhtkkw.jl:22\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp45qhtkkw.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if all(lst .== lst[1])\n\
    \        return lst\n    end\n    small = minimum(lst)\n    small_idx = findall(lst\
    \ .== small)[1]\n    lst = lst[setdiff(1:end, small_idx)]\n    return [small;\
    \ strange_sort_list(reverse(lst))]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu45xqf7v.jl:28\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu45xqf7v.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu45xqf7v.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpu45xqf7v.jl:29\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu45xqf7v.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu45xqf7v.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpu45xqf7v.jl:30\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu45xqf7v.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu45xqf7v.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmpu45xqf7v.jl:31\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 5, 6, 7, 8, 9] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpu45xqf7v.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpu45xqf7v.jl:27\\ntest set: Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    result = []\n    while length(lst) > 0\n        push!(result,\
    \ popfirst!(lst))\n        push!(result, poplast!(lst))\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcn6wdrmv.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ poplast! not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpcn6wdrmv.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcn6wdrmv.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcn6wdrmv.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpcn6wdrmv.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: poplast! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpcn6wdrmv.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcn6wdrmv.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcn6wdrmv.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpcn6wdrmv.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: poplast! not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmpcn6wdrmv.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcn6wdrmv.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcn6wdrmv.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpcn6wdrmv.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: poplast!"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    result = []\n    if length(lst) == 0 \n        return result\n    end\n\
    \    if length(lst) == 1 \n        return lst\n    end\n    while length(lst)\
    \ > 0\n        push!(result, lst[1])\n        popfirst!(lst)\n        if length(lst)\
    \ > 0\n            push!(result, lst[end])\n            pop!(lst)\n        end\n\
    \    end\n    return result\nend\n@testset \"Test strange_sort_list\" begin\n\
    \    @test strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    @test strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    @test strange_sort_list([]) == []\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpg4cajr1h.jl:29\nin expression starting at /tmp/tmpg4cajr1h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    len = length(lst)\n    if len == 0\n        return lst\n    end\n    order\
    \ = Vector{Int64}(len)\n    start = argmin(lst)\n    end = argmax(lst)\n    i\
    \ = 1\n    while i <= len\n        if i % 2 == 1\n            order[i] = start\n\
    \            start += 1\n        else\n            order[i] = end\n          \
    \  end -= 1\n        end\n        i += 1\n    end\n    return lst[order]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \    # /tmp/tmpj39wzzhu.jl, line 11\n    # /tmp/tmpj39wzzhu.jl, line 12\n    len\
    \ = length(lst)\n    # /tmp/tmpj39wzzhu.jl, line 13\n    if (len == 0)\n     \
    \   # /tmp/tmpj39wzzhu.jl, line 14\n        return lst\n    end\n    # /tmp/tmpj39wzzhu.jl,\
    \ line 16\n    order = Vector{Int64}(len)\n    # /tmp/tmpj39wzzhu.jl, line 17\n\
    \    start = argmin(lst)\nend\" around /tmp/tmpj39wzzhu.jl:1\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpj39wzzhu.jl:1\nin expression starting at /tmp/tmpj39wzzhu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_len = length(lst)\n    if lst_len == 0\n        return []\n    end\n\
    \    if lst_len == 1\n        return lst\n    end\n    return [minimum(lst)]\n\
    \        push!(strange_sort_list(lst[lst .!= minimum(lst)]), maximum(lst))\n \
    \       push!(strange_sort_list(lst[lst .!= maximum(lst)]), minimum(lst))\n  \
    \      push!(strange_sort_list(lst[lst .!= minimum(lst)]), maximum(lst))\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq3k81_gh.jl:24\nin expression starting at /tmp/tmpq3k81_gh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst) \n        return lst\n    end\n    n = length(lst)\n \
    \   even_indeces = 1:2:n\n    odd_indeces = 2:2:n\n    # even part\n    even_sorted\
    \ = sort(lst[even_indeces])\n    # odd part\n    odd_sorted = sort(lst[odd_indeces])\n\
    \    res = [even_sorted; odd_sorted]\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu6cxuvq6.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6cxuvq6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6cxuvq6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpu6cxuvq6.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 6, 8] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6cxuvq6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6cxuvq6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpu6cxuvq6.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 2, 4] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6cxuvq6.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6cxuvq6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpu6cxuvq6.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 7, 9, 1, 6, 8] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6cxuvq6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6cxuvq6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpu6cxuvq6.jl:36\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6cxuvq6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    N = length(lst)\n    mid = convert(Int64, N/2)\n    lst_sorted = zeros(Int64,\
    \ N)\n    lst_sorted[1:mid] = sort(lst[1:mid])\n    lst_sorted[N - mid + 1:N]\
    \ = sort(lst[mid+1:N], rev=true)\n    return lst_sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6cnuva4v.jl:24\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2, 4, 3] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp6cnuva4v.jl:24 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp6cnuva4v.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    sorted_asc = sort(lst)\n\
    \    sorted_desc = sort(lst, rev=true)\n    # @show sorted_asc\n    # @show sorted_desc\n\
    \    output = []\n    if mod(length(lst), 2) == 0\n        for j in 1:2:length(lst)\n\
    \            push!(output, sorted_asc[j])\n            push!(output, sorted_desc[j])\n\
    \        end\n    else\n        push!(output, sorted_asc[1])\n        for j in\
    \ 2:2:length(lst)\n            push!(output, sorted_asc[j])\n            push!(output,\
    \ sorted_desc[j])\n        end\n    end\n    return output\nend\n\"\"\"\nGiven\
    \ list of integers, return list in strange order.\n    Strange sorting, is when\
    \ you start with the minimum value,\n    then maximum of the remaining integers,\
    \ then minimum and so on.\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0l9lqajm.jl:34\nin expression starting at\
    \ /tmp/tmp0l9lqajm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    pos = (div(length(lst),\
    \ 2))::Int64\n    ind = [pos, pos + 1]\n    lst = [lst[i] for i in ind]\n    lst\
    \ = vcat(lst, strange_sort_list(setdiff(lst, lst)))\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5d0k9dvk.jl:26\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [2, 3] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp5d0k9dvk.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp5d0k9dvk.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp5d0k9dvk.jl:27\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [6, 7] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp5d0k9dvk.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp5d0k9dvk.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp5d0k9dvk.jl:28\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [2, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp5d0k9dvk.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp5d0k9dvk.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp5d0k9dvk.jl:29\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [7, 8] == [1, 9, 5, 8, 6, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp5d0k9dvk.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp5d0k9dvk.jl:25\\ntest set: Test\
    \ Failed at /tmp/tmp5d0k9dvk.jl:30\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sort_descending!(lst)\n    new_lst = Vector{Int64}()\n    for i in 1:2:length(lst)\n\
    \        push!(new_lst, lst[i])\n    end\n    for i in 2:2:length(lst)\n     \
    \   push!(new_lst, lst[i])\n    end\n    return new_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_dm66goe.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ sort_descending! not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp_dm66goe.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_dm66goe.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_dm66goe.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_dm66goe.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: sort_descending!\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp_dm66goe.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_dm66goe.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_dm66goe.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_dm66goe.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: sort_descending!\
    \ not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp_dm66goe.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_dm66goe.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_dm66goe.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_dm66goe.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    #your code here\n    sorted_lst = sort(lst)\n    srt_len = length(sorted_lst)\n\
    \    mid = div(srt_len, 2)\n    if srt_len == 0\n        return sorted_lst\n \
    \   elseif srt_len == 1\n        return sorted_lst\n    elseif srt_len == 2\n\
    \        new_lst = [sorted_lst[1], sorted_lst[2]]\n        return new_lst\n  \
    \  elseif srt_len == 3\n        new_lst = [sorted_lst[1], sorted_lst[3], sorted_lst[2]]\n\
    \        return new_lst\n    elseif srt_len % 2 == 0\n        new_lst = [sorted_lst[1]]\n\
    \        for i in 1:mid-1\n            push!(new_lst, sorted_lst[mid+i])\n   \
    \         push!(new_lst, sorted_lst[mid-i])\n        end\n        return new_lst\n\
    \    else\n        new_lst = [sorted_lst[1]]\n        for i in 1:mid-1\n     \
    \       push!(new_lst, sorted_lst[mid+i+1])\n            push!(new_lst, sorted_lst[mid-i])\n\
    \        end\n        push!(new_lst, sorted_lst[mid+1])\n        return new_lst\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpci7m1r1o.jl:48\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpci7m1r1o.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpci7m1r1o.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpci7m1r1o.jl:49\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 5, 7] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpci7m1r1o.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpci7m1r1o.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpci7m1r1o.jl:50\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 1, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpci7m1r1o.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpci7m1r1o.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpci7m1r1o.jl:51\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 7, 5, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpci7m1r1o.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpci7m1r1o.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpci7m1r1o.jl:52\n  Expression: candidate([5, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpci7m1r1o.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    sorted_list = sort(lst)\n\
    \    if length(lst) % 2 == 0\n        offset = 1\n    else\n        offset = 0\n\
    \    end\n    return [sorted_list[1:length(lst)\xF72] sorted_list[end:-1:length(lst)\xF7\
    2+1+offset]]\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpztwg3v2t.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  DimensionMismatch(\"\
    vectors must have same lengths\")\\n  Stacktrace:\\n   [1] hcat\\n     @ ./array.jl:1804\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpztwg3v2t.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpztwg3v2t.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpztwg3v2t.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpztwg3v2t.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  DimensionMismatch(\"vectors\
    \ must have same lengths\")\\n  Stacktrace:\\n   [1] hcat\\n     @ ./array.jl:1804\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpztwg3v2t.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpztwg3v2t.jl:29 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpztwg3v2t.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpztwg3v2t.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  DimensionMismatch(\"vectors\
    \ must have same lengths\")\\n  Stacktrace:\\n   [1] hcat\\n     @ ./array.jl:1804\
    \ [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpztwg3v2t.jl:21\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpztwg3v2t.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst = sort(lst)\n\
    \    mid = div(length(lst), 2)\n    if length(lst) % 2 == 0\n        mid -= 1\n\
    \    end\n    return [lst[1:mid]; lst[end:-1:mid+2]; lst[mid+1]]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg2wfw8e1.jl:27\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2wfw8e1.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2wfw8e1.jl:26\\ntest set: Test\
    \ Failed at /tmp/tmpg2wfw8e1.jl:28\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 9, 8, 7] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2wfw8e1.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2wfw8e1.jl:26\\ntest set: Test\
    \ Failed at /tmp/tmpg2wfw8e1.jl:29\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 5, 4, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2wfw8e1.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2wfw8e1.jl:26\\ntest set: Test\
    \ Failed at /tmp/tmpg2wfw8e1.jl:30\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 5, 9, 8, 7, 6] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpg2wfw8e1.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpg2wfw8e1.jl:26\\ntest set: Test"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpg2wfw8e1.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    strange_list = zeros(Int64, n)\n    lst = sort(lst)\n\
    \    for i in 1:2:n\n        @assert i + 1 <= n\n        strange_list[i] = lst[i]\n\
    \        strange_list[i + 1] = lst[n - i + 1]\n    end\n    return strange_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp195bberx.jl:27\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 3, 2] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp195bberx.jl:27 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp195bberx.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    return sort([min(lst),\
    \ max(lst[2:end])], rev=true)\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsalnn5rb.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching min(::Vector{Int64})\\n  Closest candidates are:\\n    min(::Any,\
    \ !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\\\
    n    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    ...\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmpsalnn5rb.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsalnn5rb.jl:23 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsalnn5rb.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_len = length(lst)\n    sorted_lst = Vector{Int64}(undef, lst_len)\n\
    \    index = 1\n    index_step = 1\n    while index <= lst_len\n        if index_step\
    \ == 1\n            min_value = findmin(lst)[1]\n            deleteat!(lst, findall(lst\
    \ .== min_value))\n            sorted_lst[index] = min_value\n            index_step\
    \ = 2\n        else\n            max_value = findmax(lst)[1]\n            deleteat!(lst,\
    \ findall(lst .== max_value))\n            sorted_lst[index] = max_value\n   \
    \         index_step = 1\n        end\n        index += 1\n    end\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4v57atwd.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n     \
    \ @ ./reduce.jl:357 [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356\
    \ [inlined]\\n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7]\
    \ mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n\
    \      @ ./reduce.jl:162 [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] findmax\\n      @ ./reduce.jl:803 [inlined]\\n   [11] _findmax\\\
    n      @ ./reduce.jl:829 [inlined]\\n   [12] #findmax#785\\n      @ ./reducedim.jl:1052\
    \ [inlined]\\n   [13] findmax\\n      @ ./reducedim.jl:1052 [inlined]\\n   [14]\
    \ strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmp4v57atwd.jl:23\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmp4v57atwd.jl:41 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmp4v57atwd.jl:36\\ntest\
    \ set: Error During Test at /tmp/tmp4v57atwd.jl:44\\n  Test threw exception\\\
    n  Expression: candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2,\
    \ 2]\\n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base._rf_findmin)}, T::Type)\\n      @ Base ./reduce.jl:344\\\
    n    [3] reduce_empty(o"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    # Get the order that the list should be in.\n   \
    \ order = [i % 2 == 1 ? minimum(lst) : maximum(lst) for i in 1:n]\n    # Make\
    \ a dictionary to store value and position\n    d = Dict(i => lst[i] for i in\
    \ 1:n)\n    # Now get the actual list\n    [d[i] for i in order]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8od3_p8e.jl:25\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 1, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8od3_p8e.jl:25 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8od3_p8e.jl:24\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if (length(lst) == 0)\n        return lst\n    end\n    min_i = argmin(lst)\n\
    \    min_el = lst[min_i]\n    max_i = argmax(lst[lst .!= min_el])\n    max_el\
    \ = lst[max_i]\n    return vcat(min_el, strange_sort_list(deleteat!(lst, [min_i,\
    \ max_i])))\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkswuvskp.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ indices must be unique and sorted\\n  Stacktrace:\\n   [1] _deleteat!(a::Vector{Int64},\
    \ inds::Vector{Int64}, dltd::Base.Nowhere)\\n     @ Base ./array.jl:1488\\n  \
    \ [2] _deleteat!\\n     @ ./array.jl:1475 [inlined]\\n   [3] deleteat!\\n    \
    \ @ ./array.jl:1469 [inlined]\\n   [4] strange_sort_list(lst::Vector{Int64}) (repeats\
    \ 2 times)\\n     @ Main /tmp/tmpkswuvskp.jl:19\\n   [5] macro expansion\\n  \
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpkswuvskp.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpkswuvskp.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpkswuvskp.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError: reducing over\
    \ an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmax)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #260#261\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n     \
    \ @ ./reduce.jl:357 [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356\
    \ [inlined]\\n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7]\
    \ mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n\
    \      @ ./reduce.jl:162 [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] findmax\\n      @ ./reduce.jl:803 [inlined]\\n   [11] _findmax\\\
    n      @ ./reduce.jl:829 [inlined]\\n   [12] #findmax#785\\n      @ ./reducedim.jl:1052\
    \ [inlined]\\n   [13] #argmax#787\\n      @ ./reducedim.jl:1117 [inlined]\\n \
    \  [14] argmax\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0 \n        return []\n    end\n    if length(lst) ==\
    \ 1 \n        return lst\n    end\n    min_index = findmin(lst)[2]\n    min_value\
    \ = findmin(lst)[1]\n    max_index = findmax(lst)[2]\n    max_value = findmax(lst)[1]\n\
    \    new_lst = deepcopy(lst)\n    deleteat!(new_lst, min_index)\n    deleteat!(new_lst,\
    \ max_index - 1)\n    return [min_value, max_value] .+ strange_sort_list(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp217gjfde.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 2\
    \ and 0\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:516 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:510 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:504 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:499\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:281 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:860 [inlined]\\n    [7] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 2 times)\\n      @ Main /tmp/tmp217gjfde.jl:25\\n    [8] macro expansion\\\
    n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmp217gjfde.jl:32 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp217gjfde.jl:31\\ntest\
    \ set: Test Failed at /tmp/tmp217gjfde.jl:33\\n  Expression: candidate([5, 6,\
    \ 7, 8, 9]) == [5, 9, 6, 8, 7]\\n   Evaluated: [18, 24] == [5, 9, 6, 8, 7]'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    if length(lst) == 2\n        return lst\n\
    \    end\n    sort_list = []\n    while true\n        append!(sort_list, minimum(lst))\n\
    \        lst = lst[2:end]\n        if length(lst) == 0\n            break\n  \
    \      end\n        if length(lst) == 1\n            append!(sort_list, lst[1])\n\
    \            break\n        end\n        append!(sort_list, maximum(lst))\n  \
    \      lst = lst[1:end-1]\n        if length(lst) == 0\n            break\n  \
    \      end\n        if length(lst) == 1\n            append!(sort_list, lst[1])\n\
    \            break\n        end\n    end\n    return sort_list\nend\n    \n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3xhczsr6.jl:56\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 9, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xhczsr6.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xhczsr6.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp3xhczsr6.jl:60\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [-5, 5, -5, 5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xhczsr6.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xhczsr6.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xhczsr6.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if all(lst .== lst[1])\n\
    \        return lst\n    end\n    m = maximum(lst)\n    l = minimum(lst)\n   \
    \ idx = findall(lst .== m)\n    idx2 = findall(lst .== l)\n    append!(lst, l)\n\
    \    # deleteat!(lst, idx)\n    deleteat!(lst, idx2)\n    # deleteat!(lst, idx2)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1nnuze4j.jl:33\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [2, 3, 4, 1] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nnuze4j.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nnuze4j.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp1nnuze4j.jl:34\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [6, 7, 8, 9, 5] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nnuze4j.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nnuze4j.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp1nnuze4j.jl:35\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [2, 3, 4, 5, 1] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nnuze4j.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nnuze4j.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmp1nnuze4j.jl:36\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp1nnuze4j.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp1nnuze4j.jl:32\\ntest set: Test"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    list = deepcopy(lst)\n    sorted = sort(list)\n    output = Vector{Int64}()\n\
    \    while length(sorted) > 0\n        if length(sorted) == 1\n            push!(output,\
    \ sorted[1])\n            deleteat!(sorted, 1)\n        else\n            push!(output,\
    \ sorted[1])\n            deleteat!(sorted, 1)\n            push!(output, sorted[end])\n\
    \            deleteat!(sorted, end)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvyslth_.jl:23\nin expression starting at /tmp/tmpxvyslth_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0 \n        return []\n    end\n    ret = Vector{Int64}(length(lst))\n\
    \    sorted = sort(lst)\n    for i in 1:2:length(lst)\n        ret[i] = sorted[i]\n\
    \    end\n    for i in 2:2:length(lst)\n        ret[i] = sorted[end - i + 1]\n\
    \    end\n    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_er2jp9t.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\\n  Closest candidates are:\\n   \
    \ Vector{T}() where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\\\
    n    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\\\
    n    ...\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmp_er2jp9t.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_er2jp9t.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_er2jp9t.jl:29\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    x = isempty(lst)\n    if x == true\n        return []\n    end\n    minimum\
    \ = minimum(lst)\n    remaining = lst[lst .!= minimum]\n    max_remaining = maximum(remaining)\n\
    \    remaining_new = remaining[remaining .!= max_remaining]\n    return [minimum;\
    \ max_remaining; strange_sort_list(remaining_new)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp88o3qk7x.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ minimum not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp88o3qk7x.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp88o3qk7x.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp88o3qk7x.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp88o3qk7x.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: minimum not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp88o3qk7x.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp88o3qk7x.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp88o3qk7x.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp88o3qk7x.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: minimum not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp88o3qk7x.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp88o3qk7x.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp88o3qk7x.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp88o3qk7x.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: minimum\
    \ not"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    min_ = minimum(lst)\n\
    \    rest = lst[lst .!= min_]\n    if length(rest) > 0\n        max_ = maximum(rest)\n\
    \        rest = rest[rest .!= max_]\n    else\n        max_ = min_\n    end\n\
    \    return vcat(min_, max_, strange_sort_list(rest))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxhd0d4cf.jl:31\\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxhd0d4cf.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxhd0d4cf.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpxhd0d4cf.jl:32\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxhd0d4cf.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxhd0d4cf.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpxhd0d4cf.jl:34\\n  Expression: candidate([5, 5, 5, 5]) ==\
    \ [5, 5, 5, 5]\\n   Evaluated: [5, 5] == [5, 5, 5, 5]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxhd0d4cf.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxhd0d4cf.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpxhd0d4cf.jl:37\\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\\n   Evaluated: [-5, 5, 0, 2] == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxhd0d4cf.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxhd0d4cf.jl"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    start_pointer = 1\n\
    \    end_pointer = length(lst)\n    sorted_list = []\n    for x = 1:div(length(lst),\
    \ 2)\n        push!(sorted_list, lst[start_pointer])\n        push!(sorted_list,\
    \ lst[end_pointer])\n        start_pointer += 1\n        end_pointer -= 1\n  \
    \  end\n    if mod(length(lst), 2) == 1\n        push!(sorted_list, lst[start_pointer])\n\
    \    end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg52ertxf.jl:37\n  Expression: candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 6, 9, 7, 8] == [1,\
    \ 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg52ertxf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg52ertxf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpg52ertxf.jl:41\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [0, -5, 2, -5, 2, 5, 2,\
    \ 5] == [-5, 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg52ertxf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg52ertxf.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg52ertxf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    lst = copy(lst)\n  \
    \  idx = 1\n    N = length(lst)\n    while idx < N\n        mx = maximum(lst[idx+1:end])\n\
    \        mxidx = findall(mx .== lst)[end]\n        lst[mxidx] = lst[idx]\n   \
    \     lst[idx] = mx\n        idx += 1\n        if idx >= N\n            break\n\
    \        end\n        mn = minimum(lst[idx+1:end])\n        mnidx = findall(mn\
    \ .== lst)[end]\n        lst[mnidx] = lst[idx]\n        lst[idx] = mn\n      \
    \  idx += 1\n    end\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8h4oer9j.jl:40\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [4, 1, 2, 3] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8h4oer9j.jl:40 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8h4oer9j.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp8h4oer9j.jl:41\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [9, 5, 8, 6, 7] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8h4oer9j.jl:41 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8h4oer9j.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp8h4oer9j.jl:42\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [5, 1, 4, 2, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8h4oer9j.jl:42 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8h4oer9j.jl:39\\ntest set: Test\
    \ Failed at /tmp/tmp8h4oer9j.jl:43\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [9, 1, 8, 5, 6, 7] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp8h4oer9j.jl:43 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp8h4oer9j.jl:39\\ntest set: Test"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"\n    Python code\n    ------------\n    def strange_sort_list(lst):\n\
    \        return [] if not lst else [\n            lst.pop(lst.index(min(lst)))\
    \ if i % 2 == 0 else lst.pop(lst.index(max(lst)))\n            for i in range(len(lst))\n\
    \        ]\n    \"\"\"\n    if isempty(lst)\n        return []\n    else\n   \
    \     output = []\n        while length(lst) != 0\n            if length(output)\
    \ % 2 == 0\n                push!(output, pop!(lst, findmin(lst)[2]))\n      \
    \      else\n                push!(output, pop!(lst, findmax(lst)[2]))\n     \
    \       end\n        end\n        return output\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp60vz0f42.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  MethodError:\
    \ no method matching pop!(::Vector{Int64}, ::Int64)\\n  Closest candidates are:\\\
    n    pop!(!Matched::Base.IdSet, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:21\\\
    n    pop!(!Matched::Base.IdSet, ::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/idset.jl:22\\\
    n    pop!(!Matched::IdDict{K, V}, ::Any) where {K, V} at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:124\\\
    n    ...\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n   \
    \  @ Main /tmp/tmp60vz0f42.jl:27\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp60vz0f42.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp60vz0f42.jl:39\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_sorted = sort(lst)\n    lst_reversed = lst_sorted[end:-1:1]\n    lst_flipped\
    \ = []\n    n = length(lst)\n    if n % 2 == 0\n        lst_flipped = [lst_sorted;\
    \ lst_reversed]\n    else\n        lst_flipped = [lst_sorted; lst_reversed[2:end]]\n\
    \    end\n    return lst_flipped\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppaqulv_c.jl:28\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2, 3, 4, 4, 3, 2, 1] == [1, 4,\
    \ 2, 3]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppaqulv_c.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppaqulv_c.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmppaqulv_c.jl:29\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 7, 8, 9, 8, 7, 6, 5] == [5, 9, 6,\
    \ 8, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppaqulv_c.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppaqulv_c.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmppaqulv_c.jl:30\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 3, 4, 5, 4, 3, 2, 1] == [1, 5, 2,\
    \ 4, 3]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppaqulv_c.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmppaqulv_c.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmppaqulv_c.jl:31\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 1] ==\
    \ [1, 9, 5, 8, 6, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmppaqulv_c.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-le"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmppaqulv_c.jl:25\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    res = []\n    push!(res, minimum(lst))\n    lst = setdiff(lst, minimum(lst))\n\
    \    s = sorted(lst, rev=true)\n    for i in 1:2:length(s)\n        push!(res,\
    \ s[i])\n    end\n    return res\nend\nprintln(strange_sort_list([1, 2, 3, 4]))\n\
    println(strange_sort_list([5, 5, 5, 5]))\nprintln(strange_sort_list([]))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: sorted not defined\nStacktrace:\n [1]\
    \ strange_sort_list(lst::Vector{Int64})\n   @ Main /tmp/tmpxktsug3p.jl:15\n [2]\
    \ top-level scope\n   @ /tmp/tmpxktsug3p.jl:21\nin expression starting at /tmp/tmpxktsug3p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    low, hi = minimum(lst),\
    \ maximum(lst)\n    odd = true\n    result = Vector{Int64}()\n    while length(lst)\
    \ > 0\n        if odd\n            push!(result, low)\n            deleteat!(lst,\
    \ findfirst(==(low), lst))\n            low = minimum(lst)\n        else\n   \
    \         push!(result, hi)\n            deleteat!(lst, findfirst(==(hi), lst))\n\
    \            hi = maximum(lst)\n        end\n        odd = !odd\n    end\n   \
    \ return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy0vz3x_u.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpy0vz3x_u.jl:26\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpy0vz3x_u.jl:37 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpy0vz3x_u.jl:36\\ntest\
    \ set: Error During Test at /tmp/tmpy0vz3x_u.jl:38\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) <= 2\n        return lst\n    end\n    ordered_lst = sort(lst)\n\
    \    ordered_indices = sortperm(lst)\n    new_lst = Vector{Int64}(length(lst))\n\
    \    end_ind = length(lst)\n    new_lst[1] = ordered_lst[1]\n    new_lst[end_ind]\
    \ = ordered_lst[end_ind]\n    for i = 2:end_ind - 1\n        new_lst[i] = ordered_lst[end_ind\
    \ + 1 - i]\n    end\n    return new_lst\nend\n    \n@testset \"example test cases\"\
    \ begin\n    @test strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    @test\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    @test strange_sort_list([])\
    \ == []\nend\n \n \n \n \n \n \n \n \n \n \n\"\"\"\n    Given two strings, check\
    \ if one is an anagram of the other.\n    An anagram of a string is a string created\
    \ by rearranging all characters\n    of another string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmprccudb9o.jl:27\nin expression starting at /tmp/tmprccudb9o.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_sorted = sort(lst)\n    lst_reversed = reverse(lst_sorted)\n    lst_result\
    \ = Vector{Int64}()\n    for (idx, val) in enumerate(lst_sorted)\n        if idx\
    \ % 2 == 0\n            push!(lst_result, val)\n        else\n            push!(lst_result,\
    \ lst_reversed[idx])\n        end\n    end\n    return lst_result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55xcvbl8.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 2, 2, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55xcvbl8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55xcvbl8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp55xcvbl8.jl:30\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 6, 7, 8, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55xcvbl8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55xcvbl8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp55xcvbl8.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 2, 3, 4, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55xcvbl8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55xcvbl8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp55xcvbl8.jl:32\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 5, 7, 7, 5, 9] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55xcvbl8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55xcvbl8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp55xcvbl8.jl:35\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55xcvbl8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # add sort conditions here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    min_ind = findmin(lst)[2]\n\
    \    min_val = lst[min_ind]\n    lst = append!(lst[(1:min_ind-1);(min_ind+1:end)],\
    \ min_val)\n    return append!([min_val], strange_sort_list(lst))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(min_ind + 1):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpktt6khno.jl:17\n\
    in expression starting at /tmp/tmpktt6khno.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst_odd = lst[1:2:end]\n\
    \    lst_even = lst[2:2:end]\n    s = sort(lst_odd, rev=true)\n    r = [s[1]]\n\
    \    for i in 2:length(s)\n        push!(r, s[i])\n        push!(r, pop!(lst_even))\n\
    \    end\n    return r\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvd47zx_l.jl:30\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [3, 1, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvd47zx_l.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvd47zx_l.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpvd47zx_l.jl:31\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [9, 7, 8, 5, 6] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvd47zx_l.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvd47zx_l.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpvd47zx_l.jl:32\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [5, 3, 4, 1, 2] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvd47zx_l.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvd47zx_l.jl:29\\ntest set: Test\
    \ Failed at /tmp/tmpvd47zx_l.jl:33\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [9, 7, 1, 5, 8] == [1, 9, 5, 8, 6, 7]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpvd47zx_l.jl:33 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpvd47zx_l.jl:29\\ntest set: Test\
    \ Faile"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(lst) == 0\n        return lst\n    end\n    \n    sorted\
    \ = sort(lst)\n    res = []\n    push!(res, popfirst!(sorted))\n    push!(res,\
    \ pop!(sorted))\n    \n    for i in 1:2:length(sorted)\n        push!(res, popfirst!(sorted))\n\
    \        push!(res, pop!(sorted))\n    end\n    \n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbw4jea3e.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n \
    \ ArgumentError: array must be non-empty\\n  Stacktrace:\\n   [1] pop!\\n    \
    \ @ ./array.jl:1251 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpbw4jea3e.jl:24\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbw4jea3e.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbw4jea3e.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpbw4jea3e.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  ArgumentError: array must\
    \ be non-empty\\n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1251 [inlined]\\\
    n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpbw4jea3e.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbw4jea3e.jl:36 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbw4jea3e.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpbw4jea3e.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([111111]) == [111111]\\n  ArgumentError: array must be non-empty\\\
    n  Stacktrace:\\n   [1] pop!\\n     @ ./array.jl:1251 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpbw4jea3e.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpbw4jea3e.jl:42 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbw4jea3e.jl:33\\nTest Summary:\
    \ | Pass  Error  "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst_copy = copy(lst)\n\
    \    lst_copy_2 = copy(lst)\n    sort!(lst_copy)\n    lst_copy_2[1] = lst_copy[1]\n\
    \    lst_copy_2[2] = lst_copy[end]\n    if length(lst) % 2 == 0\n        for i\
    \ in 2:2:length(lst)\n            lst_copy_2[i+1] = lst_copy[i+1]\n          \
    \  lst_copy_2[i+2] = lst_copy[end-i]\n        end\n    else\n        for i in\
    \ 2:2:length(lst)-1\n            lst_copy_2[i+1] = lst_copy[i+1]\n           \
    \ lst_copy_2[i+2] = lst_copy[end-i]\n        end\n        lst_copy_2[end] = lst_copy[end]\n\
    \    end\n    return lst_copy_2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9zn_hmpc.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp9zn_hmpc.jl:22\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp9zn_hmpc.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp9zn_hmpc.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp9zn_hmpc.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp9zn_hmpc.jl:28\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp9zn_hmpc.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp9zn_hmpc.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp9zn_hmpc.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp9zn_hmpc.jl:28\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp9zn_hmpc.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    index = 2\n    max_or_min\
    \ = true\n    for i in 1:floor(length(lst)/2)\n        if max_or_min\n       \
    \     maximum = 0\n            max_index = 0\n            for j in index:length(lst)\n\
    \                if lst[j] > maximum\n                    maximum = lst[j]\n \
    \                   max_index = j\n                end\n            end\n    \
    \        maximum, lst[index] = lst[index], maximum\n            index += 1\n \
    \           max_or_min = false\n        else\n            minimum = lst[1]\n \
    \           min_index = 0\n            for j in index:length(lst)\n          \
    \      if lst[j] < minimum\n                    minimum = lst[j]\n           \
    \         min_index = j\n                end\n            end\n            minimum,\
    \ lst[index] = lst[index], minimum\n            index += 1\n            max_or_min\
    \ = true\n        end\n    end\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpie9ce4qw.jl:51\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 4, 1, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpie9ce4qw.jl:51 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpie9ce4qw.jl:50\\ntest set: Test\
    \ Failed at /tmp/tmpie9ce4qw.jl:52\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 9, 5, 8, 9] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpie9ce4qw.jl:52 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpie9ce4qw.jl:50\\ntest set: Test\
    \ Failed at /tmp/tmpie9ce4qw.jl:53\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 5, 1, 4, 5] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpie9ce4qw.jl:53 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpie9ce4qw.jl:50\\ntest set: Test\
    \ Failed at /tmp/tmpie9ce4qw.jl:54\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [5, 9, 1, 9, 9, 1] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpie9ce4qw.jl:54 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpie9ce4qw.jl:50\\ntest set: Test"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpie9ce4qw.jl:48\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if isempty(lst)\n\
    \        return []\n    end\n    if length(lst) == 1\n        return lst\n   \
    \ end\n    n = length(lst)\n    min_val = minimum(lst)\n    max_val = maximum(lst)\n\
    \    res = []\n    for i in 1:n\n        if i%2 == 1\n            push!(res, min_val)\n\
    \            deleteat!(lst, findall(x->x==min_val, lst)[1])\n            min_val\
    \ = minimum(lst)\n        else\n            push!(res, max_val)\n            deleteat!(lst,\
    \ findall(x->x==max_val, lst)[1])\n            max_val = maximum(lst)\n      \
    \  end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdgrkryu_.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_maximum#749\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _maximum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_maximum#748\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _maximum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #maximum#746\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] maximum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpdgrkryu_.jl:33\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpdgrkryu_.jl:43 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpdgrkryu_.jl:42\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    m = minimum(lst)\n    M = maximum(lst)\n    n = 0\n    while n <= length(lst)\n\
    \        append!(lst, m)\n        append!(lst, M)\n        m = minimum(lst)\n\
    \        M = maximum(lst)\n        n += 1\n    end\n    pop!(lst)\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    lst_max = sort(lst,\
    \ rev=true)\n    lst_min = sort(lst)\n    lst_new = zeros(Int64,length(lst))\n\
    \    pos_max = 1\n    pos_min = 1\n    for i in 1:length(lst)\n        if i %\
    \ 2 == 0\n            lst_new[i] = lst_max[pos_max]\n            pos_max += 1\n\
    \        else\n            lst_new[i] = lst_min[pos_min]\n            pos_min\
    \ += 1\n        end\n    end\n    return lst_new\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    if length(lst) == 0 return lst end\n    new_lst =\
    \ Vector{Int64}[]\n    is_even = false\n    for i in 1:length(lst)\n        if\
    \ is_even\n            push!(new_lst, lst[i])\n        else\n            insert!(new_lst,\
    \ 1, lst[i])\n        end\n        is_even = !is_even\n    end\n    reverse!(new_lst)\n\
    \    return new_lst\nend\nprintln(strange_sort_list([1, 2, 3, 4]))\nprintln(strange_sort_list([5,\
    \ 5, 5, 5]))\nprintln(strange_sort_list([]))\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    result = Vector{Int64}(undef, length(lst))\n    i\
    \ = 1\n    start = 1\n    stop = length(lst)\n    direction = 1\n    for k = 1:length(lst)\n\
    \        if start <= stop\n            result[i] = lst[start]\n            start\
    \ += 1\n        else\n            result[i] = lst[stop]\n            stop -= 1\n\
    \        end\n        if i == length(lst) || i == 1\n            direction *=\
    \ -1\n        end\n        i += direction\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj7max3al.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [0]\\n  Stacktrace:\\n  \
    \ [1] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpj7max3al.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj7max3al.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpj7max3al.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpj7max3al.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpj7max3al.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj7max3al.jl:39 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpj7max3al.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpj7max3al.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpj7max3al.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpj7max3al.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    asc_lst = sort(lst)\n\
    \    desc_lst = asc_lst[end:-1:1]\n    len_lst = length(lst)\n    out_lst = zeros(Int64,\
    \ len_lst)\n    for i in 1:len_lst\n        if mod(i, 2) == 0\n            out_lst[i]\
    \ = desc_lst[i]\n        else\n            out_lst[i] = asc_lst[i]\n        end\n\
    \    end\n    return out_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphri2jp_k.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphri2jp_k.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphri2jp_k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphri2jp_k.jl:34\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 8, 7, 6, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphri2jp_k.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphri2jp_k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphri2jp_k.jl:35\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 4, 3, 2, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphri2jp_k.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphri2jp_k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphri2jp_k.jl:36\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 8, 6, 6, 8, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphri2jp_k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphri2jp_k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphri2jp_k.jl:39\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphri2jp_k.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sort!(lst)\n    res = zeros(Int64, length(lst))\n    res[1] = lst[1]\n\
    \    res[end] = lst[end]\n    i = 1\n    j = length(lst) - 1\n    for k in 2:length(lst)\
    \ - 1\n        if k % 2 == 0\n            res[k] = lst[i]\n            i += 1\n\
    \        else\n            res[k] = lst[j]\n            j -= 1\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjqw3k8qw.jl:34\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 1, 3, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpjqw3k8qw.jl:34 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpjqw3k8qw.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpjqw3k8qw.jl:35\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 5, 8, 6, 9] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpjqw3k8qw.jl:35 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpjqw3k8qw.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpjqw3k8qw.jl:36\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 1, 4, 2, 5] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpjqw3k8qw.jl:36 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpjqw3k8qw.jl:33\\ntest set: Test\
    \ Failed at /tmp/tmpjqw3k8qw.jl:37\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 1, 8, 5, 7, 9] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpjqw3k8qw.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpjqw3k8qw.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    # collect minimum value\n\
    \    first = minimum(lst)\n    lst = lst[lst .!= first]\n    # collect maximum\
    \ value\n    last = maximum(lst)\n    lst = lst[lst .!= last]\n    # recursive\
    \ call\n    return [first, last] .+ strange_sort_list(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv4ezz9s9.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 2\
    \ and 0\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:516 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:510 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:504 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:499\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:281 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:860 [inlined]\\n    [7] strange_sort_list(lst::Vector{Int64})\
    \ (repeats 2 times)\\n      @ Main /tmp/tmpv4ezz9s9.jl:22\\n    [8] macro expansion\\\
    n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [9] macro expansion\\n      @ /tmp/tmpv4ezz9s9.jl:29 [inlined]\\\
    n   [10] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpv4ezz9s9.jl:28\\ntest\
    \ set: Error During Test at /tmp/tmpv4ezz9s9.jl:30\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    if length(lst) == 1\n\
    \        return lst\n    end\n    min_val = minimum(lst)\n    lst_new = copy(lst)\n\
    \    lst_new = deleteat!(lst_new, findall(lst_new .== min_val))\n    if isempty(lst_new)\n\
    \        return [min_val]\n    end\n    max_val = maximum(lst_new)\n    lst_new\
    \ = deleteat!(lst_new, findall(lst_new .== max_val))\n    if isempty(lst_new)\n\
    \        return [min_val, max_val]\n    end\n    return [min_val, max_val, strange_sort_list(lst_new)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) % 2 == 0\n        res = []\n        for i in 1:2:length(lst)\n\
    \            push!(res,lst[i])\n            push!(res,lst[i+1])\n        end\n\
    \        res\n    else\n        res = []\n        for i in 1:2:length(lst)-1\n\
    \            push!(res,lst[i])\n            push!(res,lst[i+1])\n        end\n\
    \        push!(res,lst[end])\n        res\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1cc9e3_w.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cc9e3_w.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cc9e3_w.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1cc9e3_w.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cc9e3_w.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cc9e3_w.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1cc9e3_w.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cc9e3_w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cc9e3_w.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1cc9e3_w.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1cc9e3_w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1cc9e3_w.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp1cc9e3_w.jl:40\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cc9e3_w.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    arr = Array{Int64}(sort(lst))\n\
    \    sort!(arr)\n    sort_len = length(arr)\n    is_even = sort_len % 2 == 0\n\
    \    left_index = 0\n    right_index = sort_len\n    total_index = 0\n    res\
    \ = zeros(Int64, sort_len)\n    is_left = true\n    while left_index < right_index\n\
    \        if is_left\n            res[total_index] = arr[left_index]\n        \
    \    left_index += 1\n        else\n            res[total_index] = arr[right_index]\n\
    \            right_index -= 1\n        end\n        total_index += 1\n       \
    \ is_left = !is_left\n    end\n    if is_even\n        res\n    else\n       \
    \ vcat(res, arr[left_index])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpokcttp0e.jl:46\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [0]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpokcttp0e.jl:26\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpokcttp0e.jl:46 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpokcttp0e.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmpokcttp0e.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpokcttp0e.jl:26\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpokcttp0e.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpokcttp0e.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmpokcttp0e.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:861 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpokcttp0e.jl:26\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpokcttp0e.jl:48 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst)\n    result = []\n    while length(lst) > 0\n        push!(result,\
    \ popfirst!(lst))\n        if length(lst) > 0\n            push!(result, pop!(lst))\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    return [lst[i] for i in sortperm(abs.(lst - (1:n)))\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbfoedet9.jl:20\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbfoedet9.jl:20 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbfoedet9.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpbfoedet9.jl:21\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbfoedet9.jl:21 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbfoedet9.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpbfoedet9.jl:22\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbfoedet9.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbfoedet9.jl:19\\ntest set: Test\
    \ Failed at /tmp/tmpbfoedet9.jl:23\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6,\
    \ 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpbfoedet9.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpbfoedet9.jl:19\\ntest set: Test"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    s = sort(lst)\n \
    \   r = []\n    for i in 1:2:length(s)\n        push!(r, s[i])\n    end\n    for\
    \ i in length(s):-2:1\n        push!(r, s[i])\n    end\n    return r\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcv5bnz66.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 4, 2] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcv5bnz66.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcv5bnz66.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv5bnz66.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 9, 7, 5] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcv5bnz66.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcv5bnz66.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv5bnz66.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 5, 3, 1] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcv5bnz66.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcv5bnz66.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv5bnz66.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 9, 7, 5] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcv5bnz66.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcv5bnz66.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcv5bnz66.jl:36\n  Expressi"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv5bnz66.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    lst_sort = sort(lst)\n\
    \    lst_sort_reverse = reverse(lst_sort)\n    lst_strange = Vector{Int64}()\n\
    \    # @show length(lst_sort)\n    for i = 1:2:length(lst_sort)\n        push!(lst_strange,\
    \ lst_sort[i])\n    end\n    for i = 2:2:length(lst_sort)\n        push!(lst_strange,\
    \ lst_sort_reverse[i])\n    end\n    return lst_strange\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp3ecxvue.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3ecxvue.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3ecxvue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp3ecxvue.jl:33\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3ecxvue.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3ecxvue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp3ecxvue.jl:34\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3ecxvue.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3ecxvue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp3ecxvue.jl:35\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 8, 6, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3ecxvue.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3ecxvue.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpp3ecxvue.jl:38\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3ecxvue.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # To be implemented. \n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrtck24m.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrtck24m.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrtck24m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsrtck24m.jl:21\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrtck24m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrtck24m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsrtck24m.jl:22\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrtck24m.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrtck24m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsrtck24m.jl:23\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsrtck24m.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsrtck24m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpsrtck24m.jl:26\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrtck24m.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    lst = sort(lst)\n   \
    \ ssl = Int64[]\n    while !isempty(lst)\n        push!(ssl, lst[1])\n       \
    \ push!(ssl, lst[end])\n        lst = lst[2:end-1]\n    end\n    return ssl\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi147yuvw.jl:30\n  Expression: candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n   Evaluated: [5, 9, 6, 8, 7, 7] == [5, 9,\
    \ 6, 8, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi147yuvw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi147yuvw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi147yuvw.jl:31\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 5, 2, 4, 3, 3] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi147yuvw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi147yuvw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi147yuvw.jl:37\n  Expression: candidate([111111]) == [111111]\n\
    \   Evaluated: [111111, 111111] == [111111]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi147yuvw.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi147yuvw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi147yuvw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    @assert length(lst) == 0 \"empty list!\"\n    sort!(lst)\n    a = 1\n\
    \    b = length(lst)\n    c = []\n    for i in 1:ceil(length(lst)/2)\n       \
    \ push!(c, lst[a])\n        if b > a\n            push!(c, lst[b])\n        end\n\
    \        a += 1\n        b -= 1\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg9tn_4fe.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  AssertionError:\
    \ empty list!\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpg9tn_4fe.jl:12\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg9tn_4fe.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg9tn_4fe.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg9tn_4fe.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  AssertionError: empty list!\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpg9tn_4fe.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg9tn_4fe.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg9tn_4fe.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg9tn_4fe.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  AssertionError: empty list!\\\
    n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpg9tn_4fe.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg9tn_4fe.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg9tn_4fe.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg9tn_4fe.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  AssertionError: empty\
    \ list!\\n  Stacktrace:\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return lst\n    end\n    sorted = sort(lst)\n\
    \    lst_len = length(lst)\n    start = 1\n    ret = Vector{Int64}(lst_len)\n\
    \    for i in 1:lst_len\n        ret[i] = sorted[start]\n        start = (start\
    \ + 1) % 2 == 0 ? start + 1 : lst_len - start + 1\n    end\n    return ret\nend\n\
    using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(lst, by = (x, y) -> sign(x - y) * (mod(x - y, 4) + 1) % 2\
    \ - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    min_idx = findmin(lst)[2]\n    max_idx = findmax(lst)[2]\n    last_idx\
    \ = min_idx\n    result = Vector{Int64}()\n    push!(result, lst[min_idx])\n \
    \   last_idx = max_idx\n    while last_idx != min_idx\n        push!(result, lst[last_idx])\n\
    \        last_idx = findmin(lst[last_idx:end])[2] + last_idx - 1\n        push!(result,\
    \ lst[last_idx])\n        last_idx = findmax(lst[last_idx:end])[2] + last_idx\
    \ - 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted_lst = sort(lst)\n    result = Vector{Int64}()\n    for i = 1:2:length(sorted_lst)\n\
    \        push!(result, sorted_lst[i])\n    end\n    for i = length(sorted_lst)-1:-2:1\n\
    \        push!(result, sorted_lst[i])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptcrhrht8.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 3, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptcrhrht8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptcrhrht8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptcrhrht8.jl:28\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 7, 9, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptcrhrht8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptcrhrht8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptcrhrht8.jl:29\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 3, 5, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptcrhrht8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptcrhrht8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptcrhrht8.jl:30\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [1, 6, 8, 8, 6, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptcrhrht8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptcrhrht8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmptcrhrht8.jl:33\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcrhrht8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n < 2\n        return lst\n    end\n    list1\
    \ = [lst[1]]\n    list2 = lst[2:end]\n    while length(list2) > 0\n        push!(list1,\
    \ list2[end])\n        list2 = list2[1:end-1]\n        if length(list2) > 0\n\
    \            push!(list1, list2[1])\n            list2 = list2[2:end]\n      \
    \  end\n    end\n    return list1\nend\nstrange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([])\
    \ == []\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    inds = sortperm(lst)\n    vec = zeros(Int64, n)\n\
    \    for i in 1:n\n        vec[inds[i]] = i\n    end\n    res = zeros(Int64, n)\n\
    \    for i in 1:n\n        res[2i-1] = lst[vec[i]]\n        res[2i] = lst[vec[n-i+1]]\n\
    \    end\n    res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd0anhwgq.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [5]\\n  Stacktrace:\\n  \
    \ [1] setindex!\\n     @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpd0anhwgq.jl:20\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpd0anhwgq.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpd0anhwgq.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpd0anhwgq.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpd0anhwgq.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpd0anhwgq.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpd0anhwgq.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpd0anhwgq.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] setindex!\\n \
    \    @ ./array.jl:903 [inlined]\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpd0anhwgq.jl:21\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpd0anhwgq.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/T"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) <= 1\n        return lst\n    end\n    sorted = sort(lst)\n\
    \    for i = 1:2:length(sorted)\n        if i + 1 <= length(sorted)\n        \
    \    temp = sorted[i]\n            sorted[i] = sorted[i + 1]\n            sorted[i\
    \ + 1] = temp\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxw7nb2qb.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [2, 1, 4, 3] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw7nb2qb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw7nb2qb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxw7nb2qb.jl:31\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [6, 5, 8, 7, 9] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw7nb2qb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw7nb2qb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxw7nb2qb.jl:32\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [2, 1, 4, 3, 5] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw7nb2qb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw7nb2qb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxw7nb2qb.jl:33\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 1, 7, 6, 9, 8] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxw7nb2qb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxw7nb2qb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxw7nb2qb.jl:36\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxw7nb2qb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    new_lst = deepcopy(lst)\n    sort!(new_lst)\n    res = [new_lst[1]]\n\
    \    for i in 2:2:length(new_lst)\n        push!(res, new_lst[i])\n    end\n \
    \   for i in 1:2:length(new_lst)\n        push!(res, new_lst[i])\n    end\n  \
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7eld090m.jl:28\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2, 4, 1, 3] == [1, 4, 2, 3]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7eld090m.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7eld090m.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmp7eld090m.jl:29\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 8, 5, 7, 9] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7eld090m.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7eld090m.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmp7eld090m.jl:30\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 4, 1, 3, 5] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7eld090m.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7eld090m.jl:27\\ntest set: Test\
    \ Failed at /tmp/tmp7eld090m.jl:31\\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\\n   Evaluated: [1, 5, 7, 9, 1, 6, 8] == [1, 9, 5, 8,\
    \ 6, 7]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp7eld090m.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp7eld090m.jl:27\\nte"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    if length(lst) ==\
    \ 1\n        return lst\n    end\n    ls1 = sort(lst,rev=true)\n    ls2 = sort(lst)\n\
    \    ls3 = vcat(ls1,ls2)\n    return ls3\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe3ed576n.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 3, 2, 1, 1, 2, 3, 4] == [1, 4,\
    \ 2, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3ed576n.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3ed576n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpe3ed576n.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 8, 7, 6, 5, 5, 6, 7, 8, 9] == [5, 9, 6, 8,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3ed576n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3ed576n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpe3ed576n.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 4, 3, 2, 1, 1, 2, 3, 4, 5] == [1, 5, 2, 4,\
    \ 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3ed576n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3ed576n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpe3ed576n.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 8, 7, 6, 5, 1, 1, 5, 6, 7, 8, 9] ==\
    \ [1, 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe3ed576n.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe3ed576n.jl:27\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3ed576n.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    min = lst[1]\n \
    \   max = lst[1]\n    for i in lst\n        if i > max\n            max = i\n\
    \        end\n        if i < min\n            min = i\n        end\n    end\n\
    \    has_min = false\n    has_max = false\n    for i in lst\n        if i == min\n\
    \            has_min = true\n        end\n        if i == max\n            has_max\
    \ = true\n        end\n    end\n    if !has_min\n        push!(lst, min)\n   \
    \ end\n    if !has_max\n        push!(lst, max)\n    end\n    new_lst = []\n \
    \   while length(lst) > 0\n        new_lst = vcat(new_lst, [minimum(lst)])\n \
    \       lst = lst[lst .!= minimum(lst)]\n        if length(lst) > 0\n        \
    \    new_lst = vcat(new_lst, [maximum(lst)])\n            lst = lst[lst .!= maximum(lst)]\n\
    \        end\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgaymg22e.jl:61\n  Expression: candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n   Evaluated: [5] == [5, 5, 5, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaymg22e.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaymg22e.jl:56\ntest set: Test\
    \ Failed at /tmp/tmpgaymg22e.jl:64\n  Expression: candidate([0, 2, 2, 2, 5, 5,\
    \ -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n   Evaluated: [-5, 5, 0, 2] == [-5,\
    \ 5, -5, 5, 0, 2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgaymg22e.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgaymg22e.jl:56\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgaymg22e.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    if n == 0\n        return lst\n    end\n    if n\
    \ == 1\n        return lst\n    end\n    new_lst = zeros(Int64, n)\n    counter\
    \ = 1\n    if n % 2 == 0\n        upper_bound = Int(n/2)\n    else\n        upper_bound\
    \ = Int(n/2) + 1\n    end\n    while counter <= upper_bound\n        if counter\
    \ == 1\n            new_lst[counter] = findmin(lst)[1]\n            lst = deleteat!(lst,\
    \ findmin(lst)[2])\n        else\n            if counter % 2 == 0\n          \
    \      new_lst[counter] = findmin(lst)[1]\n                lst = deleteat!(lst,\
    \ findmin(lst)[2])\n            else\n                new_lst[counter] = findmax(lst)[1]\n\
    \                lst = deleteat!(lst, findmax(lst)[2])\n            end\n    \
    \    end\n        counter += 1\n    end\n    counter = n\n    new_lst[counter]\
    \ = findmin(lst)[1]\n    counter -= 1\n    lst = deleteat!(lst, findmin(lst)[2])\n\
    \    new_lst[counter] = findmax(lst)[1]\n    lst = deleteat!(lst, findmax(lst)[2])\n\
    \    counter -= 1\n    while counter >= 1\n        if counter % 2 == 0\n     \
    \       new_lst[counter] = findmin(lst)[1]\n            lst = deleteat!(lst, findmin(lst)[2])\n\
    \        else\n            new_lst[counter] = findmax(lst)[1]\n            lst\
    \ = deleteat!(lst, findmax(lst)[2])\n        end\n        counter -= 1\n    end\n\
    \    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpma1odz61.jl:65\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n     \
    \ @ ./reduce.jl:357 [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356\
    \ [inlined]\\n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7]\
    \ mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n\
    \      @ ./reduce.jl:162 [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] findmin\\n      @ ./reduce.jl:862 [inlined]\\n   [11] _findmin\\\
    n      @ ./reduce.jl:888 [inlined]\\n   [12] #findmin#783\\n      @ ./reducedim.jl:1005\
    \ [inlined]\\n   [13] findmin\\n      @ ./reducedim.jl:1005 [inlined]\\n   [14]\
    \ strange_sort_list(lst::Vector{Int64})\\n      @ Main /tmp/tmpma1odz61.jl:50\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmpma1odz61.jl:65 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmpma1odz61.jl:64\\ntest\
    \ set: Error During Test at /tmp/tmpma1odz61.jl:66\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  InexactError:\
    \ Int64(2.5)\\n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\\
    n   [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpma1odz61.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if size(lst, 1) == 0\n        return []\n    end\n    min_index = findmin(lst)[2]\n\
    \    max_index = findmax(lst)[2]\n    if min_index != max_index\n        lst =\
    \ [lst[min_index]; strange_sort_list(vcat(lst[1:min_index-1], lst[min_index+1:max_index-1],\
    \ lst[max_index+1:end]))]\n    else\n        lst = [lst[min_index]; strange_sort_list(lst[1:min_index-1])]\n\
    \    end\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxumefa8a.jl:29\\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\\n   Evaluated: [1, 2] == [1, 4, 2, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxumefa8a.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxumefa8a.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpxumefa8a.jl:30\\n  Expression: candidate([5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7]\\n   Evaluated: [5, 6, 7] == [5, 9, 6, 8, 7]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxumefa8a.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxumefa8a.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpxumefa8a.jl:31\\n  Expression: candidate([1, 2, 3, 4, 5])\
    \ == [1, 5, 2, 4, 3]\\n   Evaluated: [1, 2, 3] == [1, 5, 2, 4, 3]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpxumefa8a.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpxumefa8a.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    sort!(lst)\n    ans =\
    \ []\n    for i in 1:length(lst) \xF7 2\n        push!(ans, lst[i])\n        push!(ans,\
    \ lst[end - i + 1])\n    end\n    if length(lst) % 2 == 1\n        push!(ans,\
    \ lst[length(lst) \xF7 2 + 1])\n    end\n    return ans\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # write your code here\nend\n@testset \"testing strange_sort_list\" begin\n\
    \    @test strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    @test strange_sort_list([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5]\n    @test strange_sort_list([]) == []\nend\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp3v8pl9ab.jl:14\nin expression starting at /tmp/tmp3v8pl9ab.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    # range of indices for the list\n    n = length(lst)\n    # output vector\n\
    \    v = zeros(Int64, n)\n    # whether or not we have sorted in ascending or\
    \ descending order\n    order = true\n    # index for filling out v\n    i = 1\n\
    \    # the index range to choose from\n    available = collect(1:n)\n    # check\
    \ for empty list\n    if n == 0\n        return v\n    end\n    # loop until there\
    \ is only one element left\n    while length(available) != 1\n        # find min\
    \ or max\n        if order\n            minval = findmin(lst[available])\n   \
    \         v[i] = minval[1]\n            order = false\n        else\n        \
    \    maxval = findmax(lst[available])\n            v[i] = maxval[1]\n        \
    \    order = true\n        end\n        # remove used element\n        available\
    \ = deleteat!(available, indmin(lst[available]))\n        i += 1\n    end\n  \
    \  # add last element\n    v[n] = lst[available[1]]\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0vpezfux.jl:51\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  UndefVarError:\
    \ indmin not defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp0vpezfux.jl:39\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0vpezfux.jl:51 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0vpezfux.jl:50\\ntest set:\
    \ Error During Test at /tmp/tmp0vpezfux.jl:52\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  UndefVarError: indmin not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp0vpezfux.jl:39\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0vpezfux.jl:52 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0vpezfux.jl:50\\ntest set:\
    \ Error During Test at /tmp/tmp0vpezfux.jl:53\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  UndefVarError: indmin not\
    \ defined\\n  Stacktrace:\\n   [1] strange_sort_list(lst::Vector{Int64})\\n  \
    \   @ Main /tmp/tmp0vpezfux.jl:39\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0vpezfux.jl:53 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0vpezfux.jl:50\\ntest set:\
    \ Error During Test at /tmp/tmp0vpezfux.jl:54\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\\n  UndefVarError: indmin\
    \ not def"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 7 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp0vpezfux.jl:48\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    sorted = sort(lst)\n    if isempty(sorted)\n        return sorted\n  \
    \  end\n    max_index = (length(sorted) + 1) / 2\n    return [sorted[1:max_index];\
    \ sorted[max_index:end]]\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo965mius.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] macro expansion\\\
    n      @ ./multidimensional.jl:867 [inlined]\\n    [7] macro expansion\\n    \
    \  @ ./cartesian.jl:64 [inlined]\\n    [8] _unsafe_getindex!\\n      @ ./multidimensional.jl:862\
    \ [inlined]\\n    [9] _unsafe_getindex\\n      @ ./multidimensional.jl:853 [inlined]\\\
    n   [10] _getindex\\n      @ ./multidimensional.jl:839 [inlined]\\n   [11] getindex\\\
    n      @ ./abstractarray.jl:1218 [inlined]\\n   [12] strange_sort_list(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpo965mius.jl:17\\n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [14] macro expansion\\n      @ /tmp/tmpo965mius.jl:24 [inlined]\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [16] top-level scope\\n      @ /tmp/tmpo965mius.jl:23\\ntest\
    \ set: Error During Test at /tmp/tmpo965mius.jl:25\\n  Test threw exception\\\
    n  Expression: candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  ArgumentError:\
    \ invalid index: 1.0 of type Float64\\n  Stacktrace:\\n    [1] to_index(i::Float64)\\\
    n      @ Base ./indices.jl:300\\n    [2] to_index(A::Vector{Int64}, i::Float64)\\\
    n      @ Base ./indices.jl:277\\n    [3] to_indices\\n      @ ./indices.jl:333\
    \ [inlined]\\n    [4] to_indices\\n      @ ./indices.jl:325 [inlined]\\n    [5]\
    \ getindex\\n      @ ./abstractarray.jl:1218 [inlined]\\n    [6] macro expansion\\\
    n      @ ./multidimensional.jl:867 [inlined]\\n    [7] macro expansion\\n    \
    \  @ ./cartesian.jl:64 [inlined]\\n    [8] _unsafe_getindex!\\n      @ "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if !isempty(lst)\n        return vcat(sort(lst, rev=true)[1:2:end], sort(lst,\
    \ rev=true)[2:2:end])\n    else\n        return lst\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3,\
    \ 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf9w1winz.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [4, 2, 3, 1] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9w1winz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9w1winz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf9w1winz.jl:24\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [9, 7, 5, 8, 6] == [5, 9, 6, 8, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9w1winz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9w1winz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf9w1winz.jl:25\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [5, 3, 1, 4, 2] == [1, 5, 2, 4, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9w1winz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9w1winz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf9w1winz.jl:26\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [9, 7, 5, 8, 6, 1] == [1, 9, 5, 8, 6, 7]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf9w1winz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf9w1winz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpf9w1winz.jl:29\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9w1winz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if lst == []\n        return []\n    end\n    lst_min = minimum(lst)\n\
    \    lst_max = maximum(lst)\n    lst_min_index = findall(x -> x == lst_min, lst)[1]\n\
    \    lst_max_index = findall(x -> x == lst_max, lst)[1]\n    lst[lst_min_index]\
    \ = lst_max\n    lst[lst_max_index] = lst_min\n    return vcat(lst[lst_min_index],\
    \ strange_sort_list(lst[1:lst_min_index-1]))\nend\nlst_min = minimum(lst)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: lst not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvwk7m3m0.jl:23\nin expression starting at /tmp/tmpvwk7m3m0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    output = []\n  \
    \  current = minimum(lst)\n    while length(lst) != 0\n        push!(output, current)\n\
    \        deleteat!(lst, findall(x -> x == current, lst)[1])\n        if length(lst)\
    \ == 0\n            break\n        end\n        current = maximum(lst)\n     \
    \   push!(output, current)\n        deleteat!(lst, findall(x -> x == current,\
    \ lst)[1])\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmrxjroh2.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n  \
    \ [1] getindex(A::Vector{Int64}, i1::Int64)\\n     @ Base ./array.jl:861\\n  \
    \ [2] strange_sort_list(lst::Vector{Int64})\\n     @ Main /tmp/tmpmrxjroh2.jl:19\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpmrxjroh2.jl:34 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpmrxjroh2.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpmrxjroh2.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n   [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\\n     @ Base ./array.jl:861\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmrxjroh2.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpmrxjroh2.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpmrxjroh2.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpmrxjroh2.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\\n  Stacktrace:\\n   [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\\n     @ Base ./array.jl:861\\n   [2] strange_sort_list(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpmrxjroh2.jl:19\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpmrxjroh2.jl:36 [inlined]\\\
    n   [5] macro expansion\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    isempty(lst) && return lst\n    lst_len = length(lst)\n    lst_max = maximum(lst)\n\
    \    lst_min = minimum(lst)\n    lst_new = [lst_min]\n    lst = lst[lst .\u2260\
    \ lst_min]\n    for _=1:lst_len\xF72\n        push!(lst_new, maximum(lst))\n \
    \       lst = lst[lst .\u2260 maximum(lst)]\n        push!(lst_new, minimum(lst))\n\
    \        lst = lst[lst .\u2260 minimum(lst)]\n    end\n    return lst_new\nend\n\
    # Test Cases @tests = begin\n#     @testset \"Empty List\" begin\n#         @test\
    \ strange_sort_list([]) == []\n#     end\n#     @testset \"One Element\" begin\n\
    #         @test strange_sort_list([1]) == [1]\n#     end\n#     @testset \"Two\
    \ Elements\" begin\n#         @test strange_sort_list([1, 2]) == [1, 2]\n#   \
    \      @test strange_sort_list([2, 1]) == [1, 2]\n#     end\n#     @testset \"\
    Many Elements\" begin\n#         @test strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n#         @test strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    #         @test strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 10,\
    \ 2, 9, 3, 8, 4, 7, 5, 6]\n#     end\n# end\n \n################################################################################\n\
    # TASK 10: FizzBuzz\n################################################################################\n\
    \"\"\"\n    Write a function that returns \"FizzBuzz\" if the number is divisible\
    \ by 3 and 5,\n    \"Fizz\" if it is divisible by 3,\n    \"Buzz\" if it is divisible\
    \ by 5,\n    and the number as a string for all other cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgiaujq0k.jl:47\nin expression starting at\
    \ /tmp/tmpgiaujq0k.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    min = minimum(lst)\n\
    \    max = maximum(lst)\n    k = false\n    for i in 1:length(lst)\n        if\
    \ k\n            append!(lst, max)\n            k = false\n        else\n    \
    \        append!(lst, min)\n            k = true\n        end\n    end\n    return\
    \ lst\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8,\
    \ 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnp536ee.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [1, 2, 3, 4, 1, 4, 1, 4] == [1, 4,\
    \ 2, 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnp536ee.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnp536ee.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfnp536ee.jl:35\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [5, 6, 7, 8, 9, 5, 9, 5, 9, 5] == [5, 9, 6, 8,\
    \ 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnp536ee.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnp536ee.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfnp536ee.jl:36\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [1, 2, 3, 4, 5, 1, 5, 1, 5, 1] == [1, 5, 2, 4,\
    \ 3]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnp536ee.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnp536ee.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfnp536ee.jl:37\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [5, 6, 7, 8, 9, 1, 1, 9, 1, 9, 1, 9] ==\
    \ [1, 9, 5, 8, 6, 7]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfnp536ee.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfnp536ee.jl:33\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnp536ee.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(lst)\n        return []\n    end\n    d = Dict(:min => [minimum(lst)],\
    \ :max => [maximum(lst)])\n    for i in lst\n        if i != d[:min][1] && i !=\
    \ d[:max][1]\n            push!(d[:min], i)\n        end\n    end\n    return\
    \ [d[:min][i] for i in 1:2:length(d[:min])] .+ [d[:max][i] for i in 1:2:length(d[:max])]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjuqyvohw.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n   Evaluated: [5, 7] == [1, 4, 2, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjuqyvohw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjuqyvohw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjuqyvohw.jl:29\n  Expression: candidate([5, 6, 7, 8, 9]) ==\
    \ [5, 9, 6, 8, 7]\n   Evaluated: [14, 16] == [5, 9, 6, 8, 7]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjuqyvohw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjuqyvohw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjuqyvohw.jl:30\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ [1, 5, 2, 4, 3]\n   Evaluated: [6, 8] == [1, 5, 2, 4, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjuqyvohw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjuqyvohw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjuqyvohw.jl:31\n  Expression: candidate([5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7]\n   Evaluated: [10, 15, 17] == [1, 9, 5, 8, 6, 7]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjuqyvohw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjuqyvohw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjuqyvohw.jl:32\n  Expression: candidate([5, 5, 5, 5]) == [5,"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjuqyvohw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst = sort(lst) # sort the list first\n    sorted_list = [] # initialize\
    \ the sorted list\n    while(length(lst) > 0) # while the original list is not\
    \ empty\n        push!(sorted_list, shift!(lst)) # push the first element of the\
    \ list to the result and remove it from the original list\n        if(length(lst)\
    \ > 0) # if there is no elements on the original list, we cannot grab the max\
    \ value\n            push!(sorted_list, pop!(lst)) # push the last element of\
    \ the list to the result and remove it from the original list\n        end\n \
    \   end\n    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpei4awkgg.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: shift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmpei4awkgg.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpei4awkgg.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpei4awkgg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpei4awkgg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: shift! not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpei4awkgg.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpei4awkgg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpei4awkgg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpei4awkgg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: shift! not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpei4awkgg.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpei4awkgg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpei4awkgg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpei4awkgg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: shift!\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::V"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei4awkgg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return []\n    end\n    min_ind::Int64 =\
    \ findmin(lst)[2]\n    min_val::Int64 = lst[min_ind]\n    lst = deleteat!(lst,\
    \ min_ind)\n    max_ind::Int64 = findmax(lst)[2]\n    max_val::Int64 = lst[max_ind]\n\
    \    lst = deleteat!(lst, max_ind)\n    output::Vector{Int64} = [min_val, max_val]\n\
    \    while length(lst) > 0\n        min_ind::Int64 = findmin(lst)[2]\n       \
    \ min_val::Int64 = lst[min_ind]\n        lst = deleteat!(lst, min_ind)\n     \
    \   if length(lst) > 0\n            max_ind::Int64 = findmax(lst)[2]\n       \
    \     max_val::Int64 = lst[max_ind]\n            lst = deleteat!(lst, max_ind)\n\
    \            output = vcat(output, [min_val, max_val])\n        else\n       \
    \     output = vcat(output, [min_val])\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"min_ind\"\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmplrdkfx40.jl:1\nin expression starting\
    \ at /tmp/tmplrdkfx40.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    lst_1, lst_2 = nsort(lst)\n    if length(lst) % 2 == 0\n        return\
    \ [lst_1; reverse(lst_2)]\n    else\n        return [lst_1; reverse(lst_2)[2:end]]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8aa1d4vd.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  UndefVarError: nsort\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n \
    \    @ Main /tmp/tmp8aa1d4vd.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8aa1d4vd.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8aa1d4vd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8aa1d4vd.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  UndefVarError: nsort not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp8aa1d4vd.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8aa1d4vd.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8aa1d4vd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8aa1d4vd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  UndefVarError: nsort not defined\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmp8aa1d4vd.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8aa1d4vd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8aa1d4vd.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp8aa1d4vd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n  UndefVarError: nsort\
    \ not defined\n  Stacktrace:\n   [1] strange_sort_list(lst::Vecto"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8aa1d4vd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    result = []\n  \
    \  push!(result, minimum(lst))\n    deleteat!(lst, findmin(lst))\n    while length(lst)\
    \ > 0\n        push!(result, maximum(lst))\n        deleteat!(lst, findmax(lst))\n\
    \        if length(lst) > 0\n            push!(result, minimum(lst))\n       \
    \     deleteat!(lst, findmin(lst))\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6,\
    \ 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
    \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptycy_fbs.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  ArgumentError: indices\
    \ must be unique and sorted\n  Stacktrace:\n   [1] _deleteat!(a::Vector{Int64},\
    \ inds::Tuple{Int64, Int64}, dltd::Base.Nowhere)\n     @ Base ./array.jl:1488\n\
    \   [2] _deleteat!\n     @ ./array.jl:1475 [inlined]\n   [3] deleteat!\n     @\
    \ ./array.jl:1468 [inlined]\n   [4] strange_sort_list(lst::Vector{Int64})\n  \
    \   @ Main /tmp/tmptycy_fbs.jl:17\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptycy_fbs.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptycy_fbs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptycy_fbs.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  ArgumentError: indices must\
    \ be unique and sorted\n  Stacktrace:\n   [1] _deleteat!(a::Vector{Int64}, inds::Tuple{Int64,\
    \ Int64}, dltd::Base.Nowhere)\n     @ Base ./array.jl:1488\n   [2] _deleteat!\n\
    \     @ ./array.jl:1475 [inlined]\n   [3] deleteat!\n     @ ./array.jl:1468 [inlined]\n\
    \   [4] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmptycy_fbs.jl:17\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmptycy_fbs.jl:34 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmptycy_fbs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptycy_fbs.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  ArgumentError: indices must\
    \ be unique and sorted\n  Stacktrace:\n   [1] _deleteat!(a::Vector{Int64}, inds::Tuple{Int64,\
    \ Int64}, dltd::Base.Nowhere)\n     @ Base ./array.jl:1488\n   [2] _deleteat!\n\
    \     @ ./array.jl:1475 [inlined]\n   [3] deleteat!"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptycy_fbs.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    if length(lst) == 0\n        return lst\n    end\n    new_lst = []\n \
    \   while length(lst) > 0\n        minimum = sort(lst)[1]\n        deleteat!(lst,\
    \ indexin(lst, minimum))\n        maximum = sort(lst)[end]\n        deleteat!(lst,\
    \ indexin(lst, maximum))\n        append!(new_lst, minimum)\n        append!(new_lst,\
    \ maximum)\n    end\n    return new_lst\nend\nusing Test\n\n@testset begin\n\n\
    candidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    \t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpovd18ed3.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n  MethodError: no method\
    \ matching indexin(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    indexin(::Any,\
    \ !Matched::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpovd18ed3.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpovd18ed3.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpovd18ed3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpovd18ed3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n  MethodError: no method matching\
    \ indexin(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    indexin(::Any,\
    \ !Matched::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpovd18ed3.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpovd18ed3.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpovd18ed3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpovd18ed3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n  MethodError: no method matching\
    \ indexin(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    indexin(::Any,\
    \ !Matched::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2352\n\
    \  Stacktrace:\n   [1] strange_sort_list(lst::Vector{Int64})\n     @ Main /tmp/tmpovd18ed3.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovd18ed3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    return [lst[if i%2 == 0\n        then\n         \
    \   convert(Int64, n/2+i/2)\n        else\n            convert(Int64, n/2-i/2)\n\
    \        end] for i in 1:n]\nend\n \n@test strange_sort_list([1, 2, 3, 4]) ==\
    \ [1, 4, 2, 3]\n@test strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n@test strange_sort_list([])\
    \ == []\n \n \n\"\"\"\n    Given list of integers, return list of odd integers\
    \ in \n    the opposite order.\n \n    Examples:\n    make_odd_list([1, 2, 3,\
    \ 4]) == [3, 1]\n    make_odd_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    make_odd_list([])\
    \ == []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7,\
    \ 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2,\
    \ 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0,\
    \ 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
    \ == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp52jzhl5m.jl:21\nin expression starting at /tmp/tmp52jzhl5m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    a = sort(lst)\n    b = reverse(a)\n    c = [x for i in 1:length(a) for\
    \ x in (a[i], b[i])]\n    return c[1:length(a)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2,\
    \ 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1,\
    \ 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given list of integers, return list in strange order.\n  \
    \  Strange sorting, is when you start with the minimum value,\n    then maximum\
    \ of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(lst)\n    new_lst = zeros(Int64, n)\n    left = 1\n    right\
    \ = n\n    for i in 1:n\n        if i % 2 == 1\n            new_lst[i] = minimum(lst)\n\
    \            j = findall(x -> x == minimum(lst), lst)[1]\n            lst[j] =\
    \ Inf\n        else\n            new_lst[i] = maximum(lst)\n            j = findall(x\
    \ -> x == maximum(lst), lst)[1]\n            lst[j] = -Inf\n        end\n    end\n\
    \    return new_lst\nend\nstrange_sort_list([1, 2, 3, 4])\nstrange_sort_list([5,\
    \ 5, 5, 5])\nstrange_sort_list([])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strange_sort_list;\n\t@test(candidate([1, 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5,\
    \ 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1,\
    \ 5, 2, 4, 3])\n\t@test(candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    \t@test(candidate([5, 5, 5, 5]) == [5, 5, 5, 5])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111]) == [111111])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: InexactError: Int64(Inf)\nStacktrace:\n [1] Int64\n \
    \  @ ./float.jl:812 [inlined]\n [2] convert\n   @ ./number.jl:7 [inlined]\n [3]\
    \ setindex!\n   @ ./array.jl:903 [inlined]\n [4] strange_sort_list(lst::Vector{Int64})\n\
    \   @ Main /tmp/tmpzngsft_s.jl:20\n [5] top-level scope\n   @ /tmp/tmpzngsft_s.jl:29\n\
    in expression starting at /tmp/tmpzngsft_s.jl:29\n"
  exit_code: 1
  status: SyntaxError
