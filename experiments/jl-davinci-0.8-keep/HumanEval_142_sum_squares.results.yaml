name: HumanEval_142_sum_squares
language: jl
results:
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # loop over all entries and apply the corresponding operation depending\
    \ on their position\n    for i in 1:length(lst)\n        if i % 3 == 0 && i %\
    \ 4 != 0\n            lst[i] = lst[i]^2\n        elseif i % 4 == 0\n         \
    \   lst[i] = lst[i]^3\n        end\n    end\n    # sum all entries of the vector\n\
    \    return sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgycs095y.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgycs095y.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgycs095y.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgycs095y.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgycs095y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgycs095y.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgycs095y.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgycs095y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgycs095y.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgycs095y.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgycs095y.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgycs095y.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgycs095y.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgycs095y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    #summing up the squares of elements which are multiples\
    \ of 3\n    for i in eachindex(lst)\n        if (i % 3 == 0)\n            total\
    \ += lst[i]^2\n        end\n    end\n    #summing up the cubes of elements which\
    \ are multiples of 4\n    for i in eachindex(lst)\n        if (i % 4 == 0) &&\
    \ (i % 3 != 0)\n            total += lst[i]^3\n        end\n    end\n    return\
    \ total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnex5w8n3.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnex5w8n3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnex5w8n3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnex5w8n3.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnex5w8n3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnex5w8n3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnex5w8n3.jl:35\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnex5w8n3.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnex5w8n3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnex5w8n3.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnex5w8n3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnex5w8n3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnex5w8n3.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnex5w8n3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    l = deepcopy(lst)\n    sum = 0\n    for i = 1:length(l)\n        if i\
    \ % 3 == 0\n            l[i] = l[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n\
    \            l[i] = l[i]^3\n        end\n        sum += l[i]\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuk40eg3_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuk40eg3_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk40eg3_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuk40eg3_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk40eg3_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk40eg3_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuk40eg3_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuk40eg3_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk40eg3_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuk40eg3_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuk40eg3_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuk40eg3_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuk40eg3_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuk40eg3_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n          \
    \  sum += lst[i]^2\n        elseif i % 4 == 0\n            sum += lst[i]^3\n \
    \       else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjv5k44_z.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjv5k44_z.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv5k44_z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjv5k44_z.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv5k44_z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv5k44_z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjv5k44_z.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjv5k44_z.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv5k44_z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjv5k44_z.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjv5k44_z.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjv5k44_z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjv5k44_z.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjv5k44_z.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers and will return\
    \ a list of integers. The returned list shall be the \n    entries of the input\
    \ list squared. If the entries of the input list are negative or zero, the returned\
    \ list shall \n    have only the values 0.\n    \n    Examples:\n    For lst =\
    \ [1,2,3] the output should be [1,4,9]\n    For lst = []  the output should be\
    \ []\n    For lst = [-1,-5,2,-1,-5]  the output should be [0,0,4,0,0]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppvqrcp83.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvqrcp83.jl:1\n\
    in expression starting at /tmp/tmppvqrcp83.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0\n    for (i,a) in enumerate(lst)\n        b = a^2\n       \
    \ c = a^3\n        if i % 3 == 0\n            result += b\n        elseif i %\
    \ 4 == 0 && i % 3 != 0\n            result += c\n        else\n            result\
    \ += a\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfu6vdxmf.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfu6vdxmf.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu6vdxmf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfu6vdxmf.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu6vdxmf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu6vdxmf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfu6vdxmf.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfu6vdxmf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu6vdxmf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfu6vdxmf.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfu6vdxmf.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfu6vdxmf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfu6vdxmf.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfu6vdxmf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum += lst[i]^2\n        elseif i % 4 == 0\n            sum +=\
    \ lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ofk98rw.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ofk98rw.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ofk98rw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ofk98rw.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ofk98rw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ofk98rw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ofk98rw.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ofk98rw.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ofk98rw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ofk98rw.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ofk98rw.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ofk98rw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ofk98rw.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ofk98rw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    s = 0;\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp662ubasm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp662ubasm.jl:1\n\
    in expression starting at /tmp/tmp662ubasm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    result = 0\n    \n    for i in 1:length(lst)\n        if i % 3 ==\
    \ 0 && i % 4 != 0\n            result += lst[i]^2\n        elseif i % 4 == 0\n\
    \            result += lst[i]^3\n        else\n            result += lst[i]\n\
    \        end\n    end\n    \n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4051t0_0.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4051t0_0.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4051t0_0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4051t0_0.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4051t0_0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4051t0_0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4051t0_0.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4051t0_0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4051t0_0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4051t0_0.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4051t0_0.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4051t0_0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4051t0_0.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4051t0_0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i,3) == 0 && mod(i,4)\
    \ != 0\n            sum += lst[i]*lst[i]\n        elseif mod(i,4) == 0\n     \
    \       sum += lst[i]*lst[i]*lst[i]\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5py5pgod.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5py5pgod.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5py5pgod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5py5pgod.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5py5pgod.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5py5pgod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5py5pgod.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5py5pgod.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5py5pgod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5py5pgod.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5py5pgod.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5py5pgod.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5py5pgod.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5py5pgod.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. The function shall\
    \ square all entries in the list if the entry is greater than or equal to 0,\n\
    \    and it shall cube all entries in the list if the entry is less than 0. The\
    \ function will return the sum of all entries. \n    \n    Examples:\n    For\
    \ lst = [1,2,3] the output should be 14\n    For lst = []  the output should be\
    \ 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -125\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6v4ygvj.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6v4ygvj.jl:1\n\
    in expression starting at /tmp/tmpj6v4ygvj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     total += lst[i]^2\n        elseif i % 4 == 0\n            total += lst[i]^3\n\
    \        else\n            total += lst[i]\n        end\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsjv4rh3.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppsjv4rh3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsjv4rh3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppsjv4rh3.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsjv4rh3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsjv4rh3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppsjv4rh3.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsjv4rh3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsjv4rh3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppsjv4rh3.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppsjv4rh3.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsjv4rh3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppsjv4rh3.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsjv4rh3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for index in eachindex(lst)\n        if index % 3 == 0 &&\
    \ index % 4 != 0\n            sum += lst[index]^2\n        elseif index % 4 ==\
    \ 0\n            sum += lst[index]^3\n        else\n            sum += lst[index]\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3ist1kf.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph3ist1kf.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3ist1kf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph3ist1kf.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3ist1kf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3ist1kf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph3ist1kf.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3ist1kf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3ist1kf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph3ist1kf.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph3ist1kf.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3ist1kf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph3ist1kf.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3ist1kf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n\
    \    for i in 1:length(lst)\n        if (i % 3 == 0) & (i % 4 != 0)\n        \
    \    sum += lst[i]^2\n        elseif (i % 4 == 0) & (i % 3 != 0)\n           \
    \ sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgbcxwnfe.jl:40\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbcxwnfe.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbcxwnfe.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgbcxwnfe.jl:41\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbcxwnfe.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbcxwnfe.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgbcxwnfe.jl:46\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbcxwnfe.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbcxwnfe.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgbcxwnfe.jl:47\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbcxwnfe.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbcxwnfe.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgbcxwnfe.jl:49\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbcxwnfe.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    idx_3 = mod.(1:length(lst),3) .== 0\n    idx_4 = mod.(1:length(lst),4)\
    \ .== 0\n    lst[idx_3] = lst[idx_3].^2\n    lst[idx_4 .& ~idx_3] = lst[idx_4\
    \ .& ~idx_3].^3\n    return sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc7jg85ul.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  MethodError: no method matching ~(::BitVector)\n\
    \  Closest candidates are:\n    ~(!Matched::Union{Int128, Int16, Int32, Int64,\
    \ Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpc7jg85ul.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7jg85ul.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7jg85ul.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7jg85ul.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  MethodError: no method matching ~(::BitVector)\n\
    \  Closest candidates are:\n    ~(!Matched::Union{Int128, Int16, Int32, Int64,\
    \ Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpc7jg85ul.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc7jg85ul.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc7jg85ul.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpc7jg85ul.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  Method"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7jg85ul.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    res = 0\n    # if length(lst) == 0\n    #     res = 0\n    # else\n  \
    \  for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 != 0\n            res\
    \ += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            res += lst[i]^3\n\
    \        else\n            res += lst[i]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpkfssc8.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdpkfssc8.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpkfssc8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdpkfssc8.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpkfssc8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpkfssc8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdpkfssc8.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdpkfssc8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpkfssc8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdpkfssc8.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdpkfssc8.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdpkfssc8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdpkfssc8.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpkfssc8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum += lst[i]^2\n        elseif i % 4 == 0\n            sum +=\
    \ lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqrc9xbe.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprqrc9xbe.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqrc9xbe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprqrc9xbe.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqrc9xbe.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqrc9xbe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprqrc9xbe.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprqrc9xbe.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqrc9xbe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprqrc9xbe.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprqrc9xbe.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprqrc9xbe.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprqrc9xbe.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqrc9xbe.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    n = length(lst)\n    sum = 0\n    for i in 1:n\n        j = i - 1\n  \
    \      if (j % 3 == 0) && (j % 4 != 0)\n            sum += lst[i]^2\n        elseif\
    \ (j % 4 == 0) && (j % 3 != 0)\n            sum += lst[i]^3\n        else\n  \
    \          sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpos4yvnwk.jl:35\n  Expression: candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n   Evaluated: -5 == -3\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos4yvnwk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos4yvnwk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpos4yvnwk.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -128 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpos4yvnwk.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos4yvnwk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpos4yvnwk.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -162 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpos4yvnwk.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos4yvnwk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpos4yvnwk.jl:39\n  Expression: candidate([-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0\n   Evaluated: -2 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos4yvnwk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos4yvnwk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpos4yvnwk.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: -151"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpos4yvnwk.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for (index,value) in enumerate(lst)\n        if index %\
    \ 3 == 0 && index % 4 != 0\n            total += value^2\n        elseif index\
    \ % 4 == 0 && index % 3 != 0\n            total += value^3\n        else\n   \
    \         total += value\n        end\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyn_cgoeq.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyn_cgoeq.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyn_cgoeq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyn_cgoeq.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyn_cgoeq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyn_cgoeq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyn_cgoeq.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyn_cgoeq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyn_cgoeq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyn_cgoeq.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyn_cgoeq.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyn_cgoeq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyn_cgoeq.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyn_cgoeq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    squares_sum = 0\n    for (index, value) in enumerate(lst)\n        if\
    \ index % 3 == 0 && index % 4 != 0\n            squares_sum += value^2\n     \
    \   elseif index % 4 == 0\n            squares_sum += value^3\n        else\n\
    \            squares_sum += value\n        end\n    end\n    return squares_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpznozdm0r.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpznozdm0r.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznozdm0r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpznozdm0r.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznozdm0r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznozdm0r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpznozdm0r.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznozdm0r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznozdm0r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpznozdm0r.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpznozdm0r.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznozdm0r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpznozdm0r.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznozdm0r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if length(lst)==0\n\
    \        return 0\n    else\n        c=0\n        for (i,j) in enumerate(lst)\n\
    \            if rem(i,3)==0\n                c+=j^2\n            elseif rem(i,4)==0\
    \ && rem(i,3)!=0\n                c+=j^3\n            else\n                c+=j\n\
    \            end\n        end\n        return c\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9sk6iw9.jl:43\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb9sk6iw9.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9sk6iw9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb9sk6iw9.jl:44\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9sk6iw9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9sk6iw9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb9sk6iw9.jl:49\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb9sk6iw9.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9sk6iw9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb9sk6iw9.jl:50\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb9sk6iw9.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb9sk6iw9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpb9sk6iw9.jl:52\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9sk6iw9.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n       \
    \     result += lst[i]^2\n        elseif i % 4 == 0\n            result += lst[i]^3\n\
    \        else\n            result += lst[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ds1rcbs.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ds1rcbs.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ds1rcbs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0ds1rcbs.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ds1rcbs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ds1rcbs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0ds1rcbs.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ds1rcbs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ds1rcbs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0ds1rcbs.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ds1rcbs.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ds1rcbs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0ds1rcbs.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ds1rcbs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    lst_squared=[]\n    lst_cubed=[]\n    for i=1:length(lst)\n        if\
    \ i%3==0 && i%4!=0\n            push!(lst_squared,lst[i]^2)\n        elseif i%4==0\
    \ && i%3!=0\n            push!(lst_cubed,lst[i]^3)\n        else\n           \
    \ push!(lst_squared,lst[i])\n            push!(lst_cubed,lst[i])\n        end\n\
    \    end\n    return sum(lst_squared)+sum(lst_cubed)\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp32c2fi1s.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 15 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp32c2fi1s.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32c2fi1s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp32c2fi1s.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 91 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32c2fi1s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32c2fi1s.jl:31\ntest set: Error\
    \ During Test at /tmp/tmp32c2fi1s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  MethodError: no method matching zero(::Type{Any})\n\
    \  Closest candidates are:\n    zero(::Type{Union{Missing, T}}) where T at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:105\n\
    \    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\n\
    \    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\n\
    \    ...\n  Stacktrace:\n    [1] zero(#unused#::Type{Any})\n      @ Base ./missing.jl:106\n\
    \    [2] reduce_empty(#unused#::typeof(+), #unused#::Type{Any})\n      @ Base\
    \ ./reduce.jl:313\n    [3] reduce_empty(#unused#::typeof(Base.add_sum), #unused#::Type{Any})\n\
    \      @ Base ./reduce.jl:322\n    [4] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [5] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(Base.add_sum)}, #unused#::Type{Any})\n      @ Base ./reduce.jl:331\n\
    \    [6] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32c2fi1s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    cubed_sum = 0\n    squared_sum = 0\n    for (index,elem) in enumerate(lst)\n\
    \        if index % 3 == 0 && index % 4 != 0\n            squared_sum += elem^2\n\
    \        elseif index % 4 == 0\n            cubed_sum += elem^3\n        end\n\
    \    end\n    return squared_sum + cubed_sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4k3lxy3e.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4k3lxy3e.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4k3lxy3e.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4k3lxy3e.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4k3lxy3e.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4k3lxy3e.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4k3lxy3e.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4k3lxy3e.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4k3lxy3e.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4k3lxy3e.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4k3lxy3e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4k3lxy3e.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4k3lxy3e.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4k3lxy3e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    i = 1; sum = 0\n    while i <= length(lst)\n        if i % 3 == 0\n  \
    \          sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n        \
    \    sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n \
    \       i += 1\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_3_7v0b2.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_3_7v0b2.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3_7v0b2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3_7v0b2.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3_7v0b2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3_7v0b2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3_7v0b2.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3_7v0b2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3_7v0b2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3_7v0b2.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_3_7v0b2.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3_7v0b2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3_7v0b2.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3_7v0b2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (index, elem) in enumerate(lst)\n        if rem(index,\
    \ 3) == 0\n            sum += elem^2\n        elseif rem(index, 4) == 0 && rem(index,\
    \ 3) != 0\n            sum += elem^3\n        else\n            sum += elem\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi7wlvdn.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoi7wlvdn.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi7wlvdn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoi7wlvdn.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoi7wlvdn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi7wlvdn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoi7wlvdn.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoi7wlvdn.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi7wlvdn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoi7wlvdn.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoi7wlvdn.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi7wlvdn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoi7wlvdn.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi7wlvdn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    if isempty(lst)\n        return 0\n    end\n    index = 1\n    sum = 0\n\
    \    for i in lst\n        if index % 3 == 0\n            sum += i^2\n       \
    \ elseif index % 4 == 0 && index % 3 != 0\n            sum += i^3\n        else\n\
    \            sum += i\n        end\n        index += 1\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9e69dr7.jl:34\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy9e69dr7.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9e69dr7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy9e69dr7.jl:35\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy9e69dr7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9e69dr7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy9e69dr7.jl:40\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy9e69dr7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9e69dr7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy9e69dr7.jl:41\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy9e69dr7.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9e69dr7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpy9e69dr7.jl:43\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9e69dr7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    index = 1\n    for i in lst\n        if index % 3 == 0\n\
    \            sum += i^2\n        elseif index % 4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n        index += 1\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpppom7som.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpppom7som.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppom7som.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpppom7som.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppom7som.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppom7som.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpppom7som.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpppom7som.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppom7som.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpppom7som.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpppom7som.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpppom7som.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpppom7som.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpppom7som.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    for i=1:length(lst)\n        if i%3==0 && i%4!=0\n            lst[i] =\
    \ lst[i]^2\n        elseif i%4==0 && i%3!=0\n            lst[i] = lst[i]^3\n \
    \       end\n    end\n    return sum(lst)\nend\nsum_squares([1,2,3])\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps91nogfg.jl:27\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps91nogfg.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps91nogfg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps91nogfg.jl:28\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps91nogfg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps91nogfg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps91nogfg.jl:33\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps91nogfg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps91nogfg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps91nogfg.jl:34\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps91nogfg.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps91nogfg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps91nogfg.jl:36\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps91nogfg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n  \
    \          sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi7hto5dh.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7hto5dh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7hto5dh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7hto5dh.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7hto5dh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7hto5dh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7hto5dh.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi7hto5dh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7hto5dh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7hto5dh.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi7hto5dh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi7hto5dh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi7hto5dh.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7hto5dh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i,3) == 0\n       \
    \     sum += lst[i]^2\n        elseif mod(i,4) == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8dle1k8.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo8dle1k8.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8dle1k8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpo8dle1k8.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8dle1k8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8dle1k8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpo8dle1k8.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8dle1k8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8dle1k8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpo8dle1k8.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo8dle1k8.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8dle1k8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpo8dle1k8.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8dle1k8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    lst1 = lst\n \
    \   for i in 1:length(lst)\n        if i%3 == 0 && i%4 != 0\n            lst1[i]\
    \ = lst[i]^2\n        elseif i%4 == 0 && i%3 != 0\n            lst1[i] = lst[i]^3\n\
    \        end\n    end\n    return sum(lst1)\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr3o802qf.jl:38\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr3o802qf.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3o802qf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr3o802qf.jl:39\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3o802qf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3o802qf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr3o802qf.jl:44\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr3o802qf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3o802qf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr3o802qf.jl:45\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr3o802qf.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr3o802qf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr3o802qf.jl:47\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3o802qf.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # We will initialize\
    \ two counters called i, j which will keep track of the indexes of the list.\n\
    \    i = 1\n    j = 1\n    sum = 0\n    # This while loop will loop through the\
    \ length of the list\n    while i <= length(lst)\n        # if the index is a\
    \ multiple of 3, then the number at that index will be squared and added to the\
    \ sum.\n        if (i % 3 == 0)\n            sum += lst[i]^2\n        end\n  \
    \      # if the index is a multiple of 4 but not a multiple of 3, then the number\
    \ at that index will be cubed and added to the sum.\n        if (i % 4 == 0) &&\
    \ (i % 3 != 0)\n            sum += lst[i]^3\n        end\n        # if the index\
    \ is not a multiple of 3 or 4, then the number at that index will just be added\
    \ to the sum.\n        if (i % 3 != 0) && (i % 4 != 0)\n            sum += lst[i]\n\
    \        end\n        # increment the counter\n        i += 1\n    end\n    #\
    \ return the sum\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfjbi1blp.jl:51\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfjbi1blp.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjbi1blp.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfjbi1blp.jl:52\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjbi1blp.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjbi1blp.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfjbi1blp.jl:57\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfjbi1blp.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjbi1blp.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfjbi1blp.jl:58\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfjbi1blp.jl:58 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfjbi1blp.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpfjbi1blp.jl:60\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjbi1blp.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers and return the\
    \ sum of their squares.\n    \n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be 0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3xdcvsu4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3xdcvsu4.jl:1\n\
    in expression starting at /tmp/tmp3xdcvsu4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # Your code here\n    sum = 0\n    for (i, element) in enumerate(lst)\n\
    \        if i % 3 == 0 && i % 4 != 0\n            sum += element ^ 2\n       \
    \ elseif i % 4 == 0\n            sum += element ^ 3\n        else\n          \
    \  sum += element\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdp_uljb0.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdp_uljb0.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_uljb0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdp_uljb0.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp_uljb0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_uljb0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdp_uljb0.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp_uljb0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_uljb0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdp_uljb0.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdp_uljb0.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_uljb0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdp_uljb0.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdp_uljb0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum_total = 0\n    for (index, value) in enumerate(lst)\n        if index\
    \ % 3 == 0\n            sum_total += value^2\n        elseif index % 4 == 0 &&\
    \ index % 3 != 0\n            sum_total += value^3\n        else\n           \
    \ sum_total += value\n        end\n    end\n    return sum_total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuf6ofwb0.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuf6ofwb0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuf6ofwb0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuf6ofwb0.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuf6ofwb0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuf6ofwb0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuf6ofwb0.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuf6ofwb0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuf6ofwb0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuf6ofwb0.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuf6ofwb0.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuf6ofwb0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuf6ofwb0.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuf6ofwb0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    \"Initializing the sum\"\n    Sum = 0\n    \n    \"for each element\
    \ in the list, check the index and do the operation\"\n    for i = 1:length(lst)\n\
    \        if i % 3 == 0\n            Sum += lst[i]^2\n        elseif i % 4 == 0\n\
    \            Sum += lst[i]^3\n        else\n            Sum += lst[i]\n      \
    \  end\n    end\n    \n    return Sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbank_nad.jl:34\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbank_nad.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbank_nad.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbank_nad.jl:35\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbank_nad.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbank_nad.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbank_nad.jl:40\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbank_nad.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbank_nad.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbank_nad.jl:41\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbank_nad.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbank_nad.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbank_nad.jl:43\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbank_nad.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i = 1:length(lst)\n        if mod(i,4) == 0 && mod(i,3)\
    \ != 0\n            total += lst[i]^3\n        elseif mod(i,3) == 0\n        \
    \    total += lst[i]^2\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26mcwwdt.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp26mcwwdt.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26mcwwdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp26mcwwdt.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26mcwwdt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26mcwwdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp26mcwwdt.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26mcwwdt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26mcwwdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp26mcwwdt.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp26mcwwdt.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26mcwwdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp26mcwwdt.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26mcwwdt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    res = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   res += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            res\
    \ += lst[i]^3\n        else\n            res += lst[i]\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprth2837a.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprth2837a.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprth2837a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprth2837a.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprth2837a.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprth2837a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprth2837a.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprth2837a.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprth2837a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprth2837a.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprth2837a.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprth2837a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprth2837a.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprth2837a.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function takes a vector of integers, and squares every\
    \ index that is a multiple of 3, \n    and cubes every index that is a multiple\
    \ of 4. It returns the sum of the elements.\n    \"\"\"\n    sum = 0\n    for\
    \ i in 1:length(lst)\n        if mod(i,4) == 0 && mod(i,3) != 0\n            sum\
    \ += lst[i]^3\n        elseif mod(i,3) == 0\n            sum += lst[i]^2\n   \
    \     else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplg4cignc.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplg4cignc.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg4cignc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplg4cignc.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg4cignc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg4cignc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplg4cignc.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg4cignc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg4cignc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplg4cignc.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplg4cignc.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg4cignc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplg4cignc.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplg4cignc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #get the length of the vector\n    n = length(lst)\n    #vector to store\
    \ the result\n    res = lst\n    #iterate through the vector\n    for i = 1:n\n\
    \        #check if the index is a multiple of 3 or 4\n        if mod(i,3) == 0\
    \ || mod(i,4) == 0\n            #if true, check if it is also a multiple of 4\n\
    \            if mod(i,4) == 0\n                #if yes, cube the value at that\
    \ index\n                res[i] = lst[i]^3\n            else\n               \
    \ #if no, square the value at that index\n                res[i] = lst[i]^2\n\
    \            end\n        end\n    end\n    #return the sum of the vector\n  \
    \  return sum(res)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwcqv90vt.jl:38\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwcqv90vt.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqv90vt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwcqv90vt.jl:39\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqv90vt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqv90vt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwcqv90vt.jl:44\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwcqv90vt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqv90vt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwcqv90vt.jl:45\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwcqv90vt.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwcqv90vt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwcqv90vt.jl:47\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcqv90vt.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_int = 0\n\
    \    for (i,j) in enumerate(lst)\n        if (i % 3 == 0)\n            lst[i]\
    \ = j^2\n        elseif (i % 4 == 0)\n            lst[i] = j^3\n        end\n\
    \        sum_int += lst[i]\n    end\n    return sum_int\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnrjs69tt.jl:38\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnrjs69tt.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrjs69tt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnrjs69tt.jl:39\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrjs69tt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrjs69tt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnrjs69tt.jl:44\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnrjs69tt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrjs69tt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnrjs69tt.jl:45\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnrjs69tt.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnrjs69tt.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnrjs69tt.jl:47\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrjs69tt.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if (i % 3 == 0) & (i %\
    \ 4 != 0)\n            total += lst[i] ^ 2\n        elseif (i % 4 == 0) & (i %\
    \ 3 != 0)\n            total += lst[i] ^ 3\n        else\n            total +=\
    \ lst[i]\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb2n0zxf_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb2n0zxf_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2n0zxf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb2n0zxf_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2n0zxf_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2n0zxf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb2n0zxf_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb2n0zxf_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2n0zxf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb2n0zxf_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb2n0zxf_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb2n0zxf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb2n0zxf_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2n0zxf_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function takes as input a list of integers and returns\
    \ the sum of all elements in the list whose index is a multiple of 3 or 4.\n \
    \   \"\"\"\n    count::Int64 = 0\n    for (index,val) in enumerate(lst)\n    \
    \    if (index%3==0)||(index%4==0)\n            count += val^2\n        end\n\
    \    end\n    return count\nend\nsum_squares([1,2,3])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_4u_dn_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_4u_dn_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_4u_dn_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi_4u_dn_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_4u_dn_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_4u_dn_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi_4u_dn_.jl:32\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_4u_dn_.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_4u_dn_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi_4u_dn_.jl:33\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 5 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_4u_dn_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_4u_dn_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpi_4u_dn_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 5 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_4u_dn_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\n    \"\"\"\n    total = 0\n    if length(lst) ==\
    \ 0\n        return 0\n    end\n    for i in 1:length(lst)\n        if i % 3 ==\
    \ 0 && i % 4 != 0\n            total += lst[i]^2\n        elseif i % 4 == 0 &&\
    \ i % 3 != 0\n            total += lst[i]^3\n        else\n            total +=\
    \ lst[i]\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0artovvd.jl:41\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0artovvd.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0artovvd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0artovvd.jl:42\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0artovvd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0artovvd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0artovvd.jl:47\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0artovvd.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0artovvd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0artovvd.jl:48\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0artovvd.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0artovvd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp0artovvd.jl:50\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0artovvd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Initialize sum\n\
    \    s = 0\n    # Initialize counter\n    i = 1\n    # Loop through list and change\
    \ entries as desired\n    for a in lst\n        if i % 3 == 0 && i % 4 != 0\n\
    \            a = a^2\n        elseif i % 4 == 0\n            a = a^3\n       \
    \ end\n        s += a\n        i += 1\n    end\n    # Return the sum\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdxb4z92r.jl:44\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdxb4z92r.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdxb4z92r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpdxb4z92r.jl:45\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdxb4z92r.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdxb4z92r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpdxb4z92r.jl:50\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdxb4z92r.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdxb4z92r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpdxb4z92r.jl:51\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdxb4z92r.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdxb4z92r.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpdxb4z92r.jl:53\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdxb4z92r.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    for i in 1:length(lst)\n        if rem(i,4) == 0\n            if\
    \ rem(i,3) != 0\n                lst[i] = lst[i]^3\n            end\n        elseif\
    \ rem(i,3) == 0\n            lst[i] = lst[i]^2\n        end\n    end\n    return\
    \ sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp732w3zai.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp732w3zai.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732w3zai.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp732w3zai.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp732w3zai.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732w3zai.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp732w3zai.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp732w3zai.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732w3zai.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp732w3zai.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp732w3zai.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732w3zai.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp732w3zai.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp732w3zai.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum_ = 0 # Define a sum variable\n    \n    for i = 1:length(lst)\
    \ # Loop over the list indexes\n        \n        if i % 3 == 0 # Square if index\
    \ is a multiple of 3\n            sum_ += lst[i]^2\n        elseif i % 4 == 0\
    \ # Cube if index is a multiple of 4 but not 3\n            sum_ += lst[i]^3\n\
    \        else # Otherwise leave the entry as it is\n            sum_ += lst[i]\n\
    \        end\n    end\n    \n    return sum_ # Return the final sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ivonw93.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4ivonw93.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ivonw93.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4ivonw93.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ivonw93.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ivonw93.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4ivonw93.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ivonw93.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ivonw93.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4ivonw93.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4ivonw93.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ivonw93.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4ivonw93.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ivonw93.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Takes a list of integers and computes the total of entries\
    \ that have been squared if the index is a multiple of 3 and cubed if the index\
    \ is \n    a multiple of 4 but not a multiple of 3.\n    \"\"\"\n    total = 0\n\
    \    for (i,j) in enumerate(lst)\n        if i % 3 == 0\n            total +=\
    \ j^2\n        elseif i % 4 == 0\n            total += j^3\n        else\n   \
    \         total += j\n        end\n    end\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdy445e8.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdy445e8.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdy445e8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprdy445e8.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdy445e8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdy445e8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprdy445e8.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprdy445e8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdy445e8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprdy445e8.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprdy445e8.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprdy445e8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprdy445e8.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdy445e8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    tot = 0;\n\
    \    for i in 1:length(lst)\n        if i%3 == 0\n            tot += lst[i]^2\n\
    \        elseif i%4 == 0\n            tot += lst[i]^3\n        else\n        \
    \    tot += lst[i]\n        end\n    end\n    return tot\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_tuo04z.jl:40\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps_tuo04z.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_tuo04z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmps_tuo04z.jl:41\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps_tuo04z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_tuo04z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmps_tuo04z.jl:46\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps_tuo04z.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_tuo04z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmps_tuo04z.jl:47\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps_tuo04z.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps_tuo04z.jl:39\ntest set: Test\
    \ Failed at /tmp/tmps_tuo04z.jl:49\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_tuo04z.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    square = 0\n    cube = 0\n    for i = 1:length(lst)\n        if i % 3\
    \ == 0\n            square += lst[i]^2\n        elseif i % 4 == 0 && i % 3 !=\
    \ 0\n            cube += lst[i]^3\n        end\n    end\n    return square + cube\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsi__bf2q.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi__bf2q.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi__bf2q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsi__bf2q.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi__bf2q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi__bf2q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsi__bf2q.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsi__bf2q.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi__bf2q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsi__bf2q.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi__bf2q.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi__bf2q.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpsi__bf2q.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi__bf2q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    n = length(lst)\n    res = 0\n    for i in 1:n\n        if i % 3 == 0\
    \ && i % 4 != 0\n            res += lst[i]^2\n        elseif i % 4 == 0\n    \
    \        res += lst[i]^3\n        else\n            res += lst[i]\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp3i3g7dx.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp3i3g7dx.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3i3g7dx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp3i3g7dx.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3i3g7dx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3i3g7dx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp3i3g7dx.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp3i3g7dx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3i3g7dx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp3i3g7dx.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp3i3g7dx.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp3i3g7dx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpp3i3g7dx.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3i3g7dx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i,x) in enumerate(lst)\n        if i % 3 == 0\n    \
    \        sum += x ^ 2\n        elseif i % 4 == 0\n            sum += x ^ 3\n \
    \       else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqzpquv_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvqzpquv_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqzpquv_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvqzpquv_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqzpquv_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqzpquv_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvqzpquv_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqzpquv_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqzpquv_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvqzpquv_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvqzpquv_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqzpquv_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpvqzpquv_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqzpquv_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    count = 0\n  \
    \  for i in 1:length(lst)\n        if i % 3 == 0 && i % 4 != 0\n            lst[i]\
    \ = lst[i]^2\n        elseif i % 4 == 0\n            lst[i] = lst[i]^3\n     \
    \   end\n        count += lst[i]\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvlmbohso.jl:38\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvlmbohso.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlmbohso.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvlmbohso.jl:39\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlmbohso.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlmbohso.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvlmbohso.jl:44\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlmbohso.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlmbohso.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvlmbohso.jl:45\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvlmbohso.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlmbohso.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvlmbohso.jl:47\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlmbohso.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum=0;\n    for i=1:length(lst)\n        if(i%3==0)\n            sum+=lst[i]^2\n\
    \        elseif(i%4==0)\n            sum+=lst[i]^3\n        else\n           \
    \ sum+=lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoh4wqywl.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoh4wqywl.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh4wqywl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoh4wqywl.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh4wqywl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh4wqywl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoh4wqywl.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh4wqywl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh4wqywl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoh4wqywl.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoh4wqywl.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh4wqywl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoh4wqywl.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoh4wqywl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function returns the sum of all square entries of the\
    \ input list lst.\n    \"\"\"\n    sum = 0\n    for (i, v) in enumerate(lst)\n\
    \        if rem(i, 3) == 0\n            sum += v^2\n        elseif rem(i, 4) ==\
    \ 0 && rem(i, 3) != 0\n            sum += v^3\n        else\n            sum +=\
    \ v\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqnohybs_.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnohybs_.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnohybs_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqnohybs_.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnohybs_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnohybs_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqnohybs_.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqnohybs_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnohybs_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqnohybs_.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqnohybs_.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqnohybs_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqnohybs_.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqnohybs_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0\n    for i = 1:length(lst)\n        if (i % 3 == 0) && (i %\
    \ 4 != 0)\n            result += lst[i]^2\n        elseif (i % 4 == 0) && (i %\
    \ 3 != 0)\n            result += lst[i]^3\n        else\n            result +=\
    \ lst[i]\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3k1f5j0e.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3k1f5j0e.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3k1f5j0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3k1f5j0e.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3k1f5j0e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3k1f5j0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3k1f5j0e.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3k1f5j0e.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3k1f5j0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3k1f5j0e.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3k1f5j0e.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3k1f5j0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3k1f5j0e.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3k1f5j0e.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if (i % 3 == 0) && (i % 4\
    \ != 0)\n            sum += lst[i]^2\n        elseif (i % 4 == 0) && (i % 3 !=\
    \ 0)\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6n1m3wo_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6n1m3wo_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n1m3wo_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6n1m3wo_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n1m3wo_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n1m3wo_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6n1m3wo_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6n1m3wo_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n1m3wo_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6n1m3wo_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6n1m3wo_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6n1m3wo_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6n1m3wo_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6n1m3wo_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    t = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 != 0\n\
    \            t += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n        \
    \    t += lst[i]^3\n        else\n            t += lst[i]\n        end\n    end\n\
    \    return t\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpksk9xzwg.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpksk9xzwg.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksk9xzwg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpksk9xzwg.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpksk9xzwg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksk9xzwg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpksk9xzwg.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpksk9xzwg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksk9xzwg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpksk9xzwg.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpksk9xzwg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpksk9xzwg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpksk9xzwg.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpksk9xzwg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    lst = [ lst[i]^2 for i in 1:length(lst) if (i%3 == 0 && i%4 != 0)]\n \
    \   return sum(lst)\n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0cy02jqu.jl:22\\n  Expression: candidate([1,\
    \ 2, 3]) == 6\\n   Evaluated: 9 == 6\\nStacktrace:\\n [1] macro expansion\\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp0cy02jqu.jl:22 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp0cy02jqu.jl:21\\ntest set: Test\
    \ Failed at /tmp/tmp0cy02jqu.jl:23\\n  Expression: candidate([1, 4, 9]) == 14\\\
    n   Evaluated: 81 == 14\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp0cy02jqu.jl:23 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp0cy02jqu.jl:21\\ntest set: Error\
    \ During Test at /tmp/tmp0cy02jqu.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\\n  MethodError: no method matching zero(::Type{Any})\\\
    n  Closest candidates are:\\n    zero(::Type{Union{Missing, T}}) where T at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:105\\\
    n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\\\
    n    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\\\
    n    ...\\n  Stacktrace:\\n    [1] zero(#unused#::Type{Any})\\n      @ Base ./missing.jl:106\\\
    n    [2] reduce_empty(#unused#::typeof(+), #unused#::Type{Any})\\n      @ Base\
    \ ./reduce.jl:313\\n    [3] reduce_empty(#unused#::typeof(Base.add_sum), #unused#::Type{Any})\\\
    n      @ Base ./reduce.jl:322\\n    [4] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [5] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(Base.add_sum)}, #unused#::Type{Any})\\n      @ Base ./reduce.jl:331\\\
    n    [6] reduce"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sqr = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n          \
    \  sqr += lst[i]^2\n        elseif i % 4 == 0\n            sqr += lst[i]^3\n \
    \       end\n    end\n    return sqr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiwv3s11y.jl:27\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiwv3s11y.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwv3s11y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiwv3s11y.jl:28\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiwv3s11y.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwv3s11y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiwv3s11y.jl:30\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiwv3s11y.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwv3s11y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiwv3s11y.jl:31\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiwv3s11y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwv3s11y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpiwv3s11y.jl:33\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwv3s11y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #initialize the sum\n    sum_ = 0\n    for (i,e) in enumerate(lst) \n\
    \        #if i is a multiple of 3 and 4\n        if (i%3 == 0) && (i%4 == 0)\n\
    \            sum_ += e^2^3\n        #else if only i is a multiple of 3\n     \
    \   elseif (i%3 == 0)\n            sum_ += e^2\n        #else if only i is a multiple\
    \ of 4\n        elseif (i%4 == 0)\n            sum_ += e^3\n        #if i is neither\
    \ a multiple of 3 or 4\n        else\n            sum_ += e\n        end\n   \
    \ end\n    return sum_\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5p0oq9ux.jl:36\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5p0oq9ux.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p0oq9ux.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5p0oq9ux.jl:37\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5p0oq9ux.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p0oq9ux.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5p0oq9ux.jl:42\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5p0oq9ux.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p0oq9ux.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5p0oq9ux.jl:43\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5p0oq9ux.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5p0oq9ux.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5p0oq9ux.jl:45\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 430047642\
    \ == -14196\nStacktrace:\n [1] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5p0oq9ux.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum::Int64 = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i\
    \ % 4 != 0\n            sum += lst[i]^2\n        elseif i % 4 == 0\n         \
    \   sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n  \
    \  end\n    return sum\nend\n#=\n    This function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -126\n=#\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65mnl2wd.jl:39\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp65mnl2wd.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65mnl2wd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp65mnl2wd.jl:40\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65mnl2wd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65mnl2wd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp65mnl2wd.jl:45\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp65mnl2wd.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65mnl2wd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp65mnl2wd.jl:46\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp65mnl2wd.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp65mnl2wd.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp65mnl2wd.jl:48\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65mnl2wd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n\
    \            total += lst[i]^3\n        else\n            total += lst[i]\n  \
    \      end\n    end\n    return total\nend\nsum_squares([1,2,3])\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_3mpywgs.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_3mpywgs.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3mpywgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3mpywgs.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3mpywgs.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3mpywgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3mpywgs.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_3mpywgs.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3mpywgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3mpywgs.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_3mpywgs.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_3mpywgs.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_3mpywgs.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3mpywgs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    \"\"\"\n    This function will take a string. The function will\
    \ then return a boolean value based on whether or not the word is a palindrome.\
    \ \n    \n    Examples:\n    For is_palindrome(\"Anna\") the output should be\
    \ true\n    For is_palindrome(\"Hannah\") the output should be true\n    For is_palindrome(\"\
    Bob\") the output should be false\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8x0p4h7y.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8x0p4h7y.jl:1\n\
    in expression starting at /tmp/tmp8x0p4h7y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    if lst == []\n        sum = 0\n    else\n        sum = 0\n        for\
    \ i in 1:length(lst)\n            if i % 3 == 0\n                sum += lst[i]^2\n\
    \            elseif i % 4 == 0 && i % 3 != 0\n                sum += lst[i]^3\n\
    \            else\n                sum += lst[i]\n            end\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr9p_1qig.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr9p_1qig.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9p_1qig.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr9p_1qig.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9p_1qig.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9p_1qig.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr9p_1qig.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr9p_1qig.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9p_1qig.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr9p_1qig.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr9p_1qig.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr9p_1qig.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr9p_1qig.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9p_1qig.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    @assert(isempty(lst) || isempty(lst[1]), \"Type Vector{Int64} should be\
    \ used. \") #this line checks that we are dealing with a vector of integers and\
    \ if we are not this function will return a message and stop the function's execution.\n\
    \    total = 0\n    for (i, element) in enumerate(lst) #enumerate starts with\
    \ a for loop but also returns the index for each element in the list so you don't\
    \ have to create a separate counter.\n        if mod(i,3) == 0 && !(mod(i,4) ==\
    \ 0) #if the remainder of the division of the index by 3 is 0 and the remainder\
    \ of the division of the index by 4 is NOT 0, we square the element and add it\
    \ to total.\n            total += element^2\n        elseif mod(i,4) == 0 && !(mod(i,3)\
    \ == 0) #if the remainder of the division of the index by 4 is 0 and the remainder\
    \ of the division of the index by 3 is NOT 0, we cube the element and add it to\
    \ total.\n            total += element^3\n        else\n            total += element\
    \ #if the remainder of the division of the index by 3 or by 4 is 0, we simply\
    \ add the element to total.\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjs76a5mm.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  AssertionError: Type Vector{Int64}\
    \ should be used. \n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n  \
    \   @ Main /tmp/tmpjs76a5mm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjs76a5mm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjs76a5mm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjs76a5mm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  AssertionError: Type Vector{Int64} should be used.\
    \ \n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpjs76a5mm.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjs76a5mm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjs76a5mm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjs76a5mm.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\n  AssertionError: Type Vector{Int64}\
    \ should be used. \n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n  \
    \   @ Main /tmp/tmpjs76a5mm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjs76a5mm.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjs76a5mm.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjs76a5mm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n  AssertionError: Type\
    \ Vector{Int64} should be used. \n  Stacktrace:\n   [1] sum"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjs76a5mm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    tot = 0\n    for i in eachindex(lst)\n        if (i % 3 == 0) && (i %\
    \ 4 != 0)\n            tot += lst[i]^2\n        elseif (i % 4 == 0) && (i % 3\
    \ != 0)\n            tot += lst[i]^3\n        else\n            tot += lst[i]\n\
    \        end\n    end\n    return tot\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph6c48yvb.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph6c48yvb.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6c48yvb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph6c48yvb.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6c48yvb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6c48yvb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph6c48yvb.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph6c48yvb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6c48yvb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph6c48yvb.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph6c48yvb.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph6c48yvb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph6c48yvb.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph6c48yvb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    for (i, x) in enumerate(lst)\n        if i % 3 == 0\n          \
    \  lst[i] = x ^ 2\n        elseif i % 4 == 0\n            lst[i] = x ^ 3\n   \
    \     end\n    end\n    sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpln3vlrr6.jl:27\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpln3vlrr6.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln3vlrr6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpln3vlrr6.jl:28\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln3vlrr6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln3vlrr6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpln3vlrr6.jl:33\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpln3vlrr6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln3vlrr6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpln3vlrr6.jl:34\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpln3vlrr6.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpln3vlrr6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpln3vlrr6.jl:36\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpln3vlrr6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    # loop over the list lst\n    for i in 1:length(lst)\n\
    \        # if i is a multiple of 3 square the ith entry in lst\n        if i %\
    \ 3 == 0\n            total += lst[i]^2\n        # else if i is a multiple of\
    \ 4 cube the ith entry in lst\n        elseif i % 4 == 0\n            total +=\
    \ lst[i]^3\n        # else add the ith entry in lst to the total\n        else\n\
    \            total += lst[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgzmfjjk4.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgzmfjjk4.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzmfjjk4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgzmfjjk4.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzmfjjk4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzmfjjk4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgzmfjjk4.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgzmfjjk4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzmfjjk4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgzmfjjk4.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgzmfjjk4.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgzmfjjk4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgzmfjjk4.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzmfjjk4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i, l) in enumerate(lst)\n        if mod(i, 3) == 0 &&\
    \ mod(i, 4) != 0\n            sum += l^2\n        elseif mod(i, 4) == 0\n    \
    \        sum += l^3\n        else\n            sum += l\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqt9vxk57.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqt9vxk57.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt9vxk57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt9vxk57.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt9vxk57.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt9vxk57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt9vxk57.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqt9vxk57.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt9vxk57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt9vxk57.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqt9vxk57.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqt9vxk57.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqt9vxk57.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqt9vxk57.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total_sum = 0\n    for i in eachindex(lst)\n        if (i % 3 == 0) &&\
    \ (i % 4 != 0)\n            total_sum += lst[i]^2\n        elseif (i % 4 == 0)\
    \ && (i % 3 != 0)\n            total_sum += lst[i]^3\n        else\n         \
    \   total_sum += lst[i]\n        end\n    end\n    return total_sum\nend\n   \
    \ \n    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwxcy3bjk.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwxcy3bjk.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxcy3bjk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwxcy3bjk.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwxcy3bjk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxcy3bjk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwxcy3bjk.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwxcy3bjk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxcy3bjk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwxcy3bjk.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwxcy3bjk.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwxcy3bjk.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwxcy3bjk.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwxcy3bjk.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    totalsum = 0\n    for index in 1:length(lst)\n        #Check if is a multiple\
    \ of 3 and 4\n        if (index % 3 == 0) && (index % 4 == 0)\n            totalsum\
    \ += lst[index]^3\n            println(\"Cube of $(lst[index])\")\n        #If\
    \ index is a multiple of 3, but not of 4\n        elseif (index % 3 == 0) && (index\
    \ % 4 != 0)\n            totalsum += lst[index]^2\n            println(\"Square\
    \ of $(lst[index])\")\n        #If index is a multiple of 4, but not of 3\n  \
    \      elseif (index % 4 == 0) && (index % 3 != 0)\n            totalsum += lst[index]^3\n\
    \            println(\"Cube of $(lst[index])\")\n        #If index is neither\
    \ a multiple of 3 nor of 4\n        else\n            totalsum += lst[index]\n\
    \            println(\"Sum of $(lst[index])\")\n        end\n    end\n    return\
    \ totalsum\nend\n \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "Sum of 1\nSum of 2\nSquare of 3\ntest set: Test Failed at /tmp/tmp81xzyz3h.jl:40\n\
    \  Expression: candidate([1, 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81xzyz3h.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81xzyz3h.jl:39\nSum of 1\nSum\
    \ of 4\nSquare of 9\ntest set: Test Failed at /tmp/tmp81xzyz3h.jl:41\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n   Evaluated: 86 == 14\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81xzyz3h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81xzyz3h.jl:39\nSum of 1\nSum\
    \ of 1\nSquare of 1\nCube of 1\nSum of 1\nSquare of 1\nSum of 1\nCube of 1\nSquare\
    \ of 1\nSum of -1\nSum of -1\nSquare of -1\nCube of -1\nSum of -1\nSquare of -1\n\
    Sum of -1\nCube of -1\nSquare of -1\nSum of 0\nSum of -1\nSum of -5\nSquare of\
    \ 2\nCube of -1\nSum of -5\ntest set: Test Failed at /tmp/tmp81xzyz3h.jl:46\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: -8 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81xzyz3h.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81xzyz3h.jl:39\nSum of -56\nSum\
    \ of -99\nSquare of 1\nCube of 0\nSum of -2\ntest set: Test Failed at /tmp/tmp81xzyz3h.jl:47\n\
    \  Expression: candidate([-56, -99, 1, 0, -2]) == 3030\n   Evaluated: -156 ==\
    \ 3030\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81xzyz3h.jl:47 [inlined]\n [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81xzyz3h.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   lst[i] = lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            lst[i]\
    \ = lst[i]^3\n        end\n        sum += lst[i]\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0t8v_6fg.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0t8v_6fg.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t8v_6fg.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0t8v_6fg.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t8v_6fg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t8v_6fg.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0t8v_6fg.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0t8v_6fg.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t8v_6fg.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0t8v_6fg.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0t8v_6fg.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0t8v_6fg.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0t8v_6fg.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0t8v_6fg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0\n    if length(lst) == 0\n        return 0\n    end\n    for\
    \ i = 1:length(lst)\n        if mod(i,3) == 0\n            if mod(i,4) == 0\n\
    \                result += lst[i]^3\n            else\n                result\
    \ += lst[i]^2\n            end\n        else\n            result += lst[i]\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9ibxy85.jl:34\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx9ibxy85.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9ibxy85.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx9ibxy85.jl:35\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9ibxy85.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9ibxy85.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx9ibxy85.jl:40\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9ibxy85.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9ibxy85.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx9ibxy85.jl:41\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx9ibxy85.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9ibxy85.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpx9ibxy85.jl:43\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 5454\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9ibxy85.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum::Int64 = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i\
    \ % 4 != 0\n            sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 !=\
    \ 0\n            sum += lst[i]^3\n        else \n            sum += lst[i]\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc2xorq3j.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc2xorq3j.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc2xorq3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc2xorq3j.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc2xorq3j.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc2xorq3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc2xorq3j.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc2xorq3j.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc2xorq3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc2xorq3j.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc2xorq3j.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc2xorq3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpc2xorq3j.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2xorq3j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if mod(i,4) == 0 && mod(i,3)\
    \ != 0\n            sum += lst[i]^3\n        elseif mod(i,3) == 0\n          \
    \  sum += lst[i]^2\n        else\n            sum += lst[i]\n        end\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_cv4xqs_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_cv4xqs_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cv4xqs_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_cv4xqs_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cv4xqs_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cv4xqs_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_cv4xqs_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cv4xqs_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cv4xqs_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_cv4xqs_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_cv4xqs_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cv4xqs_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_cv4xqs_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cv4xqs_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if mod(i,3) == 0 \n     \
    \       sum += lst[i]^2\n        elseif mod(i,4) == 0 \n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpehz4q303.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehz4q303.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehz4q303.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpehz4q303.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehz4q303.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehz4q303.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpehz4q303.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehz4q303.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehz4q303.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpehz4q303.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpehz4q303.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehz4q303.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpehz4q303.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehz4q303.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for\
    \ (index,value) in enumerate(lst)\n        if (index%3 == 0)\n            sum\
    \ = sum + value^2\n        elseif (index%4 == 0)\n            sum = sum + value^3\n\
    \        else\n            sum = sum + value\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4k8x8kg.jl:39\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk4k8x8kg.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4k8x8kg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpk4k8x8kg.jl:40\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4k8x8kg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4k8x8kg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpk4k8x8kg.jl:45\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4k8x8kg.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4k8x8kg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpk4k8x8kg.jl:46\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk4k8x8kg.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4k8x8kg.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpk4k8x8kg.jl:48\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4k8x8kg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    if lst ==\
    \ []\n        return 0\n    else\n        sum = 0\n        for (i,x) in enumerate(lst)\n\
    \            if i%3 == 0\n                sum += x^2\n            elseif i%4 ==\
    \ 0\n                sum += x^3\n            else\n                sum += x\n\
    \            end\n        end\n        return sum\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr8z9mm9a.jl:44\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr8z9mm9a.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z9mm9a.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpr8z9mm9a.jl:45\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z9mm9a.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z9mm9a.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpr8z9mm9a.jl:50\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8z9mm9a.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z9mm9a.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpr8z9mm9a.jl:51\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr8z9mm9a.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8z9mm9a.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpr8z9mm9a.jl:53\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8z9mm9a.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i, val) in enumerate(lst)\n        if (i % 3 == 0) &\
    \ (i % 4 != 0)\n            sum += val^2\n        elseif (i % 4 == 0) & (i % 3\
    \ != 0)\n            sum += val^3\n        else\n            sum += val\n    \
    \    end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinzlg5qh.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpinzlg5qh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinzlg5qh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinzlg5qh.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinzlg5qh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinzlg5qh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinzlg5qh.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinzlg5qh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinzlg5qh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinzlg5qh.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpinzlg5qh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinzlg5qh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinzlg5qh.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinzlg5qh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    k = 0\n    for i in 1:length(lst)\n        if i%3 == 0\n            lst[i]\
    \ = lst[i]^2\n        elseif i%4 == 0\n            lst[i] = lst[i]^3\n       \
    \ end\n        k += lst[i]\n    end\n    return k\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponakt8h3.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmponakt8h3.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponakt8h3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponakt8h3.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponakt8h3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponakt8h3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponakt8h3.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmponakt8h3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponakt8h3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponakt8h3.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmponakt8h3.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmponakt8h3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmponakt8h3.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponakt8h3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (idx,val) in enumerate(lst)\n        if idx % 3 == 0\
    \ \n            sum += val^2\n        elseif idx % 4 == 0 && idx % 3 != 0\n  \
    \          sum += val^3\n        else\n            sum += val\n        end\n \
    \   end\n    return sum\nend\n# Tests\n@testset \"Should return 6 for [1,2,3]\"\
    \ begin\n    @test sum_squares([1,2,3]) == 6\nend\n@testset \"Should return 0\
    \ for []\" begin\n    @test sum_squares([]) == 0\nend\n@testset \"Should return\
    \ -126 for [-1,-5,2,-1,-5]\" begin\n    @test sum_squares([-1,-5,2,-1,-5]) ==\
    \ -126\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpkdf835hm.jl:25\nin expression starting at /tmp/tmpkdf835hm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    if isempty(lst)\n        return 0\n    end\n    s = 0\n    for i in 1:length(lst)\n\
    \        if i % 3 == 0 && i % 4 != 0\n            s += lst[i]^2\n        elseif\
    \ i % 4 == 0\n            s += lst[i]^3\n        else\n            s += lst[i]\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6lovd1mr.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6lovd1mr.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lovd1mr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6lovd1mr.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lovd1mr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lovd1mr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6lovd1mr.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6lovd1mr.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lovd1mr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6lovd1mr.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6lovd1mr.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6lovd1mr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6lovd1mr.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6lovd1mr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i, val) in enumerate(lst)\n        if i % 3 == 0 &&\
    \ i % 4 != 0\n            sum += val^2\n        elseif i % 4 == 0\n          \
    \  sum += val^3\n        else\n            sum += val\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2jo93_3b.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jo93_3b.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jo93_3b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2jo93_3b.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jo93_3b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jo93_3b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2jo93_3b.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2jo93_3b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jo93_3b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2jo93_3b.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2jo93_3b.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2jo93_3b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2jo93_3b.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jo93_3b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    output = 0\n    for (index, value) in enumerate(lst)\n        if index\
    \ % 3 == 0 && index % 4 != 0\n            output += value^2\n        elseif index\
    \ % 4 == 0\n            output += value^3\n        else\n            output +=\
    \ value\n        end\n    end\n    return output\nend\n# Test for sum_squares\n\
    @test sum_squares([1,2,3]) == 6\n@test sum_squares([]) == 0\n@test sum_squares([-1,-5,2,-1,-5])\
    \ == -126\n@test sum_squares([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpysixsrjj.jl:25\nin expression starting at /tmp/tmpysixsrjj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for index = 1:length(lst)\n        if (index % 3 == 0) &\
    \ (index % 4 != 0)\n            sum += lst[index]^2\n        elseif (index % 4\
    \ == 0) & (index % 3 != 0)\n            sum += lst[index]^3\n        else \n \
    \           sum += lst[index]\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqb1lq8oi.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqb1lq8oi.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb1lq8oi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqb1lq8oi.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb1lq8oi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb1lq8oi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqb1lq8oi.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqb1lq8oi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb1lq8oi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqb1lq8oi.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqb1lq8oi.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqb1lq8oi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqb1lq8oi.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqb1lq8oi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0 \n    for i in 1:length(lst)\n        if i % 3 == 0 && i %\
    \ 4 != 0\n            result += lst[i]^2\n        elseif i % 4 == 0\n        \
    \    result += lst[i]^3\n        else\n            result += lst[i]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphpz_rrdt.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphpz_rrdt.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpz_rrdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphpz_rrdt.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpz_rrdt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpz_rrdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphpz_rrdt.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphpz_rrdt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpz_rrdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphpz_rrdt.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphpz_rrdt.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphpz_rrdt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphpz_rrdt.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphpz_rrdt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    # initialize variables\n    sum = 0\n    length = length(lst)\n\
    \    \n    # loop over the list\n    for ii in 1:length\n        \n        # check\
    \ to see if the index is a multiple of 3\n        if mod(ii,3) == 0 \n       \
    \     \n            # check to see if the index is a multiple of 4\n         \
    \   if mod(ii,4) == 0\n                \n                # cube the entry and\
    \ add to the sum\n                sum += lst[ii]^3\n                \n       \
    \     else\n                \n                # square the entry and add to the\
    \ sum\n                sum += lst[ii]^2\n                \n            end\n \
    \           \n        else\n            \n            # just add the entry to\
    \ the sum\n            sum += lst[ii]\n            \n        end\n        \n \
    \   end\n    \n    # return the sum\n    return sum\n    \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxbmrq094.jl:54\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpxbmrq094.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbmrq094.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbmrq094.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpxbmrq094.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpxbmrq094.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbmrq094.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbmrq094.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpxbmrq094.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == 0\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpxbmrq094.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxbmrq094.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxbmrq094.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpxbmrq094.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpxbmrq094.jl:15\n\
    \   [2] macro expansion\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbmrq094.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n  sum = 0\n  for i in eachindex(lst)\n    if i % 3 == 0\n      sum += lst[i]^2\n\
    \    elseif i % 4 == 0\n      sum += lst[i]^3\n    else\n      sum += lst[i]\n\
    \    end\n  end\n  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpapx8l1m2.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpapx8l1m2.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapx8l1m2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpapx8l1m2.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapx8l1m2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapx8l1m2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpapx8l1m2.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpapx8l1m2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapx8l1m2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpapx8l1m2.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpapx8l1m2.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpapx8l1m2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpapx8l1m2.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapx8l1m2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n          \
    \  sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            sum +=\
    \ lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcu3wwphq.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcu3wwphq.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu3wwphq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcu3wwphq.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu3wwphq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu3wwphq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcu3wwphq.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcu3wwphq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu3wwphq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcu3wwphq.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcu3wwphq.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcu3wwphq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcu3wwphq.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcu3wwphq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i,e) in enumerate(lst)\n        if mod(i,3) == 0 &&\
    \ mod(i,4) != 0 \n            sum += e^2\n        elseif mod(i,4) == 0 && mod(i,3)\
    \ != 0\n            sum += e^3\n        else\n            sum += e\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpka1wpagr.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpka1wpagr.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka1wpagr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpka1wpagr.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka1wpagr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka1wpagr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpka1wpagr.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpka1wpagr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka1wpagr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpka1wpagr.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpka1wpagr.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpka1wpagr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpka1wpagr.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpka1wpagr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    if length(lst) == 0\n        println(\"The output should be 0\"\
    )\n    elseif length(lst) > 0\n        total = 0\n        for i = 1:length(lst)\n\
    \            if i%3 == 0 && i%4 != 0\n                lst[i] = lst[i]^2\n    \
    \            total += lst[i]\n            elseif i%4 == 0 && i%3 != 0\n      \
    \          lst[i] = lst[i]^3\n                total += lst[i]\n            else\n\
    \                total += lst[i]\n            end\n        end\n        println(\"\
    The output should be $total\")\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "The output should be 12\ntest set: Error During Test at /tmp/tmplgg5hc3i.jl:36\n\
    \  Test threw exception\n  Expression: candidate([1, 2, 3]) == 6\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmplgg5hc3i.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgg5hc3i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplgg5hc3i.jl:35\nThe output\
    \ should be 86\ntest set: Error During Test at /tmp/tmplgg5hc3i.jl:37\n  Test\
    \ threw exception\n  Expression: candidate([1, 4, 9]) == 14\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmplgg5hc3i.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplgg5hc3i.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgg5hc3i.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total::Int64 = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 &&\
    \ i % 4 != 0 \n            total += lst[i]^2\n        elseif i % 4 == 0 && i %\
    \ 3 != 0\n            total += lst[i]^3\n        else\n            total += lst[i]\n\
    \        end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5v3vakyz.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5v3vakyz.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v3vakyz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5v3vakyz.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v3vakyz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v3vakyz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5v3vakyz.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v3vakyz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v3vakyz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5v3vakyz.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5v3vakyz.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v3vakyz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5v3vakyz.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5v3vakyz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum_ = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum_ += lst[i] * lst[i]\n        elseif i % 4 == 0\n        \
    \    sum_ += lst[i] * lst[i] * lst[i]\n        else\n            sum_ += lst[i]\n\
    \        end\n    end\n    return sum_\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn_56jmh9.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn_56jmh9.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_56jmh9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_56jmh9.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_56jmh9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_56jmh9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_56jmh9.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_56jmh9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_56jmh9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_56jmh9.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn_56jmh9.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_56jmh9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn_56jmh9.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_56jmh9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in eachindex(lst)\n        if mod(i, 3) == 0\n    \
    \        sum += lst[i]^2\n        elseif mod(i, 4) == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9i7fr2r3.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9i7fr2r3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9i7fr2r3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9i7fr2r3.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9i7fr2r3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9i7fr2r3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9i7fr2r3.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9i7fr2r3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9i7fr2r3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9i7fr2r3.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9i7fr2r3.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9i7fr2r3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9i7fr2r3.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9i7fr2r3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in eachindex(lst)\n        if (i % 3 == 0)\n      \
    \      sum += lst[i]^2\n        elseif(i % 4 == 0)\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpod2d0skm.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpod2d0skm.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod2d0skm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpod2d0skm.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod2d0skm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod2d0skm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpod2d0skm.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpod2d0skm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod2d0skm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpod2d0skm.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpod2d0skm.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpod2d0skm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpod2d0skm.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpod2d0skm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            sum\
    \ += lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([]))\n\
    println(sum_squares([-1,-5,2,-1,-5]))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmpy9y87u51.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9y87u51.jl:25\nin expression\
    \ starting at /tmp/tmpy9y87u51.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpee8h9243.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpee8h9243.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee8h9243.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpee8h9243.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpee8h9243.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpee8h9243.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpee8h9243.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpee8h9243.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    index::Int64 = 0\n    sum::Int64 = 0\n    for i in lst\n        index\
    \ = index + 1\n        if(index % 3 == 0)\n            sum = sum + i^2\n     \
    \   elseif(index % 4 == 0)\n            sum = sum + i^3\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8p8ydbhi.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8p8ydbhi.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p8ydbhi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8p8ydbhi.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p8ydbhi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p8ydbhi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8p8ydbhi.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8p8ydbhi.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p8ydbhi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8p8ydbhi.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8p8ydbhi.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8p8ydbhi.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8p8ydbhi.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8p8ydbhi.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n           \
    \ total += lst[i]^3\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdk9w0imo.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdk9w0imo.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk9w0imo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdk9w0imo.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk9w0imo.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk9w0imo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdk9w0imo.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk9w0imo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk9w0imo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdk9w0imo.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdk9w0imo.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk9w0imo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdk9w0imo.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdk9w0imo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total::Int64 = 0\n    for i in eachindex(lst)\n        if mod(i,3) ==\
    \ 0 && mod(i,4) != 0\n            total += lst[i]^2\n        elseif mod(i,4) ==\
    \ 0 && mod(i,3) != 0\n            total += lst[i]^3\n        else\n          \
    \  total += lst[i]\n        end\n    end\n    return total\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ieuhlxh.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ieuhlxh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ieuhlxh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9ieuhlxh.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ieuhlxh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ieuhlxh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9ieuhlxh.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ieuhlxh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ieuhlxh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9ieuhlxh.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ieuhlxh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ieuhlxh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9ieuhlxh.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ieuhlxh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    if lst == []\n        return 0\n    else\n        for index in 1:length(lst)\n\
    \            if index % 3 == 0 && index % 4 != 0\n                lst[index] =\
    \ lst[index]^2\n            elseif index % 4 == 0\n                lst[index]\
    \ = lst[index]^3\n            end\n        end\n        return sum(lst)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaezj6w0g.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaezj6w0g.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaezj6w0g.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaezj6w0g.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaezj6w0g.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaezj6w0g.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaezj6w0g.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaezj6w0g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaezj6w0g.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaezj6w0g.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaezj6w0g.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaezj6w0g.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpaezj6w0g.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaezj6w0g.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    output = 0\n    i = 1\n    while i <= length(lst)\n        if i % 3 ==\
    \ 0 && i % 4 != 0\n            output += lst[i]^2\n        elseif i % 4 == 0\n\
    \            output += lst[i]^3\n        else\n            output += lst[i]\n\
    \        end\n        i += 1\n    end\n    return output\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0o59m9e2.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0o59m9e2.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o59m9e2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0o59m9e2.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0o59m9e2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o59m9e2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0o59m9e2.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0o59m9e2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o59m9e2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0o59m9e2.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0o59m9e2.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0o59m9e2.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0o59m9e2.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0o59m9e2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n   \n    sum = 0\n    # For loop to find the sum\n    for i in 1:length(lst)\n\
    \        if (i % 3 == 0) && (i % 4 != 0)\n            sum += lst[i]^2\n      \
    \  elseif (i % 4 == 0) && (i % 3 != 0)\n            sum += lst[i]^3\n        else\n\
    \            sum += lst[i]\n        end\n    end\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp989_eg8h.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp989_eg8h.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp989_eg8h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp989_eg8h.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp989_eg8h.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp989_eg8h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp989_eg8h.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp989_eg8h.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp989_eg8h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp989_eg8h.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp989_eg8h.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp989_eg8h.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp989_eg8h.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp989_eg8h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    x = 0 \n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            x += lst[i]^2\n        elseif i % 4 == 0\n            x += lst[i]^3\n\
    \        else\n            x += lst[i]\n        end\n    end\n    return x\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnvzve2zh.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnvzve2zh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvzve2zh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnvzve2zh.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvzve2zh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvzve2zh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnvzve2zh.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnvzve2zh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvzve2zh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnvzve2zh.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnvzve2zh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnvzve2zh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnvzve2zh.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnvzve2zh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    total = 0\n    \n    for i in 1:length(lst)\n        if (mod(i,3)\
    \ == 0)\n            total += lst[i]^2\n        elseif (mod(i,4) == 0)\n     \
    \       total += lst[i]^3\n        else\n            total += lst[i]\n       \
    \ end\n    end\n    \n    return total\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zxzus3f.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_zxzus3f.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zxzus3f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_zxzus3f.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zxzus3f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zxzus3f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_zxzus3f.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zxzus3f.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zxzus3f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_zxzus3f.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_zxzus3f.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zxzus3f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_zxzus3f.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zxzus3f.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s = 0\n    for (idx, val) in enumerate(lst)\n        if idx % 3 == 0\n\
    \            s += val^2\n        elseif idx % 4 == 0\n            s += val^3\n\
    \        else\n            s += val\n        end\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd16npphp.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd16npphp.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd16npphp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd16npphp.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd16npphp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd16npphp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd16npphp.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd16npphp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd16npphp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd16npphp.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd16npphp.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd16npphp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpd16npphp.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd16npphp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Get the sum of all entries in lst that are \n    1. a square\
    \ of an index of the lst, which is a multiple of 3, or \n    2. a cube of an index\
    \ of the lst, which is a multiple of 4 and not a multiple of 3.\n    \"\"\"\n\
    \    sum_squares = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n     \
    \       sum_squares += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n   \
    \         sum_squares += lst[i]^3\n        end\n    end\n    return sum_squares\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_532awl.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_532awl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_532awl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_532awl.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_532awl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_532awl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_532awl.jl:35\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg_532awl.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_532awl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_532awl.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_532awl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_532awl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_532awl.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_532awl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s = 0 # Initialise the value of s to 0.\n    for (i,n) in enumerate(lst)\
    \ # enumerate function returns the index and the value of the element in the list\
    \ in each iteration of the loop.\n        if i%3 == 0\n            s += n^2\n\
    \        elseif i%4 == 0 && i%3 != 0\n            s += n^3\n        else\n   \
    \         s += n\n        end\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2euaxxv6.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2euaxxv6.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2euaxxv6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2euaxxv6.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2euaxxv6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2euaxxv6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2euaxxv6.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2euaxxv6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2euaxxv6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2euaxxv6.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2euaxxv6.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2euaxxv6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2euaxxv6.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2euaxxv6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    #Declare local variables\n    sum_local::Int64 = 0\n    index_local::Int64\
    \ = 0\n    \n    #Iterate through list\n    for element in lst\n        #Test\
    \ if index is a multiple of 3 and a multiple of 4\n        if (index_local % 3\
    \ == 0) && (index_local % 4 == 0)\n            sum_local += element^3\n      \
    \  #Test if index is a multiple of 3 and not a multiple of 4\n        elseif (index_local\
    \ % 3 == 0) && (index_local % 4 != 0)\n            sum_local += element^2\n  \
    \      #if not, just add the entry\n        else\n            sum_local += element\n\
    \        end\n        index_local += 1\n    end\n    \n    return sum_local\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpesh7hu4j.jl:43\n  Expression: candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n   Evaluated: -5 == -3\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesh7hu4j.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesh7hu4j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpesh7hu4j.jl:45\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesh7hu4j.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesh7hu4j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpesh7hu4j.jl:46\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -175716 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesh7hu4j.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesh7hu4j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpesh7hu4j.jl:47\n  Expression: candidate([-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0\n   Evaluated: -2 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesh7hu4j.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesh7hu4j.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpesh7hu4j.jl:48\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: -19"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpesh7hu4j.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    result = 0\n    for (i, n) in enumerate(lst)\n        if mod(i, 3) ==\
    \ 0\n            result += n^2\n        elseif mod(i, 4) == 0\n            result\
    \ += n^3\n        else\n            result += n\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46dsiey6.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp46dsiey6.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46dsiey6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp46dsiey6.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp46dsiey6.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46dsiey6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp46dsiey6.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp46dsiey6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46dsiey6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp46dsiey6.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp46dsiey6.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp46dsiey6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp46dsiey6.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46dsiey6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (index,value) in enumerate(lst)\n        if index % 3\
    \ == 0 && index % 4 != 0\n            sum += value^2\n        elseif index % 4\
    \ == 0 && index % 3 != 0\n            sum += value^3\n        else\n         \
    \   sum += value\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4ahnd1d.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw4ahnd1d.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ahnd1d.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpw4ahnd1d.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4ahnd1d.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ahnd1d.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpw4ahnd1d.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4ahnd1d.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ahnd1d.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpw4ahnd1d.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw4ahnd1d.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4ahnd1d.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpw4ahnd1d.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4ahnd1d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    n = length(lst)\n    y = 0\n    for i in 1:n\n        if i%3 == 0 && i%4\
    \ != 0\n            y += lst[i]^2\n        elseif i%4 == 0 && i%3 != 0\n     \
    \       y += lst[i]^3\n        else\n            y += lst[i]\n        end\n  \
    \  end\n    return y\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ivkr5_a.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ivkr5_a.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ivkr5_a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8ivkr5_a.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ivkr5_a.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ivkr5_a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8ivkr5_a.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ivkr5_a.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ivkr5_a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8ivkr5_a.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ivkr5_a.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ivkr5_a.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp8ivkr5_a.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ivkr5_a.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    res = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   res += lst[i]^2\n        elseif i % 4 == 0\n            res += lst[i]^3\n\
    \        else\n            res += lst[i]\n        end\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidxwund9.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidxwund9.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxwund9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpidxwund9.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxwund9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxwund9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpidxwund9.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidxwund9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxwund9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpidxwund9.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidxwund9.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidxwund9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpidxwund9.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidxwund9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    \n    for i in 1:length(lst)\n        if i % 3 == 0\
    \ && i % 4 != 0\n            sum += lst[i]^2\n        elseif i % 4 == 0 && i %\
    \ 3 != 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    \n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4j47yowv.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4j47yowv.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4j47yowv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4j47yowv.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4j47yowv.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4j47yowv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4j47yowv.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4j47yowv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4j47yowv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4j47yowv.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4j47yowv.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4j47yowv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4j47yowv.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4j47yowv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\"\n    This function shall take a list of integers. If the sum\
    \ of all entries is positive, then the function will square each entry in the\
    \ list \n    and return the list. If the sum of all entries is negative, then\
    \ the function will cube each entry in the list and return the list. \n    The\
    \ function shall return the list unaltered if the sum of all entries is 0.\n \
    \   \n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n    For\
    \ lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-125,-8,-1,-125]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_wyw3rb_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_wyw3rb_.jl:1\n\
    in expression starting at /tmp/tmp_wyw3rb_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n  sum = 0\n  for i = 1:length(lst)\n    if (i % 3 == 0) && (i % 4 != 0)\n\
    \      sum += lst[i]^2\n    elseif (i % 4 == 0) && (i % 3 != 0)\n      sum +=\
    \ lst[i]^3\n    else\n      sum += lst[i]\n    end\n  end\n  return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsatode5b.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsatode5b.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsatode5b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsatode5b.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsatode5b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsatode5b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsatode5b.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsatode5b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsatode5b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsatode5b.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsatode5b.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsatode5b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsatode5b.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsatode5b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in eachindex(lst)\n        if i % 3 == 0\n      \
    \      total += lst[i]^2\n        elseif i % 4 == 0\n            total += lst[i]^3\n\
    \        else\n            total += lst[i]\n        end\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpig47zd9y.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpig47zd9y.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpig47zd9y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpig47zd9y.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpig47zd9y.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpig47zd9y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpig47zd9y.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpig47zd9y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpig47zd9y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpig47zd9y.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpig47zd9y.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpig47zd9y.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpig47zd9y.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpig47zd9y.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (index,x) in enumerate(lst)\n        if mod(index,3)\
    \ == 0 && mod(index,4) != 0\n            sum += x^2\n        elseif mod(index,4)\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq1oy28gp.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq1oy28gp.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1oy28gp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq1oy28gp.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq1oy28gp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1oy28gp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq1oy28gp.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq1oy28gp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1oy28gp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq1oy28gp.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq1oy28gp.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq1oy28gp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq1oy28gp.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq1oy28gp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \"\"\"\n    This\
    \ function will take a list of integers. For all entries in the list, the function\
    \ shall square the integer entry if its index is a \n    multiple of 3 and will\
    \ cube the integer entry if its index is a multiple of 4 and not a multiple of\
    \ 3. The function will not \n    change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n\
    \    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be -126\n    \"\"\"\n    \"\"\"\n    This function will take a\
    \ list of integers. For all entries in the list, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []\
    \  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be\
    \ -126\n    \"\"\"\n    \"\"\"\n    This function will take a list of integers.\
    \ For all entries in the list, the function shall square the integer entry if\
    \ its index is\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vlpml1p.jl:1\nin expression starting at /tmp/tmp4vlpml1p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # Write your code here, using the functions append! and push!\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpll1558ie.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3]) == 6\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpll1558ie.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpll1558ie.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpll1558ie.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpll1558ie.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 4, 9]) == 14\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\\\
    n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\\\
    n    ...\\n  Stacktrace:\\n   [1] sum_squares(lst::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpll1558ie.jl:13\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpll1558ie.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    tot_sum = 0\n    for i in 1:length(lst)\n        if (i % 3 == 0) & (i\
    \ % 4 != 0)\n            tot_sum += lst[i]^2\n        elseif (i % 4 == 0) & (i\
    \ % 3 != 0)\n            tot_sum += lst[i]^3\n        else\n            tot_sum\
    \ += lst[i]\n        end\n    end\n    return tot_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzqgqd_lu.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzqgqd_lu.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqgqd_lu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzqgqd_lu.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqgqd_lu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqgqd_lu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzqgqd_lu.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzqgqd_lu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqgqd_lu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzqgqd_lu.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzqgqd_lu.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzqgqd_lu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzqgqd_lu.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqgqd_lu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in enumerate(lst)\n        if (i[1] % 3 == 0) && (i[1]\
    \ % 4 != 0) \n            sum += i[2]^2\n        elseif (i[1] % 4 == 0)\n    \
    \        sum += i[2]^3\n        else\n            sum += i[2]\n        end\n \
    \   end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3osk6rab.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3osk6rab.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3osk6rab.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3osk6rab.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3osk6rab.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3osk6rab.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3osk6rab.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3osk6rab.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3osk6rab.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3osk6rab.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3osk6rab.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3osk6rab.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3osk6rab.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3osk6rab.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            total += lst[i] ^ 2\n        elseif i % 4 == 0\n         \
    \   total += lst[i] ^ 3\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdrjs615r.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdrjs615r.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdrjs615r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdrjs615r.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdrjs615r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdrjs615r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdrjs615r.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdrjs615r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdrjs615r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdrjs615r.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdrjs615r.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdrjs615r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdrjs615r.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrjs615r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (ind,x) in enumerate(lst)\n        if ind % 3 == 0\n\
    \            sum += x^2\n        elseif ind % 4 == 0\n            sum += x^3\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnm0nqvn.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcnm0nqvn.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnm0nqvn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcnm0nqvn.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnm0nqvn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnm0nqvn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcnm0nqvn.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcnm0nqvn.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnm0nqvn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcnm0nqvn.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcnm0nqvn.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcnm0nqvn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcnm0nqvn.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnm0nqvn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if (i % 3 == 0) & (i % 4\
    \ != 0)\n            sum += lst[i]^2\n        elseif (i % 4 == 0) & (i % 3 !=\
    \ 0)\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n \
    \       end\n    end\n    return sum\nend\nsum_squares([1,2,3])\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp25lkzb4v.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp25lkzb4v.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25lkzb4v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25lkzb4v.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25lkzb4v.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25lkzb4v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25lkzb4v.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25lkzb4v.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25lkzb4v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25lkzb4v.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp25lkzb4v.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25lkzb4v.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25lkzb4v.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25lkzb4v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for (i,n) in enumerate(lst)\n        if i % 3 == 0\n  \
    \          total += n^2\n        elseif i % 4 == 0 && i % 3 != 0\n           \
    \ total += n^3\n        else\n            total += n\n        end\n    end\n \
    \   return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy528bcax.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy528bcax.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy528bcax.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy528bcax.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy528bcax.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy528bcax.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy528bcax.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy528bcax.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy528bcax.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy528bcax.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy528bcax.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy528bcax.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy528bcax.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy528bcax.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # initialize the sum variable to 0\n    sum = 0\n    #loop through the\
    \ list\n    for i in 1:length(lst)\n        #if the entry index is a multiple\
    \ of 3, square its value and add to the sum\n        if i%3 == 0\n           \
    \ sum += lst[i]^2\n        #if the entry index is a multiple of 4 and not a multiple\
    \ of 3, cube its value and add to the sum\n        elseif i%4 == 0 && i%3 != 0\n\
    \            sum += lst[i]^3\n        #if the entry index is not a multiple of\
    \ 3 or 4, add its value to the sum\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    #return the sum of all entries\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7dtrhpu0.jl:35\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7dtrhpu0.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dtrhpu0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7dtrhpu0.jl:36\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dtrhpu0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dtrhpu0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7dtrhpu0.jl:41\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7dtrhpu0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dtrhpu0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7dtrhpu0.jl:42\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7dtrhpu0.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7dtrhpu0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7dtrhpu0.jl:44\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dtrhpu0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n\
    \            total += lst[i]^3\n        else\n            total += lst[i]\n  \
    \      end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptupk579n.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptupk579n.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptupk579n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptupk579n.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptupk579n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptupk579n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptupk579n.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptupk579n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptupk579n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptupk579n.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptupk579n.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptupk579n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptupk579n.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptupk579n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n  x=0\n  for i=1:length(lst)\n    if rem(i,3)==0 && rem(i,4)!=0\n      x=x+lst[i]^2\n\
    \    elseif rem(i,4)==0\n      x=x+lst[i]^3\n    else \n      x=x+lst[i]\n   \
    \ end\n  end\n  return x\nend \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzpna94b.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdzpna94b.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpna94b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdzpna94b.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzpna94b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpna94b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdzpna94b.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdzpna94b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpna94b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdzpna94b.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdzpna94b.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdzpna94b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdzpna94b.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzpna94b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #a = [1,2,3]\n    s = 0\n    for i in 1:length(lst)\n        if i%3 ==\
    \ 0\n            s = s + lst[i]^2\n        elseif i%4 == 0\n            s = s\
    \ + lst[i]^3\n        else\n            s = s + lst[i]\n        end\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzrmr31z4.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzrmr31z4.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzrmr31z4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzrmr31z4.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzrmr31z4.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzrmr31z4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzrmr31z4.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzrmr31z4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzrmr31z4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzrmr31z4.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzrmr31z4.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzrmr31z4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzrmr31z4.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrmr31z4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    tot = 0\n    for i in eachindex(lst)\n        if i % 3 == 0\n        \
    \    tot += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            tot\
    \ += lst[i]^3\n        else\n            tot += lst[i]\n        end\n    end\n\
    \    return tot\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekj5yb1m.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpekj5yb1m.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekj5yb1m.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpekj5yb1m.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekj5yb1m.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekj5yb1m.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpekj5yb1m.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpekj5yb1m.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekj5yb1m.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpekj5yb1m.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpekj5yb1m.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpekj5yb1m.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpekj5yb1m.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekj5yb1m.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4 != 0\n\
    \            s += lst[i]^2\n        elseif i % 4 == 0\n            s += lst[i]^3\n\
    \        else\n            s += lst[i]\n        end\n    end\n    return s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljh6e5n3.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpljh6e5n3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljh6e5n3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpljh6e5n3.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljh6e5n3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljh6e5n3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpljh6e5n3.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljh6e5n3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljh6e5n3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpljh6e5n3.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpljh6e5n3.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljh6e5n3.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpljh6e5n3.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljh6e5n3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total::Int64 = 0\n    for (i,v) in enumerate(lst)\n        if i % 3 ==\
    \ 0\n            total += v^2\n        elseif i % 4 == 0\n            total +=\
    \ v^3\n        else\n            total += v\n        end\n    end\n    return\
    \ total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7v4s46n5.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7v4s46n5.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v4s46n5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7v4s46n5.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v4s46n5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v4s46n5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7v4s46n5.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7v4s46n5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v4s46n5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7v4s46n5.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7v4s46n5.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7v4s46n5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7v4s46n5.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7v4s46n5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    lst_mod = lst\n    for (index,value) in enumerate(lst)\n        if index\
    \ % 3 == 0\n            lst_mod[index] = value^2\n        elseif index % 4 ==\
    \ 0 && index % 3 != 0\n            lst_mod[index] = value^3\n        end\n   \
    \ end\n    return sum(lst_mod)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7f4bppyu.jl:27\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7f4bppyu.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bppyu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7f4bppyu.jl:28\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f4bppyu.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bppyu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7f4bppyu.jl:33\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7f4bppyu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bppyu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7f4bppyu.jl:34\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7f4bppyu.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7f4bppyu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7f4bppyu.jl:36\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7f4bppyu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sq_sum = 0\n    for (i, x) in enumerate(lst)\n        if i % 3 == 0\n\
    \            sq_sum += x^2\n        elseif i % 4 == 0\n            sq_sum += x^3\n\
    \        else\n            sq_sum += x\n        end\n    end\n    return sq_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjbpc1kuh.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjbpc1kuh.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbpc1kuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjbpc1kuh.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbpc1kuh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbpc1kuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjbpc1kuh.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjbpc1kuh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbpc1kuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjbpc1kuh.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjbpc1kuh.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjbpc1kuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjbpc1kuh.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbpc1kuh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if mod(i,3) == 0 && mod(i,4)\
    \ != 0\n            sum += lst[i]^2\n        elseif mod(i,4) == 0 && mod(i,3)\
    \ != 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjbd_rup.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmjbd_rup.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjbd_rup.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmjbd_rup.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjbd_rup.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjbd_rup.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmjbd_rup.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjbd_rup.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjbd_rup.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmjbd_rup.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmjbd_rup.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjbd_rup.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmjbd_rup.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjbd_rup.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    summ = 0\n   \
    \ for i = 1:length(lst)\n        if i % 3 == 0\n            summ += lst[i]^2\n\
    \        elseif i % 4 == 0\n            summ += lst[i]^3\n        else\n     \
    \       summ += lst[i]\n        end\n    end\n    return summ\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt62hvkj1.jl:39\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt62hvkj1.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt62hvkj1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt62hvkj1.jl:40\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt62hvkj1.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt62hvkj1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt62hvkj1.jl:45\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt62hvkj1.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt62hvkj1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt62hvkj1.jl:46\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt62hvkj1.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt62hvkj1.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt62hvkj1.jl:48\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt62hvkj1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    n = length(lst)\n    sum = 0\n    for i in 1:n\n        if i%3 == 0 &&\
    \ i%4 != 0\n            sum += lst[i]^2\n        elseif i%4 == 0\n           \
    \ sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend\n@show sum_squares([1,2,3])\n@show sum_squares([])\n@show\
    \ sum_squares([-1,-5,2,-1,-5])\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "sum_squares([1, 2, 3]) = 12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmp9fm3tu4w.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ show.jl:1047\nin expression starting at\
    \ /tmp/tmp9fm3tu4w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #loops through the list lst and access each element\n    for i in 1:length(lst)\n\
    \        #if the index of the element is a multiple of 3 and 4\n        if i%3\
    \ == 0 && i%4 == 0\n            #cubes the element\n            lst[i] = lst[i]^3\n\
    \        #if the index of the element is a multiple of 3\n        elseif i%3 ==\
    \ 0\n            #squares the element\n            lst[i] = lst[i]^2\n       \
    \ end\n    end\n    #returns the sum of the elements in the list\n    return sum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5jqfwpzw.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5jqfwpzw.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jqfwpzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5jqfwpzw.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jqfwpzw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jqfwpzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5jqfwpzw.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5jqfwpzw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jqfwpzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5jqfwpzw.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5jqfwpzw.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5jqfwpzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5jqfwpzw.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 5454\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jqfwpzw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsj3m49rh.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpsj3m49rh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsj3m49rh.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsj3m49rh.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpsj3m49rh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmpsj3m49rh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsj3m49rh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj3m49rh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n\
    \            total += lst[i]^3\n        else\n            total += lst[i]\n  \
    \      end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66sfb9dl.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp66sfb9dl.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66sfb9dl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp66sfb9dl.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66sfb9dl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66sfb9dl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp66sfb9dl.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66sfb9dl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66sfb9dl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp66sfb9dl.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp66sfb9dl.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66sfb9dl.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp66sfb9dl.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66sfb9dl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            sum\
    \ += lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphkeoj50u.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphkeoj50u.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkeoj50u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphkeoj50u.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkeoj50u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkeoj50u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphkeoj50u.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkeoj50u.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkeoj50u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphkeoj50u.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphkeoj50u.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkeoj50u.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphkeoj50u.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkeoj50u.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum += lst[i] ^ 2\n        elseif i % 4 == 0\n            sum\
    \ += lst[i] ^ 3\n        else\n            sum += lst[i]\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0j5jeqfs.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0j5jeqfs.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j5jeqfs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0j5jeqfs.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j5jeqfs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j5jeqfs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0j5jeqfs.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j5jeqfs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j5jeqfs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0j5jeqfs.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0j5jeqfs.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j5jeqfs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0j5jeqfs.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j5jeqfs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #defines the function with the two arguments \n    sum = 0 # defines the\
    \ sum of the array as 0\n    for i in eachindex(lst) #loops through the array\n\
    \        if i%3 == 0 #if i is a multiple of 3\n            sum += lst[i]^2 #square\
    \ the entry\n        elseif i%4 == 0 #if i is a multiple of 4\n            sum\
    \ += lst[i]^3 #cube the entry\n        else #else don't do anything to the entry\
    \ \n            sum += lst[i] #add the entry to the sum\n        end \n    end\
    \ \n    return sum #return the sum of the squared and cubed entries\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwr5137t.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxwr5137t.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwr5137t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwr5137t.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwr5137t.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwr5137t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwr5137t.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwr5137t.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwr5137t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwr5137t.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxwr5137t.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwr5137t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxwr5137t.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwr5137t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    n = size(lst)[1]\n\
    \    total = 0\n    for i in 1:n\n        if i % 3 == 0\n            total +=\
    \ lst[i]^2\n        elseif i % 4 == 0\n            total += lst[i]^3\n       \
    \ else\n            total += lst[i]\n        end\n    end\n    return total\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxiwbkve.jl:40\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzxiwbkve.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxiwbkve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzxiwbkve.jl:41\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxiwbkve.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxiwbkve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzxiwbkve.jl:46\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxiwbkve.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxiwbkve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzxiwbkve.jl:47\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzxiwbkve.jl:47 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxiwbkve.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpzxiwbkve.jl:49\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxiwbkve.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n         \
    \   sum += lst[i]^2\n        elseif i % 4 == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6iif8u9h.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6iif8u9h.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6iif8u9h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6iif8u9h.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6iif8u9h.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6iif8u9h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6iif8u9h.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6iif8u9h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6iif8u9h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6iif8u9h.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6iif8u9h.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6iif8u9h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6iif8u9h.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6iif8u9h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    # Sum the squares of all the entries in the list whose index\
    \ is a multiple of 3.\n    for i in 1:3:length(lst)\n        sum += lst[i]^2\n\
    \    end\n    # Sum the cubes of all the entries in the list whose index is a\
    \ multiple of 4 and not a multiple of 3.\n    for i in 4:4:length(lst)\n     \
    \   sum += lst[i]^3\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjqozy6s9.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 1 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqozy6s9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqozy6s9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjqozy6s9.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 1 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqozy6s9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqozy6s9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjqozy6s9.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjqozy6s9.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqozy6s9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjqozy6s9.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqozy6s9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqozy6s9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpjqozy6s9.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 1 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqozy6s9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    square_list = map(x -> x^2, lst)\n    sum_squares = 0\n    for i in 1:length(lst)\n\
    \        if rem(i,3) == 0\n            sum_squares += square_list[i]\n       \
    \ end\n    end\n    return sum_squares\nend\nsum_squares([1,2,3])\nsum_squares([])\n\
    sum_squares([-1,-5,2,-1,-5])\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmpk5zk15_i.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5zk15_i.jl:22\nin expression\
    \ starting at /tmp/tmpk5zk15_i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s = 0\n    for (i,x) in enumerate(lst)\n        if (i % 3 == 0) && (i\
    \ % 4 != 0)\n            s += x^2\n        elseif (i % 4 == 0) && (i % 3 != 0)\n\
    \            s += x^3\n        else\n            s += x\n        end\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7yc3rjvs.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7yc3rjvs.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yc3rjvs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7yc3rjvs.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7yc3rjvs.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yc3rjvs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7yc3rjvs.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7yc3rjvs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yc3rjvs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7yc3rjvs.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7yc3rjvs.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7yc3rjvs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7yc3rjvs.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7yc3rjvs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i, x) in enumerate(lst)\n        if mod(i,3) == 0\n\
    \            sum += x^2\n        elseif mod(i,4) == 0\n            sum += x^3\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7lnoqdwd.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7lnoqdwd.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lnoqdwd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7lnoqdwd.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lnoqdwd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lnoqdwd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7lnoqdwd.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lnoqdwd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lnoqdwd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7lnoqdwd.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7lnoqdwd.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lnoqdwd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7lnoqdwd.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7lnoqdwd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            total += lst[i]^2\n        elseif i % 4 == 0\n           \
    \ total += lst[i]^3\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7lek8je.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz7lek8je.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7lek8je.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpz7lek8je.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7lek8je.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7lek8je.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpz7lek8je.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz7lek8je.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7lek8je.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpz7lek8je.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz7lek8je.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz7lek8je.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpz7lek8je.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7lek8je.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum_of_ints=0\n    n=length(lst)\n    for i in 1:n\n        if rem(i,3)==0\
    \ && rem(i,4)!=0\n            sum_of_ints+=lst[i]^2\n        elseif rem(i,4)==0\n\
    \            sum_of_ints+=lst[i]^3\n        else\n            sum_of_ints+=lst[i]\n\
    \        end\n    end\n    return sum_of_ints\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0zws_vu.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw0zws_vu.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0zws_vu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw0zws_vu.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0zws_vu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0zws_vu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw0zws_vu.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0zws_vu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0zws_vu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw0zws_vu.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw0zws_vu.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0zws_vu.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw0zws_vu.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0zws_vu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for\
    \ i = 1:length(lst)\n        if i % 3 == 0\n            sum += lst[i]^2\n    \
    \    elseif i % 4 == 0\n            sum += lst[i]^3\n        else\n          \
    \  sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_v94uieq.jl:39\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_v94uieq.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_v94uieq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_v94uieq.jl:40\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_v94uieq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_v94uieq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_v94uieq.jl:45\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_v94uieq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_v94uieq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_v94uieq.jl:46\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_v94uieq.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_v94uieq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp_v94uieq.jl:48\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_v94uieq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    print(lst)\n \
    \   sum_to_return = 0\n    # Allocate a vector of zeros the same length as the\
    \ original list\n    new_list = zeros(length(lst))\n    # Now iterate over the\
    \ list\n    for i in 1:length(lst)\n        # First check if the index is a multiple\
    \ of 3 but not a multiple of 4\n        if (i % 3 == 0) && (i % 4 != 0)\n    \
    \        new_list[i] = lst[i]^2\n        # Now check if the index is a multiple\
    \ of 4 but not a multiple of 3\n        elseif (i % 4 == 0) && (i % 3 != 0)\n\
    \            new_list[i] = lst[i]^3\n        # Finally check if the index is not\
    \ a multiple of 3 or 4\n        elseif (i % 3 != 0) && (i % 4 != 0)\n        \
    \    new_list[i] = lst[i]\n        end\n    end\n    # Now sum the elements of\
    \ the new list\n    for j in 1:length(new_list)\n        sum_to_return += new_list[j]\n\
    \    end\n    return sum_to_return\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "[1, 2, 3]test set: Test Failed at /tmp/tmpsn5_a6zh.jl:50\n  Expression:\
    \ candidate([1, 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn5_a6zh.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn5_a6zh.jl:49\n[1, 4, 9]test\
    \ set: Test Failed at /tmp/tmpsn5_a6zh.jl:51\n  Expression: candidate([1, 4, 9])\
    \ == 14\n   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn5_a6zh.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn5_a6zh.jl:49\nInt64[][1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1][-1, -1, -1, -1, -1, -1, -1, -1, -1][0][-1, -5, 2, -1, -5]test\
    \ set: Test Failed at /tmp/tmpsn5_a6zh.jl:56\n  Expression: candidate([-1, -5,\
    \ 2, -1, -5]) == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn5_a6zh.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn5_a6zh.jl:49\n[-56, -99, 1,\
    \ 0, -2]test set: Test Failed at /tmp/tmpsn5_a6zh.jl:57\n  Expression: candidate([-56,\
    \ -99, 1, 0, -2]) == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn5_a6zh.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn5_a6zh.jl:49\n[-1, 0, 0, 0,\
    \ 0, 0, 0, 0, -1][-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn5_a6zh.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sm = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n           \
    \ sm += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n            sm += lst[i]^3\n\
    \        else\n            sm += lst[i]\n        end\n    end\n    return sm\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7k31ntxn.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7k31ntxn.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7k31ntxn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7k31ntxn.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7k31ntxn.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7k31ntxn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7k31ntxn.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7k31ntxn.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7k31ntxn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7k31ntxn.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7k31ntxn.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7k31ntxn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7k31ntxn.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7k31ntxn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i,e) in enumerate(lst)\n        if i % 3 == 0\n    \
    \        sum += e^2\n        elseif i % 4 == 0\n            sum += e^3\n     \
    \   else\n            sum += e\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcy57ygru.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcy57ygru.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy57ygru.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcy57ygru.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcy57ygru.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy57ygru.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcy57ygru.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcy57ygru.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy57ygru.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcy57ygru.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcy57ygru.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcy57ygru.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcy57ygru.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy57ygru.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    counter = 1\n    for i in lst\n        if counter % 3 ==\
    \ 0\n            sum += i^2\n        elseif counter % 4 == 0\n            sum\
    \ += i^3\n        else\n            sum += i\n        end\n        counter +=\
    \ 1\n    end\n    return sum\nend\nlst1 = [1,2,3]\nlst2 = []\nlst3 = [-1,-5,2,-1,-5]\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97mzsr4x.jl:34\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp97mzsr4x.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97mzsr4x.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp97mzsr4x.jl:35\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97mzsr4x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97mzsr4x.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp97mzsr4x.jl:40\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp97mzsr4x.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97mzsr4x.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp97mzsr4x.jl:41\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp97mzsr4x.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp97mzsr4x.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp97mzsr4x.jl:43\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97mzsr4x.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s = 0\n    for i in eachindex(lst)\n        if i % 3 == 0\n          \
    \  s += lst[i]^2\n        elseif i % 4 == 0\n            s += lst[i]^3\n     \
    \   else\n            s += lst[i]\n        end\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpio2zsnfj.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpio2zsnfj.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio2zsnfj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpio2zsnfj.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio2zsnfj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio2zsnfj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpio2zsnfj.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpio2zsnfj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio2zsnfj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpio2zsnfj.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpio2zsnfj.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpio2zsnfj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpio2zsnfj.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpio2zsnfj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"Squares the integer entry if its index is a multiple of 3 and cubes\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3.\"\
    \"\"\n    new_lst = copy(lst)\n    for (i, x) in enumerate(new_lst)\n        if\
    \ i % 3 == 0\n            new_lst[i] = x^2\n        elseif i % 4 == 0\n      \
    \      new_lst[i] = x^3\n        end\n    end\n    return sum(new_lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph5ejrwrs.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph5ejrwrs.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ejrwrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmph5ejrwrs.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5ejrwrs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ejrwrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmph5ejrwrs.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph5ejrwrs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ejrwrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmph5ejrwrs.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph5ejrwrs.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph5ejrwrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmph5ejrwrs.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph5ejrwrs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    res = 0\n    for i = 1:length(lst)\n        if mod(i,4) == 0 && mod(i,3)\
    \ != 0\n            res += lst[i]^3\n        elseif mod(i,3) == 0\n          \
    \  res += lst[i]^2\n        else\n            res += lst[i]\n        end\n   \
    \ end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjkrmlr_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphjkrmlr_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjkrmlr_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphjkrmlr_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphjkrmlr_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjkrmlr_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphjkrmlr_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphjkrmlr_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjkrmlr_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphjkrmlr_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphjkrmlr_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphjkrmlr_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphjkrmlr_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjkrmlr_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum::Int64 = 0\n    n = length(lst)\n    for i = 1:n\n        if i % 3\
    \ == 0 && i % 4 != 0\n            sum += lst[i]^2\n        elseif i % 4 == 0 &&\
    \ i % 3 != 0\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\nsum_squares([1,2,3])\nsum_squares([])\n\
    sum_squares([-1,-5,2,-1,-5])\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmpk_ijmik8.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_ijmik8.jl:26\nin expression\
    \ starting at /tmp/tmpk_ijmik8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i = 1:length(lst)\n        if i % 3 == 0\n        \
    \    total += lst[i] ^ 2\n        elseif i % 4 == 0\n            total += lst[i]\
    \ ^ 3\n        else\n            total += lst[i]\n        end\n    end\n    return\
    \ total\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([]))\nprintln(sum_squares([-1,-5,2,-1,-5]))\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmp0m1fl19d.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp0m1fl19d.jl:25\nin expression\
    \ starting at /tmp/tmp0m1fl19d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    s=0\n    for k in 1:length(lst)\n        if k%3==0\n            s=s+lst[k]^2\n\
    \        elseif k%4==0\n            s=s+lst[k]^3\n        else\n            s=s+lst[k]\n\
    \        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzorqvdbw.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzorqvdbw.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzorqvdbw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzorqvdbw.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzorqvdbw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzorqvdbw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzorqvdbw.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzorqvdbw.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzorqvdbw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzorqvdbw.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzorqvdbw.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzorqvdbw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzorqvdbw.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzorqvdbw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     total += lst[i] ^ 2\n        elseif i % 4 == 0\n            total += lst[i]\
    \ ^ 3\n        else\n            total += lst[i]\n        end\n    end\n    return\
    \ total\nend\n        \n# Test\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([]))\n\
    println(sum_squares([-1,-5,2,-1,-5]))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmpx_exlu2k.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpx_exlu2k.jl:27\nin expression\
    \ starting at /tmp/tmpx_exlu2k.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # Initialize the sum of squares to 0\n    sum = 0\n    # Itereate through\
    \ the elements of the input\n    for i in 1:length(lst)\n        # if the index\
    \ is a multiple of 3, square the element \n        if i % 3 == 0\n           \
    \ # Sum the value of the element with the previous sum\n            sum += lst[i]^2\n\
    \        end\n        # if the index is a multiple of 4, cube the element\n  \
    \      if i % 4 == 0\n            # Sum the value of the element with the previous\
    \ sum\n            sum += lst[i]^3\n        end\n    end\n    # Return the final\
    \ sum\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxuwyzje2.jl:35\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 9 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuwyzje2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuwyzje2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxuwyzje2.jl:36\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 81 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuwyzje2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuwyzje2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxuwyzje2.jl:38\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 5 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxuwyzje2.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuwyzje2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxuwyzje2.jl:39\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 1 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxuwyzje2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxuwyzje2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpxuwyzje2.jl:41\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 3 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuwyzje2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    # TODO: Implement this function\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4oiw8806.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3]) == 6\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmp4oiw8806.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4oiw8806.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4oiw8806.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp4oiw8806.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 9]) == 14\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] sum_squares(lst::Vector{Int64})\n     @ Main /tmp/tmp4oiw8806.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4oiw8806.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oiw8806.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function shall take a list of integers and return the\
    \ sum of the squares of all integers in the list.\n    \n    Examples:\n    For\
    \ lst = [1,2,3] the output should be 14\n    For lst = []  the output should be\
    \ 0\n    For lst = [-1,-5,2,-1,-5]  the output should be 45\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnzkmkfjk.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnzkmkfjk.jl:1\n\
    in expression starting at /tmp/tmpnzkmkfjk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n           \
    \ total += lst[i]^3\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3m389jlp.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3m389jlp.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3m389jlp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3m389jlp.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3m389jlp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3m389jlp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3m389jlp.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3m389jlp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3m389jlp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3m389jlp.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3m389jlp.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3m389jlp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3m389jlp.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3m389jlp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (i,x) in enumerate(lst)\n        if i % 3 == 0 \n   \
    \         sum += x^2\n        elseif i % 4 == 0 && i % 3 != 0\n            sum\
    \ += x^3\n        else\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpms1w9nv7.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpms1w9nv7.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpms1w9nv7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpms1w9nv7.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpms1w9nv7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpms1w9nv7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpms1w9nv7.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpms1w9nv7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpms1w9nv7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpms1w9nv7.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpms1w9nv7.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpms1w9nv7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpms1w9nv7.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpms1w9nv7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    i = 1\n    sum = 0\n    for x in lst\n        if i % 3 == 0\n        \
    \    sum += x^2\n        elseif i % 4 == 0\n            sum += x^3\n        else\n\
    \            sum += x\n        end\n        i += 1\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptbvn6op8.jl:31\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptbvn6op8.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbvn6op8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptbvn6op8.jl:32\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbvn6op8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbvn6op8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptbvn6op8.jl:37\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptbvn6op8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbvn6op8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptbvn6op8.jl:38\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptbvn6op8.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptbvn6op8.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptbvn6op8.jl:40\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptbvn6op8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    tot = 0\n    for (index,num) in enumerate(lst)\n        if index % 3 ==\
    \ 0 && index % 4 != 0\n            tot += num^2\n        elseif index % 4 == 0\
    \ && index % 3 != 0\n            tot += num^3\n        else\n            tot +=\
    \ num\n        end\n    end\n    return tot\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph8_lgq5r.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph8_lgq5r.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8_lgq5r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph8_lgq5r.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8_lgq5r.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8_lgq5r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph8_lgq5r.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph8_lgq5r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8_lgq5r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph8_lgq5r.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmph8_lgq5r.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph8_lgq5r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmph8_lgq5r.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8_lgq5r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in enumerate(lst)\n        if i[1] % 3 == 0 && i[1]\
    \ % 4 != 0\n            sum += i[2]^2\n        elseif i[1] % 4 == 0\n        \
    \    sum += i[2]^3\n        else\n            sum += i[2]\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpelaw0wmu.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpelaw0wmu.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelaw0wmu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpelaw0wmu.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelaw0wmu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelaw0wmu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpelaw0wmu.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelaw0wmu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelaw0wmu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpelaw0wmu.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpelaw0wmu.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpelaw0wmu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpelaw0wmu.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpelaw0wmu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            sum += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n  \
    \          sum += lst[i]^3\n        else\n            sum += lst[i]\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpywlewl1q.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpywlewl1q.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywlewl1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpywlewl1q.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywlewl1q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywlewl1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpywlewl1q.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpywlewl1q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywlewl1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpywlewl1q.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpywlewl1q.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpywlewl1q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpywlewl1q.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywlewl1q.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function takes a vector of integers and returns the sum\
    \ of the squares of all entries in the vector. \n    \n    Examples:\n    For\
    \ lst = [1,2,3] the output should be 14\n    For lst = []  the output should be\
    \ 0\n    For lst = [-1,-5,2,-1,-5]  the output should be 53\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptzbuq2us.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzbuq2us.jl:1\n\
    in expression starting at /tmp/tmptzbuq2us.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_output=0\n\
    \    if length(lst)==0\n        return 0\n    else\n        for i in 1:length(lst)\n\
    \            if i%3==0 && i%4!=0\n                sum_output=sum_output+lst[i]^2\n\
    \            elseif i%4==0\n                sum_output=sum_output+lst[i]^3\n \
    \           else\n                sum_output=sum_output+lst[i]\n            end\n\
    \        end\n        return sum_output\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63o0ipnb.jl:43\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp63o0ipnb.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63o0ipnb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp63o0ipnb.jl:44\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63o0ipnb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63o0ipnb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp63o0ipnb.jl:49\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp63o0ipnb.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63o0ipnb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp63o0ipnb.jl:50\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp63o0ipnb.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp63o0ipnb.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp63o0ipnb.jl:52\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63o0ipnb.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if (i % 3 == 0)\n        \
    \    sum += lst[i]^2\n        elseif (i % 4 == 0)\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfrsy9qwu.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfrsy9qwu.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrsy9qwu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfrsy9qwu.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrsy9qwu.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrsy9qwu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfrsy9qwu.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfrsy9qwu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrsy9qwu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfrsy9qwu.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfrsy9qwu.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfrsy9qwu.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfrsy9qwu.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfrsy9qwu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum_val::Int64 = 0\n    for (index, val) in enumerate(lst)\n        if\
    \ index % 3 == 0\n            sum_val += val ^ 2\n        elseif index % 4 ==\
    \ 0\n            sum_val += val ^ 3\n        else\n            sum_val += val\n\
    \        end\n    end\n    return sum_val\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdg9bixd_.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdg9bixd_.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg9bixd_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdg9bixd_.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg9bixd_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg9bixd_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdg9bixd_.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdg9bixd_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg9bixd_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdg9bixd_.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdg9bixd_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdg9bixd_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdg9bixd_.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdg9bixd_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for (index, value) in enumerate(lst)\n        if index\
    \ % 3 == 0\n            total += value ^ 2\n        elseif index % 4 == 0\n  \
    \          total += value ^ 3\n        else\n            total += value\n    \
    \    end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8aobsx53.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8aobsx53.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aobsx53.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8aobsx53.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aobsx53.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aobsx53.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8aobsx53.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8aobsx53.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aobsx53.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8aobsx53.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8aobsx53.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8aobsx53.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8aobsx53.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8aobsx53.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     lst[i] = lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n           \
    \ lst[i] = lst[i]^3\n        end\n        total += lst[i]\n    end\n    return\
    \ total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdlvv7xba.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdlvv7xba.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlvv7xba.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdlvv7xba.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlvv7xba.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlvv7xba.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdlvv7xba.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdlvv7xba.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlvv7xba.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdlvv7xba.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdlvv7xba.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdlvv7xba.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpdlvv7xba.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdlvv7xba.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i in 1:length(lst)\n        if i % 3 == 0\n       \
    \     total += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n           \
    \ total += lst[i]^3\n        else\n            total += lst[i]\n        end\n\
    \    end\n    return total\nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf7rr6gac.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf7rr6gac.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rr6gac.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf7rr6gac.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7rr6gac.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rr6gac.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf7rr6gac.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf7rr6gac.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rr6gac.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf7rr6gac.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf7rr6gac.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf7rr6gac.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf7rr6gac.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf7rr6gac.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n  sum = 0\n  for (i,j) in enumerate(lst)\n    if i % 3 == 0\n      sum +=\
    \ j ^ 2\n    elseif i % 4 == 0\n      sum += j ^ 3\n    else\n      sum += j\n\
    \    end\n  end\n  return sum\nend\n    \nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([]))\n\
    println(sum_squares([-1,-5,2,-1,-5]))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmpk6jjg803.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk6jjg803.jl:26\nin expression\
    \ starting at /tmp/tmpk6jjg803.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    summed = 0\n    for (i,j) in enumerate(lst)\n        if mod(i,3) == 0\
    \ && mod(i,4) != 0\n            summed += j^2\n        elseif mod(i,4) == 0\n\
    \            summed += j^3\n        else\n            summed += j\n        end\n\
    \    end\n    return summed\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcd28d6mj.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcd28d6mj.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd28d6mj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcd28d6mj.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd28d6mj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd28d6mj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcd28d6mj.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcd28d6mj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd28d6mj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcd28d6mj.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcd28d6mj.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcd28d6mj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcd28d6mj.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcd28d6mj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4 !=\
    \ 0\n            total += lst[i]^2\n        elseif i % 4 == 0\n            total\
    \ += lst[i]^3\n        else\n            total += lst[i]\n        end\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj3nwae4b.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj3nwae4b.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3nwae4b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj3nwae4b.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3nwae4b.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3nwae4b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj3nwae4b.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj3nwae4b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3nwae4b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj3nwae4b.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj3nwae4b.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj3nwae4b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj3nwae4b.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67674\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3nwae4b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    for i in 1:length(lst)\n        if (i % 3 == 0) && (i % 4 != 0)\n\
    \            lst[i] = lst[i]^2\n        elseif (i % 4 == 0) && (i % 3 != 0)\n\
    \            lst[i] = lst[i]^3\n        end\n    end\n    \n    return sum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiblqu_jz.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiblqu_jz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiblqu_jz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpiblqu_jz.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiblqu_jz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiblqu_jz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpiblqu_jz.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiblqu_jz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiblqu_jz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpiblqu_jz.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiblqu_jz.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiblqu_jz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpiblqu_jz.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiblqu_jz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    This function is not differentiable\n    \"\"\"\n    temp_sum\
    \ = 0\n    for (index, value) in enumerate(lst)\n        if index % 3 == 0\n \
    \           temp_sum += value^2\n        elseif index % 4 == 0\n            temp_sum\
    \ += value^3\n        else\n            temp_sum += value\n        end\n    end\n\
    \    return temp_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpltp5nu93.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpltp5nu93.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltp5nu93.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpltp5nu93.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltp5nu93.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltp5nu93.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpltp5nu93.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltp5nu93.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltp5nu93.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpltp5nu93.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpltp5nu93.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltp5nu93.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpltp5nu93.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltp5nu93.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    accumulator::Int64 = 0\n    for (index, entry) in enumerate(lst)\n   \
    \     if index % 3 == 0\n            entry = entry^2\n        elseif index % 4\
    \ == 0\n            entry = entry^3\n        end\n        accumulator += entry\n\
    \    end\n    return accumulator\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_12r8qj.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb_12r8qj.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_12r8qj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb_12r8qj.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_12r8qj.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_12r8qj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb_12r8qj.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb_12r8qj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_12r8qj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb_12r8qj.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb_12r8qj.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb_12r8qj.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpb_12r8qj.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_12r8qj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sm = 0\n    for i in 1:length(lst)\n        if i % 3 == 0 && i %\
    \ 4 != 0\n            sm += lst[i]^2\n        elseif i % 4 == 0 && i % 3 != 0\n\
    \            sm += lst[i]^3\n        else\n            sm += lst[i]\n        end\n\
    \    end\n    return sm\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgbm8z92r.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbm8z92r.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbm8z92r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgbm8z92r.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbm8z92r.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbm8z92r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgbm8z92r.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgbm8z92r.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbm8z92r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgbm8z92r.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgbm8z92r.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgbm8z92r.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgbm8z92r.jl:39\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbm8z92r.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum=0\n    n=length(lst)\n    for i in 1:n\n        if i%3==0 && i%4==0\n\
    \            sum=sum+lst[i]^2+lst[i]^3\n        elseif i%3==0\n            sum=sum+lst[i]^2\n\
    \        elseif i%4==0\n            sum=sum+lst[i]^3\n        else\n         \
    \   sum=sum+lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5v61mv06.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5v61mv06.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v61mv06.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v61mv06.jl:33\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v61mv06.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v61mv06.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v61mv06.jl:38\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v61mv06.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v61mv06.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v61mv06.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5v61mv06.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v61mv06.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v61mv06.jl:41\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 67818\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5v61mv06.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    counter = 0\n    for i = 1:length(lst)\n        if i % 3 == 0 && i % 4\
    \ != 0\n            lst[i] = lst[i]^2\n        elseif i % 4 == 0\n           \
    \ lst[i] = lst[i]^3\n        end\n        counter += lst[i]\n    end\n    return\
    \ counter\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([]))\nprintln(sum_squares([-1,-5,2,-1,-5]))\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "12\n"
  stderr: "ERROR: LoadError: MethodError: no method matching sum_squares(::Vector{Any})\n\
    Closest candidates are:\n  sum_squares(!Matched::Vector{Int64}) at /tmp/tmp_czmbdgb.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_czmbdgb.jl:24\nin expression\
    \ starting at /tmp/tmp_czmbdgb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total = 0\n    for (j,i) in enumerate(lst)\n        if j % 3 == 0 && j\
    \ % 4 != 0\n            total += i ^ 2\n        elseif j % 4 == 0 && j % 3 !=\
    \ 0\n            total += i ^ 3\n        else\n            total += i\n      \
    \  end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppgi3ofly.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppgi3ofly.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgi3ofly.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppgi3ofly.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppgi3ofly.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgi3ofly.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppgi3ofly.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppgi3ofly.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgi3ofly.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppgi3ofly.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppgi3ofly.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgi3ofly.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppgi3ofly.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgi3ofly.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (index, i) in enumerate(lst)\n        if index % 3 ==\
    \ 0\n            i = i ^ 2\n        elseif index % 4 == 0 && index % 3 != 0\n\
    \            i = i ^ 3\n        end\n        sum += i\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcya_pw5.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkcya_pw5.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcya_pw5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpkcya_pw5.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcya_pw5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcya_pw5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpkcya_pw5.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcya_pw5.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcya_pw5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpkcya_pw5.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkcya_pw5.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcya_pw5.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpkcya_pw5.jl:37\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcya_pw5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Takes a list of integers and squares each index that is a\
    \ multiple of 3 and cubed each index that is a multiple of 4 and not a \n    multiple\
    \ of 3. \n    \"\"\"\n    result::Int64 = 0\n    for index in eachindex(lst)\n\
    \        if index % 3 == 0\n            result += lst[index]^2\n        elseif\
    \ index % 4 == 0 && index % 3 != 0\n            result += lst[index]^3\n     \
    \   else\n            result += lst[index]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8m2qy5l2.jl:33\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8m2qy5l2.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2qy5l2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8m2qy5l2.jl:34\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2qy5l2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2qy5l2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8m2qy5l2.jl:39\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8m2qy5l2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2qy5l2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8m2qy5l2.jl:40\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8m2qy5l2.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8m2qy5l2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8m2qy5l2.jl:42\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8m2qy5l2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for (index, element) in enumerate(lst)\n        if mod(index,\
    \ 3) == 0\n            sum += element^2\n        elseif mod(index, 4) == 0\n \
    \           sum += element^3\n        else\n            sum += element\n     \
    \   end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzldgelf0.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzldgelf0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzldgelf0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzldgelf0.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzldgelf0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzldgelf0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzldgelf0.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzldgelf0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzldgelf0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzldgelf0.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzldgelf0.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzldgelf0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzldgelf0.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzldgelf0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    total_sum = 0\n    for (i, n) in enumerate(lst)\n        if mod(i,3) ==\
    \ 0 \n            total_sum += n^2\n        elseif mod(i,4) == 0 && mod(i,3) !=\
    \ 0\n            total_sum += n^3\n        else\n            total_sum += n\n\
    \        end\n    end\n    return total_sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwx2icx2.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcwx2icx2.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwx2icx2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcwx2icx2.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcwx2icx2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwx2icx2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcwx2icx2.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcwx2icx2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwx2icx2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcwx2icx2.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcwx2icx2.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwx2icx2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcwx2icx2.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwx2icx2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        if (i % 3 == 0) & (i % 4\
    \ != 0)\n            sum += lst[i]^2\n        elseif (i % 4 == 0) & (i % 3 !=\
    \ 0)\n            sum += lst[i]^3\n        else\n            sum += lst[i]\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgvfhnwrk.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgvfhnwrk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvfhnwrk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgvfhnwrk.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvfhnwrk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvfhnwrk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgvfhnwrk.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvfhnwrk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvfhnwrk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgvfhnwrk.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgvfhnwrk.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvfhnwrk.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpgvfhnwrk.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 65958\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvfhnwrk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    #declare the list lst and call the function sum_squares with a Vector{Int64}\n\
    \    sum = 0\n    #initialize the variable sum with 0, this will be the sum of\
    \ the squared and cubed values\n    if length(lst) == 0\n        #check if the\
    \ list is empty\n        return 0\n        #if the list is empty, return 0, the\
    \ function is complete\n    end\n    for i in 1:length(lst)\n        #start a\
    \ for loop to iterate through the list to calculate the sum of squares and cubes\n\
    \        if i % 3 == 0 && i % 4 != 0\n            #if the remainder of i (the\
    \ current index) divided by 3 is 0 and the remainder of i divided by 4 is not\
    \ 0\n            sum += lst[i]^2\n            #add the square of the current index\
    \ of the list to the sum\n        elseif i % 4 == 0 && i % 3 != 0\n          \
    \  #if the remainder of i (the current index) divided by 4 is 0 and the remainder\
    \ of i divided by 3 is not 0\n            sum += lst[i]^3\n            #add the\
    \ cube of the current index of the list to the sum\n        else\n           \
    \ sum += lst[i]\n            #otherwise, add the current index of the list to\
    \ the sum\n        end\n    end\n    return sum\n    #return the sum of the squares\
    \ and cubes\nend\n \nsum_squares([1,2,3])\n#test the function\n \n \n \n\"\"\"\
    \n    This function will take two integers. The first integer will be a number\
    \ and the second will be an exponent. The function will\n    compute the base\
    \ raised to the power of the exponent. The function will then return the result.\n\
    \    \n    Examples:\n    For base = 2 and exp = 0 the output should be 1\n  \
    \  For base = 3 and exp = 2 the output should be 9\n    For base = 1 and exp =\
    \ 3 the output should be 1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp7jsn7p4n.jl:44\nin expression starting at /tmp/tmp7jsn7p4n.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in 1:length(lst)\n        entry = lst[i]\n        if\
    \ i % 3 == 0\n            entry *= entry\n        elseif i % 4 == 0\n        \
    \    entry *= entry * entry\n        end\n        sum += entry\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5if724yj.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5if724yj.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5if724yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5if724yj.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5if724yj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5if724yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5if724yj.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5if724yj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5if724yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5if724yj.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5if724yj.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5if724yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5if724yj.jl:38\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5if724yj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    For all entries in the list, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []\
    \  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be\
    \ -126\n    \"\"\"\n    if(length(lst) == 0)\n        return 0\n    end\n    sum\
    \ = 0\n    for i in 1:length(lst)\n        if(i%3 == 0)\n            sum += lst[i]^2\n\
    \        elseif(i%4 == 0)\n            sum += lst[i]^3\n        else\n       \
    \     sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsdvnpaw.jl:42\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnsdvnpaw.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsdvnpaw.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnsdvnpaw.jl:43\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 86 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsdvnpaw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsdvnpaw.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnsdvnpaw.jl:48\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -8 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsdvnpaw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsdvnpaw.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnsdvnpaw.jl:49\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -156 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnsdvnpaw.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsdvnpaw.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpnsdvnpaw.jl:51\n  Expression: candidate([-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n   Evaluated: 66090\
    \ == -14196\nStacktrace:\n [1] macro expansion\n   @"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsdvnpaw.jl:39\n"
  exit_code: 1
  status: SyntaxError
