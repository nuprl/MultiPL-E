name: HumanEval_66_digitSum
language: jl
prompt: "\"\"\"Task\n    Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n   \
  \     digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"\
  abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\"\
  ) => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
  \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
  \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
  \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
  \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
completions: ["    return sum(Char.(filter(c -> c in 'A':'Z', s)))\nend\n\"\"\"Task\n\
    \    Write a function that takes a string as input and returns the sum of the\
    \ lower characters only'\n    ASCII codes.", "    sum = 0\n    for i in 1:length(s)\n\
    \        if uppercase(s[i]) == s[i]\n            sum += (Int64(s[i]))\n      \
    \  end\n    end\n    return sum\nend", "    sum = 0\n    for c in s\n        if\
    \ c in ['A':'Z']\n            sum += c\n        end\n    end\n    return sum\n\
    end", "    sum = 0\n    for c in s\n        if isupper(c)\n            sum +=\
    \ (Int64(c) - 64)\n        end\n    end\n    return sum\nend\nprintln(digitSum(\"\
    \"))\nprintln(digitSum(\"abAB\"))\nprintln(digitSum(\"abcCd\"))\nprintln(digitSum(\"\
    helloE\"))\nprintln(digitSum(\"woArBld\"))\nprintln(digitSum(\"aAaaaXa\"))", " \
    \   sum([Character(c)::Int64 for c in s if c \u2208 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])\
    \ \nend", "    return sum(x -> isascii(x) && isuppercase(x) ? x : 0, s)\nend",
  "    return (sum(c in 'A':'Z' ? c : 0 for c in s))\nend", "    s = uppercase(s)\n\
    \    s = filter(x -> x in 'A':'Z', s)\n    ascii_array = collect(ASCIIString(s))\n\
    \    sum(ascii_array)\nend", "    sum = 0\n    for i in s\n        sum += i ==\
    \ upper(i) ? convert(Int64, i) : 0\n    end\n    return sum\nend\n```", "    s\
    \ = uppercase(s)\n    suma = 0\n    for i in s\n        suma += Int64(i)\n   \
    \ end\n    return suma\nend", "  sum = 0\n  for c in s\n    if 'A' <= c <= 'Z'\n\
    \      sum += Int(c)\n    end\n  end\n  return sum\nend", "    sum = 0\n    for\
    \ c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(c)\n\
    \        end\n    end\n    return sum\nend", "    return sum(map(isascii, s))\n\
    end", "    sum = 0\n    for i in s\n        if i in string('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \            sum += Int64(i)\n        end\n    end\n    return sum\nend", "  \
    \  total::Int64 = 0\n    for i::Int64 in s\n        if char(i) in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            total += i\n        end\n    end\n    return total\nend", "    a\
    \ = Int64[]\n    for i in s\n        a = [a;Int64(i)]\n    end\n    a = a .- 96\n\
    \    a = a .* (a .> 0)\n    sum(a)\nend", "    return sum(Int(upper(c)) for c\
    \ in s if isalpha(c))\nend", "    s = uppercase(s)\n    sum = 0\n    for c in\
    \ s\n        sum += char(c)\n    end\n    return sum\nend", "    sum = 0 \n  \
    \  for i in s \n        if 'A' <= i <= 'Z' \n            sum += Int64(i) \n  \
    \      end \n    end \n    return sum \nend", "    tot = 0\n    for i in s\n \
    \       tot += Int64(i) >= 65 && Int64(i) <= 90 ? Int64(i) : 0\n    end\n    return\
    \ tot\nend", "    res = 0\n    if s == \"\"\n        return res\n    end\n   \
    \ for i in s\n        if isa(i, Char)\n            if i >= 'A' && i <= 'Z'\n \
    \               res += int(i)\n            end\n        end\n    end\n    return\
    \ res\nend", "    return sum(map(ch -> (ch >= 'A' && ch <= 'Z') ? Int64(ch) :\
    \ 0, s))\nend\n ", "    total = 0\n    for i in s\n        if i in ['A':'Z']\n\
    \            total += Int64(i)\n        end\n    end\n    return total\nend\n\
    @testset \"Testing Digit Sum\" begin\n    @test digitSum(\"\") == 0\n    @test\
    \ digitSum(\"abAB\") == 131\n    @test digitSum(\"abcCd\") == 67\n    @test digitSum(\"\
    helloE\") == 69\n    @test digitSum(\"woArBld\") == 131\n    @test digitSum(\"\
    aAaaaXa\") == 153\nend", "    return sum(UInt8(x) for x in s if isascii(x) &&\
    \ isupper(x))\nend", "    sum = 0\n    for c in s\n        sum += isupper(c) ?\
    \ Int64(c) : 0\n    end\n    return sum\nend", "    # implement your code here\n\
    end", "    sum(isupper.(s) .* s)\nend", "    if s == \"\"\n        return 0\n\
    \    end\n    total = 0\n    for i in s\n        if isalpha(i) && isupper(i)\n\
    \            total += uppercase(i)\n        end\n    end\n    return total\nend",
  "    new_string = uppercase(s)\n    sum_val = 0\n    for i in 1:length(new_string)\n\
    \        sum_val += Int64(new_string[i])\n    end\n    return sum_val\nend", " \
    \   return s\n        |> String.to_upper\n        |> String.to_ascii_uppercase\n\
    \        |> String.map(char -> Int64(char))\n        |> sum\n    end\nend", " \
    \   sum(isascii(c) && isupper(c) ? Char(c) : 0 for c in s)\nend", "    return\
    \ sum(c -> isupper(c) ? c : 0, s)\nend", "    return sum(c in s ? c : 0 for c\
    \ in Char.(0:127))\nend", "    res = 0\n    for c in s\n        if 'A' <= c <=\
    \ 'Z'\n            res += c\n        end\n    end\n    return res\nend", "   \
    \ s_ascii = UInt8[]\n    s_ascii = [Int(UInt8(s[i])) for i in 1:length(s)]\n \
    \   upper_ascii = s_ascii[s_ascii .> 64]\n    return sum(upper_ascii)\nend\nprintln(digitSum(\"\
    \"))\nprintln(digitSum(\"abAB\"))\nprintln(digitSum(\"abcCd\"))\nprintln(digitSum(\"\
    helloE\"))\nprintln(digitSum(\"woArBld\"))\nprintln(digitSum(\"aAaaaXa\"))", " \
    \   sum = 0\n    for i in 1:length(s)\n        if s[i] == uppercase(s[i])\n  \
    \          sum += Int64(s[i])\n        end\n    end\n    return sum\nend", " \
    \ s = uppercase(s)\n  sum = 0\n  for i = 1:length(s)\n    sum += s[i]\n  end\n\
    \  return sum\nend", "    @assert typeof(s) <: String\n    return ASCII.(upper(s))\n\
    \    |> sum\nend", "    # Write your solution here\nend\n ", "    total = 0\n\
    \    for char in s\n        if char in string('A':'Z')\n            total += Int64(char)\n\
    \        end\n    end\n    return total\nend", "    sum([c for c in ASCII(s) if\
    \ 'A' <= c <= 'Z'])\nend", "    sum = 0\n    for c in s\n        x = Int64(c)\n\
    \        if x >= 65 && x <= 90\n            sum += x\n        end\n    end\n \
    \   return sum\nend", "    return sum(c for c in [UInt8(i) for i in s] if c >\
    \ UInt8(96))\nend\n ", "    x = 0\n    for i in s\n        y = uppercase(i)\n\
    \        x += int(y)\n    end\n    return x\nend", "    sum = 0\n    for i in\
    \ s\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(i)\n\
    \        end\n    end\n    return sum\nend", "    n = 0\n    for i in 1:length(s)\n\
    \        n += s[i] >= 65 && s[i] <= 90 ? s[i] : 0\n    end\n    return n\nend",
  "    sum = 0\n    for ch in s\n        if ch in 'A':: 'Z'\n            sum += Int64(ch)\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for c in s\n  \
    \      if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            sum += UInt8(c)\n \
    \       end\n    end\n    return sum\nend", "    sum = 0\n    for c in s\n   \
    \     if c >= 'A' && c <= 'Z'\n            sum += Int(c)\n        end\n    end\n\
    \    return sum\nend", "    return sum(a for a in s if isupper(a))\nend", "  \
    \  sum = 0\n    for i in s\n        if isascii(i) && isupper(i)\n            sum\
    \ += Int64(i)\n        end\n    end\n    return sum\nend", "    sum(int(c) for\
    \ c in s if c in ASCIIString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nend", "    # finish\
    \ this\nend\n\"\"\"Tests\"\"\"\n@testset \"Tests\" begin\n    @test digitSum(\"\
    \") == 0\n    @test digitSum(\"abAB\") == 131\n    @test digitSum(\"abcCd\") ==\
    \ 67\n    @test digitSum(\"helloE\") == 69\n    @test digitSum(\"woArBld\") ==\
    \ 131\n    @test digitSum(\"aAaaaXa\") == 153\nend;", "    ascii = collect(s)\n\
    \    upper = [i for i in ascii if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n    return\
    \ sum(Int(upper[i]) for i in 1:length(upper))\nend", "    sum = 0\n    for i in\
    \ s\n        if isascii(i) && i in [uppercase(i) for i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\
    \            sum += int(i)\n        end\n    end\n    return sum\nend", "    total\
    \ = 0\n    for i in s\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        \
    \    total += Int64(i)\n        end\n    end\n    return total\nend", "    return\
    \ sum(ord(c) for c in s if isascii(c) && isupper(c))\nend", "    new = map(s ->\
    \ (s in ('A':'Z')) ? Int64(s) : 0, s)\n    return sum(new)\nend", "    to_ord(c)\
    \ = c >= 'A' ? Int(c) : 0\n    return sum(map(to_ord, s))\nend", "    return sum(x\
    \ for x in s if x in string('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nend", "    sum_uppers\
    \ = 0\n    for i in 1:length(s)\n        char = s[i]\n        # uppercase letter\n\
    \        if char in ASCIIString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n            sum_uppers\
    \ += Int64(char)\n        end\n    end\n    return sum_uppers\nend", "    s =\
    \ uppercase(s)\n    myArray = String[]\n    for i in s\n        push!(myArray,i)\n\
    \    end\n    myIntArray = Int64[]\n    for i in myArray\n        push!(myIntArray,(Int64(i)))\n\
    \    end\n    sum(myIntArray)\nend", "    sum = 0\n    for c in s\n        if\
    \ c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(c)\n        end\n\
    \    end\n    return sum\nend", "    s = uppercase(s)\n    sum = 0\n    for i\
    \ in s\n        if isascii(i)\n            sum += Int64(i)\n        end\n    end\n\
    \    return sum\nend", "    total = 0\n    for c in s\n        if isupper(c)\n\
    \            total += Int64(c)\n        end\n    end\n    return total\nend",
  "    if length(s) == 0\n        return 0\n    end\n    if s[1] in upperCase(s)\n\
    \        return Int64(s[1]) + digitSum(s[2:end])\n    else\n        return digitSum(s[2:end])\n\
    \    end\nend", "    return 0\nend", "    return sum(char in s ? Int64(char)::Int64\
    \ : char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\nend", "    #Your code here\nend", " \
    \   s = uppercase(s)\n    sum = 0\n    for i in s\n        if string(i) in collect(('A':'Z'))\n\
    \            sum += int(i)\n        end\n    end\n    return sum\nend\n ", " \
    \   uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    sum = 0\n    for i in 1:length(s)\n\
    \        if uppers[s[i]] != nothing\n            sum += uppers[s[i]]\n       \
    \ end\n    end\n    return sum\nend\nprint(digitSum(\"\"))\nprint(digitSum(\"\
    abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"\
    woArBld\"))\nprint(digitSum(\"aAaaaXa\"))", "    total = 0\n    for letter in\
    \ s\n        if letter in ('A':'Z')\n            total += Int64(letter)\n    \
    \    end\n    end\n    return total\nend", "    sum(toascii.(uppercase(s))) \n\
    end", "    return sum(char in s ? uppercase(char) ? Int64(ascii(char)) : 0 : end)\n\
    end\n ", "    sum = 0\n    for i in s\n        if i == uppercase(i)\n        \
    \    sum += (Int64(i) - Int64(\"A\"[1]))+1\n        end\n    end\n    return sum\n\
    end", "    ascii_sum = 0\n    for i in 1:length(s)\n        ascii_sum += Int64(s[i])\n\
    \    end\n    return ascii_sum\nend", "    return sum(int(isascii(x) && isupper(x))*int(x)\
    \ for x in s)\nend", "    u = 0\n    for c in s\n        i = int(c)\n        if\
    \ (65 <= i <= 90)\n            u += i\n        end\n    end\n    return u\nend",
  "    a = 0\n    for i in 1:length(s)\n        if isascii(s[i]) && isupper(s[i])\n\
    \            a += s[i]\n        end\n    end\n    return a\nend\n\"\"\"Task\n\
    \    You are given an array of integers a.\n    For each integer from 1 to 100,\
    \ inclusive, check if that number appears in the array a.", "    acc::Int64 =\
    \ 0\n    for c in s\n        if c \u2208 'A'::Char:('Z')::Char\n            acc\
    \ += c\n        end\n    end\n    return acc\nend\n```\n---\n### Maze Runner\n\
    ```julia\n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ true if all the parentheses,\n    brackets and braces are properly closed, otherwise\
    \ it returns false.", "    total = 0\n    for c in s\n        total += uppercase(c)\
    \ ? c : 0\n    end\n    return total\nend", "    total = 0\n    for c in s\n \
    \       if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            total += Int64(c)\n\
    \        end\n    end\n    return total\nend", "    return sum(map(x -> if isupper(x)\
    \ x - 65 else 0, collect(s)))\nend", "    return sum(a in 'A':'Z' ? Int64(a) :\
    \ 0 for a in s)\nend\n```", "    asc=0\n    for c in s\n        asc+=parse(Int,c)\n\
    \    end\n    return asc\nend", "    char_sum = 0\n    for x in s\n        if\
    \ isascii(x) && isupper(x)\n            char_sum += Int64(x)\n        end\n  \
    \  end\n    return char_sum\nend\n    ", "    sum(isascii(x) && x < 'a' ? x :\
    \ 0 for x in s)\nend\n \n \n\"\"\"Task\n    The function that returns the sum\
    \ of ASCII codes of upper characters of a string.", "    sum = 0\n    for c in\
    \ s\n        isuppercase(c) && (sum += c)\n    end\n    return sum\nend\n@testset\
    \ \"Example tests\" begin\n    @test digitSum(\"\") == 0\n    @test digitSum(\"\
    abAB\") == 131\n    @test digitSum(\"abcCd\") == 67\n    @test digitSum(\"helloE\"\
    ) == 69\n    @test digitSum(\"woArBld\") == 131\n    @test digitSum(\"aAaaaXa\"\
    ) == 153\nend;\n \n \n \n \n \n \n \n \n \n \n \n \n\"\"\"Task\n    Write a function\
    \ that takes an array of integers and an integer n. Return an array of length\
    \ n\n    where each cell contains the sum of its corresponding cell in the original\
    \ array, plus the cells\n    immediately below it, modulo 10.", "    total = 0\n\
    \    for i in s\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            total\
    \ += Int64(i)\n        end\n    end\n    return total\nend", "    if s == \"\"\
    \n        return 0\n    end\n    sum = 0\n    for i in 1:length(s)\n        if\
    \ s[i] >= 'A' && s[i] <= 'Z'\n            sum += Int(s[i])\n        end\n    end\n\
    \    return sum\nend", "    count = 0\n    for c in s\n        @inbounds count\
    \ += Int64(c)\n    end\n    return count\nend", "    sum = 0\n    for c in s\n\
    \        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(c)\n \
    \       end\n    end\n    return sum\nend\ns = \"abcCd\"\ndigitSum(s)", "    uppers\
    \ = filter(x -> x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", s)\n    sum(map(x -> Int64(x),\
    \ uppers))\nend", "    if s == \"\"\n        return 0\n    end\n    return sum(map(s\
    \ -> isalpha(s) ? s == uppercase(s) ? Int(s) : 0 : 0, s))\nend\n \nprintln(digitSum(\"\
    \"))\nprintln(digitSum(\"abAB\"))\nprintln(digitSum(\"abcCd\"))\nprintln(digitSum(\"\
    helloE\"))\nprintln(digitSum(\"woArBld\"))\nprintln(digitSum(\"aAaaaXa\"))", " \
    \   a = Array{Int64}(1:length(s))\n    for i = 1:length(s)\n        a[i] = Int64(s[i])\n\
    \    end\n    sum(a[.!(s .== s[:lowercase])])\nend\nprintln(digitSum(\"\"))\n\
    println(digitSum(\"abAB\"))\nprintln(digitSum(\"abcCd\"))\nprintln(digitSum(\"\
    helloE\"))\nprintln(digitSum(\"woArBld\"))\nprintln(digitSum(\"aAaaaXa\"))", " \
    \   #Check if string is empty\n    if s == \"\"\n        return 0\n    end\n \
    \   total = 0\n    for i in 1:length(s)\n        if s[i] == upper(s[i])\n    \
    \        total += Int64(s[i])\n        end\n    end\n    return total\nend", " \
    \   acc = 0\n    for c in s\n        if c in ['A':'Z']\n            acc += c\n\
    \        end\n    end\n    return acc\nend", "    upper::Int64 = 0\n    for i\
    \ = 1:length(s)\n        upper += s[i] in Char(65:90) ? s[i] : 0\n    end\n  \
    \  return upper\nend", "    return sum(map(x -> isa(x,Char) ? 0 : Int64(x), uppercase(s)))\n\
    end", "    c = 0\n    for x in s\n        if x == uppercase(x)\n            c\
    \ += int(x)\n        end\n    end\n    return c\nend", "    n = 0\n    for i =\
    \ 1:length(s)\n        n += s[i]\n    end\n    return n\nend", "    uppercase\
    \ = ['A':'Z']\n    sum = 0\n    for c in s\n        if c in uppercase\n      \
    \      sum += Int64(c)\n        end\n    end\n    return sum\nend", "    return\
    \ sum(n for n in map(ord, s) if n >= 65 && n <= 90)\nend", "    return sum(int(c)\
    \ for c in uppercase(s))\nend", "    sum = 0\n    for c in s\n        if isupper(c)\n\
    \            sum += Char(c) - 'A' + 1\n        end\n    end\n    return sum\n\
    end", "    total = 0\n    for c in s\n        if c >= 'A' && c <= 'Z'\n      \
    \      total += Int64(c)\n        end\n    end\n    return total\nend\n ", " \
    \   return sum(c -> isuppercase(c) ? c : 0, s)\nend", "    return sum(x in \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ? Int64(x) : 0 for x in s)\nend", "    sum = 0\n\
    \    for c in s\n        if isalpha(c) && isupper(c)\n            sum += ord(c)\n\
    \        end\n    end\n    return sum\nend", "    sum(isalpha(s[i]) && isupper(s[i])\
    \ ? s[i] : 0 for i in 1:length(s))\nend", "    sum = 0\n    for i in 1:length(s)\n\
    \        if isalpha(s[i])\n            sum += s[i]\n        end\n    end\n   \
    \ return sum\nend", "    sum = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            sum += Int64(c)\n        end\n    end\n    return sum\nend", "  \
    \  sum = 0\n    if s == \"\"\n        return 0\n    end\n    for ch in s\n   \
    \     if 'A' <= ch <= 'Z'\n            sum += Int64(ch)\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for c in s\n        if 'A' <= c <= 'Z'\n\
    \            sum += Int64(c)\n        end\n    end\n    return sum\nend", "  \
    \  x = 0 \n    for i in s \n        if i in string('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \            x += int(i)\n        end\n    end\n    return x\nend", "    sum =\
    \ 0\n    for ch in s\n        if 'A' <= ch <= 'Z'\n            sum += Int(ch)\n\
    \        end\n    end\n    return sum\nend", "    sum = 0\n    for c in s\n  \
    \      if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(c)\n   \
    \     end\n    end\n    return sum\nend", "    upper_total = 0\n    for uppercase\
    \ in s\n        if uppercase in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            upper_total\
    \ += uppercase - '@'\n        end\n    end\n    return upper_total\nend", "  \
    \  sum = 0\n    for (i, c) in enumerate(s)\n        if c in ASCIIString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n            sum += c\n        end\n    end\n    return sum\nend", "    s =\
    \ uppercase(s)\n    A = Int64(s[1])\n    for i in s\n        if s[i] in [chr(uppercase(i))\
    \ for i in 0:26]\n            A += Int64(s[i])\n        end\n    end\n    return\
    \ A\nend", "    \n    sum = 0\n    for i in s\n        if i in ASCIIString('a')::ASCIIString\n\
    \            sum += Int64(i) - Int64('a') + 1\n        elseif i in ASCIIString('A')::ASCIIString\n\
    \            sum += Int64(i) - Int64('A') + 1\n        end\n    end\n    \n  \
    \  return sum\nend", "    num = 0\n    for a in s\n        if isupper(a)\n   \
    \         num += Int64(a)\n        end\n    end\n    return num\nend", "    return\
    \ sum(c for c in s if isascii(c) && isupper(c))\nend", "    return sum(c.isupper\
    \ ? c : 0 for c in s)\nend", "    # (1) In Julia, there is a difference between\
    \ characters and strings.\n    # (2) The operator to convert a character to an\
    \ integer is `int()`.\n    # (3) The operator to take the ASCII code of a character\
    \ is `ord()`.\n    # (4) The operator to find out if a character is uppercase\
    \ is `isupper()`.\n    # (5) For the input `s`, use a for loop to iterate over\
    \ its characters.\n    # (6) At each iteration, if the character is uppercase,\
    \ add its ASCII code to the result.\n    # (7) In Julia, like in Python, Python,\
    \ you can unpack the characters of `s` in the for loop.\n    # (8) You can return\
    \ the result from the middle of the function.\n    # (9) Do not forget to initialize\
    \ the result.\n    # (10) You do not need to check that `s` is a string.\n   \
    \ # (11) Feel free to use any other module (e.g. `Base`).\n    # BEGIN_SOLUTION\n\
    \    result = 0\n    for c in s\n        if isupper(c)\n            result +=\
    \ ord(c)\n        end\n    end\n    return result\n    # END_SOLUTION\nend", " \
    \   acc = 0\n    for i = 1:length(s)\n        c = s[i]\n        if isupper(c)\n\
    \            acc += int(c)\n        end\n    end\n    return acc\nend", "    s\
    \ = uppercase(s)\n    sum = 0\n    for i = 1:length(s)\n        sum += Int64(s[i])\n\
    \    end\n    return sum\nend\n\"\"\"\n    Write a function that takes an array\
    \ as input and multiplies each element by its position'\n    (starting from 1).",
  "    sum = 0\n    for i = 1:length(s)\n        char = s[i]\n        ascii = int(char)\n\
    \        if ascii >= 65 && ascii <= 90\n            sum += ascii\n        end\n\
    \    end\n    return sum\nend", " \n    total=0\n    for i in s\n        total\
    \ += (Int64(i)-96)*(i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    end\n    return total\n\
    end", "    sum([char_val(c) for c in s if char_type(c) == \"upper\"])\nend", " \
    \   return sum(ascii(x) for x in s if x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\nend",
  "    sum = 0\n    for i in 1:length(s)\n        sum += uppercase(s[i])\n    end\n\
    \    return sum\nend", "    sum = 0\n    for c in s\n        if c in upper_alpha\n\
    \            sum += uppercase_table[c]\n        end\n    end\n    return sum\n\
    end", "    return sum( map( x -> x > 64 ? x : 0, s) )\nend", "    return sum(i->isascii(i)\
    \ ? i : 0, uppercase(s))\nend", "    uppersum = 0\n    for i in s\n        if\
    \ i in ['A':'Z']\n            uppersum += int(i)\n        end\n    end\n    return\
    \ uppersum\nend", "    total = 0\n    for i in 1:length(s)\n        if s[i] in\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            total += Int64(s[i])\n        end\n\
    \    end\n    return total\nend", "    sum = 0\n    for i in s\n        if i in\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(i)\n        end\n   \
    \ end\n    return sum\nend", "    return sum(UInt8.(UpperCase.(s)))\nend", " \
    \   if s == \"\"\n        return 0\n    end\n    a = collect(s)\n    ans = 0\n\
    \    for x in a\n        if isupper(x)\n            ans += ord(x)\n        end\n\
    \    end\n    return ans\nend", "    return sum(isascii(x) && isupper(x) ? Int64(x)\
    \ : 0 for x in s)\nend", "    sum=0\n    for i in s\n        if isascii(i) &&\
    \ isupper(i)\n            sum += i\n        end\n    end\n    return sum\nend",
  "    return sum(map(x -> isascii(x) && x in 'A':'Z' ? x : 0, s))\nend", "    array\
    \ = ASCII(s)\n    sum = 0\n    for i in array\n        if i>64 && i<91\n     \
    \       sum += i\n        end\n    end\n    return sum\nend", "    return sum(ASCIIcodes(s))\n\
    end", "    sum = 0\n    for c in s\n        sum += (0<=Int(c)<=64) ? Int(c) :\
    \ 0\n    end\n    return sum\nend", "  upper_codes = Int64[]\n  @assert String(s)\n\
    \  @assert !s == \"\"\n  @assert isa(s, String)\n  @assert s in [\"abAB\", \"\
    abcCd\", \"helloE\", \"woArBld\", \"aAaaaXa\"]\n  for c in s\n    if !(c == lowercase(c))\n\
    \      @show ascii(c)\n      push!(upper_codes, ascii(c))\n    end\n  end\n  sum(upper_codes)\n\
    end", "    s |> x -> collect(x) |> x -> filter(y -> isupper(y), x) |> x -> sum(x)\
    \ |> x -> x |> int\nend", "    digits = 'A'::String\n    total = 0::Int64\n  \
    \  for c in s\n        if (c in digits)\n            total += Int64(c)\n     \
    \   end\n    end\n    return total\nend", "    uppersum = 0\n    for c in s\n\
    \        if isuppercase(c)\n            uppersum += int(c)\n        end\n    end\n\
    \    return uppersum\nend", "    return s |> collect |> map(uppercase) |> map(x\
    \ -> Int(x)) |> sum\nend", "    sum = 0\n    for i in 1:length(s)\n        if\
    \ s[i] == uppercase(s[i])\n            sum += Int64(s[i])\n        end\n    end\n\
    \    return sum\nend", "    s = uppercase(s) # convert to upper case\n    count\
    \ = 0\n    for c in s\n        count += Int64(c)\n    end\n    return count\n\
    end", "    return sum(ch -> ch >= 'A' && ch <= 'Z' ? ch - 'A' + 1 : 0, s)\nend",
  "    if length(s) == 0\n        return 0\n    end\n    if length(s) == 1\n     \
    \   return 0\n    end\n    return sum(x -> x>64 && x<91 ? x : 0,Int64.(s))\nend",
  "    sum = 0\n    for c in s\n        # if c is in range of upper characters add\
    \ it to sum\n        if c in 'A'::Int64('Z')\n            sum += int(c)\n    \
    \    end\n    end\n    return sum\nend\n# test(digitSum(\"\") == 0, \"empty string\"\
    )\n# test(digitSum(\"abAB\") == 131, \"abAB\")\n# test(digitSum(\"abcCd\") ==\
    \ 67, \"abcCd\")\n# test(digitSum(\"helloE\") == 69, \"helloE\")\n# test(digitSum(\"\
    woArBld\") == 131, \"woArBld\")\n# test(digitSum(\"aAaaaXa\") == 153, \"aAaaaXa\"\
    )", "    sum = 0\n    for x in s\n        if isupper(x) == true\n            sum\
    \ += x\n        end\n    end\n    return sum\nend", "    # your code here\nend",
  "    sum(isascii(c) && isupper(c) ? c : 0 for c in s)\nend", "    return sum(isascii(s)\
    \ ? (s.^2)::Int64 : 0)\nend", "    \n    sum = 0\n    for char in s\n        if\
    \ char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            sum += Int64(char)\n     \
    \   end\n    end\n    return sum\nend", "    ASCII_A = 65\n    ASCII_Z = 90\n\
    \    sum_ = 0\n    for (i, c) in enumerate(s)\n        if c in ASCII_A:ASCII_Z\n\
    \            sum_ += c\n        end\n    end\n    return sum_\nend", "    sum\
    \ = 0\n    for i in s\n        if i in ['A'..'Z']\n            sum += Int64(i)\n\
    \        end\n    end\n    return sum\nend", "    sum([(Int(i) - 64) for i in\
    \ s if isupper(i)])\nend", "    return sum(map(x -> x <= 90 ? x : 0, s))\nend",
  "    sum = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         sum += Int64(c)\n        end\n    end\n    return sum\nend", "    sum\
    \ = 0\n    for i = 1:length(s)\n        if Int(s[i]) > 96\n            sum +=\
    \ Int(s[i]) - 96\n        end\n    end\n    return sum\nend", "    sum([c for\
    \ c in s if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"])\nend", "    len = length(s)\n\
    \    sum = 0\n    for i in 1:len\n        if s[i] > 96 && s[i] < 123\n       \
    \     sum += s[i] - 32\n        end\n    end\n    return sum\nend", "    sum(isupper.(s).*[ord(c)\
    \ for c in s])\nend", "    return sum(map(Int64, map(x -> x > 64 ? x : 0, collect(s))))\n\
    end", "    sum = 0\n    for (i,char) in enumerate(s)\n        if char == string(uppercase(char))\n\
    \            sum += int(char)\n        end\n    end\n    return sum\nend", " \
    \   _s = String[]\n    for _ in s \n        push!(_s, _)\n    end\n    sum = 0\n\
    \    for _ in _s\n        for i in _\n            push!(sum, Int(i))\n       \
    \ end\n    end\n    return sum\nend", "    n = 0\n    for c in s\n        if isupper(c)\n\
    \            n += uppercase(c)\n        end\n    end\n    return n\nend", "  \
    \  sum(isascii(c) && c in uppercase(c) ? Int64(c) : 0 for c in s)\nend", "   \
    \ return 0\nend", "    return sum(c -> c >= 'A' && c <= 'Z' ? c : 0, s)\nend",
  "    sum = 0\n    for i = 1:length(s)\n        sum += Int64(s[i])\n    end\n   \
    \ return sum\nend", "    return sum(ch -> if ch in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\
    \ int(ch) else 0 end for ch in s)\nend", "    sum(isascii(x) && isupper(x) ? x\
    \ : 0 for x in s)\nend\n ", "    acc = 0\n    for i in 1:length(s)\n        if\
    \ s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            acc += int(s[i])\n       \
    \ end\n    end\n    return acc\nend\n```", "    sum = 0 \n    for (i,val) in enumerate(s)\n\
    \        if isascii(val) && val in (UpperCase(val),LowerCase(val))\n         \
    \   sum += val\n        end\n    end\n    return sum\nend", "    sum(x -> isupper(x)\
    \ ? x : 0, s)\nend", "    n = 0\n    for ch in s\n        if ch in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \            n += int(ch)\n        end\n    end\n    return n\nend", "    sum\
    \ = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        \
    \    sum += uppercase(c)\n        end\n    end\n    return sum\nend", "    return\
    \ sum(map(x -> ((x >= \"A\" && x <= \"Z\") ? Int64(x) : 0), s))\nend", "    sum\
    \ = 0\n    for i in 1:length(s)\n        if s[i] in ('A':'Z')\n            sum\
    \ += Int(s[i])\n        end\n    end\n    return sum\nend", "    sum = 0\n   \
    \ for i = 1:length(s)\n        if s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n     \
    \       sum += Int64(s[i])\n        end\n    end\n    return sum\nend", "    return\
    \ sum(map(x -> x >= \"A\" && x <= \"Z\" ? x : 0, s))\nend", "    sum = 0\n   \
    \ for x in s\n        if x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            sum\
    \ += Int64(x)\n        end\n    end\n    return sum\nend", "    return sum(Int(x)\
    \ for x in collect(uppercase(s)))\nend", "    \"\"\"\n    Test cases:\n    \"\"\
    \"\n    sum = 0\n    for c in s\n        if (c >= 'A' && c <= 'Z')\n         \
    \   sum += c\n        end\n    end\n    return sum\nend", "    #loop through each\
    \ character in the string.\n    #identify the uppercase characters\n    #convert\
    \ to ascii \n    #sum the ascii values\n    \n    sum = 0\n    for i in s\n  \
    \      #check if uppercase\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         #convert to ascii \n            a = Int(i)\n            #add to the\
    \ sum\n            sum += a\n        end\n    end \n    return sum\nend", "  \
    \  sum = 0\n    for c in s\n        if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         sum += Int64(c)\n        end\n    end\n    return sum\nend", "    x\
    \ = 0\n    for i = 1:length(s)\n        t = s[i]\n        if t in (collect('A':'Z'))\n\
    \            x += Int64(t)\n        end\n    end\n    return x\nend", "    return\
    \ sum(map(Int64, map(isascii, s)))\nend", "    # check that s.isascii()\n    #\
    \ get all the ascii characters from s\n    # sum the ascii characters\n    # return\
    \ the sum\nend", "    sum(s.ascii[s.isascii() && s.isuppercase()])\nend", "  \
    \  # your code here\nend\n@testset \"Examples\" begin\n    @test digitSum(\"\"\
    ) == 0\n    @test digitSum(\"abAB\") == 131\n    @test digitSum(\"abcCd\") ==\
    \ 67\n    @test digitSum(\"helloE\") == 69\n    @test digitSum(\"woArBld\") ==\
    \ 131\n    @test digitSum(\"aAaaaXa\") == 153\nend\n@testset \"Random tests\"\
    \ begin\n    for i in 1:100\n        s = rand(['a':'z','A':'Z'],rand(1:20))\n\
    \        @test digitSum(s) == sum(Int(x) for x in s if x in 'A':'Z')\n    end\n\
    end\n ", "    sum = 0\n    for i in s\n        if uppercase(i) == i\n        \
    \    sum += Int64(i)\n        end\n    end\n    return sum\nend\n \nprintln(digitSum(\"\
    abAB\"))\nprintln(digitSum(\"abcCd\"))\nprintln(digitSum(\"helloE\"))\nprintln(digitSum(\"\
    woArBld\"))\nprintln(digitSum(\"aAaaaXa\"))"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
