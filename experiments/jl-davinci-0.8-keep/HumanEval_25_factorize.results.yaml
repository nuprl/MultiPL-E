name: HumanEval_25_factorize
language: jl
results:
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    output = Int64[]\
    \ #we should start with empty list\n    i = 2 #we can start with 2 becuase all\
    \ factors of 1 is 1 and we don't need to consider it\n    while n != 1 #loop until\
    \ n = 1\n        while n % i == 0 #check if i is a factor of n\n            push!(output,\
    \ i) #if yes, push it in the list\n            n = n / i #also, we should divide\
    \ n by i so we can find other factors of it\n        end\n        i += 1 #we should\
    \ increase i and try another factor\n    end\n    return output\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n != 1\n        i = 2\n        while n % i != 0\n            i\
    \ += 1\n        end\n        push!(factors, i)\n        n /= i\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2 #\
    \ base case\n        return Int64[]\n    end\n    for i = 2:n\n        if n %\
    \ i == 0\n            return [i; factorize(n/i)]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnmezdx14.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmpnmezdx14.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmpnmezdx14.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmezdx14.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmezdx14.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnmezdx14.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmpnmezdx14.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnmezdx14.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmezdx14.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmezdx14.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnmezdx14.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmpnmezdx14.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnmezdx14.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmezdx14.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    while(n != 1)\n        # find the smallest prime factor\n     \
    \   factor = smallest_prime_factor(n)\n        push!(factors, factor)\n      \
    \  n = n // factor\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkfq0d1jf.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: smallest_prime_factor\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpkfq0d1jf.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkfq0d1jf.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkfq0d1jf.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpkfq0d1jf.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: smallest_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpkfq0d1jf.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkfq0d1jf.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkfq0d1jf.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpkfq0d1jf.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: smallest_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpkfq0d1jf.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpkfq0d1jf.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkfq0d1jf.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpkfq0d1jf.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: smallest_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpkfq0d1jf.jl:15\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 0\n\
    \        return [0]\n    end\n    factors = []\n    #if n < 0\n    #    n = -n\n\
    \    #    push!(factors, -1)\n    #end\n    #while n % 2 == 0\n    #    push!(factors,\
    \ 2)\n    #    n = n // 2\n    #end\n    while n % 2 == 0\n        push!(factors,\
    \ 2)\n        n = n // 2\n    end\n    while n % 3 == 0\n        push!(factors,\
    \ 3)\n        n = n // 3\n    end\n    f = 5\n    while f * f <= n\n        while\
    \ n % f == 0\n            push!(factors, f)\n            n = n // f\n        end\n\
    \        f += 2\n        while n % f == 0\n            push!(factors, f)\n   \
    \         n = n // f\n        end\n        f += 4\n    end\n    if n > 1\n   \
    \     push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    end\n    p=2\n    factors=[]\n    while n>1\n       \
    \ if n%p==0\n            push!(factors,p)\n            n=n/p\n        else\n \
    \           p+=1\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    n = n\n    while n > 1\n        if n % divisor == 0\n\
    \            n = n / divisor\n            push!(factors, divisor)\n        else\n\
    \            divisor += 1\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n<=1\n\
    \        return 0\n    end\n    factors = Vector{Int64}()\n    if (n%2)==0\n \
    \       push!(factors,2)\n        n = n/2\n    end\n    for i=3:n\n        if\
    \ (n%i)==0\n            push!(factors,i)\n            n = n/i\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9gw6hsfs.jl:34\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gw6hsfs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gw6hsfs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9gw6hsfs.jl:35\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gw6hsfs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gw6hsfs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9gw6hsfs.jl:37\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gw6hsfs.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gw6hsfs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9gw6hsfs.jl:38\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9gw6hsfs.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9gw6hsfs.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9gw6hsfs.jl:39\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gw6hsfs.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    factors = []\n    d = 2\n    while d*d <= n\n\
    \        while (n % d) == 0\n            factors = push!(factors, d)\n       \
    \     n /= d\n        end\n        d += 1\n    end\n    if n > 1\n        push!(factors,\
    \ n)\n    end\n    factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    d = 2\n    while n > 1\n        while n % d == 0\n            push!(factors,\
    \ d)\n            n /= d\n        end\n        d += 1\n    end\n    return factors\n\
    end\nprintln(factorize(8))\nprintln(factorize(25))\nprintln(factorize(70))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "[2, 2, 2]\n[5, 5]\n[2, 5, 7]\nTest Summary: | Pass  Total\ntest set   \
    \   |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp7x3w8vt.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while (n > 1)\n        factor = 2\n        while(n % factor != 0)\n\
    \            factor += 1\n        end\n        push!(factors, factor)\n      \
    \  n = n \xF7 factor\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n <= 1\n\
    \        return [n]\n    end\n    i = 2\n    while i <= floor(sqrt(n))\n     \
    \   if n % i == 0\n            return sort([i; factorize(n / i)])\n        end\n\
    \        i += 1\n    end\n    return [n]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnaidxjfa.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(4) == [2, 2]\\n  MethodError: no method\
    \ matching factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmpnaidxjfa.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmpnaidxjfa.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnaidxjfa.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnaidxjfa.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnaidxjfa.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmpnaidxjfa.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnaidxjfa.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnaidxjfa.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnaidxjfa.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # replace\
    \ this function definition with your code\n    return [n]\nend\nfactorize(8)\n\
    \ \nfactorize(25)\n \nfactorize(70)\n \nfactorize(20)\n \nfactorize(2)\n \nfactorize(11)\n\
    \ \nfactorize(1)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsffepbz_.jl:34\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [4] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsffepbz_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsffepbz_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsffepbz_.jl:35\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [8] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsffepbz_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsffepbz_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsffepbz_.jl:36\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [57] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsffepbz_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsffepbz_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsffepbz_.jl:37\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3249] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsffepbz_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsffepbz_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsffepbz_.jl:38\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [185193] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsffepbz_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    d=2\n    while n>1\n        while n%d==0\n            push!(factors,d)\n\
    \            n/=d\n        end\n        d+=1\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for divisor in primes(n)\n            while n %\
    \ divisor == 0\n                push!(factors, divisor)\n                n /=\
    \ divisor\n            end\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv3rpzber.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpv3rpzber.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv3rpzber.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv3rpzber.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv3rpzber.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpv3rpzber.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv3rpzber.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv3rpzber.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv3rpzber.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpv3rpzber.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpv3rpzber.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv3rpzber.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv3rpzber.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpv3rpzber.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return Int64[]\n    end\n    for i in 2:n-1\n        if n % i == 0\n\
    \            return factorize(i) .* factorize(n/i)\n        end\n    end\n   \
    \ return [n]\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2532so2p.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(4) == [2, 2]\\n  MethodError: no method\
    \ matching factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmp2532so2p.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmp2532so2p.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2532so2p.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2532so2p.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp2532so2p.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmp2532so2p.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2532so2p.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2532so2p.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2532so2p.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp2532so2p.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmp2532so2p.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2532so2p.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2532so2p.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    i = 2\n    while i*i <= n\n        if n % i == 0\n    \
    \        push!(factors, i)\n            n = n \xF7 i\n        else\n         \
    \   i += 1\n        end\n    end\n    if n > 1\n        push!(factors, n)\n  \
    \  end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    if n < 2\n        return result\n    end\n    divisor = 2\n    while n >\
    \ 1\n        while n % divisor == 0\n            push!(result, divisor)\n    \
    \        n /= divisor\n        end\n        divisor += 1\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    # todo\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpz6x6njjp.jl:21\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz6x6njjp.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6x6njjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6x6njjp.jl:22\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6x6njjp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6x6njjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6x6njjp.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6x6njjp.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6x6njjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6x6njjp.jl:24\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz6x6njjp.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz6x6njjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6x6njjp.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6x6njjp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n \n    \n    _factors\
    \ = []\n    original_n = n\n    i = 2\n    while i*i <= n\n        if n % i ==\
    \ 0\n            while n % i == 0\n                push!(_factors, i)\n      \
    \          n = n/i\n            end\n        end\n        i += 1\n    end\n  \
    \  if n > 1\n        push!(_factors, n)\n    end\n    \n    prod = prod(_factors)\n\
    \    if prod != original_n\n        return [original_n]\n    end\n    \n    return\
    \ _factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgfeafa7n.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: prod not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgfeafa7n.jl:30\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgfeafa7n.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgfeafa7n.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpgfeafa7n.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgfeafa7n.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgfeafa7n.jl:43 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgfeafa7n.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpgfeafa7n.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgfeafa7n.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgfeafa7n.jl:44 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgfeafa7n.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpgfeafa7n.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgfeafa7n.jl:30\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    pfactors =\
    \ []\n    for i in 2:n\n        count = 0\n        while rem(n,i) == 0\n     \
    \       count = count + 1\n            n = div(n,i)\n        end\n        append!(pfactors,\
    \ fill(i,count))\n    end\n    return pfactors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Int64[]\n\
    \    for i in 2:n\n        if n % i == 0\n            push!(result,i)\n      \
    \      @show result\n            n = n / i\n            i = i - 1\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "result = [2]\nresult = [2]\ntest set: Test Failed at /tmp/tmpzcoj1jwx.jl:29\n\
    \  Expression: candidate(4) == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcoj1jwx.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcoj1jwx.jl:27\nresult = [2]\n\
    result = [2, 4]\ntest set: Test Failed at /tmp/tmpzcoj1jwx.jl:30\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcoj1jwx.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcoj1jwx.jl:27\nresult = [3]\n\
    result = [3, 19]\nresult = [3]\nresult = [3, 19]\nresult = [3, 19, 57]\ntest set:\
    \ Test Failed at /tmp/tmpzcoj1jwx.jl:32\n  Expression: candidate(3249) == [3,\
    \ 3, 19, 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcoj1jwx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzcoj1jwx.jl:27\nresult = [3]\n\
    result = [3, 9]\nresult = [3, 9, 19]\nresult = [3, 9, 19, 361]\ntest set: Test\
    \ Failed at /tmp/tmpzcoj1jwx.jl:33\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzcoj1jwx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcoj1jwx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 0\n\
    \        return []\n    end\n    factors = []\n    factor = 2\n    while n !=\
    \ 1 && factor <= n\n        if n % factor == 0\n            push!(factors, factor)\n\
    \            n = n / factor\n        else\n            factor += 1\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = []\n\
    \    x = 2\n    while n > 1\n        while n % x == 0\n            push!(res,\
    \ x)\n            n /= x\n        end\n        x += 1\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    factor = 2\n    while n > 1\n        while n % factor == 0\n       \
    \     push!(factors, factor)\n            n /= factor\n        end\n        factor\
    \ += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = Array{Int64}(1)\
    \ # create array to store prime factors \n    i = 2 # initialise counter\n   \
    \ while i <= floor(Int64, sqrt(n)) # go through all numbers up to square root\
    \ of n\n        if n % i == 0 # if i is a prime factor of n\n            j = 0\
    \ # initialise counter\n            while n % i == 0 # while n is divisible by\
    \ i\n                n = n//i # update n\n                j += 1 # count number\
    \ of times i appears in factorization\n            end\n            append!(f,\
    \ repeat([i], j)) # add i to array and repeat j times\n        end\n        i\
    \ += 1 # increase counter\n    end\n    if n > 1 # if n still is not 1, then n\
    \ itself is prime\n        push!(f, n) # add n to array\n    end\n    return f\
    \ # return array with prime factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn5wk5eqw.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpn5wk5eqw.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpn5wk5eqw.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn5wk5eqw.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpn5wk5eqw.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching (Array{Int64})(::Int64)\\\
    n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpn5wk5eqw.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    primes = [2]\n    primeFactors = []\n    num\
    \ = n\n    for i in 3:Int64(sqrt(n))\n        if n % i == 0\n            if is_prime(i)\n\
    \                push!(primes, i)\n            end\n        end\n    end\n   \
    \ for i in primes\n        while num % i == 0\n            push!(primeFactors,\
    \ i)\n            num = num/i\n        end\n    end\n    primeFactors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnwo6m0hl.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  InexactError: Int64(1.4142135623730951)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpnwo6m0hl.jl:18\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnwo6m0hl.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnwo6m0hl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpnwo6m0hl.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  InexactError: Int64(2.8284271247461903)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpnwo6m0hl.jl:18\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnwo6m0hl.jl:40 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnwo6m0hl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpnwo6m0hl.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  InexactError: Int64(7.54983443527075)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpnwo6m0hl.jl:18\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpnwo6m0hl.jl:41 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnwo6m0hl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpnwo6m0hl.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(3249) == [3, 3, 19, 19]\\n  Undef"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n > 1\n        i = 2\n        while n % i != 0\n           \
    \ i += 1\n        end\n        push!(prime_factors, i)\n        n /= i\n    end\n\
    \    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # add your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm5glcvqs.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpm5glcvqs.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm5glcvqs.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm5glcvqs.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # write your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyj1k6fhk.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpyj1k6fhk.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyj1k6fhk.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyj1k6fhk.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:n-1\n        if n % i == 0\n            push!(factors, i)\n\
    \            return vcat(factorize(i), factorize(n/i))\n        end\n    end\n\
    \    return [n]\nend\n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmplvxmbado.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(4) == [2, 2]\\n  MethodError: no method\
    \ matching factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmplvxmbado.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmplvxmbado.jl:16\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplvxmbado.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplvxmbado.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmplvxmbado.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmplvxmbado.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmplvxmbado.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplvxmbado.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplvxmbado.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmplvxmbado.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmplvxmbado.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmplvxmbado.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplvxmbado.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for d in primes(n)\n        if n == 1\n            break\n    \
    \    end\n        while n % d == 0\n            push!(factors, d)\n          \
    \  n /= d\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo6acw11w.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpo6acw11w.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo6acw11w.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6acw11w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo6acw11w.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpo6acw11w.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo6acw11w.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6acw11w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo6acw11w.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpo6acw11w.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpo6acw11w.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6acw11w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo6acw11w.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpo6acw11w.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return []\n    end\n    p = 2\n    while p <= n\n        if n % p ==\
    \ 0\n            return [p, factorize(n/p)...];\n        end\n        p += 1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnfa4y7nr.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmpnfa4y7nr.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmpnfa4y7nr.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnfa4y7nr.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnfa4y7nr.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpnfa4y7nr.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmpnfa4y7nr.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnfa4y7nr.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnfa4y7nr.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnfa4y7nr.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while n != 1\n        while n % divisor == 0\n    \
    \        push!(factors, divisor)\n            n /= divisor\n        end\n    \
    \    divisor += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factor_list\
    \ = []\n    # TODO: return prime factors of n\n    push!(factor_list,1)\n    push!(factor_list,2)\n\
    \    return factor_list\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvf7v7ucb.jl:24\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [1, 2] == [2]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvf7v7ucb.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvf7v7ucb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvf7v7ucb.jl:25\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [1, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvf7v7ucb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvf7v7ucb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvf7v7ucb.jl:26\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [1, 2] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvf7v7ucb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvf7v7ucb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvf7v7ucb.jl:27\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [1, 2] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvf7v7ucb.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvf7v7ucb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvf7v7ucb.jl:28\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [1, 2] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvf7v7ucb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while rem(n, i) == 0\n            push!(factors,\
    \ i)\n            n = div(n, i)\n        end\n        i += 1\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in primes(n)\n        while(n % i == 0)\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp200mtpi_.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp200mtpi_.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp200mtpi_.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp200mtpi_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp200mtpi_.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp200mtpi_.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp200mtpi_.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp200mtpi_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp200mtpi_.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp200mtpi_.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp200mtpi_.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp200mtpi_.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp200mtpi_.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp200mtpi_.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = factor(n)\n    factors_unique = unique(factors)\n    prime_factorization =\
    \ []\n    \n    for factor in factors_unique\n        if isprime(factor)\n   \
    \         num_appear = count(factors, factor)\n            for i in 1:num_appear\n\
    \                push!(prime_factorization, factor)\n            end\n       \
    \ end\n    end\n    prime_factorization\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpflheex46.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: factor not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpflheex46.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpflheex46.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpflheex46.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpflheex46.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpflheex46.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpflheex46.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpflheex46.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpflheex46.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpflheex46.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpflheex46.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpflheex46.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpflheex46.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpflheex46.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    assert(n>0,\
    \ \"Input number must be greater than zero\")\n    factors = Int64[]\n    while\
    \ n%2 == 0\n        push!(factors, 2)\n        n = n / 2\n    end\n    i = 3\n\
    \    while i*i <= n\n        while n%i == 0\n            push!(factors, i)\n \
    \           n = n / i\n        end\n        i = i + 2\n    end\n    if n>2\n \
    \       push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg592o89w.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: assert not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg592o89w.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg592o89w.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg592o89w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpg592o89w.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: assert not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg592o89w.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg592o89w.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg592o89w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpg592o89w.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: assert not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg592o89w.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg592o89w.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg592o89w.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpg592o89w.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: assert not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpg592o89w.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorList\
    \ = Int64[]\n    # your code\n    return factorList\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfk1d6i2x.jl:21\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfk1d6i2x.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk1d6i2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfk1d6i2x.jl:22\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk1d6i2x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk1d6i2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfk1d6i2x.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk1d6i2x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk1d6i2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfk1d6i2x.jl:24\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfk1d6i2x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfk1d6i2x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfk1d6i2x.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk1d6i2x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    x = 2\n    while n > 1\n        while (n % x == 0)\n            push!(factors,\
    \ x)\n            n = n / x\n        end\n        x += 1\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    lst=Int64[]\n\
    \    norig=n\n    for i in 2:norig\n        if n%i==0\n            lst=append!(lst,i)\n\
    \            n=n/i\n            i=i-1\n        end\n    end\n    return lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoq3yq0g0.jl:29\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq3yq0g0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq3yq0g0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq3yq0g0.jl:30\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq3yq0g0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq3yq0g0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq3yq0g0.jl:32\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq3yq0g0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq3yq0g0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq3yq0g0.jl:33\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoq3yq0g0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoq3yq0g0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoq3yq0g0.jl:34\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoq3yq0g0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    prime\
    \ = 1\n    prime_factors = []\n    while n >= 1 && prime <= n^0.5\n        prime\
    \ += 1\n        while rem(n, prime) == 0\n            push!(prime_factors, prime)\n\
    \            n /= prime\n        end\n    end\n    if n > 1\n        push!(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = []\n \
    \   i = 2\n    while n > 1\n        while n % i == 0\n            push!(f, i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return f\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in 2:n\n        if n % i == 0\n            append!(factors,\
    \ i)\n            div = div(n, i)\n            return [factors; factorize(div)]\n\
    \        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1gg9f28a.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: div not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp1gg9f28a.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1gg9f28a.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1gg9f28a.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp1gg9f28a.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: div not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp1gg9f28a.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1gg9f28a.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1gg9f28a.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp1gg9f28a.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: div not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp1gg9f28a.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1gg9f28a.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1gg9f28a.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp1gg9f28a.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: div not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp1gg9f28a.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    fac = Array(Int64,\
    \ 0)\n    while n % 2 == 0\n        push!(fac, 2)\n        n /= 2\n    end\n \
    \   i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n            push!(fac,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(fac, n)\n    end\n    return fac\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2d9qlsa4.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ Array(::Type{Int64}, ::Int64)\\n  Closest candidates are:\\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2d9qlsa4.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2d9qlsa4.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2d9qlsa4.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp2d9qlsa4.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching Array(::Type{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    Array(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Integer, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:496\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2d9qlsa4.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2d9qlsa4.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2d9qlsa4.jl:34\\ntest set'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Do your\
    \ work here\nend\n\"\"\" Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp78rswkar.jl:14\nin expression starting at /tmp/tmp78rswkar.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = Int64[]\n    current = n\n    for i in 2:Int64(floor(sqrt(n))) \n        while\
    \ current % i == 0 \n            push!(factors, i)\n            current = current\
    \ / i\n        end\n    end\n    if current > 1\n        push!(factors, current)\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\nend\n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\n    return [2, 2, 2]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfqpjd_hu.jl:20\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [2, 2, 2] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpjd_hu.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpjd_hu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfqpjd_hu.jl:21\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [2, 2, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpjd_hu.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpjd_hu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfqpjd_hu.jl:23\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [2, 2, 2] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpjd_hu.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpjd_hu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfqpjd_hu.jl:24\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [2, 2, 2] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfqpjd_hu.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfqpjd_hu.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfqpjd_hu.jl:25\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [2, 2, 2] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqpjd_hu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ zeros(Int64, 0)\n    p = 1\n    while n != 1\n        if n % p == 0\n      \
    \      n = n/p\n            push!(factors, p)\n        else\n            p +=\
    \ 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    num=n\n  \
    \  v=Int64[]\n    if n==1\n        v=push!(v,1)\n        return v\n    end\n \
    \   if n<1\n        println(\"Invalid input\")\n        return v\n    end\n  \
    \  while num%2==0\n        v=push!(v,2)\n        num=num/2\n    end\n    if num!=1\n\
    \        for i in 3:2:Int64(sqrt(num))\n            while num%i==0\n         \
    \       v=push!(v,i)\n                num=num/i\n            end\n        end\n\
    \    end\n    if num!=1\n        v=push!(v,num)\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoqp7zzil.jl:47\\n  Test threw\
    \ exception\\n  Expression: candidate(57) == [3, 19]\\n  InexactError: Int64(7.54983443527075)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpoqp7zzil.jl:27\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpoqp7zzil.jl:47 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpoqp7zzil.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmpoqp7zzil.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(185193) == [3, 3, 3, 19, 19, 19]\\n  InexactError: Int64(430.34056281043274)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpoqp7zzil.jl:27\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpoqp7zzil.jl:49 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpoqp7zzil.jl:43\\ntest set:\
    \ Error During Test at /tmp/tmpoqp7zzil.jl:50\\n  Test threw exception\\n  Expression:\
    \ candidate(20577) == [3, 19, 19, 19]\\n  InexactError: Int64(143.44685427014426)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmpoqp7zzil.jl:27\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpoqp7zzil.jl:50 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpoqp7zzil.jl:43\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    5      3      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    i = 3\n    while i * i <= n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(factors, n)\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    push!(factors, 2)\n    for i in 3:2:n\n        println(i)\n        if\
    \ n % i == 0\n            push!(factors, i)\n            println(factors)\n  \
    \      end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'3\\ntest set: Test Failed at /tmp/tmpoexl0a46.jl:29\\n  Expression: candidate(4)\
    \ == [2, 2]\\n   Evaluated: [2] == [2, 2]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoexl0a46.jl:29 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoexl0a46.jl:27\\n3\\n5\\n7\\\
    ntest set: Test Failed at /tmp/tmpoexl0a46.jl:30\\n  Expression: candidate(8)\
    \ == [2, 2, 2]\\n   Evaluated: [2] == [2, 2, 2]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoexl0a46.jl:30 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoexl0a46.jl:27\\n3\\nAny[2,\
    \ 3]\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\\nAny[2, 3, 19]\\n21\\n23\\n25\\n27\\\
    n29\\n31\\n33\\n35\\n37\\n39\\n41\\n43\\n45\\n47\\n49\\n51\\n53\\n55\\n57\\nAny[2,\
    \ 3, 19, 57]\\ntest set: Test Failed at /tmp/tmpoexl0a46.jl:31\\n  Expression:\
    \ candidate(57) == [3, 19]\\n   Evaluated: [2, 3, 19, 57] == [3, 19]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpoexl0a46.jl:31 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpoexl0a46.jl:27\\n3\\nAny[2,\
    \ 3]\\n5\\n7\\n9\\nAny[2, 3, 9]\\n11\\n13\\n15\\n17\\n19\\nAny[2, 3, 9, 19]\\\
    n21\\n23\\n25\\n27\\n29\\n31\\n33\\n35\\n37\\n39\\n41\\n43\\n45\\n47\\n49\\n51\\\
    n53\\n55\\n57\\nAny[2, 3, 9, 19, 57]\\n59\\n61\\n63\\n65\\n67\\n69\\n71\\n73\\\
    n75\\n77\\n79\\n81\\n83\\n85\\n87\\n89\\n91\\n93\\n95\\n97\\n99\\n101\\n103\\\
    n105\\n107\\n109\\n111\\n113\\n115\\n117\\n119\\n121\\n123\\n125\\n127\\n129\\\
    n131\\n133\\n135\\n137\\n139\\n141\\n143\\n145\\n147\\n149\\n151\\n153\\n155\\\
    n157\\n159\\n161\\n163\\n165\\n167\\n169\\n171\\nAny[2, 3, 9, 19, 57, 171]\\n173\\\
    n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    l = []\n \
    \   if isprime(n) == true\n        append!(l, n)\n        return l\n    end\n\
    \    i = 2\n    while i<=n\n        if isprime(i) == true\n            if n%i\
    \ == 0\n                append!(l, i)\n                n = n/i\n             \
    \   i = 2\n            else\n                i = i+1\n            end\n      \
    \  else\n            i = i+1\n        end\n    end\n    return l\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt5gh7lr8.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt5gh7lr8.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt5gh7lr8.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt5gh7lr8.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpt5gh7lr8.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt5gh7lr8.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt5gh7lr8.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt5gh7lr8.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpt5gh7lr8.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt5gh7lr8.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt5gh7lr8.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt5gh7lr8.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpt5gh7lr8.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt5gh7lr8.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if isprime(n)\n\
    \        return [n]\n    end\n    prime_factors = []\n    while n % 2 == 0\n \
    \       push!(prime_factors, 2)\n        n = n / 2\n    end\n    while n % 3 ==\
    \ 0\n        push!(prime_factors, 3)\n        n = n / 3\n    end\n    i = 5\n\
    \    while i <= sqrt(n)\n        while n % i == 0\n            push!(prime_factors,\
    \ i)\n            n = n / i\n        end\n        i += 2\n    end\n    push!(prime_factors,\
    \ n)\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmprk1rgwzd.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmprk1rgwzd.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprk1rgwzd.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprk1rgwzd.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmprk1rgwzd.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmprk1rgwzd.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprk1rgwzd.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprk1rgwzd.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmprk1rgwzd.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmprk1rgwzd.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmprk1rgwzd.jl:42 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmprk1rgwzd.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmprk1rgwzd.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmprk1rgwzd.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for candidate in 2:n \n        while n % candidate == 0 \n         \
    \   push!(factors, candidate)\n            n /= candidate\n        end\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    ## See e.g.\
    \ https://en.wikipedia.org/wiki/Prime_factor#Computation\n    f = Int64[]\n  \
    \  while n % 2 == 0\n        push!(f, 2)\n        n = n \xF7 2\n    end\n    #\
    \ from this point on, all remaining factors are odd\n    d = 3\n    while n >\
    \ 1\n        while n % d == 0\n            push!(f, d)\n            n = n \xF7\
    \ d\n        end\n        d = d + 2\n    end\n    return f\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ zeros(Int64, 0)\n    i = 2\n    while n != 1\n        if n % i == 0\n      \
    \      push!(factors, i)\n            n = n / i\n        else\n            i +=\
    \ 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    divisors =\
    \ []\n    res = n\n    while res > 1\n        divisor = smallest_divisor(res)\n\
    \        push!(divisors, divisor)\n        res = res \xF7 divisor\n    end\n \
    \   return divisors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxmg0nlry.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: smallest_divisor\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpxmg0nlry.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxmg0nlry.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmg0nlry.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpxmg0nlry.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: smallest_divisor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpxmg0nlry.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxmg0nlry.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmg0nlry.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpxmg0nlry.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: smallest_divisor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpxmg0nlry.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxmg0nlry.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmg0nlry.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpxmg0nlry.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: smallest_divisor not defined\\n\
    \  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpxmg0nlry.jl:15\\\
    n   [2] macro expans"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    # continue to take the smallest factor out\n    while n >\
    \ 1\n        while n % i == 0\n            push!(factors, i)\n            n /=\
    \ i\n        end\n        i += 1\n    end\n    return factors\nend\nfactorize(8)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    for i in 2:n\n        if n % i == 0\n       \
    \     return [i] * factorize(n/i)\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj3r3o7zc.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ factorize(::Float64)\\n  Closest candidates are:\\n    factorize(!Matched::Int64)\
    \ at /tmp/tmpj3r3o7zc.jl:11\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n  \
    \   @ Main /tmp/tmpj3r3o7zc.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj3r3o7zc.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj3r3o7zc.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpj3r3o7zc.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching factorize(::Float64)\\\
    n  Closest candidates are:\\n    factorize(!Matched::Int64) at /tmp/tmpj3r3o7zc.jl:11\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpj3r3o7zc.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj3r3o7zc.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj3r3o7zc.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # assuming\
    \ input n is positive\n    factors = Int64[]\n    @inbounds i = 2\n    @inbounds\
    \ while n > 1\n        if n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Iterate\
    \ over the numbers\n    prime_factors = []\n    i = 2\n    while n > 1\n     \
    \   while n % i == 0\n            push!(prime_factors, i)\n            n /= i\n\
    \        end\n        i += 1\n    end\n    prime_factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        if n%i == 0\n            n = n/i\n           \
    \ push!(factors, i)\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_q9q4_ad.jl:27\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q9q4_ad.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q9q4_ad.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_q9q4_ad.jl:28\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q9q4_ad.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q9q4_ad.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_q9q4_ad.jl:30\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q9q4_ad.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q9q4_ad.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_q9q4_ad.jl:31\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_q9q4_ad.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_q9q4_ad.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_q9q4_ad.jl:32\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_q9q4_ad.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\n@testset \"factorize_test\" begin\n    @test factorize(8) == [2,\
    \ 2, 2]\n    @test factorize(25) == [5, 5]\n    @test factorize(70) == [2, 5,\
    \ 7]\nend\n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpdtbqxekf.jl:14\nin expression starting at /tmp/tmpdtbqxekf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    res = []\n    for f in factors\n        push!(res, f)\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_58900fw.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: factor not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp_58900fw.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_58900fw.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_58900fw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_58900fw.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp_58900fw.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_58900fw.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_58900fw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_58900fw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp_58900fw.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_58900fw.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_58900fw.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp_58900fw.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp_58900fw.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    n_int=n\n    i=2\n    while n_int>1\n        if n_int%i==0\n            push!(factors,i)\n\
    \            n_int=n_int/i\n        else\n            i+=1\n        end\n    end\n\
    \    return factors\nend\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    factors = []\n    i = 2\n    while n > 1\n \
    \       if n % i == 0\n            factors = append!(factors, i)\n           \
    \ n = n / i\n        else\n            i += 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    for i in primes(n)\n        for j in 1:n\n            if\
    \ n % i == 0\n                push!(factors, i)\n                n = n / i\n \
    \           end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcy43gmd5.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcy43gmd5.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcy43gmd5.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcy43gmd5.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcy43gmd5.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcy43gmd5.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcy43gmd5.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcy43gmd5.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcy43gmd5.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcy43gmd5.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcy43gmd5.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcy43gmd5.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpcy43gmd5.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcy43gmd5.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    divisible::Bool\
    \ = true\n    divisor::Int64 = 2\n    factors::Vector{Int64} = []\n    while n\
    \ > 1\n        if isprime(divisor)\n            while divisible\n            \
    \    if n % divisor == 0\n                    push!(factors, divisor)\n      \
    \              n = div(n, divisor)\n                else\n                   \
    \ divisible = false\n                end\n            end\n        end\n     \
    \   divisible = true\n        divisor += 1\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpefb3cu5c.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpefb3cu5c.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpefb3cu5c.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpefb3cu5c.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpefb3cu5c.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpefb3cu5c.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpefb3cu5c.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpefb3cu5c.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpefb3cu5c.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpefb3cu5c.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpefb3cu5c.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpefb3cu5c.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpefb3cu5c.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpefb3cu5c.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    d = 2\n    while d <= n\n        if mod(n, d) == 0\n            push!(factors,\
    \ d)\n            n = div(n, d)\n        else\n            d += 1\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n%2 == 0\n        push!(prime_factors, 2)\n        n /= 2\n\
    \    end\n    for i in 3:Int64(sqrt(n))\n        while n%i == 0\n            push!(prime_factors,\
    \ i)\n            n /= i\n        end\n    end\n    if n > 2\n        push!(prime_factors,\
    \ n)\n    end\n    return prime_factors\nend\nfactorize(70)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: InexactError: Int64(5.916079783099616)\nStacktrace:\n\
    \ [1] Int64\n   @ ./float.jl:812 [inlined]\n [2] factorize(n::Int64)\n   @ Main\
    \ /tmp/tmp3sqjxcqd.jl:17\n [3] top-level scope\n   @ /tmp/tmp3sqjxcqd.jl:28\n\
    in expression starting at /tmp/tmp3sqjxcqd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # final list\
    \ of factors\n    factors = Int64[]\n    # current number\n    cn = n\n    while\
    \ true\n        # find smallest factor of the current number\n        sf = smallest_factor(cn)\n\
    \        # if no factor found, break\n        if sf == 0\n            break\n\
    \        end\n        # append found factor to the list\n        push!(factors,\
    \ sf)\n        # continue with the quotient\n        cn = cn / sf\n    end\n \
    \   return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph8dmfs61.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: smallest_factor\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmph8dmfs61.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph8dmfs61.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph8dmfs61.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmph8dmfs61.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: smallest_factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmph8dmfs61.jl:18\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph8dmfs61.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph8dmfs61.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmph8dmfs61.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: smallest_factor not defined\\n\
    \  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmph8dmfs61.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmph8dmfs61.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmph8dmfs61.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmph8dmfs61.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: smallest_factor not defined\\n \
    \ Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmph8dmfs61.jl:18\\\
    n   [2] macro expansion\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factor_list\
    \ = []\n    # find prime factors of n in the loop below\n    i = 2\n    while\
    \ n > 1 \n        while n % i == 0\n            n = n / i\n            push!(factor_list,\
    \ i)\n        end\n        i += 1\n    end\n    return factor_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return Int64[]\n    end\n    if n < 2\n        error(\"Input n is not\
    \ positive integer\")\n    end\n    factors = Int64[]\n    current = n\n    #\
    \ if current is not 1\n    while current != 1\n        for d in 2:current\n  \
    \          # check if d divides current\n            if d * d > current \n   \
    \             push!(factors, current)\n                current = 1\n         \
    \       break\n            end\n            if current % d == 0\n            \
    \    push!(factors, d)\n                current = current / d\n              \
    \  break\n            end\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    for i in primes(n)\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqg8vn1gl.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpqg8vn1gl.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqg8vn1gl.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqg8vn1gl.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpqg8vn1gl.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpqg8vn1gl.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqg8vn1gl.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqg8vn1gl.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpqg8vn1gl.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpqg8vn1gl.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqg8vn1gl.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqg8vn1gl.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpqg8vn1gl.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpqg8vn1gl.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n \
    \   end\n    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n       \
    \     push!(factors, i)\n            n /= i\n        end\n        i += 2\n   \
    \ end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # n is a number\
    \ to factorize\n    # Write your code here\n    factors = Int64[]\n    for i =\
    \ 2:n\n        while n % i == 0\n            push!(factors, i)\n            n\
    \ /= i\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = []\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkf7vw3ed.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkf7vw3ed.jl:1\n\
    in expression starting at /tmp/tmpkf7vw3ed.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = sieve(n)\n\
    \    prime_factors = Int64[]\n    for prime in primes\n        while n % prime\
    \ == 0\n            push!(prime_factors, prime)\n            n /= prime\n    \
    \    end\n    end\n    prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp648fs6tx.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: sieve not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp648fs6tx.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp648fs6tx.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp648fs6tx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp648fs6tx.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: sieve not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp648fs6tx.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp648fs6tx.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp648fs6tx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp648fs6tx.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: sieve not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp648fs6tx.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp648fs6tx.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp648fs6tx.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp648fs6tx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: sieve not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp648fs6tx.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/shar"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # PUT YOUR\
    \ CODE HERE\n    # We factorize n with trial division\n    factors = [i for i\
    \ in 2:round(Int64,sqrt(n)) if isprime(i) && mod(n,i)==0]\n    # Now, we consider\
    \ the case when n is a prime number\n    if isempty(factors)\n        return [n]\n\
    \    else\n        return map(x->Int64(div(n,x)), factors)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgq7bhz_e.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(4) == [2, 2]\\n  UndefVarError: isprime\
    \ not defined\\n  Stacktrace:\\n    [1] (::var\"#1#3\"{Int64})(i::Int64)\\n  \
    \    @ Main ./none:0\\n    [2] iterate\\n      @ ./iterators.jl:447 [inlined]\\\
    n    [3] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\"{Int64}, UnitRange{Int64}},\
    \ typeof(identity)})\\n      @ Base ./array.jl:797\\n    [5] collect\\n      @\
    \ ./array.jl:721 [inlined]\\n    [6] factorize(n::Int64)\\n      @ Main /tmp/tmpgq7bhz_e.jl:14\\\
    n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpgq7bhz_e.jl:28 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpgq7bhz_e.jl:26\\ntest\
    \ set: Error During Test at /tmp/tmpgq7bhz_e.jl:29\\n  Test threw exception\\\
    n  Expression: candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\\
    n  Stacktrace:\\n    [1] (::var\"#1#3\"{Int64})(i::Int64)\\n      @ Main ./none:0\\\
    n    [2] iterate\\n      @ ./iterators.jl:447 [inlined]\\n    [3] iterate\\n \
    \     @ ./generator.jl:44 [inlined]\\n    [4] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#3\"{Int64}, UnitRange{Int64}}, typeof(identity)})\\n      @ Base ./array.jl:797\\\
    n    [5] collect\\n      @ ./array.jl:721 [inlined]\\n    [6] factorize(n::Int64)\\\
    n      @ Main /tmp/tmpgq7bhz_e.jl:14\\n    [7] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpgq7bhz_e.jl:29 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpgq7bhz_e.jl:26\\ntest\
    \ set: Error During Test at /tmp/tmpgq7bhz_e.jl:30\\n  Test threw excepti"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    remainder = n\n    while remainder > 1\n        factor\
    \ = factor(remainder)\n        push!(factors, factor)\n        remainder = remainder\
    \ / factor\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4iqnqe67.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: factor not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp4iqnqe67.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4iqnqe67.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4iqnqe67.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4iqnqe67.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp4iqnqe67.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4iqnqe67.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4iqnqe67.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4iqnqe67.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp4iqnqe67.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp4iqnqe67.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp4iqnqe67.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp4iqnqe67.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp4iqnqe67.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    counter = 2\n    while counter*counter <= n\n        while n % counter\
    \ == 0\n            push!(factors, counter)\n            n /= counter\n      \
    \  end\n        counter += 1\n    end\n    if n > 1\n        push!(factors, n)\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    f = 2\n    while n > 1\n        if n % f == 0\n            push!(factors,\
    \ f)\n            n = n/f\n        else\n            f += 1\n        end\n   \
    \ end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    root_n = sqrt(n)\n    while n%2 == 0\n        push!(prime_factors,\
    \ 2)\n        n = n/2\n    end\n    i = 3\n    while i < root_n + 1\n        while\
    \ n%i == 0\n            push!(prime_factors, i)\n            n = n/i\n       \
    \ end\n        i += 2\n    end\n    if n > 2\n        push!(prime_factors, n)\n\
    \    end\n    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    prime_factors = []\n    for i = 2:n\n        if isprime(i) && n %\
    \ i == 0\n            push!(prime_factors, i)\n            n = n/i\n         \
    \   i = i - 1\n        end\n    end\n    return prime_factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpolhixpmo.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpolhixpmo.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpolhixpmo.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpolhixpmo.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpolhixpmo.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpolhixpmo.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpolhixpmo.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpolhixpmo.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpolhixpmo.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpolhixpmo.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpolhixpmo.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpolhixpmo.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpolhixpmo.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpolhixpmo.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    isprime(x)\
    \ = !haskey(primes, x) && isprime(x)\n    if !isprime(n)\n        return vcat(factorize(primes[n]),\
    \ factorize(div(n, primes[n])))\n    else\n        return [n]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpito17yow.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] (::var\"#isprime#1\")(x::Int64)\\n     @ Main\
    \ /tmp/tmpito17yow.jl:12\\n   [2] factorize(n::Int64)\\n     @ Main /tmp/tmpito17yow.jl:13\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpito17yow.jl:24 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpito17yow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpito17yow.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#isprime#1\")(x::Int64)\\n     @ Main /tmp/tmpito17yow.jl:12\\\
    n   [2] factorize(n::Int64)\\n     @ Main /tmp/tmpito17yow.jl:13\\n   [3] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpito17yow.jl:25 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpito17yow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpito17yow.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#isprime#1\")(x::Int64)\\n     @ Main /tmp/tmpito17yow.jl:12\\\
    n   [2] factorize(n::Int64)\\n     @ Main /tmp/tmpito17yow.jl:13\\n   [3] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpito17yow.jl:26 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpito17yow.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpito17yow.jl:27\\n  Test threw exce"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    factor = 2\n    while n > 1\n        while n % factor == 0\n       \
    \     push!(factors, factor)\n            n /= factor\n        end\n        factor\
    \ += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return Vector{Int64}([])\n    end\n    factors = Vector{Int64}([])\n\
    \    for i in 2:n\n        if isprime(i) && n % i == 0\n            count = 0\n\
    \            while n % i == 0\n                n = div(n, i)\n               \
    \ count += 1\n            end\n            push!(factors, i * count)\n       \
    \ end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2h6lrf2n.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2h6lrf2n.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2h6lrf2n.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2h6lrf2n.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp2h6lrf2n.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2h6lrf2n.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2h6lrf2n.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2h6lrf2n.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp2h6lrf2n.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2h6lrf2n.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2h6lrf2n.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2h6lrf2n.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp2h6lrf2n.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp2h6lrf2n.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n\
    \    prime_factors = primes(n)\n    while n != 1\n        for p in prime_factors\n\
    \            if n % p == 0\n                result = push!(result, p)\n      \
    \          n = n / p\n                continue\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnx1ucjqr.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnx1ucjqr.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnx1ucjqr.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnx1ucjqr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpnx1ucjqr.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnx1ucjqr.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnx1ucjqr.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnx1ucjqr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpnx1ucjqr.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnx1ucjqr.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnx1ucjqr.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnx1ucjqr.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpnx1ucjqr.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpnx1ucjqr.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Int64[]\n\
    \    while n % 2 == 0\n        push!(result, 2)\n        n /= 2\n    end\n   \
    \ i = 3\n    while i * i <= n\n        while n % i == 0\n            push!(result,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(result, n)\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    array = []\n\
    \    for i in 2:n\n        while n % i == 0\n            push!(array, i)\n   \
    \         n = n/i\n        end\n    end\n    return array\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    p = Int64[]\
    \ # list of prime factors\n    c = n # current value that is being factorized\n\
    \    for i in 2:n # for each integer\n        if c%i == 0 # if c is divisible\
    \ by i\n            push!(p, i) # add i to list\n            c = c/i # divide\
    \ c by i\n        end\n    end\n    return p\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlan2gzv.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlan2gzv.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlan2gzv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmlan2gzv.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlan2gzv.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlan2gzv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmlan2gzv.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlan2gzv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlan2gzv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmlan2gzv.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlan2gzv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlan2gzv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpmlan2gzv.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlan2gzv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    fac = Int64[]\n\
    \    while n>1\n        for i in 2:n\n            if n%i==0\n                push!(fac,i)\n\
    \                n = n/i\n                break\n            end\n        end\n\
    \    end\n    return fac\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = Int64[]\n\
    \    i = 2\n    while n != 1\n        while n % i == 0\n            push!(res,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    i=2\n    while n>1\n        while n%i==0\n            push!(factors,i)\n\
    \            n=n/i\n        end\n        i+=1\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return []\n    end\n    for div in primes(n)\n        if n % div == 0\n\
    \            return [div] * divisor_power(n, div) * factorize(n \xF7 div^divisor_power(n,\
    \ div))\n        end\n    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcyrzkmb1.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcyrzkmb1.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcyrzkmb1.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcyrzkmb1.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpcyrzkmb1.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcyrzkmb1.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcyrzkmb1.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcyrzkmb1.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpcyrzkmb1.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcyrzkmb1.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcyrzkmb1.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcyrzkmb1.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpcyrzkmb1.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpcyrzkmb1.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Initialize\
    \ empty vector to hold factors.\n    factors = Int64[]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuxh0f62v.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuxh0f62v.jl:1\n\
    in expression starting at /tmp/tmpuxh0f62v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Vector{Int64}()\n    #factors = []\n    while n % 2 == 0\n        n = n/2\n\
    \        push!(factors, 2)\n    end\n    while n % 3 == 0\n        n = n/3\n \
    \       push!(factors, 3)\n    end\n    i = 5\n    while i <= n\n        while\
    \ n % i == 0\n            n = n/i\n            push!(factors, i)\n        end\n\
    \        i += 2\n    end\n    return factors\nend\nfactorize(70)\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp47a3yihv.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp47a3yihv.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp47a3yihv.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp47a3yihv.jl:18'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n    end\n\
    \    p = 3\n    while n != 1\n        while n % p == 0\n            push!(factors,\
    \ p)\n            n /= p\n        end\n        p += 2\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = Int64[]\n\
    \    while n % 2 == 0\n        push!(result, 2)\n        n /= 2\n    end\n   \
    \ while n % 3 == 0\n        push!(result, 3)\n        n /= 3\n    end\n    while\
    \ n % 5 == 0\n        push!(result, 5)\n        n /= 5\n    end\n    # At this\
    \ point, n > 3 and not divisible by 2, 3, 5\n    # We can start with the next\
    \ \"stop\" number 7\n    # (7, 11, 13, 17, ...), since the loop only \"traps\"\
    \ for numbers that are\n    # divisible by 2, 3, 5, we are sure that at some point\
    \ we will find out\n    # that number is equal to 1 and we can stop the algorithm\n\
    \    stop = 7\n    while n > 1\n        while n % stop == 0\n            push!(result,\
    \ stop)\n            n /= stop\n        end\n        stop += 4\n        while\
    \ n % stop == 0\n            push!(result, stop)\n            n /= stop\n    \
    \    end\n        stop += 2\n        while n % stop == 0\n            push!(result,\
    \ stop)\n            n /= stop\n        end\n        stop += 4\n    end\n    return\
    \ result\nend\n```\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5x6age8.jl:50\nin expression starting at\
    \ /tmp/tmp_5x6age8.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factorize(n, primes(n))\n    return factors[findall(factors .!= 0)]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6enrzo8v.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6enrzo8v.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6enrzo8v.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6enrzo8v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6enrzo8v.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6enrzo8v.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6enrzo8v.jl:21 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6enrzo8v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6enrzo8v.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6enrzo8v.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6enrzo8v.jl:22 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6enrzo8v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6enrzo8v.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6enrzo8v.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\n\
    end\n\"\"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv1x0wbkj.jl:14\nin expression starting at /tmp/tmpv1x0wbkj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = primesbelow(sqrt(n))\n\
    \    factors = []\n    for i in primes\n        while n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpilklt0wc.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primesbelow\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpilklt0wc.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpilklt0wc.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpilklt0wc.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpilklt0wc.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primesbelow not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpilklt0wc.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpilklt0wc.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpilklt0wc.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpilklt0wc.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primesbelow not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpilklt0wc.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpilklt0wc.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpilklt0wc.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpilklt0wc.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primesbelow not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpilklt0wc.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        prime = primes[1]\n        while n % prime != 0\n\
    \            prime = nextprime(prime)\n        end\n        push!(factors, prime)\n\
    \        n = n // prime\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6j5y4d7j.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6j5y4d7j.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6j5y4d7j.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6j5y4d7j.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp6j5y4d7j.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6j5y4d7j.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6j5y4d7j.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6j5y4d7j.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp6j5y4d7j.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6j5y4d7j.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6j5y4d7j.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6j5y4d7j.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp6j5y4d7j.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6j5y4d7j.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = factor(n)\n\
    \    r = zeros(Int64, length(primes))\n    for i = 1:length(primes)\n        r[i]\
    \ = count(primes .== primes[i])\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi7bu_ee5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: factor not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi7bu_ee5.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi7bu_ee5.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi7bu_ee5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi7bu_ee5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi7bu_ee5.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi7bu_ee5.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi7bu_ee5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi7bu_ee5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi7bu_ee5.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi7bu_ee5.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi7bu_ee5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpi7bu_ee5.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi7bu_ee5.jl:12\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    facs = []\n\
    \    divisor = 2\n    while n > 1\n        if n % divisor == 0\n            push!(facs,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor +=\
    \ 1\n        end\n    end\n    return facs\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # if n is\
    \ prime, n itself is the only prime factor\n    if isprime(n)\n        return\
    \ [n]\n    end\n    # find the smallest factor:\n    factor = 2\n    while !isprime(n)\n\
    \        if n % factor == 0\n            return [factor] + factorize(n \xF7 factor)\n\
    \        end\n        factor += 1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvftublik.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpvftublik.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvftublik.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvftublik.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpvftublik.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpvftublik.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvftublik.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvftublik.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpvftublik.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpvftublik.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvftublik.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvftublik.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpvftublik.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpvftublik.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = []\n \
    \   for i = 2:n\n        if n % i == 0\n            push!(f, i)\n            n\
    \ = n / i\n            i = i - 1\n        end\n    end\n    return f\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5e4rxd65.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e4rxd65.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e4rxd65.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5e4rxd65.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e4rxd65.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e4rxd65.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5e4rxd65.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e4rxd65.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e4rxd65.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5e4rxd65.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5e4rxd65.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5e4rxd65.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5e4rxd65.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5e4rxd65.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # for n=p1^a1*p2^a2*...*pn^an\
    \ output is vector [p1,p1,...,p1,p2,p2,...,p2,...,pn,pn,...,pn]\n    # with a1,a2,...,an\
    \ copies of prime factors\n    primes = primes_list(n)\n    res = Int64[]\n  \
    \  for p in primes\n        while mod(n,p)==0\n            push!(res,p)\n    \
    \        n = div(n,p)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb6h1e6mt.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes_list\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpb6h1e6mt.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb6h1e6mt.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb6h1e6mt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb6h1e6mt.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes_list not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpb6h1e6mt.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb6h1e6mt.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb6h1e6mt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb6h1e6mt.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes_list not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpb6h1e6mt.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpb6h1e6mt.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb6h1e6mt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb6h1e6mt.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes_list not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpb6h1e6mt.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyxhsx2v3.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpyxhsx2v3.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyxhsx2v3.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyxhsx2v3.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = Int64[] # \u043A\u0430\u043A \u043E\u0431\u044A\u044F\u0432\u0438\u0442\u044C\
    \ \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\u0430\u0441\u0441\u0438\u0432, \u0438\
    \u0437\u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E \u0438\u0437\u0432\u0435\
    \u0441\u0442\u043D\u043E\u0439 \u0434\u043B\u0438\u043D\u044B? \n    i = 2\n \
    \   while n > 1\n        if n % i == 0\n            push!(prime_factors, i)\n\
    \            n = n / i\n        else\n            i += 1\n        end\n    end\n\
    \    return prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 0\n\
    \        n = -n\n    end\n    P = primes(n)\n    @assert n > 1 \"The number must\
    \ be greater than 1.\"\n    @assert n == 1 || !(n % 2 == 0) \"The number must\
    \ be odd.\"\n    F = []\n    while n != 1\n        for p in P\n            if\
    \ n % p == 0\n                push!(F, p)\n                n = n / p\n       \
    \         break\n            end\n        end\n    end\n    return F\nend\nfactorize(70)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: primes not defined\nStacktrace:\n [1]\
    \ factorize(n::Int64)\n   @ Main /tmp/tmpj7s5ucuv.jl:15\n [2] top-level scope\n\
    \   @ /tmp/tmpj7s5ucuv.jl:30\nin expression starting at /tmp/tmpj7s5ucuv.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    factor = 2\n    while n > 1\n        if n % factor == 0\n          \
    \  push!(factors, factor)\n            n = n / factor\n        else\n        \
    \    factor += 1\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n != 1\n        while n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n        end\n        i += 1\n    end\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    p = 2\n    while n != 1\n        if n % p == 0\n            push!(factors,\
    \ p)\n            n = n / p\n        else\n            p += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    sq = Int64(sqrt(n))\n\
    \    a = collect(2:sq)\n    b = collect(sq+1:n)\n    res = filter(x -> isdiv(n,x),\
    \ a)\n    for i in b\n        if isdiv(n,i)\n            push!(res,i)\n      \
    \  end\n    end\n    res\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5a93ahpu.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  InexactError: Int64(1.4142135623730951)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmp5a93ahpu.jl:12\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5a93ahpu.jl:28 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5a93ahpu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5a93ahpu.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isdiv not defined\\n  Stacktrace:\\\
    n   [1] (::var\"#1#2\"{Int64})(x::Int64)\\n     @ Main /tmp/tmp5a93ahpu.jl:15\\\
    n   [2] filter(f::var\"#1#2\"{Int64}, a::Vector{Int64})\\n     @ Base ./array.jl:2484\\\
    n   [3] factorize(n::Int64)\\n     @ Main /tmp/tmp5a93ahpu.jl:15\\n   [4] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmp5a93ahpu.jl:29 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp5a93ahpu.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5a93ahpu.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  InexactError: Int64(2.8284271247461903)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:812 [inlined]\\n   [2] factorize(n::Int64)\\\
    n     @ Main /tmp/tmp5a93ahpu.jl:12\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp5a93ahpu.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp5a93ahpu.jl:27\\ntest set:\
    \ Error During Test at "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return [n]\n    end\n    prime_factors = []\n    for i in 2:n\n     \
    \   if isprime(i)\n            for j in 1:floor(log(n)/log(i))\n             \
    \   if isprime(n)\n                    push!(prime_factors, n)\n             \
    \       return prime_factors\n                end\n                if isdiv(n,\
    \ i)\n                    push!(prime_factors, i)\n                    n = n/i\n\
    \                end\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwsfu5qda.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpwsfu5qda.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwsfu5qda.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwsfu5qda.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpwsfu5qda.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpwsfu5qda.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwsfu5qda.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwsfu5qda.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpwsfu5qda.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpwsfu5qda.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwsfu5qda.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwsfu5qda.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpwsfu5qda.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpwsfu5qda.jl:17\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997]\n    factorized = Vector{Int64}()\n    for p in primes\n    \
    \    while n % p == 0\n            push!(factorized, p)\n            n = n / p\n\
    \        end\n    end\n    return factorized\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    curr = 2\n    while n > 1\n        if n % curr == 0\n            push!(factors,\
    \ curr)\n            n = n / curr\n        else\n            curr += 1\n     \
    \   end\n    end\n    return factors\nend\n \n@testset \"Example cases from instructions\"\
    \ begin\n    @test factorize(8) == [2, 2, 2]\n    @test factorize(25) == [5, 5]\n\
    \    @test factorize(70) == [2, 5, 7]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpy7jb7k_0.jl:25\nin expression starting at /tmp/tmpy7jb7k_0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # <your code\
    \ here>\nend;\n@testset \"factorize tests\" begin\n    @test factorize(8) == [2,\
    \ 2, 2]\n    @test factorize(25) == [5, 5]\n    @test factorize(70) == [2, 5,\
    \ 7]\nend;\n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp9ngutz2d.jl:14\nin expression starting at /tmp/tmp9ngutz2d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    is_prime(x)\
    \ = x > 1 && all(rem(x, i) != 0 for i = 2:floor(Int, sqrt(x)))\n    if is_prime(n)\n\
    \        return [n]\n    else\n        factorize(n/primefactors(n)[1])\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbxyc1uq6.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(4) == [2, 2]\\n  UndefVarError: primefactors\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbxyc1uq6.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbxyc1uq6.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbxyc1uq6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbxyc1uq6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primefactors not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbxyc1uq6.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbxyc1uq6.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbxyc1uq6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbxyc1uq6.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primefactors not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbxyc1uq6.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbxyc1uq6.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbxyc1uq6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbxyc1uq6.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(3249) == [3, 3, 19, 19]\\n  UndefVarError: primefactors not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbxyc1uq6.jl:16\\\
    n   [2] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while n>1\n        while n%divisor == 0\n         \
    \   push!(factors, divisor)\n            n = n/divisor\n        end\n        divisor\
    \ = divisor + 1\n    end\n    return factors\nend\nfactorize(8)\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n   prime_factors\
    \ = []\n   for i in primes(Int64(n))\n       while n % i == 0\n           push!(prime_factors,\
    \ i)\n           n = n / i\n       end\n   end\n   return prime_factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpch5tj0le.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpch5tj0le.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpch5tj0le.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpch5tj0le.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpch5tj0le.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpch5tj0le.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpch5tj0le.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpch5tj0le.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpch5tj0le.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpch5tj0le.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpch5tj0le.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpch5tj0le.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpch5tj0le.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpch5tj0le.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Your code\
    \ here\n    # To get random answer: return rand(1:n, rand(1:10))\n    # Remember\
    \ that every factor should appear number of times corresponding to how many times\
    \ it appears in factorization\n    return rand(1:n, rand(1:10))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpih91s2c7.jl:22\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [1, 1, 1] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih91s2c7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih91s2c7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpih91s2c7.jl:23\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [4, 2, 3, 3, 4, 1, 1, 1, 2] == [2, 2]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih91s2c7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih91s2c7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpih91s2c7.jl:24\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [1] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpih91s2c7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih91s2c7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpih91s2c7.jl:25\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [44, 17, 24] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpih91s2c7.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpih91s2c7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpih91s2c7.jl:26\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [2804, 1302, 332] == [3, 3, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpih91s2c7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    prime_factors\
    \ = []\n    # iterate over each numbers from 2 to sqrt(n)\n    for i in 2:sqrt(n)\n\
    \        # if the current number divides n\n        while n % i == 0\n       \
    \     # store the number\n            push!(prime_factors, i)\n            # divide\
    \ n by the number\n            n = n / i\n        end\n    end\n    # if n is\
    \ greater than 1\n    if n > 1\n        # then it is also a prime factor\n   \
    \     push!(prime_factors, n)\n    end\n    # return all prime factors\n    return\
    \ prime_factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    counter =\
    \ 0\n    result = [1]\n    for i in 2:n\n        if n % i == 0\n            counter\
    \ += 1\n            push!(result, i)\n        end\n    end\n    return sort(result)\n\
    end\nfactorize(70)\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf_zbtqgz.jl:28\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: [1, 2] == [2]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf_zbtqgz.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_zbtqgz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf_zbtqgz.jl:29\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ [1, 2, 4] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_zbtqgz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_zbtqgz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf_zbtqgz.jl:30\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [1, 2, 4, 8] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_zbtqgz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_zbtqgz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf_zbtqgz.jl:31\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [1, 3, 19, 57] == [3, 19]\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf_zbtqgz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf_zbtqgz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpf_zbtqgz.jl:32\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [1, 3, 9, 19, 57, 171, 361, 1083, 3249] == [3, 3, 19, 19]\n\
    Stacktrace:\n [1] macro expansion\n   @ /s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_zbtqgz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 0\n\
    \        return []\n    end\n    factors = Array{Int64}(0)\n    divisor = 2\n\
    \    while divisor <= n\n        if n % divisor == 0\n            push!(factors,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor +=\
    \ 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6jne9n7s.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp6jne9n7s.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6jne9n7s.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6jne9n7s.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i in 2:n\n        counter = 0\n        while n % i == 0\n      \
    \      n = n/i\n            counter += 1\n        end\n        if counter != 0\n\
    \            push!(factors, [i for j in 1:counter])\n        end\n    end\n  \
    \  return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        for i = 2:n\n            if n % i == 0\n      \
    \          push!(factors, i)\n                n = n/i\n                break\n\
    \            end\n        end\n    end\n    return factors\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=[]\n\
    \    p=2\n    while p*p<=n\n        while n%p==0\n            push!(factors,p)\n\
    \            n/=p\n        end\n        p+=1\n    end\n    if n>1\n        push!(factors,n)\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    # iterate over all potential prime factors\n    while n > 1\n      \
    \  factor = nextprime(n)\n        while n % factor == 0\n            n /= factor\n\
    \            push!(factors, factor)\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9e_5wkv4.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: nextprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp9e_5wkv4.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9e_5wkv4.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9e_5wkv4.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp9e_5wkv4.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: nextprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp9e_5wkv4.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9e_5wkv4.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9e_5wkv4.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp9e_5wkv4.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: nextprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp9e_5wkv4.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9e_5wkv4.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9e_5wkv4.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp9e_5wkv4.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: nextprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp9e_5wkv4.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primefactors\
    \ = []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(primefactors,\
    \ i)\n            n = n / i\n        end\n        i += 1\n    end\n    return\
    \ primefactors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    number = n\n\
    \    divider = 2\n    factors = []\n    # While loop will end when n is 1\n  \
    \  while n != 1 \n        # if n is divisible by divider then n is divided by\
    \ divider and the value is pushed to factors vector.\n        # The loop restarts\
    \ with new n value, which is equal to the old n divided by divider.\n        if\
    \ n % divider == 0\n            push!(factors, divider)\n            n = divider(n)\n\
    \        # Else the value of divider is increased by 1\n        else\n       \
    \     divider += 1\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt_7yzzc3.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: objects of type\
    \ Int64 are not callable\\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt_7yzzc3.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt_7yzzc3.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt_7yzzc3.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpt_7yzzc3.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: objects of type Int64 are not callable\\\
    n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt_7yzzc3.jl:21\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt_7yzzc3.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt_7yzzc3.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpt_7yzzc3.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  MethodError: objects of type Int64 are not callable\\\
    n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpt_7yzzc3.jl:21\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt_7yzzc3.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt_7yzzc3.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    current = 2\n    while n > 1\n        if rem(n, current) == 0\n    \
    \        push!(factors, current)\n            n = div(n, current)\n        else\n\
    \            current += 1\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n != 1 && i*i <= n\n        if mod(n, i) == 0\n\
    \            push!(factors, i)\n            n = div(n, i)\n        else\n    \
    \        i += 1\n        end\n    end\n    push!(factors, n)\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    # TODO\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb4havn82.jl:21\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb4havn82.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4havn82.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4havn82.jl:22\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4havn82.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4havn82.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4havn82.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4havn82.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4havn82.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4havn82.jl:24\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4havn82.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4havn82.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb4havn82.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4havn82.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    n_orig = n\n    if n == 1\n        return [1]\n    end\n    for\
    \ i in 2:floor(sqrt(n))\n        num_factors = 0\n        while n % i == 0\n \
    \           n = n/i\n            push!(factors, i)\n        end\n    end\n   \
    \ if n > 1\n        push!(factors, n)\n    end\n    prod = prod(factors)\n   \
    \ if prod != n_orig\n        println(\"Factorization failed: \", n, \" = \", factors)\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmptcu4jkpl.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: prod not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmptcu4jkpl.jl:27\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptcu4jkpl.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptcu4jkpl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmptcu4jkpl.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmptcu4jkpl.jl:27\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptcu4jkpl.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptcu4jkpl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmptcu4jkpl.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmptcu4jkpl.jl:27\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmptcu4jkpl.jl:40 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptcu4jkpl.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmptcu4jkpl.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: prod not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmptcu4jkpl.jl:27\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    for divisor = 2:n\xF72\n        if isprime(divisor)\n            if\
    \ n % divisor == 0\n                push!(prime_factors, divisor)\n          \
    \      n = n \xF7 divisor\n            end\n        end\n    end\n    prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgb972a_e.jl:28\\n  Expression: candidate(2)\
    \ == [2]\\n   Evaluated: Int64[] == [2]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpgb972a_e.jl:28 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpgb972a_e.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for i = 2:n-1\n        if n % i == 0\n            factorize(n / i)\n\
    \            push!(factors, i)\n        end\n    end\n    sort(factors)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3e9t3qkl.jl:26\\n  Expression: candidate(2)\
    \ == [2]\\n   Evaluated: Int64[] == [2]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp3e9t3qkl.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp3e9t3qkl.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp56bmobfk.jl:20\\n  Test threw\
    \ exception\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    i = 2\n  \
    \  res = Vector{Int64}()\n    while n>1\n        if n%i == 0\n            push!(res,\
    \ i)\n            n /= i\n        else\n            i += 1\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = Int64[]\n    for i in primes(n)\n        if n % i == 0\n            push!(prime_factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppwhtisd3.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmppwhtisd3.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppwhtisd3.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppwhtisd3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmppwhtisd3.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmppwhtisd3.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppwhtisd3.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppwhtisd3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmppwhtisd3.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmppwhtisd3.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmppwhtisd3.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppwhtisd3.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmppwhtisd3.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmppwhtisd3.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  factors = []\n\
    \  k = 2\n  while n > 1\n      while n % k == 0\n          push!(factors, k)\n\
    \          n /= k\n      end\n      k += 1\n  end\n  return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # implement\
    \ your code here\n    # don't forget to remove `pass`\n    pass\nend\nfactorize(70)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: pass not defined\nStacktrace:\n [1] factorize(n::Int64)\n\
    \   @ Main /tmp/tmp9shr3q0e.jl:14\n [2] top-level scope\n   @ /tmp/tmp9shr3q0e.jl:16\n\
    in expression starting at /tmp/tmp9shr3q0e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    if n != 1\n        for i in 2:n #\u0437\u0430\u043F\u043E\u043B\u043D\
    \u044F\u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432 \u0444\u0430\u043A\u0442\
    \u043E\u0440\u0430\u043C\u0438\n            while n % i == 0\n               \
    \ push!(factors, i)\n                n /= i\n            end\n        end\n  \
    \  end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    while n > 1\n        k = 2\n        while true\n            if n % k == 0\n\
    \                push!(result, k)\n                n = n/k\n                break\n\
    \            end\n            k += 1\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    while n > 1\n        i = 2\n        while n % i != 0\n           \
    \ i += 1\n        end\n        push!(prime_factors, i)\n        n /= i\n    end\n\
    \    prime_factors\nend\n# TEST\n@testset \"testing factorize\" begin\n    @test\
    \ factorize(8) == [2, 2, 2]\n    @test factorize(25) == [5, 5]\n    @test factorize(70)\
    \ == [2, 5, 7]\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp8yr23n61.jl:24\nin expression starting at /tmp/tmp8yr23n61.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    \n    factors\
    \ = []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    for i in 2:n\n        while n % i == 0\n            n /= i\n     \
    \       push!(prime_factors, i)\n        end\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    primeFactors\
    \ = []\n    d = 2\n    while n > 1\n        while n % d == 0\n            push!(primeFactors,\
    \ d)\n            n /= d\n        end\n        d += 1\n    end\n    return primeFactors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    #print(n)\n\
    \    for i in 2:n-1\n        if mod(n,i) == 0\n            return [i]*(n \xF7\
    \ i)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  \n  factor_list\
    \ = Int64[]\n  while n % 2 == 0\n        push!(factor_list, 2)\n        n = n\
    \ / 2\n    end\n    for i in 3:sqrt(n)\n        while n % i == 0\n           \
    \ push!(factor_list, i)\n            n = n / i\n        end\n    end\n    if n\
    \ > 2\n        push!(factor_list, n)\n    end\n  \n  return factor_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    counter = 2\n    while n != 1\n        while n % counter == 0\n    \
    \        push!(factors, counter)\n            n = n / counter\n        end\n \
    \       counter += 1\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    f = Vector{Int64}()\n\
    \    if n == 1\n        return f\n    end\n    for i in primes(2, n)\n       \
    \ if rem(n, i) == 0\n            push!(f, i)\n            return vcat(f, factorize(div(n,\
    \ i)))\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgnt203z9.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgnt203z9.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgnt203z9.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgnt203z9.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpgnt203z9.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgnt203z9.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgnt203z9.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgnt203z9.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpgnt203z9.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgnt203z9.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgnt203z9.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgnt203z9.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpgnt203z9.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpgnt203z9.jl:16\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  num = n\n  factors\
    \ = []\n  while num > 1\n    factor = find_factor(num)\n    push!(factors, factor)\n\
    \    num = num / factor\n  end\n  return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpalv5u01r.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: find_factor\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpalv5u01r.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpalv5u01r.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpalv5u01r.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpalv5u01r.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: find_factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpalv5u01r.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpalv5u01r.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpalv5u01r.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpalv5u01r.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: find_factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpalv5u01r.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpalv5u01r.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpalv5u01r.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpalv5u01r.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: find_factor not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpalv5u01r.jl:15\\n   [2] macro\
    \ expansion\\n     @ /shared/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    if n == 1 \n        factors = 1\n    else \n        prime = 2\n    \
    \    while n > 1\n            if n % prime == 0\n                push!(factors,\
    \ prime)\n                n = n / prime\n            else \n                prime\
    \ += 1\n            end\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factor_list\
    \ = []\n    prime_factors = primes(n)\n    while n != 1\n        for i in prime_factors\n\
    \            if n % i == 0\n                factor_list = push!(factor_list, i)\n\
    \                n = div(n, i)\n            end\n        end\n    end\n    return\
    \ factor_list\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm0zak1oy.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: primes not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpm0zak1oy.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm0zak1oy.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0zak1oy.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0zak1oy.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpm0zak1oy.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm0zak1oy.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0zak1oy.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0zak1oy.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpm0zak1oy.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm0zak1oy.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0zak1oy.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0zak1oy.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: primes not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpm0zak1oy.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n   if n == 1\n\
    \        return [1]\n    end\n    factors = Int64[]\n    for i = 2:n \n      \
    \  if n % i == 0\n            push!(factors,i)\n            return vcat(factorize(i),factorize(div(n,i)))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    list = Int64[]\n\
    \    factor = 2\n    while n > 1\n        while n % factor == 0\n            push!(list,\
    \ factor)\n            n /= factor\n        end\n        factor += 1\n    end\n\
    \    return list\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ zeros(1,10)\n    k = 1\n    while n % 2 == 0\n        factors[k] = 2\n     \
    \   k = k + 1\n        n = n / 2\n    end\n    # n is odd at this point\n    #\
    \ so we can skip one element (i = i + 2)\n    for i = 3:2:sqrt(n)\n        if\
    \ n % i == 0\n            factors[k] = i\n            k = k + 1\n            n\
    \ = n / i\n        end\n    end\n    # special case if n is a prime number greater\
    \ than 2\n    if n > 2\n        factors[k] = n\n        k = k + 1\n    end\n \
    \   return factors[1:k-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqg_mciv5.jl:44\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqg_mciv5.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqg_mciv5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqg_mciv5.jl:45\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqg_mciv5.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqg_mciv5.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpqg_mciv5.jl:46\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqg_mciv5.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqg_mciv5.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqg_mciv5.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    for d in prime_divisors(n)\n        for m in 1:mult_of_factor(n, d)\n\
    \            push!(factors, d)\n        end\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbem4g638.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: prime_divisors\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbem4g638.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbem4g638.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbem4g638.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbem4g638.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: prime_divisors not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbem4g638.jl:13\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbem4g638.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbem4g638.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbem4g638.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: prime_divisors not defined\\n \
    \ Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbem4g638.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbem4g638.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbem4g638.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpbem4g638.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: prime_divisors not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpbem4g638.jl:13\\n   [2] macro\
    \ expansion\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    counter = 2\n    while counter <= n\n        while n % counter ==\
    \ 0\n            push!(prime_factors, counter)\n            n /= counter\n   \
    \     end\n        counter += 1\n    end\n    return prime_factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    while n > 1\n        if isprime(n)\n            push!(factors,\
    \ n)\n            break\n        end\n        push!(factors, nextprime(n))\n \
    \       n = div(n, factors[end])\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5x0dkgpa.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: isprime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp5x0dkgpa.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x0dkgpa.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x0dkgpa.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5x0dkgpa.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp5x0dkgpa.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x0dkgpa.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x0dkgpa.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5x0dkgpa.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp5x0dkgpa.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp5x0dkgpa.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5x0dkgpa.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp5x0dkgpa.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: isprime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp5x0dkgpa.jl:14\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1."
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    ...\nend\n\
    \ \n    \n\"\"\"Given a list of numbers, return a new list with first prime factor\
    \ of each number.\n    >>> findFirstPrimes([8, 25, 70])\n    [2, 5, 7]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgk7nloy.jl:12\nin expression starting at\
    \ /tmp/tmppgk7nloy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    r = []\n \
    \   divisor = 2\n    while divisor <= n\n        k = 0\n        while n % divisor\
    \ == 0\n            n = n/divisor\n            k += 1\n        end\n        push!(r,\
    \ divisor^k)\n        divisor += 1\n    end\n    return r\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xkydft1.jl:31\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [4] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xkydft1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xkydft1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4xkydft1.jl:32\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [8] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xkydft1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xkydft1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4xkydft1.jl:33\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: [1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19] == [3, 19]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xkydft1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xkydft1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4xkydft1.jl:34\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 361]\
    \ == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xkydft1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xkydft1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4xkydft1.jl:35\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xkydft1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    x = n \n \
    \   A = Array{Int64}(0)\n    for i in 2:floor(Int64, sqrt(x))\n        while (x\
    \ % i == 0) \n            push!(A, i)\n            x = x \xF7 i\n        end\n\
    \    end\n    push!(A, x)\n    A\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmphkcb2pf6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  MethodError: no method matching\
    \ (Array{Int64})(::Int64)\\n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmphkcb2pf6.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphkcb2pf6.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphkcb2pf6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmphkcb2pf6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  MethodError: no method matching (Array{Int64})(::Int64)\\\
    n  Closest candidates are:\\n    (Array{T})(!Matched::LinearAlgebra.AbstractQ)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:563\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:494\\\
    n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, !Matched::Integer, !Matched::Integer)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmphkcb2pf6.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  factors = []\n\
    \  divisor = 2\n  while n > 1\n    if n % divisor == 0\n      push!(factors, divisor)\n\
    \      n = n / divisor\n    else\n      divisor += 1\n    end\n  end\n  return\
    \ factors\nend\nprintln(factorize(8))\nprintln(factorize(25))\nprintln(factorize(70))\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "[2, 2, 2]\n[5, 5]\n[2, 5, 7]\nTest Summary: | Pass  Total\ntest set   \
    \   |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    end\n    i = 2\n    res = Int64[]\n    while i <= n\n\
    \        if n % i == 0\n            push!(res, i)\n            n = n / i\n   \
    \     else\n            i += 1\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    res = Vector{Int64}()\n\
    \    a = 1\n    while a <= n \n        if n % a == 0\n            push!(res, a)\n\
    \            n = n / a\n        else\n            a += 1\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    while n > 1\n        factor = get_next_prime_factor(n)\n        factors\
    \ = append!(factors, factor)\n        n = n / factor\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi_cadzdd.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: get_next_prime_factor\
    \ not defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi_cadzdd.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi_cadzdd.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi_cadzdd.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpi_cadzdd.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: get_next_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi_cadzdd.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi_cadzdd.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi_cadzdd.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpi_cadzdd.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: get_next_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi_cadzdd.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpi_cadzdd.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi_cadzdd.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpi_cadzdd.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(57) == [3, 19]\\n  UndefVarError: get_next_prime_factor not defined\\\
    n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmpi_cadzdd.jl:14\\"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    prime_factors\
    \ = []\n    prime_factors_index = []\n    for f in factor(n)\n        for i =\
    \ 1:length(prime_factors)\n            if f == prime_factors[i]\n            \
    \    prime_factors_index[i] += 1\n                break\n            end\n   \
    \     end\n        push!(prime_factors, f)\n        push!(prime_factors_index,\
    \ 1)\n    end\n    prime_factors = reduce(*, map(p -> p^prime_factors_index[i],\
    \ prime_factors))\n    return prime_factors\nend\nfactorize(1)\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: factor not defined\nStacktrace:\n [1]\
    \ factorize(n::Int64)\n   @ Main /tmp/tmp6e62gywa.jl:14\n [2] top-level scope\n\
    \   @ /tmp/tmp6e62gywa.jl:27\nin expression starting at /tmp/tmp6e62gywa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return Int64[]\n    end\n    current_factor = 2\n    factors = []\n \
    \   while n > 1\n        while n % current_factor == 0\n            push!(factors,\
    \ current_factor)\n            n /= current_factor\n        end\n        current_factor\
    \ += 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    factor = 2\n    while n > 1\n        power = 0\n        while n % factor\
    \ == 0\n            power += 1\n            n /= factor\n        end\n       \
    \ if power > 0\n            push!(result, factor)\n        end\n        factor\
    \ += 1\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7_oz_444.jl:33\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_oz_444.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_oz_444.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_oz_444.jl:34\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_oz_444.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_oz_444.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_oz_444.jl:36\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_oz_444.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_oz_444.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_oz_444.jl:37\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 19] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_oz_444.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_oz_444.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7_oz_444.jl:38\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19] == [3, 19, 19, 19]\nStacktrace:\n [1] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_oz_444.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    i = 2\n    while n > 1\n        count = 0\n        while isprime(i) && n\
    \ % i == 0\n            count += 1\n            n /= i\n        end\n        push!(result,\
    \ fill(i, count))\n        i += 1\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkjor9l7h.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkjor9l7h.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjor9l7h.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjor9l7h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkjor9l7h.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkjor9l7h.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjor9l7h.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjor9l7h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkjor9l7h.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkjor9l7h.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjor9l7h.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjor9l7h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkjor9l7h.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpkjor9l7h.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjor9l7h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n<=1\n\
    \        return([])\n    end\n    fact=[]\n    i=2\n    while i<=n\n        while\
    \ n%i==0\n            push!(fact,i)\n            n/=i\n        end\n        i+=1\n\
    \    end\n    return(fact)\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # Calculate\
    \ exponent for 2\n    n, exp2 = divrem(n, 2)\n    # Calculate exponent for 5\n\
    \    n, exp5 = divrem(n, 5)\n    # Check if we're done\n    if n == 1\n      \
    \  return vcat(repeat([2], exp2), repeat([5], exp5))\n    end\n    # Calculate\
    \ exponent for 3\n    n, exp3 = divrem(n, 3)\n    # Check if we're done\n    if\
    \ n == 1\n        return vcat(repeat([2], exp2), repeat([3], exp3), repeat([5],\
    \ exp5))\n    end\n    # Check if we're done\n    if n == 2 || n == 3 || n ==\
    \ 5\n        return vcat(repeat([2], exp2), repeat([3], exp3), repeat([5], exp5),\
    \ [n])\n    end\n    # We are not done\n    divisor = 6\n    while true\n    \
    \    if is_prime(n)\n            return vcat(repeat([2], exp2), repeat([3], exp3),\
    \ repeat([5], exp5), [n])\n        end\n        next_divisor = next_prime(divisor)\n\
    \        n, is_factor = divrem(n, divisor)\n        if is_factor == 0\n      \
    \      divisor = next_divisor\n        else\n            return vcat(repeat([2],\
    \ exp2), repeat([3], exp3), repeat([5], exp5), repeat([divisor], is_factor), factorize(n))\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp435biqc8.jl:50\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == [2]\\n  UndefVarError: is_prime not\
    \ defined\\n  Stacktrace:\\n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp435biqc8.jl:33\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp435biqc8.jl:50 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp435biqc8.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmp435biqc8.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [2, 2]\\n  UndefVarError: is_prime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp435biqc8.jl:33\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp435biqc8.jl:51 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp435biqc8.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmp435biqc8.jl:52\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [2, 2, 2]\\n  UndefVarError: is_prime not defined\\n  Stacktrace:\\\
    n   [1] factorize(n::Int64)\\n     @ Main /tmp/tmp435biqc8.jl:33\\n   [2] macro\
    \ expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp435biqc8.jl:52 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp435biqc8.jl:49\\ntest set:\
    \ Test Failed at /tmp/tmp435biqc8.jl:53\\n  Expression: candidate(57) == [3, 19]\\\
    n   Evaluated: [2, 3, 3, 5, 5, 5] == [3, 19]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tm"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n  n_copy = n\n\
    \  factors = Int64[]\n  while n_copy > 1\n    # find the first factor \n    factor\
    \ = first_factor(n_copy)\n    push!(factors, factor)\n    n_copy = n_copy / factor\n\
    \  end\n  return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpellff8_t.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: first_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpellff8_t.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpellff8_t.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpellff8_t.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpellff8_t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpellff8_t.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpellff8_t.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpellff8_t.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpellff8_t.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpellff8_t.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpellff8_t.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpellff8_t.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpellff8_t.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: first_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpellff8_t.jl:16\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/sr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpellff8_t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    divisor = 2\n    while divisor <= sqrt(n)\n        if n % divisor ==\
    \ 0\n            push!(factors, divisor)\n            n = n/divisor\n        else\n\
    \            divisor += 1\n        end\n    end\n    return vcat(factors, n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors=Int64[]\n\
    \    while n>1\n        for i=2:n\n            if n%i==0\n                push!(factors,i)\n\
    \                n/=i\n                break\n            end\n        end\n \
    \   end\n    return factors\nend\nfactorize(8)\nfactorize(25)\nfactorize(70)\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n != 1\n        #keep dividing by i until it doesn't\
    \ go evenly\n        while n % i == 0\n            push!(factors, i)\n       \
    \     n = n / i\n        end\n        i += 1\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while n != 1\n        if n % i == 0\n            append!(factors,\
    \ i)\n            n = n/i\n        else\n            i += 1\n        end\n   \
    \ end\n    return factors\nend\nfactors = factorize(num)\n\"\"\"\n    Multiply\
    \ all factors from the list and return the product\n    >>> mul([1, 2, 3])\n \
    \   6\n    >>> mul([4, 4, 4])\n    64\n    >>> mul([2, 2, 4])\n    16\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: num not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_5gbmnff.jl:24\nin expression starting at /tmp/tmp_5gbmnff.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ []\n    i = 2\n    while i <= n\n        if n % i == 0\n            factors\
    \ = [factors..., i]\n            n = n / i\n        else\n            i += 1\n\
    \        end\n    end\n    return factors\nend\n \n \n \n \n\"\"\" Compute the\
    \ number of distinct ways to change amount of coins with given denominations.\n\
    \    >>> knapsack(5, [1, 2, 3])\n    5\n    >>> knapsack(100, [1, 2, 5, 10, 20,\
    \ 50, 100])\n    73682\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpxr0ovyyd.jl:28\nin expression starting at /tmp/tmpxr0ovyyd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    x = 2\n  \
    \  result = Int64[]\n    while x <= n\n        # if x divides n, use divmod \n\
    \        # to divide n by x & find remainder\n        # and if remainder is zero,\
    \ append x to the result list\n        # and set n = q, the quotient\n       \
    \ if rem(n, x) == 0\n            result = append!(result, x)\n            n =\
    \ div(n, x)\n        else\n            x += 1\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    output = []\n\
    \    for i in 2:n\n        if n%i == 0\n            push!(output, i)\n       \
    \     n = n/i\n            i = 1\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpylwdceau.jl:28\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylwdceau.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylwdceau.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpylwdceau.jl:29\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylwdceau.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylwdceau.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpylwdceau.jl:31\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylwdceau.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylwdceau.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpylwdceau.jl:32\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylwdceau.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylwdceau.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpylwdceau.jl:33\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylwdceau.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    k=0\n    i=2\n\
    \    while n>1\n        if n%i==0\n            k=k+1\n            n=n/i\n    \
    \    else\n            i=i+1\n        end\n    end\n    return k\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw0brpb4r.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpw0brpb4r.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw0brpb4r.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw0brpb4r.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpw0brpb4r.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmpw0brpb4r.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw0brpb4r.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0brpb4r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # your code\
    \ goes here\n    if n < 2\n        return []\n    end\n    factors = []\n    while\
    \ n != 1\n        for prime in primes\n            if n % prime == 0\n       \
    \         push!(factors, prime)\n                n = n / prime\n             \
    \   break\n            end\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6t5i47aj.jl:33\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6t5i47aj.jl:18\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6t5i47aj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6t5i47aj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6t5i47aj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6t5i47aj.jl:18\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6t5i47aj.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6t5i47aj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6t5i47aj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6t5i47aj.jl:18\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6t5i47aj.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6t5i47aj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6t5i47aj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6t5i47aj.jl:18\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6t5i47aj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    result = []\n\
    \    while n % 2 == 0\n        n = n / 2\n        push!(result, 2)\n    end\n\
    \    for i in collect(3:2:floor(Int64, sqrt(n)))\n        while n % i == 0\n \
    \           n = n / i\n            push!(result, i)\n        end\n    end\n  \
    \  if n > 2\n        push!(result, n)\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    # If n <=\
    \ 1, return nothing\n    # Else, if n is prime, return it\n    # Else, recursively\
    \ factorize the result of dividing n by primes until n is prime\n    if n <= 1\n\
    \        return []\n    elseif isprime(n)\n        return [n]\n    else\n    \
    \    for p in primes(n)\n            return factorize(n \xF7 p)\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpezqphk_t.jl:30\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpezqphk_t.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezqphk_t.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezqphk_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezqphk_t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpezqphk_t.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezqphk_t.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezqphk_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezqphk_t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpezqphk_t.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezqphk_t.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezqphk_t.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezqphk_t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpezqphk_t.jl:17\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezqphk_t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n     factors =\
    \ []\n    while n > 1\n        factor = smallest_factor(n)\n        push!(factors,\
    \ factor)\n        n = div(n, factor)\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppou9ekjy.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: smallest_factor not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppou9ekjy.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppou9ekjy.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppou9ekjy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppou9ekjy.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: smallest_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppou9ekjy.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppou9ekjy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppou9ekjy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppou9ekjy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: smallest_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppou9ekjy.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppou9ekjy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppou9ekjy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppou9ekjy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: smallest_factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmppou9ekjy.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppou9ekjy.jl:22\n"
  exit_code: 1
  status: SyntaxError
