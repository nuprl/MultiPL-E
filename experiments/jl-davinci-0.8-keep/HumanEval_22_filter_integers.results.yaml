name: HumanEval_22_filter_integers
language: jl
results:
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # function ... end\n    return [x for x in values if isa(x, Int64)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    #filter(x->isinteger(x), values)\n    filter(isinteger, values)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp0zeps003.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp0zeps003.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zeps003.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0zeps003.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp0zeps003.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp0zeps003.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0zeps003.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zeps003.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for i in values\n        if isa(i, Int64)\n  \
    \          push!(integers, i)\n        end\n    end\n    return integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa6kb02p1.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ pass not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpa6kb02p1.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa6kb02p1.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa6kb02p1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa6kb02p1.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpa6kb02p1.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa6kb02p1.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa6kb02p1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa6kb02p1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpa6kb02p1.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa6kb02p1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa6kb02p1.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6kb02p1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your implementation goes here\n    res = []\n    for v in values\n \
    \       if typeof(v) == Int64\n            push!(res, v)\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_list = []\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(int_list, value)\n        end\n    end\n    return int_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Int64[]\n    for value in values\n        if typeof(value)\
    \ == Int64\n            push!(filtered, value)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    new_values = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(new_values, value)\n        end\n    end\n    return new_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in 1:length(values)\n        if !isa(values[i],Int64)\n        \
    \    deleteat!(values,i)\n        end\n    end\n    return values\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpq39ujt03.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  BoundsError:\
    \ attempt to access 3-element Vector{Any} at index [5]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpq39ujt03.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq39ujt03.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq39ujt03.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpq39ujt03.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  BoundsError: attempt\
    \ to access 4-element Vector{Any} at index [5]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpq39ujt03.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq39ujt03.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq39ujt03.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq39ujt03.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(val -> isa(val, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v,Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # TODO: Implement this function\n    # Hint: You can use the isinteger()\
    \ function\n    # Hint: Use `push!` to create an array containing only integers\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwx5kb962.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpwx5kb962.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwx5kb962.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwx5kb962.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwx5kb962.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpwx5kb962.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwx5kb962.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    result = filter(x -> x isa Int64, values)\n    return convert(Vector{Int64},\
    \ result)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [i for i in values if typeof(i) == Int64]\nend\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpyzbo_8gm.jl:10\nin expression\
    \ starting at /tmp/tmpyzbo_8gm.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = Int64[]\n    for v in values\n        if typeof(v) ==\
    \ Int64\n            push!(filtered_values, v)\n        end\n    end\n    return\
    \ filtered_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # Vector{Int64} will help VSCode to autocomplete better\n    filtered\
    \ = Vector{Int64}()\n    for v in values\n        # check if value is really integer\n\
    \        # use `isa` to avoid side effects of `isint` from `Base.convert`\n  \
    \      # see https://github.com/JuliaLang/julia/issues/18076\n        if isa(v,\
    \ Int64)\n            push!(filtered, v)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        #if typeof(value)\
    \ == Int64\n        if isa(value, Int64) # type(value) == Int64 in python\n  \
    \          push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for v in values\n        if isa(v, Int64)\n      \
    \      push!(ints, v)\n        end\n    end\n    return ints\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer_vector = Int64[]\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(integer_vector, value)\n        end\n    end\n   \
    \ return integer_vector\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for i in values\n        if typeof(i) == Int64\n  \
    \          push!(filtered, i)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for i in values\n        if typeof(i) == Int64\n  \
    \          push!(filtered, i)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqsomx5qy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpqsomx5qy.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqsomx5qy.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqsomx5qy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpqsomx5qy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpqsomx5qy.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqsomx5qy.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqsomx5qy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyerlkks6.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpyerlkks6.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyerlkks6.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyerlkks6.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpyerlkks6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpyerlkks6.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyerlkks6.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyerlkks6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    c = count(values)\n    i = 1\n    new_array = Vector{Int64}()\n    while\
    \ i <= c\n        if !(typeof(values[i]) == Float64) && !(typeof(values[i]) ==\
    \ Float32)\n            push!(new_array,values[i])\n        end\n        i = i\
    \ + 1\n    end\n    return new_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo8x9m0dc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  TypeError:\
    \ non-boolean (Int64) used in boolean context\n  Stacktrace:\n    [1] _simple_count\n\
    \      @ ./reduce.jl:1206 [inlined]\n    [2] _count\n      @ ./reducedim.jl:407\
    \ [inlined]\n    [3] #count#735\n      @ ./reducedim.jl:405 [inlined]\n    [4]\
    \ #count#734\n      @ ./reducedim.jl:404 [inlined]\n    [5] count\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [6] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpo8x9m0dc.jl:8\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpo8x9m0dc.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpo8x9m0dc.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpo8x9m0dc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  TypeError: non-boolean\
    \ (Int64) used in boolean context\n  Stacktrace:\n    [1] _simple_count\n    \
    \  @ ./reduce.jl:1206 [inlined]\n    [2] _count\n      @ ./reducedim.jl:407 [inlined]\n\
    \    [3] #count#735\n      @ ./reducedim.jl:405 [inlined]\n    [4] #count#734\n\
    \      @ ./reducedim.jl:404 [inlined]\n    [5] count\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [6] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpo8x9m0dc.jl:8\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpo8x9m0dc.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpo8x9m0dc.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8x9m0dc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for v in values\n        if typeof(v) <: Int64\n            println(v)\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmvjlw_jo.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpmvjlw_jo.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmvjlw_jo.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmvjlw_jo.jl:18\n4\n9\ntest\
    \ set: Error During Test at /tmp/tmpmvjlw_jo.jl:20\n  Test threw exception\n \
    \ Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpmvjlw_jo.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvjlw_jo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # not needed for this problem, but it good to have a docstring\n    #\
    \ that explains what the function does.\n    # This is also useful for future\
    \ testing as in the example above\n    \n    # Create a new array\n    filtered_values\
    \ = Int64[]\n    \n    # Add to the array with a push!\n    for i in values\n\
    \        if typeof(i) == Int64\n            push!(filtered_values, i)\n      \
    \  end\n    end\n    \n    # Return the array\n    return filtered_values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = []\n    for x in values\n        if typeof(x) == Int64\n\
    \            push!(filtered_values, x)\n        end\n    end\n    return filtered_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = []\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(filtered_values, value)\n        end\n    end\n    return filtered_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # create an empty vector to store integers\n    result = Vector{Int64}()\n\
    \    # iterate over all values in the input vector\n    for i in values\n    \
    \    # test if current value is an integer\n        if isa(i, Int64)\n       \
    \     # append current value to the result vector\n            push!(result, i)\n\
    \        end\n    end\n    # return final result\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nfilter_integers(['a', 3.14, 5])\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching isinteger(::Char)'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0bmtk4jm.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp0bmtk4jm.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0bmtk4jm.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0bmtk4jm.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0bmtk4jm.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp0bmtk4jm.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0bmtk4jm.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bmtk4jm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = []\n    for i in values\n        if isa(i, Int64) \n      \
    \      push!(filtered, i)\n        end\n    end\n    return filtered\nend\n# Test\n\
    filter_integers(['a', 3.14, 5])\nfilter_integers([1, 2, 3, 'abc', {}, []])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhs_r6ru.jl:18\nin expression\
    \ starting at /tmp/tmpuhs_r6ru.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(i -> isa(i, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    # You are supposed to implement this\n    return\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpm37u6jq0.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpm37u6jq0.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm37u6jq0.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm37u6jq0.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpm37u6jq0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpm37u6jq0.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm37u6jq0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value)==Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\"\n    Filter given list of any python values only for integers\n\
    \    >> filter_integers(['a', 3.14, 5])\n    [5]\n    >> filter_integers([1, 2,\
    \ 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    #Your code here\n    #pass\n\
    \    return [i for i in values if typeof(i) == Int64]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Vector{Int64}()\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(filtered, v)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vec = []\n    for x in values\n        if typeof(x) == Int64\n       \
    \     push!(vec, x)\n        end\n    end\n    return vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpa4vc848o.jl:10\nin expression\
    \ starting at /tmp/tmpa4vc848o.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> isa(v, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # TODO your code goes here\nend\n```\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aydq4f5.jl:10\nin expression starting at\
    \ /tmp/tmp7aydq4f5.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    return filter(x -> x isa Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Array{Int64, 1}()\n    for val in values\n        if (typeof(val)\
    \ == Int64)\n            append!(filtered, val)\n        end\n    end\n    return\
    \ filtered\nend\n\"\"\" Convert given list of any python values to list of integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp4cy1rz5g.jl:16\nin expression starting at /tmp/tmp4cy1rz5g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    A = []\n    for i in values\n        if isa(i,Int64)\n            push!(A,i)\n\
    \        end\n    end\n    return A\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(isinteger, values)\nend\nfilter_integers(values::Vector{Any})::Vector{Int64}\
    \ = filter(isinteger, values)\nfilter_integers(values::Vector{Any})::Vector{Int64}\
    \ = filter(isinteger, values)\nfilter_integers(values::Vector{Any})::Vector{Int64}\
    \ = filter(isinteger, values)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3aaaegh9.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp3aaaegh9.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3aaaegh9.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3aaaegh9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3aaaegh9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp3aaaegh9.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3aaaegh9.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3aaaegh9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ x for x in values if typeof(x) == Int64 ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints_only = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(ints_only, value)\n        end\n    end\n    return\
    \ ints_only\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if typeof(v)==Int64]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # Create local helper function\n    function isint(x) \n        return\
    \ isa(x, Int64)\n    end\n    # Filter by `isint` function\n    return filter(isint,\
    \ values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for value in values\n        if typeof(value) == Int64\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    final_list = []\n    for value in values\n        if isa(value, Int64)\n\
    \            append!(final_list, value)\n        end\n    end\n    return final_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your implementation\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1djc1v6h.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp1djc1v6h.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1djc1v6h.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1djc1v6h.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1djc1v6h.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp1djc1v6h.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1djc1v6h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk9qno8oi.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpk9qno8oi.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9qno8oi.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9qno8oi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpk9qno8oi.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpk9qno8oi.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9qno8oi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    output = []\n    for i in values\n        if typeof(i) == Int64\n    \
    \        push!(output, i)\n        end\n    end\n    return output\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \n    \n    return filter(x\
    \ -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n   # YOUR CODE HERE\n   return filter(x -> isa(x,Int64), values)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    found_integers = Int64[]\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(found_integers, v)\n        end\n    end\n    return found_integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(filtered, value)\n        end\n    end\n    return\
    \ filtered\nend\n    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return [v for v in values if typeof(v) == Int64]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    output_list = Int64[]\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(output_list, value)\n        end\n    end\n    return\
    \ output_list\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # here comes the implementation of the function\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxezice6k.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpxezice6k.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxezice6k.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxezice6k.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxezice6k.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpxezice6k.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxezice6k.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [a for a in values if typeof(a) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    arr = Int64[]\n    for v in values\n        if typeof(v) == Int64\n  \
    \          push!(arr, v)\n        end\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # could not get this working as a comprehension\n    # see https://github.com/JuliaLang/julia/issues/13340\n\
    \    result = Vector{Int64}()\n    for i in values\n        if typeof(i) == Int64\n\
    \            push!(result, i)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do v \n        typeof(v) == Int64\n    end\nend\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = filter(x -> typeof(x) == Int64, values)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ v for v in values if typeof(v) == Int64 ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [ x for x in values if\
    \ isa(x, Integer) ]\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  @assert isempty(values)==false \"values argument cannot be empty vector\"\
    \n  filtered = filter(value -> isa(value, Int64), values)\n  return collect(filtered)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpnwei4yj7.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  AssertionError:\
    \ values argument cannot be empty vector\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpnwei4yj7.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwei4yj7.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwei4yj7.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwei4yj7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = [v for v in values if typeof(v) == Int64]\n    return values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Vector{Int64}()\n    for i in values\n        if isa(i, Int64)\n\
    \            push!(ints, i)\n        end\n    end\n    return ints\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    b = filter(isinteger, values)\n    return convert(Vector{Int64}, b)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp3xfp8788.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp3xfp8788.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3xfp8788.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3xfp8788.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp3xfp8788.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp3xfp8788.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3xfp8788.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xfp8788.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # For loop version\n    # integers = Vector{Int64}()\n    # for value\
    \ in values\n    #     if isa(value,Int64) push!(integers,value) end\n    # end\n\
    \    # return integers\n    \n    # vectorized\n    return collect(filter(value\
    \ -> isa(value,Int64), values))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\n \n\
    filter_integers([1, 2, 3, 'abc', {}, []])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpaexn7z84.jl:11\nin expression\
    \ starting at /tmp/tmpaexn7z84.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> isa(x, Int64), values)\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [val for val in values if typeof(val) == Int64]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer_list = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(integer_list, value)\n        end\n    end\n    return\
    \ integer_list\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # numbers = Any[]\n    numbers = []\n    for i in values\n        if isa(i,\
    \ Int64)\n            push!(numbers, i)\n        end\n    end\n    return numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  new_list = []\n  for x in values\n    isinteger(x) ? push!(new_list, x)\
    \ : continue\n  end\n  return new_list\nend\nfilter_integers(['a', 3.14, 5])\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching isinteger(::Char)'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_nums = Int64[]\n    for i in values\n        if isa(i, Int64)\n  \
    \          push!(int_nums, i)\n        end\n    end\n    return int_nums\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = []\n    for e in values\n        if typeof(e) == Int64\n       \
    \     push!(res, e)\n        end\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [val for val in values if typeof(val) is Int64]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp_p80hv67.jl:8\nin expression starting at /tmp/tmp_p80hv67.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if\
    \ typeof(x) == Int64]\nend\nfilter_integers(['a', 3.14, 5])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> x isa Int64, values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ka_rwu8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp3ka_rwu8.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ka_rwu8.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ka_rwu8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3ka_rwu8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp3ka_rwu8.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ka_rwu8.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ka_rwu8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxo6xlydq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpxo6xlydq.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxo6xlydq.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxo6xlydq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxo6xlydq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpxo6xlydq.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxo6xlydq.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxo6xlydq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  filter(x -> isa(x,Int64), values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [i for i in values if typeof(i) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [v for v in values if isa(v, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your implementation here\n    filter(isinteger, values)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpa0svg2nl.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpa0svg2nl.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa0svg2nl.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa0svg2nl.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa0svg2nl.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpa0svg2nl.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa0svg2nl.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0svg2nl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    new_list = filter(x -> typeof(x) == Int64, values)\n    return new_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your code here\n    return filter(x -> isa(x, Int64), values)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # create an empty vector of integers\n    filtered = Vector{Int64}()\n\
    \    # append all integers from values to filtered\n    for i in values\n    \
    \    if typeof(i) == Int64\n            push!(filtered, i)\n        end\n    end\n\
    \    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Array{Int64, 1}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(integers, value)\n        end\n    end\n    return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x,Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n   return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do (v::Any)\n        typeof(v) == Int64\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do item\n        isa(item, Int64)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    nums = Int64[]\n    for val in values\n        isinteger(val) && push!(nums,\
    \ val)\n    end\n    return nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfdjh5fo.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpmfdjh5fo.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmfdjh5fo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfdjh5fo.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmfdjh5fo.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpmfdjh5fo.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmfdjh5fo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfdjh5fo.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfdjh5fo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(value -> isa(value, Int64), values)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  result = []\n  for v in values\n    if typeof(v) == Int64\n      push!(result,\
    \ v)\n    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # YOUR CODE HERE\n    # We will call function \"filter_values\" with function\
    \ \"is_integer\" as an argument\n    filter_values(values, is_integer)\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp8i_zvssm.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ filter_values not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp8i_zvssm.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8i_zvssm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8i_zvssm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8i_zvssm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: filter_values\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp8i_zvssm.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8i_zvssm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8i_zvssm.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8i_zvssm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: filter_values\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp8i_zvssm.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8i_zvssm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8i_zvssm.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8i_zvssm.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    local_filter(values, isinteger)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphfumid8w.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ local_filter not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmphfumid8w.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphfumid8w.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphfumid8w.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphfumid8w.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: local_filter\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmphfumid8w.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphfumid8w.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphfumid8w.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphfumid8w.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: local_filter\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmphfumid8w.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphfumid8w.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphfumid8w.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphfumid8w.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x)==Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    to_return = Int64[]\n    for item in values\n        if isa(item, Int64)\n\
    \            push!(to_return, item)\n        end\n    end\n    return to_return\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # NOTE: AnyArray{Int64} doesn't work\n    filter(x -> isa(x, Int64), values)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers_in_vector = []\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(integers_in_vector, value)\n        end\n    end\n\
    \    return integers_in_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\n \nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyf660l3.jl:11\nin expression\
    \ starting at /tmp/tmpqyf660l3.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for i in values\n        if typeof(i) == Int64\n  \
    \          push!(integers, i)\n        end\n    end\n    return integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter_data = filter(x -> typeof(x) == Int64, values)\n    return  filter_data\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x,Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  int_filter = Integer[]\n  for i in values\n    if isa(i, Integer)\n    \
    \  push!(int_filter, i)\n    end\n  end\n  return int_filter\nend\nfilter_integers(['a',\
    \ 3.14, 5])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_list = []\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(filtered_list, value)\n        end\n    end\n    return filtered_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filtInt = filter(iseven, values)\n    filtValues = Vector{Int64}()\n\
    \    for i in filtInt\n        push!(filtValues, i)\n    end\n    return filtValues\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp05wsmcd9.jl:23\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching iseven(::Dict{Any, Any})\n  Closest candidates are:\n   \
    \ iseven(!Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:831\n\
    \    iseven(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \    iseven(!Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:346\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(iseven), a::Vector{Any})\n  \
    \   @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n    \
    \ @ Main /tmp/tmp05wsmcd9.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp05wsmcd9.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp05wsmcd9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp05wsmcd9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching iseven(::String)\n  Closest candidates are:\n    iseven(!Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:831\n    iseven(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n    iseven(!Matched::BigInt)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(iseven), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp05wsmcd9.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp05wsmcd9.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp05wsmcd9.jl:21\nTest"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05wsmcd9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ v for v in values if typeof(v) == Int64 ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> typeof(x) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = Vector{Int64}()\n    for value in values\n        if\
    \ isa(value, Int64)\n            push!(filtered_values, value)\n        end\n\
    \    end\n    return filtered_values\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for v in values\n        if isa(v, Int64)\n      \
    \      push!(ints, v)\n        end\n    end\n    return ints\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\n```\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmw58ivko.jl:10\nin expression starting at\
    \ /tmp/tmpmw58ivko.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_values = Vector{Int64}()\n    for value in values\n        if isa(value,\
    \ Int64)\n            push!(int_values, value)\n        end\n    end\n    return\
    \ int_values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    out = Vector{Int64}()\n    for x in values\n        if typeof(x) == Int64\n\
    \            push!(out, x)\n        end\n    end\n    return out\nend\nfilter_integers(['a',\
    \ 3.14, 5])\nfilter_integers([1, 2, 3, 'abc', {}, []])\n \n \n@doc \"\"\"\n  \
    \  Create a dictionary with given key-value pairs\n    >>> dict(a=5, b=6)\n  \
    \  Dict{String,Int64} with 2 entries:\n        \"b\" => 6\n        \"a\" => 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4qy6i1t9.jl:17\nin expression\
    \ starting at /tmp/tmp4qy6i1t9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [value for value in values if typeof(value) == Int64]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers_vector = filter(x -> typeof(x) == Int64, values)\n    return\
    \ integers_vector\nend\n \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_list = []\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(filtered_list,value)\n        end\n    end\n    return filtered_list\n\
    end\n@test filter_integers(['a', 3.14, 5]) == [5]\n@test filter_integers([1, 2,\
    \ 3, 'abc', {}, []]) == [1, 2, 3]\n \n\"\"\" find given integer in given list\
    \ of any python values\n    >>> find_integer([1, 2, 3, 'abc', {}, []])\n    1\n\
    \    >>> find_integer(['a', 3.14, 5])\n    5\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpv2pwzlwf.jl:16\nin expression starting at /tmp/tmpv2pwzlwf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = []\n    for i in values\n        if typeof(i) == Int64\n         \
    \   push!(v, i)\n        end\n    end\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = []\n    for i in values\n        if typeof(i) == Int64\n  \
    \          push!(integers, i)\n        end\n    end\n    return integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0\n        return []\n    elseif typeof(values[1])\
    \ == Int64\n        return [values[1]] .+ filter_integers(values[2:end])\n   \
    \ else\n        return filter_integers(values[2:end])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnraoo28o.jl:22\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: Int64[] == [4, 9]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnraoo28o.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnraoo28o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpnraoo28o.jl:23\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: Int64[] == [3, 3, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnraoo28o.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnraoo28o.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnraoo28o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger, values)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl8avlms0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpl8avlms0.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl8avlms0.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl8avlms0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpl8avlms0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/rational.jl:265\n    ...\n \
    \ Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base\
    \ ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpl8avlms0.jl:8\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl8avlms0.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8avlms0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(v -> typeof(v) == Int64, values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [i for i in values if typeof(i) == Int64]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # NOTE: we can also use `Vector{<:Integer}` to define any \n    # integer\
    \ type but for our case `Int64` will do\n    filtered = []\n    for v in values\n\
    \        if isa(v, Int64)\n            append!(filtered, v)\n        end\n   \
    \ end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = Int64[]\n    for value in values\n        if typeof(value) == Int64\n\
    \            push!(v, value)\n        end\n    end\n    return v\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ret = []\n    for v in values\n        if isa(v, Int64)\n            append!(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_values = []\n    for val in values\n        if typeof(val) == Int64\n\
    \            push!(int_values, val)\n        end\n    end\n    return int_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    my_integers = filter(values) do x\n        typeof(x) == Int64\n    end\n\
    \    return my_integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # create a vector of filtered integers\n    filtered = Vector{Int64}()\n\
    \    # iterate over all values\n    for v in values\n        # check if the type\
    \ of each value is integer\n        if typeof(v) == Int64\n            # if so,\
    \ append it to the list of filtered integers\n            push!(filtered, v)\n\
    \        end\n    end\n    # return the vector of filtered integers\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = []\n    for value in values\n        if typeof(value) == Int64\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [i for i in values if typeof(i)==Int64]\nend\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpht9kxi6w.jl:10\nin expression\
    \ starting at /tmp/tmpht9kxi6w.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [ i for i in values if typeof(i) == Int64 ]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    out = []\n    for val\
    \ in values\n        if isa(val, Int64)\n            push!(out, val)\n       \
    \ end\n    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # fill in here\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0easbn43.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0easbn43.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0easbn43.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0easbn43.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0easbn43.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0easbn43.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0easbn43.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints_list = Vector{Int64}()\n    for x in values\n        if isa(x, Int64)\n\
    \            push!(ints_list, x)\n        end\n    end\n    return ints_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for i in values\n        if typeof(i) == Int64\n\
    \            push!(integers, i)\n        end\n    end\n    return integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(integers, value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for value in values\n        if isa(value, Int64)\n\
    \            push!(ints, value)\n        end\n    end\n    return ints\nend\n\
    \ \n \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if typeof(x) == Int64]\nend\nfilter_integers([1,\
    \ 2, 3, 'abc', {}, []])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfus7o7zt.jl:10\nin expression\
    \ starting at /tmp/tmpfus7o7zt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}()\n    for v in values\n        if isa(v, Int64)\n\
    \            push!(integers, v)\n        end\n    end\n    return integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return [x for x in values if isa(x, Int64)]\nend\n# Run doctests with:\n\
    # julia -e 'using Pkg; Pkg.add(\"Documenter\"); include(\"docstrings.jl\")'\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # make a new vector using filter function\n    ints = filter(x -> typeof(x)\
    \ == Int64, values) \n    # convert from Vector{Any} to Vector{Int64}\n    return\
    \ convert(Vector{Int64}, ints) \nend\n \n    \"\"\" Filter given list of any python\
    \ values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a']\n\
    \    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpeedh2ves.jl:14\nin expression starting at /tmp/tmpeedh2ves.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter( x -> isa(x,Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values) do value\n        isa(value, Int64)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return [value for value in values if isa(value, Int64)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = filter(x -> typeof(x) == Int64, values)\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # Your code is here\n    int_list = []\n    for i in values\n        if\
    \ typeof(i) == Int64\n            push!(int_list, i)\n        end\n    end\n \
    \   return int_list\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers_values = []\n    for i in 1:length(values)\n        if typeof(values[i])\
    \ == Int64\n            push!(integers_values, values[i])\n        end\n    end\n\
    \    return integers_values\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    res = Int64[]\n    for i in values\n        if typeof(i) == Int64\n  \
    \          push!(res, i)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # your code here\n    # values.filter(x-> isa(x,Int64))\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpea2fc8m3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpea2fc8m3.jl:1\n\
    in expression starting at /tmp/tmpea2fc8m3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # TODO: implement the function that only returns integers\n    # return\
    \ integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2ae4iv6n.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp2ae4iv6n.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ae4iv6n.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ae4iv6n.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2ae4iv6n.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp2ae4iv6n.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ae4iv6n.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter given list of any python values only for integers\n    >>>\
    \ filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
